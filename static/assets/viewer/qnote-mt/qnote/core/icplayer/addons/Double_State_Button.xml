<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Double_State_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Text" nameLabel="Double_State_Button_property_text" type="string"/>
		<property name="Image" nameLabel="Double_State_Button_property_image" type="image"/>
		<property name="imageAlternativeText" nameLabel="Double_State_Button_property_image_alternative_text" type="string"/>
		<property isDefault="true" name="onSelected" nameLabel="Double_State_Button_property_on_selected" type="event"/>
		<property isLocalized="true" name="Text selected" nameLabel="Double_State_Button_property_text_selected" type="string"/>
		<property name="Image selected" nameLabel="Double_State_Button_property_image_selected" type="image"/>
		<property name="imageSelectedAlternativeText" nameLabel="Double_State_Button_property_image_selected_alternative_text" type="string"/>
		<property name="onDeselected" nameLabel="Double_State_Button_property_on_deselected" type="event"/>
		<property name="isSelected" nameLabel="Double_State_Button_property_is_selected" type="boolean"/>
		<property name="Disable" nameLabel="Double_State_Button_property_disable" type="boolean"/>
		<property name="Do not block in check mode" nameLabel="Double_State_Button_property_do_not_block_in_check_mode" type="boolean"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Double_state_button_property_lang_attribute" type="string"/>
		<property displayName="Render SVG as HTML" name="renderSVGAsHTML" nameLabel="Double_state_button_render_SVG_as_HTML" type="boolean"/>
		<property displayName="Speech texts" name="speechTexts" nameLabel="Double_state_button_speech_texts" type="staticlist">
			<property name="selectButton" nameLabel="Double_state_button_speech_text_select" type="staticrow">
				<property name="selectButton" nameLabel="Double_state_button_speech_text_select" type="string"/>
			</property>
			<property name="deselectButton" nameLabel="Double_state_button_speech_text_deselect" type="staticrow">
				<property name="deselectButton" nameLabel="Double_state_button_speech_text_deselect" type="string"/>
			</property>
			<property name="speechTextDisabled" nameLabel="Double_state_button_speech_text_disabled" type="staticrow">
				<property name="speechTextDisabled" nameLabel="Double_state_button_speech_text_disabled" type="boolean"/>
			</property>
		</property>
	</model>
<css>.doublestate-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.doublestate-button-element,&#13;
.doublestate-button-element-mouse-hover,&#13;
.doublestate-button-element-mouse-click,&#13;
.doublestate-button-element-selected,&#13;
.doublestate-button-element-selected-mouse-hover,&#13;
.doublestate-button-element-selected-mouse-click {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: url('resources/dsb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.doublestate-button-text,&#13;
.doublestate-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="doublestate-button-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="doublestate-button-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonDouble_State_Button_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var isMouseDown = false;&#13;
    var isTouchDown = false;&#13;
    var isMouseBlocked = false;&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.lastEvent = null;&#13;
    presenter.speechTexts = {};&#13;
&#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "doublestate-button-element",&#13;
        MOUSE_HOVER : "doublestate-button-element-mouse-hover",&#13;
        MOUSE_CLICK : "doublestate-button-element-mouse-click",&#13;
        SELECTED : "doublestate-button-element-selected",&#13;
        SELECTED_MOUSE_HOVER : "doublestate-button-element-selected-mouse-hover",&#13;
        SELECTED_MOUSE_CLICK : "doublestate-button-element-selected-mouse-click"&#13;
    };&#13;
&#13;
    var DEFAULT_TTS_PHRASES = {&#13;
        SELECT_BUTTON: "selected",&#13;
        DESELECT_BUTTON: "deselected"&#13;
    };&#13;
&#13;
    const ERROR_MESSAGES = {&#13;
        INVALID_FILE: 'Invalid SVG file',&#13;
    };&#13;
&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.MOUSE_HOVER + " " + CSS_CLASSES.MOUSE_CLICK + " " +&#13;
            CSS_CLASSES.SELECTED + " " + CSS_CLASSES.SELECTED_MOUSE_HOVER + " " + CSS_CLASSES.SELECTED_MOUSE_CLICK;&#13;
    }&#13;
&#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TEXT: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        var upgradedModel = presenter.upgradeDisable(model);&#13;
        upgradedModel = presenter.addImageAlternativeText(upgradedModel);&#13;
        upgradedModel = presenter.addLangTag(upgradedModel);&#13;
        upgradedModel = presenter.addTTS(upgradedModel);&#13;
        upgradedModel = presenter.addRenderSVGAsHTML(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeDisable = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Disable"]) {&#13;
            upgradedModel["Disable"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addImageAlternativeText = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model["imageAlternativeText"])&#13;
            upgradedModel["imageAlternativeText"] = "";&#13;
&#13;
        if (!model["imageSelectedAlternativeText"])&#13;
            upgradedModel["imageSelectedAlternativeText"] = "";&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addLangTag = function AddonTable_addLangTag(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['langAttribute']) {&#13;
            upgradedModel['langAttribute'] =  '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addTTS = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {&#13;
                selectButton: {selectButton: DEFAULT_TTS_PHRASES.SELECT_BUTTON},&#13;
                deselectButton: {deselectButton: DEFAULT_TTS_PHRASES.DESELECT_BUTTON},&#13;
                speechTextDisabled: {speechTextDisabled: "False"}&#13;
            };&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addRenderSVGAsHTML = function (model) {&#13;
        const upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!model.hasOwnProperty('renderSVGAsHTML')) {&#13;
            upgradedModel['renderSVGAsHTML'] = 'False';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.executeUserEventCode = function (eventCode) {&#13;
        playerController.getCommands().executeEventCode(eventCode);&#13;
    };&#13;
&#13;
    presenter.clickHandler = function(event) {&#13;
        if (event !== undefined) {&#13;
            event.stopPropagation();&#13;
        }&#13;
&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; !presenter.configuration.enableCheckMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var eventCode;&#13;
&#13;
        if(!presenter.configuration.isDisabled) {&#13;
            presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
            eventCode = presenter.isSelected() ? presenter.configuration.selected.event : presenter.configuration.deselected.event;&#13;
            presenter.executeUserEventCode(eventCode);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
            presenter.sendEventData();&#13;
        }&#13;
    };&#13;
&#13;
    function handleTouchActions() {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        if( presenter.configuration.isQnoteCustomDSB &amp;&amp; presenter.configuration.isImageChoice ){&#13;
            element = presenter.$view.find('div[class*=doublestate-button-element-nonecss]:first');&#13;
        }&#13;
&#13;
        element.on('touchstart', touchStartEventHandler);&#13;
        element.on('touchend', touchEndEventHandler);&#13;
    }&#13;
&#13;
    function touchStartEventHandler(e) {&#13;
        isMouseBlocked = true;&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
        presenter.lastEvent = e;&#13;
        isTouchDown = true;&#13;
    }&#13;
&#13;
    function touchEndEventHandler(e) {&#13;
        e.preventDefault();&#13;
        if (isTouchDown) {&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                presenter.clickHandler(e);&#13;
            }&#13;
            isTouchDown = false;&#13;
        }&#13;
    }&#13;
&#13;
    function handleMouseActions() {&#13;
        const $element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        if( presenter.configuration.isQnoteCustomDSB &amp;&amp; presenter.configuration.isImageChoice ){&#13;
            element = presenter.$view.find('div[class*=doublestate-button-element-nonecss]:first');&#13;
        }&#13;
        $element.on('mousedown', (e) =&gt; mouseDownEventHandler(e));&#13;
        $element.on('click', (e) =&gt; clickEventHandler(e));&#13;
        $element.on('mouseup', (e) =&gt; mouseUpEventHandler(e));&#13;
&#13;
        $element.hover(&#13;
            function() {&#13;
                $(this).removeClass(CSS_CLASSESToString());&#13;
                $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED_MOUSE_HOVER : CSS_CLASSES.MOUSE_HOVER);&#13;
            },&#13;
            function() {&#13;
                $(this).removeClass(CSS_CLASSESToString());&#13;
                $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
            }&#13;
        );&#13;
    }&#13;
&#13;
    function mouseDownEventHandler(e) {&#13;
        if (!isMouseBlocked) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            presenter.lastEvent = e;&#13;
            isMouseDown = true;&#13;
        }&#13;
    }&#13;
&#13;
    function clickEventHandler(e){&#13;
        e.stopPropagation();&#13;
    }&#13;
&#13;
    function mouseUpEventHandler(e) {&#13;
        if (!isMouseBlocked) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            if (isMouseDown) {&#13;
                if (presenter.lastEvent.type != e.type) {&#13;
                    presenter.clickHandler(e);&#13;
                }&#13;
                isMouseDown = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function setElementsDimensions(model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    }&#13;
&#13;
    function createImageElement(element, shouldDisplayImage = true) {&#13;
        var imageElement = document.createElement('img');&#13;
        $(imageElement).addClass('doublestate-button-image');&#13;
        $(imageElement).attr('src', presenter.isSelected() ? presenter.configuration.selected.image : presenter.configuration.deselected.image);&#13;
&#13;
        if(  presenter.configuration.isQnoteCustomDSB ){&#13;
            try{&#13;
                var geo = presenter.configuration.imageGeometry.value;&#13;
//                 console.log("geo", geo);&#13;
                var arrGeo = geo.split(",");&#13;
//                console.log("arrGeo", arrGeo);&#13;
                if( arrGeo.length &gt; 3){&#13;
                    var strGeo = "left: " + arrGeo[0] + "px; top: " + arrGeo[1] +  "px; width: " + arrGeo[2] +  "px; height: " + arrGeo[3] + "px;";&#13;
//                    console.log("strGeo", strGeo);&#13;
                    $(imageElement).attr('style', strGeo);&#13;
                }&#13;
&#13;
            }catch(e){&#13;
                console.log("createImageElemente e", e);&#13;
            };&#13;
        }&#13;
&#13;
&#13;
        if(!shouldDisplayImage) {&#13;
            hideImageElement(element);&#13;
        }&#13;
&#13;
        $(element).append(imageElement);&#13;
    }&#13;
&#13;
    function createSVGElement(element) {&#13;
        const url = presenter.isSelected() ? presenter.configuration.selected.image : presenter.configuration.deselected.image;&#13;
        const sanitizeUrl = window.xssUtils.sanitize(url);&#13;
&#13;
        $.ajax({&#13;
            url: sanitizeUrl,&#13;
            success: function (data) {&#13;
                onLoadCompleted(data, element);&#13;
            },&#13;
            error: function () {&#13;
                presenter.showErrorMessage();&#13;
            },&#13;
            dataType: 'xml'&#13;
        });&#13;
    }&#13;
&#13;
    function createSVGElementFromCSSUrl(element) {&#13;
        setTimeout(() =&gt; {&#13;
            const _el = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
            if (!_el) { return; }&#13;
&#13;
            const url = _el.css('background-image');&#13;
            const sanitizeUrl = getURLFromAbsolutePath(url);&#13;
&#13;
            $.ajax({&#13;
                url: sanitizeUrl,&#13;
                success: function (data) {&#13;
                    removeImageElement(element);&#13;
                    onLoadCompleted(data, element);&#13;
                },&#13;
                error: function (err) {&#13;
                    presenter.showErrorMessage(err);&#13;
                }&#13;
            });&#13;
        }, 200);&#13;
    }&#13;
&#13;
    function getURLFromAbsolutePath(absolutePath) {&#13;
        const regExp = new RegExp(".*\\.com(\\/)file");&#13;
        const urlMatch = absolutePath.match(regExp);&#13;
        const startURLIndex = urlMatch[0].lastIndexOf('/');&#13;
        const endURLIndex = absolutePath.lastIndexOf('"');&#13;
&#13;
        return absolutePath.slice(startURLIndex, endURLIndex);&#13;
    }&#13;
&#13;
    function removeImageElement(element) {&#13;
        const imageElement = $(element).find('doublestate-button-element');&#13;
        const $imageElement = $(imageElement.context);&#13;
        $imageElement.attr('style', 'background-image: none !important');&#13;
    }&#13;
&#13;
    function hideImageElement(element) {&#13;
        const imageElement = $(element).find('doublestate-button-element');&#13;
        const $imageElement = $(imageElement.context);&#13;
        $imageElement.attr('style', 'visibility: hidden !important');&#13;
    }&#13;
&#13;
    function onLoadCompleted(data, element) {&#13;
        const svgElement = $(data).find('svg');&#13;
        if (svgElement.length === 0) {&#13;
            presenter.showErrorMessage();&#13;
            return;&#13;
        }&#13;
&#13;
        const svgWidth = getElementWidth(svgElement);&#13;
        const svgHeight = getElementHeight(svgElement);&#13;
&#13;
        svgElement.attr('viewBox', '0 0 ' + svgWidth + ' ' + svgHeight);&#13;
        svgElement.attr('width', '100%');&#13;
        svgElement.attr('height', '100%');&#13;
&#13;
        const svgData = data.childNodes;&#13;
        $(element).html(svgData);&#13;
        createTextElement(element);&#13;
    }&#13;
&#13;
    function getElementWidth(HTMLElement) {&#13;
        const width = HTMLElement.attr('width');&#13;
        const widthFromRectTag = HTMLElement.find('rect').attr('width');&#13;
&#13;
        if (width) {&#13;
            return width.replace('px', '');&#13;
        } else if (widthFromRectTag) {&#13;
            return widthFromRectTag.replace('px', '');&#13;
        } else {&#13;
            return presenter.configuration.width;&#13;
        }&#13;
    }&#13;
&#13;
    function getElementHeight(HTMLElement) {&#13;
        const height = HTMLElement.attr('width');&#13;
        const heightFromRectTag = HTMLElement.find('rect').attr('width');&#13;
&#13;
        if (height) {&#13;
            return height.replace('px', '');&#13;
        } else if (heightFromRectTag) {&#13;
            return heightFromRectTag.replace('px', '');&#13;
        } else {&#13;
            return presenter.configuration.height;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showErrorMessage = function() {&#13;
        const errorContainer = '&lt;p&gt;' + ERROR_MESSAGES.INVALID_FILE + '&lt;/p&gt;';&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    function createTextElement(element) {&#13;
        var textElement = document.createElement('span');&#13;
        $(textElement).addClass('doublestate-button-text');&#13;
        const buttonText = presenter.getSanitizedButtonTextValue();&#13;
        $(textElement).html(buttonText);&#13;
        $(element).append(textElement);&#13;
    }&#13;
&#13;
    function createElements(wrapper) {&#13;
&#13;
&#13;
//         console.log("QNOTE DSB", presenter.configuration.isQnoteCustomDSB);&#13;
        //Qnote에서 커스텀한  DSB  인 경우&#13;
        if( presenter.configuration.isQnoteCustomDSB ){&#13;
            var element = document.createElement('div');&#13;
            var orgCSS_SELECTED = CSS_CLASSES.SELECTED;&#13;
            var orgCSS_ELEMENT = CSS_CLASSES.ELEMENT;&#13;
&#13;
            $(element).addClass(presenter.isSelected() ? orgCSS_SELECTED : orgCSS_ELEMENT);&#13;
&#13;
            wrapper.append(element);&#13;
&#13;
            var element2 = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
            var isCenter = isTextAlignCenter(element2);&#13;
&#13;
            //이석웅 추가, 이미지 초이스형 CSS 적용, 이미지가 아니고 text인데 center 정렬인 경우&#13;
            var strNum = (presenter.configuration.number.value == "0" || presenter.configuration.number.value == "") ? "" :"_" + presenter.configuration.number.value;&#13;
            if( !presenter.configuration.isImageChoice &amp;&amp; isCenter ){&#13;
                CSS_CLASSES = {&#13;
                    ELEMENT : "doublestate-button-element-center" + strNum,&#13;
                    MOUSE_HOVER : "doublestate-button-element-mouse-hover-center" + strNum,&#13;
                    MOUSE_CLICK : "doublestate-button-element-mouse-click",&#13;
                    SELECTED : "doublestate-button-element-selected-center" + strNum,&#13;
                    SELECTED_MOUSE_HOVER : "doublestate-button-element-selected-mouse-hover-center" + strNum,&#13;
                    SELECTED_MOUSE_CLICK : "doublestate-button-element-selected-mouse-click-center"&#13;
                };&#13;
            }&#13;
&#13;
&#13;
            createImageElement(element);&#13;
            createTextElement(element);&#13;
&#13;
            $(element).removeClass(presenter.isSelected() ? orgCSS_SELECTED : orgCSS_ELEMENT);&#13;
            $(element).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
            return element;&#13;
            //wrapper.append(element);&#13;
        }else{&#13;
//            console.log("Original DSB");&#13;
            const element = document.createElement('div');&#13;
            const atLeastOneImgIsAvailable = presenter.configuration.selected.image || presenter.configuration.deselected.image;&#13;
            $(element).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
            if (!atLeastOneImgIsAvailable &amp;&amp; presenter.configuration.renderSVGAsHTML) {&#13;
                createImageElement(element, false);&#13;
                createSVGElementFromCSSUrl(element);&#13;
            } else if (atLeastOneImgIsAvailable &amp;&amp; presenter.configuration.renderSVGAsHTML) {&#13;
                createSVGElement(element);&#13;
            } else {&#13;
                createImageElement(element);&#13;
                createTextElement(element);&#13;
            }&#13;
&#13;
            wrapper.append(element);&#13;
            return element;&#13;
        }&#13;
&#13;
&#13;
&#13;
    }&#13;
    // function createElements(wrapper) {&#13;
    //     const element = document.createElement('div');&#13;
    //     const atLeastOneImgIsAvailable = presenter.configuration.selected.image || presenter.configuration.deselected.image;&#13;
    //     $(element).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
    //     if (!atLeastOneImgIsAvailable &amp;&amp; presenter.configuration.renderSVGAsHTML) {&#13;
    //         createImageElement(element, false);&#13;
    //         createSVGElementFromCSSUrl(element);&#13;
    //     } else if (atLeastOneImgIsAvailable &amp;&amp; presenter.configuration.renderSVGAsHTML) {&#13;
    //         createSVGElement(element);&#13;
    //     } else {&#13;
    //         createImageElement(element);&#13;
    //         createTextElement(element);&#13;
    //     }&#13;
&#13;
    //     wrapper.append(element);&#13;
&#13;
    //     return element;&#13;
    // }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
        presenter.wrapper = presenter.$view.find('.doublestate-button-wrapper:first')[0];&#13;
        presenter.$wrapper = $(presenter.wrapper);&#13;
&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        var element = createElements(presenter.$wrapper);&#13;
&#13;
        setElementsDimensions(model, presenter.$wrapper, element);&#13;
        presenter.setElementSelection();&#13;
        presenter.toggleDisable(presenter.configuration.isDisabled);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.setTabindex(presenter.$wrapper, presenter.configuration.isTabindexEnabled);&#13;
&#13;
        if (!preview) {&#13;
            handleTouchActions();&#13;
            handleMouseActions();&#13;
            presenter.addKeyboardListeners();&#13;
            presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.addKeyboardListeners = function () {&#13;
        presenter.wrapper.addEventListener("keydown", presenter.handleKeyboardEvents);&#13;
    };&#13;
&#13;
    presenter.handleKeyboardEvents = function AddonDouble_State_Button_handleKeyboardEvents(event) {&#13;
        if (window.KeyboardControllerKeys.ENTER === event.keyCode ||&#13;
            window.KeyboardControllerKeys.SPACE === event.keyCode&#13;
        )   {&#13;
            event.preventDefault();&#13;
            presenter.clickHandler();&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    function applySelectionStyle(className) {&#13;
&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        //&#13;
        if( presenter.configuration.isQnoteCustomDSB &amp;&amp; presenter.configuration.isImageChoice ){&#13;
       		element = presenter.$view.find('div[class*=doublestate-button-element-nonecss]:first');&#13;
        }&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(className);&#13;
    }&#13;
&#13;
   	function isTextAlignCenter(element){&#13;
   		var isCenter = true;&#13;
&#13;
   		try{&#13;
&#13;
//   			console.log("element text-align", element.css('text-align'));&#13;
//   			console.log("element", element);&#13;
   			isCenter = (element.css('text-align').indexOf("center") &gt; -1);&#13;
   		}catch(e){&#13;
//   			console.log("isTextAlignCenter e", element);&#13;
   		}&#13;
&#13;
   		return isCenter;&#13;
    }&#13;
&#13;
&#13;
&#13;
&#13;
    presenter.setElementSelection = function() {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
        if( presenter.configuration.isQnoteCustomDSB &amp;&amp; presenter.configuration.isImageChoice ){&#13;
       		element = presenter.$view.find('div[class*=doublestate-button-element-nonecss]:first');&#13;
        }&#13;
&#13;
        var displayContent = presenter.isSelected() ? presenter.configuration.selected.displayContent : presenter.configuration.deselected.displayContent;&#13;
&#13;
        var textElement = $(element).find('.doublestate-button-text');&#13;
        const buttonText = presenter.getSanitizedButtonTextValue();&#13;
        textElement.html(buttonText);&#13;
&#13;
        var imageElement = $(element).find('.doublestate-button-image');&#13;
        imageElement.attr('src', presenter.isSelected() ? presenter.configuration.selected.image : presenter.configuration.deselected.image);&#13;
&#13;
        switch (displayContent) {&#13;
            case presenter.DISPLAY_CONTENT_TYPE.NONE:&#13;
                $(textElement).hide();&#13;
                $(imageElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.TEXT:&#13;
                $(textElement).show();&#13;
                $(imageElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
                $(imageElement).show();&#13;
                $(textElement).hide();&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
                $(imageElement).show();&#13;
                $(textElement).show();&#13;
                break;&#13;
        }&#13;
&#13;
        applySelectionStyle(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
    };&#13;
&#13;
    presenter.getSanitizedButtonTextValue = function () {&#13;
        const text = presenter.isSelected() ? presenter.configuration.selected.text : presenter.configuration.deselected.text&#13;
        return window.xssUtils.sanitize(text);&#13;
    }&#13;
&#13;
    presenter.updateLaTeX = function () {&#13;
        var textElement = presenter.$view.find('.doublestate-button-text')[0];&#13;
        presenter.mathJaxProcessEnded.then(function () {&#13;
                MathJax.CallBack.Queue().Push(function () {MathJax.Hub.Typeset(textElement)});&#13;
        });&#13;
    };&#13;
&#13;
    presenter.select = function () {&#13;
        if(!presenter.configuration.isSelected){&#13;
            presenter.configuration.isSelected = true;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.deselect = function () {&#13;
        if(presenter.configuration.isSelected){&#13;
            presenter.configuration.isSelected = false;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable,&#13;
            'isSelected': presenter.isSelected&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.isIE9 = function (userAgent) {&#13;
        userAgent = userAgent.toLowerCase();&#13;
&#13;
        if (userAgent.indexOf('msie') != -1) {&#13;
            return parseInt(userAgent.split('msie')[1], 10) == 9;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        if(presenter.isIE9(navigator.userAgent)) {&#13;
            presenter.$view.css('display', isVisible ? 'block' : "none");&#13;
        }&#13;
&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        var eventBus = playerController.getEventBus();&#13;
&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                if(presenter.mathJaxProcessEndedDeferred.state() != 'resolved'){&#13;
                    presenter.mathJaxProcessEndedDeferred.resolve();&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isEnabledInGSAMode = function () {&#13;
        return presenter.configuration.enableCheckMode;&#13;
    }&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.toggleDisable(false);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            presenter.toggleDisable(true);&#13;
            presenter.setElementSelection();&#13;
            presenter.updateLaTeX();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toggleDisable = function(disable) {&#13;
        var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
&#13;
        if( presenter.configuration.isQnoteCustomDSB &amp;&amp; presenter.configuration.isImageChoice ){&#13;
       		element = presenter.$view.find('div[class*=doublestate-button-element-nonecss]:first');&#13;
        }&#13;
&#13;
        if(disable) {&#13;
            element.addClass("disable");&#13;
        } else {&#13;
            element.removeClass("disable");&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled = disable;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = presenter.configuration.isSelectedByDefault;&#13;
        presenter.configuration.isErrorMode = false;&#13;
&#13;
        presenter.setElementSelection();&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(presenter.configuration.isDisabledByDefault);&#13;
        presenter.updateLaTeX();&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isSelected: presenter.configuration.isSelected,&#13;
            isDisabled: presenter.configuration.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(parsedState.isDisabled);&#13;
&#13;
        presenter.configuration.isSelected = parsedState.isSelected;&#13;
        presenter.setElementSelection();&#13;
    };&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(text, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
        if (!text.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TEXT;&#13;
        } else if (text.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!text.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var text = presenter.validateString(model.Text);&#13;
        var image = presenter.validateString(model.Image);&#13;
        var selectedText = presenter.validateString(model["Text selected"]);&#13;
        var selectedImage = presenter.validateString(model["Image selected"]);&#13;
        var imageGeometry = presenter.validateString(model["Image Geometry"]);&#13;
        var imageAlternativeText = presenter.validateString(model["imageAlternativeText"]);&#13;
        var imageSelectedAlternativeText = presenter.validateString(model["imageSelectedAlternativeText"]);&#13;
        var langTag = presenter.validateString(model["langAttribute"]);&#13;
        var number = presenter.validateString(model["Number"]);&#13;
&#13;
//		console.log("langTag", langTag);&#13;
//		console.log("imageAlternativeText", imageAlternativeText);&#13;
//		console.log("imageSelectedAlternativeText", imageSelectedAlternativeText);&#13;
&#13;
        var isQnoteCustomDSB = (model.ImageChoice != null);&#13;
		var isImageChoice = ModelValidationUtils.validateBoolean(model.ImageChoice);&#13;
		var isOrgDSB = ModelValidationUtils.validateBoolean(model.isOrgDSB);&#13;
        var isDisabled = ModelValidationUtils.validateBoolean(model.Disable);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var isSelected = ModelValidationUtils.validateBoolean(model.isSelected);&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]);&#13;
        var enableCheckMode = ModelValidationUtils.validateBoolean(model["Do not block in check mode"]);&#13;
        var renderSVGAsHTML = ModelValidationUtils.validateBoolean(model.renderSVGAsHTML);&#13;
        var width = +model.Width;&#13;
        var height = +model.Height;&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
//		console.log("isImageChoice2", isImageChoice, model.ImageChoice, model["Is Visible"], isOrgDSB);&#13;
		//이석웅 추가, 이미지 초이스형 CSS 적용&#13;
		if(  isQnoteCustomDSB &amp;&amp; isImageChoice ){&#13;
			CSS_CLASSES = {&#13;
		        ELEMENT : "doublestate-button-element-nonecss",&#13;
		        MOUSE_HOVER : "doublestate-button-element-nonecss-mouse-hover",&#13;
		        MOUSE_CLICK : "doublestate-button-element-nonecss-mouse-click",&#13;
		        SELECTED : "doublestate-button-element-nonecss-selected",&#13;
		        SELECTED_MOUSE_HOVER : "doublestate-button-element-nonecss-selected-mouse-hover",&#13;
		        SELECTED_MOUSE_CLICK : "doublestate-button-element-nonecss-selected-mouse-click"&#13;
		    };&#13;
&#13;
		    if( !isOrgDSB  ){&#13;
				image.value = "";&#13;
				image.isEmpty = true;&#13;
			}&#13;
		}&#13;
&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            selected: {&#13;
                text: selectedText.value,&#13;
                image: selectedImage.value,&#13;
                imageAlternativeText: imageSelectedAlternativeText.value,&#13;
                event: model.onSelected,&#13;
                displayContent: presenter.determineDisplayContent(selectedText, selectedImage)&#13;
            },&#13;
            deselected: {&#13;
                text: text.value,&#13;
                image: image.value,&#13;
                imageAlternativeText: imageAlternativeText.value,&#13;
                event: model.onDeselected,&#13;
                displayContent: presenter.determineDisplayContent(text, image)&#13;
            },&#13;
            isSelected: isSelected,&#13;
            isSelectedByDefault: isSelected,&#13;
            isDisabled: isDisabled,&#13;
            isDisabledByDefault: isDisabled,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isErrorMode: false,&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            imageGeometry: imageGeometry,&#13;
            enableCheckMode: enableCheckMode,&#13;
            isImageChoice : isImageChoice,&#13;
            langTag: langTag,&#13;
            renderSVGAsHTML: renderSVGAsHTML,&#13;
            width: width,&#13;
            height: height,&#13;
            isOrgDSB: isOrgDSB,&#13;
            isQnoteCustomDSB: isQnoteCustomDSB,&#13;
            number: number&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function (speechTexts) {&#13;
        if (!speechTexts) {&#13;
            speechTexts = {&#13;
                selectButton: {selectButton: DEFAULT_TTS_PHRASES.SELECT_BUTTON},&#13;
                deselectButton: {deselectButton: DEFAULT_TTS_PHRASES.DESELECT_BUTTON},&#13;
                speechTextDisabled: {speechTextDisabled: "False"}&#13;
            };&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            selectButton: getSpeechTextProperty(speechTexts.selectButton.selectButton, DEFAULT_TTS_PHRASES.SELECT_BUTTON),&#13;
            deselectButton: getSpeechTextProperty(speechTexts.deselectButton.deselectButton, DEFAULT_TTS_PHRASES.DESELECT_BUTTON),&#13;
            speechTextDisabled: ModelValidationUtils.validateBoolean(speechTexts.speechTextDisabled.speechTextDisabled)&#13;
        };&#13;
    };&#13;
&#13;
    function getSpeechTextProperty(value, defaultValue) {&#13;
        if (value === undefined || value === null || value.trim() === '')&#13;
            return defaultValue;&#13;
        return value.trim();&#13;
    }&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : '',&#13;
            value : presenter.isSelected() ? '1' : '0',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEventData = function () {&#13;
        var eventData = presenter.createEventData();&#13;
        if (playerController !== null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.configuration.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.configuration.isErrorMode = true;&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.configuration.isErrorMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keyCode, isShift, event) {&#13;
        if (event) {&#13;
            event.stopPropagation();&#13;
&#13;
            if (keyCode === window.KeyboardControllerKeys.SPACE ||&#13;
                keyCode === window.KeyboardControllerKeys.ARROW_UP ||&#13;
                keyCode === window.KeyboardControllerKeys.ARROW_DOWN ||&#13;
                keyCode === window.KeyboardControllerKeys.ESCAPE&#13;
            ) {&#13;
                event.preventDefault();&#13;
            }&#13;
        }&#13;
&#13;
        if (keyCode === window.KeyboardControllerKeys.ENTER) {&#13;
            if (isWCAGOn)&#13;
                presenter.speakEnterAction();&#13;
        }&#13;
&#13;
        if (keyCode == window.KeyboardControllerKeys.SPACE) {&#13;
            presenter.clickHandler();&#13;
            if(presenter.canSpeakSpaceAction())&#13;
                presenter.speakSpaceAction();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.canSpeakSpaceAction = function() {&#13;
        return isWCAGOn &amp;&amp; !presenter.configuration.isErrorMode &amp;&amp; !presenter.configuration.enableCheckMode &amp;&amp; !presenter.speechTexts.speechTextDisabled;&#13;
    };&#13;
&#13;
    presenter.speakEnterAction = function() {&#13;
        var textVoices = [];&#13;
        var lang = presenter.configuration.langTag.value;&#13;
&#13;
        if (presenter.configuration.isSelected) {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.selected.text, lang));&#13;
&#13;
            var imageAlternativeText = presenter.configuration.selected.imageAlternativeText;&#13;
            if (imageAlternativeText)&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(imageAlternativeText));&#13;
&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selectButton));&#13;
        } else {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.deselected.text, lang));&#13;
&#13;
            var imageAlternativeText = presenter.configuration.deselected.imageAlternativeText;&#13;
            if (imageAlternativeText)&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(imageAlternativeText))&#13;
        }&#13;
&#13;
        speak(textVoices);&#13;
    };&#13;
&#13;
    presenter.speakSpaceAction = function() {&#13;
        var textVoices = [];&#13;
        if (presenter.configuration.isSelected) {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selectButton));&#13;
        } else {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.deselectButton));&#13;
        }&#13;
&#13;
        speak(textVoices);&#13;
    };&#13;
&#13;
    presenter.setTabindex = function (element, isTabindexEnabled) {&#13;
        var tabindexValue = isTabindexEnabled ? "0" : "-1";&#13;
        element.attr("tabindex", tabindexValue);&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.getTitlePostfix = function () {&#13;
        if(presenter.configuration.isSelected) {&#13;
            return presenter.speechTexts.selected;&#13;
        } else {&#13;
            return ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.destroy = function(event) {&#13;
        if (event.target === this) {&#13;
            presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
            presenter.wrapper.removeEventListener("keydown", presenter.handleKeyboardEvents);&#13;
&#13;
            var element = presenter.$view.find('div[class*=doublestate-button-element]:first');&#13;
            element.off("touchstart", touchStartEventHandler);&#13;
            element.off("touchend", touchEndEventHandler);&#13;
&#13;
            element.off("mousedown", mouseDownEventHandler);&#13;
            element.off("click", clickEventHandler);&#13;
            element.off("mouseup", mouseUpEventHandler);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>