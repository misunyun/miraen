<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Connector" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Tasks" nameLabel="Connector_property_tasks" type="list">
			<property name="Source" nameLabel="Connector_property_source" type="string"/>
			<property name="Item" nameLabel="Connector_property_item" type="string"/>
			<property name="Value" nameLabel="Connector_property_value" type="string"/>
			<property name="Score" nameLabel="Connector_property_score" type="string"/>
			<property name="Script" nameLabel="Connector_property_script" type="text"/>
		</property>
	</model>
<css/><view/><preview/><presenter>function AddonConnector_create () {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        VT_01: "Each task has to be assigned to source Addon!",&#13;
        VT_02: "Each task must have Script section filled!"&#13;
    };&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
    var tasks = [];&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        var scripts = presenter.findMatchingTasks(tasks, eventData);&#13;
&#13;
        for (var i = 0, length = scripts.length; i &lt; length; i += 1) {&#13;
            playerController.getCommands().executeEventCode(scripts[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    function presenterLogic (view, model, isPreview) {&#13;
        var validatedTasks = presenter.validateTasks(model.Tasks);&#13;
&#13;
        if (validatedTasks.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_MESSAGES, validatedTasks.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) return;&#13;
&#13;
        tasks = validatedTasks.tasks;&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('ValueChanged', presenter);&#13;
&#13;
        presenter.setVisibility(view, false);&#13;
    }&#13;
&#13;
    presenter.setVisibility = function (view, isVisible) {&#13;
        $(view).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.getTaskWithSource = function (tasks, source) {&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            if (tasks[i].source === source) return { index: i, tasks: tasks[i].tasks };&#13;
        }&#13;
&#13;
        return { index: -1 };&#13;
    };&#13;
&#13;
    presenter.addTask = function (tasks, task) {&#13;
        var index = presenter.getTaskWithSource(tasks, task.source).index;&#13;
&#13;
        if (index === -1) {&#13;
            tasks.push(task);&#13;
        } else {&#13;
            var existingTask = tasks[index];&#13;
&#13;
            for (var i = 0, length = task.tasks.length; i &lt; length; i += 1) {&#13;
                existingTask.tasks.push(task.tasks[i]);&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateTask = function (task) {&#13;
        var isEmpty = ModelValidationUtils.isArrayElementEmpty(task);&#13;
&#13;
        if (!isEmpty &amp;&amp; !task.Source) return { isError: true, errorCode: "VT_01" };&#13;
        if (!isEmpty &amp;&amp; !task.Script) return { isError: true, errorCode: "VT_02" };&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            isEmpty: isEmpty,&#13;
            task: {&#13;
                source: task.Source,&#13;
                tasks: [{&#13;
                    item: task.Item,&#13;
                    value: task.Value,&#13;
                    score: task.Score,&#13;
                    script: task.Script&#13;
                }]&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateTasks = function (tasks) {&#13;
        if (ModelValidationUtils.isArrayEmpty(tasks)) return { tasks: [], isError: false };&#13;
&#13;
        var tasksArray = [];&#13;
        var isError = false;&#13;
&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            var validatedTask = presenter.validateTask(tasks[i]);&#13;
&#13;
            if (validatedTask.isError) return { isError: true, errorCode: validatedTask.errorCode };&#13;
&#13;
            presenter.addTask(tasksArray, validatedTask.task);&#13;
        }&#13;
&#13;
        return { tasks: tasksArray, isError: isError };&#13;
    };&#13;
&#13;
    presenter.FILTER_FIELD = {&#13;
        ITEM: 0,&#13;
        VALUE: 1,&#13;
        SCORE: 2&#13;
    };&#13;
&#13;
    presenter.filterTasks = function (tasks, value, field) {&#13;
        var filteredTasks = [];&#13;
&#13;
        for (var i = 0, length = tasks.length; i &lt; length; i += 1) {&#13;
            var fieldValue = "";&#13;
            switch (field) {&#13;
                case presenter.FILTER_FIELD.ITEM:&#13;
                    fieldValue = tasks[i].item;&#13;
                    break;&#13;
                case presenter.FILTER_FIELD.VALUE:&#13;
                    fieldValue = tasks[i].value;&#13;
                    break;&#13;
                case presenter.FILTER_FIELD.SCORE:&#13;
                    fieldValue = tasks[i].score;&#13;
                    break;&#13;
            }&#13;
&#13;
            if (fieldValue !== '') {&#13;
                var isWildcardExpression = fieldValue.indexOf('*') !== -1;&#13;
                fieldValue = fieldValue.replace('*', '.*');&#13;
                var fieldRegExp = new RegExp(fieldValue);&#13;
&#13;
                if (value.match(fieldRegExp)) {&#13;
                    if (isWildcardExpression) {&#13;
                        filteredTasks.push(tasks[i]);&#13;
                    } else  if (fieldValue.length === value.length) {&#13;
                        filteredTasks.push(tasks[i]);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                if (value === fieldValue) {&#13;
                    filteredTasks.push(tasks[i]);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return filteredTasks;&#13;
    };&#13;
&#13;
    presenter.findMatchingTasks = function (tasks, eventData) {&#13;
        var matchingTasks = [];&#13;
        var i = 0, length = 0;&#13;
&#13;
&#13;
        var taskWithSource = presenter.getTaskWithSource(tasks, eventData.source);&#13;
        if (taskWithSource.index === -1) {&#13;
            return [];&#13;
        }&#13;
&#13;
        for (i = 0, length = taskWithSource.tasks.length; i &lt; length; i += 1) {&#13;
            matchingTasks.push(taskWithSource.tasks[i]);&#13;
        }&#13;
&#13;
        var tasksFilteredByItem = presenter.filterTasks(matchingTasks, eventData.item, presenter.FILTER_FIELD.ITEM);&#13;
        var tasksFilteredByValue = presenter.filterTasks(tasksFilteredByItem, eventData.value, presenter.FILTER_FIELD.VALUE);&#13;
        var tasksFilteredByScore = presenter.filterTasks(tasksFilteredByValue, eventData.score, presenter.FILTER_FIELD.SCORE);&#13;
&#13;
        var scriptArray = [];&#13;
        for (i = 0, length = tasksFilteredByScore.length; i &lt; length; i += 1) {&#13;
            scriptArray.push(tasksFilteredByScore[i].script);&#13;
        }&#13;
&#13;
        return scriptArray;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>