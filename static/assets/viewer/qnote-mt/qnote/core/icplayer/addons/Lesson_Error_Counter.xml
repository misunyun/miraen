<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Error_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
    </model>
<css>.addon_Lesson_Error_Counter {&#13;
    text-align: center;&#13;
    border-radius: 5px;&#13;
    border: 2px solid black;&#13;
    color: red;&#13;
}&#13;
</css><view/><preview>6&#13;
</preview><presenter>function AddonLesson_Error_Counter_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    presenter.playerController = null;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.scoreService = controller.getScore();&#13;
    };&#13;
&#13;
    presenter.countErrors = function () {&#13;
        var presentation = presenter.playerController.getPresentation(),&#13;
            errorCount = 0, pageScore;&#13;
&#13;
&#13;
        for(var i = 0; i &lt; presentation.getPageCount(); i++){&#13;
            var page = presentation.getPage(i);&#13;
&#13;
            if(page.isReportable() &amp;&amp; page.isVisited()){&#13;
                pageScore = presenter.scoreService.getPageScoreById(page.getId());&#13;
                errorCount += pageScore.errorCount;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.text(errorCount);&#13;
    };&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            isVisibleByDefault: isVisible,&#13;
            isVisible: isVisible&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault || isPreview);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.countErrors();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>