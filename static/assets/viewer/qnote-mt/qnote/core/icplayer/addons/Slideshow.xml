<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slideshow" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Audio" nameLabel="Slideshow_property_audio" type="list">
			<property name="MP3" nameLabel="Slideshow_property_mp3" type="audio"/>
			<property name="OGG" nameLabel="Slideshow_property_ogg" type="audio"/>
		</property>
		<property name="Slides" nameLabel="Slideshow_property_slides" type="list">
			<property name="Image" nameLabel="Slideshow_property_image" type="image"/>
			<property name="Start" nameLabel="Slideshow_property_start" type="string"/>
			<property name="Audiodescription" nameLabel="Slideshow_property_audiodescription" type="text"/>
		</property>
		<property name="Texts" nameLabel="Slideshow_property_texts" type="list">
			<property isLocalized="true" name="Text" nameLabel="Slideshow_property_text" type="string"/>
			<property name="Top" nameLabel="Slideshow_property_top" type="string"/>
			<property name="Left" nameLabel="Slideshow_property_left" type="string"/>
			<property name="Start" nameLabel="Slideshow_property_start" type="string"/>
			<property name="End" nameLabel="Slideshow_property_end" type="string"/>
		</property>
		<property name="No audio" nameLabel="Slideshow_property_no_audio" type="boolean"/>
		<property name="Presentation duration" nameLabel="Slideshow_property_presentation_duration" type="string"/>
		<property name="Slide animation" nameLabel="Slideshow_property_slide_animation" type="boolean"/>
		<property name="Text animation" nameLabel="Slideshow_property_text_animation" type="boolean"/>
		<property name="Hide progressbar" nameLabel="Slideshow_property_hide_progressbar" type="boolean"/>
		<property name="Show slide" nameLabel="Slideshow_property_show_slide" type="string"/>
		<property name="Group next and previous buttons" nameLabel="Slideshow_property_group_next_and_previous_buttons" type="boolean"/>
		<property name="Narration" nameLabel="Slideshow_property_narration" type="narration"/>
		<property name="langAttribute" nameLabel="Slideshow_property_lang" type="string"/>
	</model>
<css>.slideshow-container {&#13;
    border: 1px solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: relative;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.slideshow-container-slide {&#13;
    border: 0 solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    background-size: 100% 100%;&#13;
}&#13;
&#13;
.slideshow-container-text {&#13;
    border: 0 solid black;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    opacity: 0;&#13;
    position: absolute;&#13;
    z-index: 100;&#13;
    color: white;&#13;
}&#13;
&#13;
.slideshow-controls-container {&#13;
    height: 50px;&#13;
    border: 1px solid black;&#13;
    margin: 0;&#13;
    padding-left: 5px;&#13;
    padding-right: 5px;&#13;
}&#13;
&#13;
.slideshow-controls-slide-counter,&#13;
.slideshow-controls-timer,&#13;
.slideshow-controls-play,&#13;
.slideshow-controls-play-mouse-hover,&#13;
.slideshow-controls-play-pause,&#13;
.slideshow-controls-play-pause-mouse-hover,&#13;
.slideshow-controls-stop,&#13;
.slideshow-controls-stop-mouse-hover,&#13;
.slideshow-controls-progressbar,&#13;
.slideshow-controls-previous,&#13;
.slideshow-controls-previous-mouse-hover,&#13;
.slideshow-controls-previous-inactive,&#13;
.slideshow-controls-previous-inactive-mouse-hover,&#13;
.slideshow-controls-next,&#13;
.slideshow-controls-next-mouse-hover,&#13;
.slideshow-controls-next-inactive,&#13;
.slideshow-controls-next-inactive-mouse-hover {&#13;
    height: 40px;&#13;
    line-height: 40px;&#13;
    border: 0 solid black;&#13;
    margin:5px;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.slideshow-controls-next-inactive,&#13;
.slideshow-controls-next-inactive-mouse-hover,&#13;
.slideshow-controls-previous-inactive,&#13;
.slideshow-controls-previous-inactive-mouse-hover {&#13;
    cursor: default;&#13;
    color: #C8C4C4;&#13;
}&#13;
&#13;
.slideshow-controls-timer {&#13;
    cursor: default;&#13;
}&#13;
&#13;
.slideshow-controls-timer-time,&#13;
.slideshow-controls-timer-duration,&#13;
.slideshow-controls-timer-separator {&#13;
    display: inline-block;&#13;
    float:left;&#13;
    max-height: 40px;&#13;
}&#13;
&#13;
.slideshow-controls-timer-separator {&#13;
    margin:0 5px;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar {&#13;
    width: auto;&#13;
    cursor: default;&#13;
    position: relative;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar-slider {&#13;
    z-index: 100;&#13;
    width: 10px;&#13;
    height: 10px;&#13;
    border-radius: 4px;&#13;
    -webkit-border-radius: 4px;&#13;
    -moz-border-radius: 4px;&#13;
    margin-top: 14px;&#13;
    border: 2px solid black;&#13;
    background-color: white;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.slideshow-controls-progressbar-line {&#13;
    height: 2px;&#13;
    border: 1px solid black;&#13;
    background-color: black;&#13;
    margin-left: 1px;&#13;
    margin-right: 1px;&#13;
    margin-top: 19px;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.slideshow-loading-image,&#13;
.slideshow-loading-text {&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    z-index: 100;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.slideshow-loading-image {&#13;
    border: 0 solid black;&#13;
    width: 80px;&#13;
    height: 80px;&#13;
}&#13;
&#13;
.slideshow-loading-text {&#13;
    width: 250px;&#13;
    height: 40px;&#13;
    line-height: 40px;&#13;
    text-align: center;&#13;
    border-bottom: 0 solid black;&#13;
    border-left: 1px solid black;&#13;
    border-right: 1px solid black;&#13;
    border-top: 1px solid black;&#13;
    background-color: white;&#13;
    border-radius: 5px 5px 0 0;&#13;
}&#13;
</css><view>&lt;div class="slideshow-container"&gt;&lt;/div&gt;&#13;
&lt;div class="slideshow-controls-container"&gt;&#13;
    &lt;div class="slideshow-controls-play"&gt;Play&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-stop"&gt;Stop&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-timer"&gt;&#13;
        &lt;span class="slideshow-controls-timer-time"&gt;00:00&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-separator"&gt;/&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-duration"&gt;--:--&lt;/span&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-progressbar"&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-line"&gt;&lt;/div&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-slider"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-slide-counter"&gt;1/10&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-previous"&gt;Previous&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-next"&gt;Next&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="slideshow-loading-image"/&gt;&#13;
&lt;div class="slideshow-loading-text"&gt;Loading...&lt;/div&gt;&#13;
</view><preview>&lt;div class="slideshow-container"&gt;&lt;/div&gt;&#13;
&lt;div class="slideshow-controls-container"&gt;&#13;
    &lt;div class="slideshow-controls-play"&gt;Play&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-stop"&gt;Stop&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-timer"&gt;&#13;
        &lt;span class="slideshow-controls-timer-time"&gt;00:00&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-separator"&gt;/&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-timer-duration"&gt;12:34&lt;/span&gt;&#13;
        &lt;span class="slideshow-controls-slide-counter"&gt;3/12&lt;/span&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-progressbar"&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-line"&gt;&lt;/div&gt;&#13;
        &lt;div class="slideshow-controls-progressbar-slider"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-previous"&gt;Previous&lt;/div&gt;&#13;
    &lt;div class="slideshow-controls-next"&gt;Next&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="slideshow-loading-image"/&gt;&#13;
&lt;div class="slideshow-loading-text"&gt;Loading...&lt;/div&gt;&#13;
</preview><presenter>function AddonSlideshow_create() {&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.isPlaying = false;&#13;
    presenter.eventBus = null;&#13;
    presenter.noAudioPlayer = null;&#13;
&#13;
    var isWCAGOn = false;&#13;
    presenter.isSpeaking = false;&#13;
&#13;
    var DOMElements = {};&#13;
    var loadedImagesDeferred = $.Deferred(),&#13;
        loadedAudioDeferred = $.Deferred(),&#13;
        loadedTextDeferred = $.Deferred();&#13;
&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'A_01': "At least one audio format file must be uploaded!",&#13;
        'A_02': "Your browser does not support HTML5 audio or none of Addon media types!",&#13;
        'A_03': "Your browser does not support MP3 media type. Please try to use file in OGG format.",&#13;
        'A_04': "Your browser does not support OGG media type. Please try to use file in MP3 format.",&#13;
        'S_01': "Each slide must have Image property set properly!",&#13;
        'S_02': "Slide start time in not in proper format ('MM:SS')!",&#13;
        'S_03': "Slide start times should be consecutive!",&#13;
        'T_01': "Text value cannot be empty!",&#13;
        'T_02': "Text start time in not in proper format ('MM:SS')!",&#13;
        'T_03': "Text end time in not in proper format ('MM:SS')!",&#13;
        'T_04': "Text end time must be higher than start time!",&#13;
        'T_05': "Top position value is invalid!",&#13;
        'T_06': "Left position value is invalid!",&#13;
        'T_07': "If more than one text is set, each one of them have to be set properly!",&#13;
        'N_01': "If 'no audio' is checked, presentation duration must be a positive number."&#13;
    };&#13;
&#13;
    presenter.TIME_LINE_TASK = {&#13;
        TYPE:{&#13;
            SLIDE:0,&#13;
            TEXT:1&#13;
        },&#13;
        TASK:{&#13;
            SHOW:2,&#13;
            HIDE:3&#13;
        }&#13;
    };&#13;
&#13;
    presenter.AUDIO_STATE = {&#13;
        PLAY: 0,&#13;
        PAUSE: 1,&#13;
        STOP: 2,&#13;
        NONE: 3,&#13;
        STOP_FROM_NAVIGATION: 4&#13;
    };&#13;
&#13;
    presenter.checkBackgroundImageOfButtonElements = function(buttons) {&#13;
        var pattern = /url(.)/;&#13;
        $.each(buttons, function() {&#13;
            var background = $(this).css("background-image");&#13;
            var isBackgroundSet = pattern.test(background);&#13;
            if(isBackgroundSet) {&#13;
                $(this).html("");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    function deferredQueueDecoratorChecker() {&#13;
        return presenter.configuration.audioLoadComplete;&#13;
    }&#13;
&#13;
    function setElementsDimensions(width, height) {&#13;
        var container = DOMElements.viewContainer.find('.slideshow-container:first')[0];&#13;
        var containerDimensions = DOMOperationsUtils.getOuterDimensions(container);&#13;
        var containerDistances = DOMOperationsUtils.calculateOuterDistances(containerDimensions);&#13;
&#13;
        var controlsContainer = DOMElements.viewContainer.find('.slideshow-controls-container:first')[0];&#13;
        var controlsContainerDimensions = DOMOperationsUtils.getOuterDimensions(controlsContainer);&#13;
        var controlsContainerDistances = DOMOperationsUtils.calculateOuterDistances(controlsContainerDimensions);&#13;
&#13;
        presenter.configuration.slideDimensions = {&#13;
            width:width - containerDistances.horizontal,&#13;
            height:height - $(controlsContainer).height() - containerDistances.vertical - controlsContainerDistances.vertical&#13;
        };&#13;
&#13;
        $(controlsContainer).css({&#13;
            width:width - controlsContainerDistances.horizontal&#13;
        });&#13;
&#13;
        $(container).css({&#13;
            width:presenter.configuration.slideDimensions.width,&#13;
            height:presenter.configuration.slideDimensions.height&#13;
        });&#13;
    }&#13;
&#13;
    function adjustProgressBar() {&#13;
        var progressbar = $(DOMElements.controls.progressbar);&#13;
&#13;
        if (presenter.configuration.hideProgressbar) {&#13;
            $(progressbar).hide();&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        var progressbarDimensions = DOMOperationsUtils.getOuterDimensions(progressbar);&#13;
        var progressbarDistances = DOMOperationsUtils.calculateOuterDistances(progressbarDimensions);&#13;
&#13;
        var line = $(DOMElements.controls.line);&#13;
        var lineDimensions = DOMOperationsUtils.getOuterDimensions(line);&#13;
        var lineDistances = DOMOperationsUtils.calculateOuterDistances(lineDimensions);&#13;
&#13;
        var controlsSpareWidth = $(DOMElements.controls.container).width();&#13;
        controlsSpareWidth -= $(DOMElements.controls.timer).outerWidth(true);&#13;
        controlsSpareWidth -= getControlButtonsDOMElements().play.outerWidth(true);&#13;
        controlsSpareWidth -= getControlButtonsDOMElements().stop.outerWidth(true);&#13;
        if (presenter.configuration.groupNextAndPrevious) {&#13;
            controlsSpareWidth -= $(getControlButtonsDOMElements().previous).parent().outerWidth(true);&#13;
        } else {&#13;
            controlsSpareWidth -= getControlButtonsDOMElements().previous.outerWidth(true);&#13;
            controlsSpareWidth -= getControlButtonsDOMElements().next.outerWidth(true);&#13;
        }&#13;
        controlsSpareWidth -= progressbarDistances.horizontal;&#13;
&#13;
        var sliderOuterWidth = $(DOMElements.controls.slider).outerWidth(true);&#13;
        presenter.configuration.sliderSlideAreaLength = controlsSpareWidth - sliderOuterWidth;&#13;
&#13;
        $(progressbar).css('width', controlsSpareWidth + 'px');&#13;
        $(line).css({&#13;
            width:(controlsSpareWidth - lineDistances.horizontal) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function updateProgressBar(time) {&#13;
        if (!presenter.configuration.buzzAudio) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (time === undefined) {&#13;
            time = presenter.configuration.buzzAudio.getTime();&#13;
        }&#13;
        var percentage = time / presenter.configuration.buzzAudio.getDuration();&#13;
        $(DOMElements.controls.slider).css('left', (percentage * presenter.configuration.sliderSlideAreaLength) + 'px');&#13;
    }&#13;
&#13;
    function loadAudio(isPreview) {&#13;
        if (presenter.configuration.noAudio) {&#13;
            presenter.configuration.buzzAudio = new buzz.sound([]);&#13;
            presenter.configuration.audioLoadComplete = true;&#13;
            loadedAudioDeferred.resolve();&#13;
            return {isError: false};&#13;
        }&#13;
&#13;
        if (!buzz.isSupported()) {&#13;
            return { isError: true, errorCode: "A_01" };&#13;
        }&#13;
&#13;
        if (!buzz.isMP3Supported() &amp;&amp; !buzz.isOGGSupported()) {&#13;
            return { isError: true, errorCode: "A_02" };&#13;
        }&#13;
&#13;
        if (presenter.configuration.audio.MP3 &amp;&amp; !buzz.isMP3Supported() &amp;&amp; buzz.isOGGSupported() &amp;&amp; !presenter.configuration.audio.OGG) {&#13;
            return { isError: true, errorCode: "A_03" };&#13;
        } else if (presenter.configuration.audio.OGG &amp;&amp; !buzz.isOGGSupported() &amp;&amp; buzz.isMP3Supported() &amp;&amp; !presenter.configuration.audio.MP3) {&#13;
            return { isError: true, errorCode: "A_04" };&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            showLoadingScreen("Loading audio file...");&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
&#13;
        if (presenter.configuration.audio.MP3 &amp;&amp; buzz.isMP3Supported()) {&#13;
            presenter.configuration.buzzAudio = new buzz.sound([&#13;
                presenter.configuration.audio.MP3&#13;
            ]);&#13;
        } else if (presenter.configuration.audio.OGG &amp;&amp; buzz.isOGGSupported()) {&#13;
            presenter.configuration.buzzAudio = new buzz.sound([&#13;
                presenter.configuration.audio.OGG&#13;
            ]);&#13;
        }&#13;
&#13;
        presenter.configuration.buzzAudio.bind("error", function () {&#13;
            var errorMessage = "Error occurred while loading/playing audio.";&#13;
&#13;
            if (this.getErrorMessage()) {&#13;
                errorMessage += " Reason: " + this.getErrorMessage();&#13;
            }&#13;
&#13;
            DOMElements.viewContainer.html(errorMessage + " Please try again.");&#13;
        });&#13;
&#13;
        presenter.configuration.buzzAudio.bind("loadedmetadata", function () {&#13;
            var duration = buzz.toTimer(presenter.configuration.buzzAudio.getDuration(), false);&#13;
            presenter.configuration.audioDurationSet = presenter.configuration.buzzAudio.getDuration() !== '--';&#13;
            $(DOMElements.controls.duration).text(duration);&#13;
        });&#13;
&#13;
        presenter.configuration.buzzAudio.bind("canplay", function () {&#13;
            presenter.configuration.audioLoadComplete = true;&#13;
            loadedAudioDeferred.resolve();&#13;
        });&#13;
&#13;
        presenter.configuration.currentTime = 0;&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.NONE;&#13;
&#13;
        return {&#13;
            isError:false&#13;
        };&#13;
    }&#13;
&#13;
    function updateSlideCounter(index) {&#13;
        var timeText = (index + 1) + '/' + presenter.configuration.slides.count;&#13;
        DOMElements.controls.counter.text(timeText);&#13;
    }&#13;
&#13;
    function executeTasks(time, withoutAnimation) {&#13;
        var isTextAnimation = presenter.configuration.textAnimation &amp;&amp; !withoutAnimation;&#13;
        var isSlideAnimation = presenter.configuration.slideAnimation &amp;&amp; !withoutAnimation;&#13;
&#13;
        if (presenter.configuration.timeLine[time]) {&#13;
            for (var i = 0; i &lt; presenter.configuration.timeLine[time].length; i++) {&#13;
                var type = presenter.configuration.timeLine[time][i].type;&#13;
                var index = presenter.configuration.timeLine[time][i].index;&#13;
&#13;
                switch (type) {&#13;
                    case presenter.TIME_LINE_TASK.TYPE.SLIDE:&#13;
                        var showIndex = time !== 0 ? index : 0;&#13;
&#13;
                        for (var j = 0; j &lt; presenter.configuration.slides.domReferences.length; j++) {&#13;
                            var $slideElement = $(presenter.configuration.slides.domReferences[j]);&#13;
                            if (j === showIndex) {&#13;
                                updateSlideCounter(j);&#13;
                                if (isSlideAnimation) {&#13;
                                    $slideElement.show("fade", {}, 2000);&#13;
                                } else {&#13;
                                    $slideElement.show();&#13;
                                }&#13;
                            } else {&#13;
                                if (isSlideAnimation) {&#13;
                                    $slideElement.hide("fade", {}, 2000);&#13;
                                } else {&#13;
                                    $slideElement.hide();&#13;
                                }&#13;
                            }&#13;
                        }&#13;
                        if (presenter.isPlaying) {&#13;
                            presenter.readSlide(index, true);&#13;
                        }&#13;
                        setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                        setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
&#13;
                        if (showIndex === 0) { // first&#13;
                            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                        } else if (showIndex === presenter.configuration.slides.count-1) { // last&#13;
                            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
                        }&#13;
&#13;
                        break;&#13;
                    case presenter.TIME_LINE_TASK.TYPE.TEXT:&#13;
                        var show = presenter.configuration.timeLine[time][i].task === presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                            $textElement = $(presenter.configuration.texts.domReferences[index]);&#13;
                        if (show) {&#13;
                            if (isTextAnimation) {&#13;
                                $textElement.css({'opacity': '1'}).effect('slide', {}, 500);&#13;
                            } else {&#13;
                                $textElement.css('opacity', '1');&#13;
                            }&#13;
                        } else {&#13;
                            if (isTextAnimation) {&#13;
                                $textElement.animate({'opacity': '0'}, {}, 500);&#13;
                            } else {&#13;
                                $textElement.css('opacity', '0');&#13;
                            }&#13;
                        }&#13;
&#13;
                        break;&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.pauseAudioResource = function () {&#13;
        presenter.isPlaying = false;&#13;
        if (presenter.configuration.noAudio) {&#13;
            presenter.pauseNoAudioPlayer();&#13;
        } else {&#13;
            if (presenter.configuration.audio.wasPlayed) {&#13;
                try {&#13;
                    presenter.configuration.buzzAudio.pause();&#13;
                } catch (exception) {&#13;
                }  //There can ba DOMException, if audio was player but was still buffering&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioResource = function () {&#13;
        presenter.isPlaying = true;&#13;
        if (presenter.configuration.noAudio) {&#13;
            presenter.configuration.audio.wasPlayed = true;&#13;
            presenter.startNoAudioPlayer();&#13;
        } else {&#13;
            presenter.configuration.audio.wasPlayed = true;&#13;
            var nopromise = {&#13;
                catch: new Function()&#13;
            };&#13;
&#13;
            (presenter.configuration.buzzAudio.get().play() || nopromise).catch(function () {&#13;
            }); //There can ba DOMException, if audio was player but was still buffering&#13;
        }&#13;
    };&#13;
&#13;
    presenter.startNoAudioPlayer = function() {&#13;
        presenter.noAudioPlayer = setInterval(noAudioPlay,1000);&#13;
    };&#13;
&#13;
    presenter.pauseNoAudioPlayer = function() {&#13;
        clearInterval(presenter.noAudioPlayer);&#13;
        presenter.noAudioPlayer = null;&#13;
    };&#13;
&#13;
&#13;
    function noAudioPlay() {&#13;
        var time = presenter.time + 1;&#13;
        if (time &gt; presenter.configuration.maxTime) {&#13;
            onPresentationEnd();&#13;
            return;&#13;
        }&#13;
        executeTasks(time, false);&#13;
        presenter.configuration.currentTime = time;&#13;
        presenter.time = time;&#13;
&#13;
    }&#13;
&#13;
    function timeUpdateCallback() {&#13;
        if (presenter.configuration.audioState !== presenter.AUDIO_STATE.STOP) {&#13;
            updateProgressBar();&#13;
        }&#13;
&#13;
        var parsedTime = parseInt(buzz.fromTimer(presenter.configuration.buzzAudio.getTime()), 10);&#13;
        var timeChanged = false;&#13;
&#13;
        if (presenter.configuration.currentTime !== parsedTime) {&#13;
            timeChanged = true;&#13;
            var time = buzz.toTimer(presenter.configuration.buzzAudio.getTime(), false);&#13;
            presenter.configuration.currentTime = parsedTime;&#13;
            $(DOMElements.controls.currentTime).text(time);&#13;
        }&#13;
&#13;
        if (presenter.configuration.buzzAudio.getTime() + 0.3 &gt; presenter.configuration.buzzAudio.getDuration()) {&#13;
            onPresentationEnd();&#13;
            return;&#13;
        }&#13;
&#13;
        if (!timeChanged) {&#13;
            return; // We want to execute tasks with an accuracy of full seconds only&#13;
        }&#13;
&#13;
        executeTasks(presenter.configuration.currentTime, false);&#13;
    }&#13;
&#13;
    function onPresentationEnd() {&#13;
        presenter.time = 0;&#13;
        $(DOMElements.controls.currentTime).text('00:00');&#13;
        changeButtonToPlay();&#13;
        updateProgressBar(0);&#13;
        presenter.configuration.currentTime = 0;&#13;
        presenter.pauseAudioResource();&#13;
        if (presenter.configuration.audioState == presenter.AUDIO_STATE.STOP || presenter.configuration.noAudio) {&#13;
            presenter.sendValueChangedEvent("end");&#13;
        }&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.STOP;&#13;
        hideAllTexts();&#13;
        // This action will trigger time update callback, but it's the only way to assure that pressing play after end/stop will trigger playing audio&#13;
        executeTasks(0, true);&#13;
    }&#13;
&#13;
    function getContainerPadding() {&#13;
        var topOffset = parseInt(DOMElements.container.css('paddingTop'), 10);&#13;
        var bottomOffset = parseInt(DOMElements.container.css('paddingBottom'), 10);&#13;
        var leftOffset = parseInt(DOMElements.container.css('paddingLeft'), 10);&#13;
        var rightOffset = parseInt(DOMElements.container.css('paddingRight'), 10);&#13;
&#13;
        return { topOffset:topOffset, bottomOffset:bottomOffset, leftOffset:leftOffset, rightOffset:rightOffset };&#13;
    }&#13;
&#13;
    function loadSlides(width, height, isPreview) {&#13;
        showLoadingScreen("Loading slides...");&#13;
        var containerPadding = getContainerPadding();&#13;
&#13;
        var images = [];&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.count; i++) {&#13;
            images.push(presenter.configuration.slides.content[i].image);&#13;
        }&#13;
&#13;
        $.imgpreload(images, {&#13;
            each:function () {&#13;
                var index = -1;&#13;
&#13;
                for (var j = 0; j &lt; presenter.configuration.slides.count; j++) {&#13;
                    if (presenter.configuration.slides.content[j].image === $(this).attr('src')) {&#13;
                        index = j;&#13;
                        break;&#13;
                    }&#13;
                }&#13;
&#13;
                var slide = document.createElement('div');&#13;
&#13;
                $(slide).addClass('slideshow-container-slide');&#13;
                $(slide).css({&#13;
                    width: width + 'px',&#13;
                    height: height + 'px',&#13;
                    backgroundImage: 'url(' + $(this).attr('src') + ')',&#13;
                    top: containerPadding.topOffset + 'px',&#13;
                    left: containerPadding.leftOffset + 'px'&#13;
                });&#13;
&#13;
                if (!presenter.configuration.slides.domReferences || !$.isArray(presenter.configuration.slides.domReferences)) {&#13;
                    presenter.configuration.slides.domReferences = [];&#13;
                }&#13;
&#13;
                presenter.configuration.slides.domReferences[index] = slide;&#13;
            },&#13;
            all:function () {&#13;
                $(DOMElements.container).html();&#13;
&#13;
                for (var i = 0; i &lt; presenter.configuration.slides.count; i++) {&#13;
                    $(DOMElements.container).append(presenter.configuration.slides.domReferences[i]);&#13;
                }&#13;
&#13;
                presenter.configuration.isDomReferenceArrayComplete = true;&#13;
                $(presenter.configuration.slides.domReferences[0]).show();&#13;
&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
                if (presenter.configuration.slides.count === 1) {&#13;
                    setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
                }&#13;
&#13;
                if (!isPreview) {&#13;
                    handleMouseActions();&#13;
                    handleMouseHovering();&#13;
                    presenter.configuration.buzzAudio.bind("timeupdate", timeUpdateCallback);&#13;
                }&#13;
                var slideNumber = isPreview ? presenter.configuration.showSlide - 1 : 0;&#13;
                presenter.goToSlide(slideNumber, true);&#13;
                loadedTextDeferred.resolve();&#13;
&#13;
                if (presenter.configuration.savedState) {&#13;
                    $(DOMElements.viewContainer).trigger("onLoadSlidesEnd", [presenter.configuration.savedState]);&#13;
                }&#13;
                loadedImagesDeferred.resolve();&#13;
            }&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function loadTexts() {&#13;
        showLoadingScreen("Loading text labels...");&#13;
&#13;
        if (!presenter.configuration.texts.domReferences || !$.isArray(presenter.configuration.texts.domReferences)) {&#13;
            presenter.configuration.texts.domReferences = [];&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.count; i++) {&#13;
            var text = presenter.configuration.texts.content[i];&#13;
            var textElement = document.createElement('span');&#13;
            $(textElement).addClass('slideshow-container-text');&#13;
            $(textElement).html(text.text);&#13;
            $(textElement).css({&#13;
                top:text.top + 'px',&#13;
                left:text.left + 'px'&#13;
            });&#13;
            presenter.configuration.texts.domReferences[i] = textElement;&#13;
            $(DOMElements.container).append(textElement);&#13;
        }&#13;
&#13;
        loadedTextDeferred.resolve();&#13;
    }&#13;
&#13;
    function hideAllTexts() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.domReferences.length; i++) {&#13;
            $(presenter.configuration.texts.domReferences[i]).css('opacity', '0');&#13;
        }&#13;
    }&#13;
&#13;
    function stopAllAnimations() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.domReferences.length; i++) {&#13;
            $(presenter.configuration.texts.domReferences[i]).stop(true, true);&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.domReferences.length; i++) {&#13;
            $(presenter.configuration.slides.domReferences[i]).stop(true, true);&#13;
        }&#13;
&#13;
        if (presenter.noAudioPlayer) {&#13;
            presenter.pauseNoAudioPlayer();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.stopPresentation = function() {&#13;
        $(DOMElements.controls.currentTime).text('00:00');&#13;
        updateProgressBar(0);&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.STOP;&#13;
        presenter.sendValueChangedEvent("stop");&#13;
        presenter.pauseAudioResource();&#13;
        stopAllAnimations();&#13;
        hideAllTexts();&#13;
        executeTasks(0, true);&#13;
        changeButtonToPlay();&#13;
        presenter.time = 0;&#13;
    };&#13;
&#13;
    // Returns currently displayed index. If none slide is visible then this function returns -1&#13;
    presenter.getCurrentSlideIndex = function () {&#13;
        stopAllAnimations();&#13;
        for (var i = 0; i &lt; presenter.configuration.slides.domReferences.length; i++) {&#13;
            if ($(presenter.configuration.slides.domReferences[i]).is(":visible")) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.setTimeFromSlideIndex = function (slideIndex) {&#13;
        if (presenter.configuration.noAudio) {&#13;
            return;&#13;
        }&#13;
        var slide = presenter.configuration.slides.content[slideIndex];&#13;
        var time = slide.start;&#13;
        presenter.configuration.buzzAudio.setTime(time);&#13;
    };&#13;
&#13;
    function goToNextSlide(withoutAnimation) {&#13;
        var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
        if (currentSlideIndex &lt; presenter.configuration.slides.count - 1) {&#13;
            var index = currentSlideIndex + 1;&#13;
            presenter.goToSlide(index, withoutAnimation);&#13;
            presenter.setTimeFromSlideIndex(index);&#13;
        }&#13;
    }&#13;
&#13;
    function goToPreviousSlide(withoutAnimation) {&#13;
        var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
        if (currentSlideIndex &gt; 0) {&#13;
            var index = currentSlideIndex - 1;&#13;
            presenter.goToSlide(index, withoutAnimation);&#13;
            presenter.setTimeFromSlideIndex(index);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.goToSlide = function (index, withoutAnimation) {&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        hideAllTexts();&#13;
        var slide = presenter.configuration.slides.content[index];&#13;
        var time = slide.start;&#13;
        executeTasks(time, withoutAnimation);&#13;
        $(DOMElements.controls.currentTime).text(buzz.toTimer(time, false));&#13;
&#13;
        var activeTexts = presenter.findActiveTexts(presenter.configuration.timeLine, time);&#13;
        for (var i = 0; i &lt; activeTexts.length; i++) {&#13;
            var textIndex = activeTexts[i];&#13;
            $(presenter.configuration.texts.domReferences[textIndex]).css('opacity', '1');&#13;
        }&#13;
&#13;
        updateProgressBar(time);&#13;
        presenter.configuration.currentTime = time;&#13;
        presenter.time = time;&#13;
&#13;
        if (index &gt; 0) {&#13;
            setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
        } else {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
        }&#13;
&#13;
        if (index &lt; presenter.configuration.slides.count - 1) {&#13;
            setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        } else {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.switchSlideShowStopToPlay = function () {&#13;
        updateProgressBar(0);&#13;
        presenter.configuration.currentTime = 0;&#13;
        if (presenter.configuration.audio.wasPlayed) {&#13;
            presenter.configuration.buzzAudio.set('currentTime', 0.1);&#13;
        }&#13;
        presenter.playAudioResource();&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        presenter.sendValueChangedEvent("playing");&#13;
        changeButtonToPause();&#13;
    };&#13;
&#13;
     presenter.switchSlideShowPlayToPause = function () {&#13;
        presenter.pauseAudioResource();&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
        presenter.sendValueChangedEvent("pause");&#13;
        changeButtonToPlay();&#13;
    };&#13;
&#13;
    presenter.switchSlideShowPauseToPlay = function () {&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        presenter.sendValueChangedEvent("playing");&#13;
        presenter.playAudioResource();&#13;
        changeButtonToPause();&#13;
    };&#13;
&#13;
    presenter.switchSlideShowToPlay = function () {&#13;
        presenter.sendValueChangedEvent("playing");&#13;
        if (presenter.isPlaying) {&#13;
            presenter.pauseAudioResource();&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
            changeButtonToPlay();&#13;
        } else {&#13;
            presenter.playAudioAction();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioAction = function () {&#13;
        presenter.configuration.buzzAudio.setTime(presenter.time);&#13;
        updateProgressBar(presenter.time);&#13;
        presenter.configuration.currentTime = presenter.time;&#13;
        presenter.playAudioResource();&#13;
        changeButtonToPause();&#13;
    };&#13;
&#13;
    var playButtonClickHandler = deferredSyncQueue.decorate(function playButtonClickHandler(event) {&#13;
        event.stopPropagation();&#13;
&#13;
        switch (presenter.configuration.audioState) {&#13;
            case presenter.AUDIO_STATE.PLAY:&#13;
                presenter.switchSlideShowPlayToPause();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.NONE:&#13;
            case presenter.AUDIO_STATE.PAUSE:&#13;
                presenter.switchSlideShowPauseToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP:&#13;
                presenter.switchSlideShowStopToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP_FROM_NAVIGATION:&#13;
                presenter.switchSlideShowToPlay();&#13;
                break;&#13;
        }&#13;
    });&#13;
&#13;
    var stopButtonClickHandler = deferredSyncQueue.decorate(function stopButtonClickHandler(e) {&#13;
        e.stopPropagation();&#13;
        presenter.stopPresentation();&#13;
    });&#13;
&#13;
    var previousButtonClickHandler = deferredSyncQueue.decorate(function previousButtonClickHandler(e) {&#13;
&#13;
        e.stopPropagation();&#13;
&#13;
        var isActive = $(this).hasClass('slideshow-controls-previous') || $(this).hasClass('slideshow-controls-previous-mouse-hover');&#13;
        if (isActive) {&#13;
            goToPreviousSlide(false);&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        }&#13;
    });&#13;
&#13;
    var nextButtonClickHandler = deferredSyncQueue.decorate(function nextButtonClickHandler(e) {&#13;
        e.stopPropagation();&#13;
        var isActive = $(this).hasClass('slideshow-controls-next') || $(this).hasClass('slideshow-controls-next-mouse-hover');&#13;
        if (isActive) {&#13;
            goToNextSlide(false);&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.STOP_FROM_NAVIGATION;&#13;
        }&#13;
    });&#13;
&#13;
    function getCurrentIndex(element) {&#13;
        return $(element).index() - presenter.configuration.texts.count;&#13;
    }&#13;
&#13;
    function mouseDownCallback(eventData) {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        var currentIndex = getCurrentIndex(eventData.target), $slide;&#13;
        var containerPadding = getContainerPadding();&#13;
        presenter.configuration.mouseData.isMouseDown = true;&#13;
        presenter.configuration.mouseData.oldPosition.x = eventData.pageX;&#13;
        presenter.configuration.mouseData.oldPosition.y = eventData.pageY;&#13;
        presenter.configuration.mouseData.$imageElement = $(eventData.target);&#13;
&#13;
        // Previous slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $slide.css({&#13;
            left: (-1 * presenter.configuration.slideDimensions.width + containerPadding.leftOffset) + 'px',&#13;
            top: containerPadding.topOffset + 'px',&#13;
            display: 'block'&#13;
        });&#13;
&#13;
        // Next slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
        $slide.css({&#13;
            left:(presenter.configuration.slideDimensions.width + containerPadding.leftOffset) + 'px',&#13;
            top: containerPadding.topOffset + 'px',&#13;
            display:'block'&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    function touchStartCallback(event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    function cleanMouseData() {&#13;
        presenter.configuration.mouseData = {&#13;
            isMouseDown:false,&#13;
            oldPosition:{&#13;
                x:0,&#13;
                y:0&#13;
            },&#13;
            isMouseDragged:false&#13;
        };&#13;
    }&#13;
&#13;
    function restoreTextsPositions() {&#13;
        for (var i = 0; i &lt; presenter.configuration.texts.count; i++) {&#13;
            var text = presenter.configuration.texts.content[i];&#13;
            var textElement = presenter.configuration.texts.domReferences[i];&#13;
            $(textElement).css({&#13;
                top: text.top + 'px',&#13;
                left: text.left + 'px'&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function mouseUpCallback () {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        presenter.configuration.mouseData.isMouseDown = false;&#13;
        var leftOffset = getContainerPadding().leftOffset,&#13;
            width = presenter.configuration.slideDimensions.width,&#13;
            left = parseInt(presenter.configuration.mouseData.$imageElement.css('left'), 10),&#13;
            isMoreThan30Percent = Math.abs(left - leftOffset) &gt; (width / 10) * 3,&#13;
            animationTime = (Math.abs(left - leftOffset) / width) * 750,&#13;
            currentIndex = getCurrentIndex(presenter.configuration.mouseData.$imageElement), $previousSlide, $nextSlide;&#13;
&#13;
        $previousSlide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $nextSlide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
&#13;
        function restoreCurrentView () {&#13;
            presenter.configuration.mouseData.$imageElement.animate({&#13;
                'left': leftOffset + 'px'&#13;
            }, animationTime, "linear", function () {&#13;
                cleanMouseData();&#13;
            });&#13;
&#13;
            $previousSlide.animate(&#13;
                { 'left': (-1 * presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                animationTime, "linear",&#13;
                function () { $previousSlide.hide(); $(this).css('left', leftOffset); }&#13;
            );&#13;
            $nextSlide.animate(&#13;
                { 'left': (presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                animationTime, "linear",&#13;
                function () { $nextSlide.hide(); $(this).css('left', leftOffset); }&#13;
            );&#13;
&#13;
        }&#13;
&#13;
        if (isMoreThan30Percent) {&#13;
            if (left &lt; 0) {&#13;
                if (currentIndex + 1 &gt;= presenter.configuration.slides.count) {&#13;
                    restoreCurrentView();&#13;
                } else {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': (-1 * width + leftOffset) + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        presenter.configuration.mouseData.$imageElement.hide();&#13;
                        presenter.configuration.mouseData.$imageElement.css('left', leftOffset + 'px');&#13;
                        presenter.goToSlide(currentIndex + 1, true);&#13;
                        presenter.setTimeFromSlideIndex(currentIndex + 1);&#13;
                        cleanMouseData();&#13;
                    });&#13;
&#13;
                    $nextSlide.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        $previousSlide.hide();&#13;
                        $previousSlide.css('left', leftOffset + 'px');&#13;
                    });&#13;
                }&#13;
            } else {&#13;
                if (currentIndex - 1 &lt; 0) {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        cleanMouseData();&#13;
                    });&#13;
                    $previousSlide.animate(&#13;
                        { 'left': (-1 * presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                        animationTime, "linear",&#13;
                        function () { $previousSlide.hide(); }&#13;
                    );&#13;
                    $nextSlide.animate(&#13;
                        { 'left': (presenter.configuration.slideDimensions.width + leftOffset) + 'px' },&#13;
                        animationTime, "linear",&#13;
                        function () { $nextSlide.hide(); }&#13;
                    );&#13;
                } else {&#13;
                    presenter.configuration.mouseData.$imageElement.animate({&#13;
                        'left': (width + leftOffset) + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        presenter.configuration.mouseData.$imageElement.hide();&#13;
                        presenter.configuration.mouseData.$imageElement.css('left', leftOffset + 'px');&#13;
                        presenter.goToSlide(currentIndex - 1, true);&#13;
                        presenter.setTimeFromSlideIndex(currentIndex - 1);&#13;
                        cleanMouseData();&#13;
                    });&#13;
&#13;
                    $previousSlide.animate({&#13;
                        'left': leftOffset + 'px'&#13;
                    }, animationTime, "linear", function () {&#13;
                        $nextSlide.hide();&#13;
                        $nextSlide.css('left', leftOffset + 'px');&#13;
                    });&#13;
                }&#13;
            }&#13;
        } else {&#13;
            restoreCurrentView();&#13;
        }&#13;
        restoreTextsPositions();&#13;
    }&#13;
&#13;
    function touchEndCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        mouseUpCallback();&#13;
    }&#13;
&#13;
    function mouseMoveCallback (eventData) {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
        if (presenter.configuration.mouseData.isMouseDown !== true) return;&#13;
&#13;
        var imageElement = $(eventData.target);&#13;
        presenter.configuration.mouseData.isMouseDragged = true;&#13;
        var left = parseInt($(imageElement).css('left'), 10);&#13;
        var distance = eventData.pageX - presenter.configuration.mouseData.oldPosition.x;&#13;
        var currentIndex = getCurrentIndex(presenter.configuration.mouseData.$imageElement), $slide;&#13;
&#13;
        presenter.configuration.mouseData.oldPosition.x = eventData.pageX;&#13;
&#13;
        // Current slide&#13;
        $(imageElement).css('left', (left + distance) + 'px');&#13;
&#13;
        // Previous slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex - 1) + ')');&#13;
        $slide.css('left', (parseInt($slide.css('left'), 10) + distance) + 'px');&#13;
&#13;
        // Next slide&#13;
        $slide = DOMElements.container.find('.slideshow-container-slide:eq(' + (currentIndex + 1) + ')');&#13;
        $slide.css('left', (parseInt($slide.css('left'), 10) + distance) + 'px');&#13;
&#13;
        DOMElements.container.find('.slideshow-container-text:visible').each(function () {&#13;
            var thisLeft = parseInt($(this).css('left'), 10);&#13;
            $(this).css('left', (thisLeft + distance) + 'px');&#13;
        });&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        var touch = event.touches[0] || event.changedTouches[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function mouseClickCallback() {&#13;
        //if (presenter.AUDIO_STATE.PLAY === presenter.configuration.audioState) return;&#13;
&#13;
        if (presenter.configuration.mouseData.isMouseDragged) {&#13;
            presenter.configuration.mouseData.isMouseDragged = false;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    function handleMouseActions() {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            getControlButtonsDOMElements().play.on('touchend', playButtonClickHandler);&#13;
            getControlButtonsDOMElements().stop.on('touchend', stopButtonClickHandler);&#13;
            getControlButtonsDOMElements().previous.on('touchend', previousButtonClickHandler);&#13;
            getControlButtonsDOMElements().next.on('touchend', nextButtonClickHandler);&#13;
        } else {&#13;
            getControlButtonsDOMElements().play.click(playButtonClickHandler);&#13;
            getControlButtonsDOMElements().stop.click(stopButtonClickHandler);&#13;
            getControlButtonsDOMElements().previous.click(previousButtonClickHandler);&#13;
            getControlButtonsDOMElements().next.click(nextButtonClickHandler);&#13;
        }&#13;
&#13;
        DOMElements.container.find('.slideshow-container-slide').each(function() {&#13;
            if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
                this.ontouchstart = touchStartCallback;&#13;
                this.ontouchend = touchEndCallback;&#13;
                this.ontouchmove = touchMoveCallback;&#13;
            } else {&#13;
                $(this).mousedown(mouseDownCallback);&#13;
                $(this).mouseup(mouseUpCallback);&#13;
                $(this).mousemove(mouseMoveCallback);&#13;
            }&#13;
        });&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            $(DOMElements.container.find('.slideshow-container-slide')).on('touchend', mouseClickCallback);&#13;
        } else {&#13;
            $(DOMElements.container.find('.slideshow-container-slide')).click(mouseClickCallback);&#13;
        }&#13;
    }&#13;
&#13;
    function changeButtonToPlay() {&#13;
        var button = getControlButtonsDOMElements().play;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        $(button).attr('class', isHover ? 'slideshow-controls-play-mouse-hover' : 'slideshow-controls-play');&#13;
        $(button).text('Play');&#13;
        presenter.checkBackgroundImageOfButtonElements([button]);&#13;
        if (presenter.configuration.slides.count &lt; 2) {&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
        } else {&#13;
            var currentSlideIndex = presenter.getCurrentSlideIndex();&#13;
&#13;
            if (currentSlideIndex &lt; presenter.configuration.slides.count - 1) {&#13;
                setButtonActive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
            } else {&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.NEXT);&#13;
            }&#13;
&#13;
            if (currentSlideIndex &gt; 0) {&#13;
                setButtonActive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            } else {&#13;
                setButtonInactive(presenter.NAVIGATION_BUTTON.PREVIOUS);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function changeButtonToPause() {&#13;
        var button = getControlButtonsDOMElements().play;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        $(button).attr('class', isHover ? 'slideshow-controls-play-pause-mouse-hover' : 'slideshow-controls-play-pause');&#13;
        $(button).text('Pause');&#13;
        presenter.checkBackgroundImageOfButtonElements([button]);&#13;
    }&#13;
&#13;
    presenter.NAVIGATION_BUTTON = {&#13;
        PREVIOUS:0,&#13;
        NEXT:1&#13;
    };&#13;
&#13;
    function setButtonActive(whichButton) {&#13;
        var button = whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS ? getControlButtonsDOMElements().previous : getControlButtonsDOMElements().next;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        if (whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS) {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-previous-mouse-hover' : 'slideshow-controls-previous');&#13;
        } else {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-next-mouse-hover' : 'slideshow-controls-next');&#13;
        }&#13;
    }&#13;
&#13;
    function setButtonInactive(whichButton) {&#13;
        var button = whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS ? getControlButtonsDOMElements().previous : getControlButtonsDOMElements().next;&#13;
        var buttonClassName = $(button).attr('class');&#13;
        var isHover = buttonClassName.indexOf('-mouse-hover', buttonClassName.length - '-mouse-hover'.length) !== -1;&#13;
&#13;
        if (whichButton === presenter.NAVIGATION_BUTTON.PREVIOUS) {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-previous-inactive-mouse-hover' : 'slideshow-controls-previous-inactive');&#13;
        } else {&#13;
            $(button).attr('class', isHover ? 'slideshow-controls-next-inactive-mouse-hover' : 'slideshow-controls-next-inactive');&#13;
        }&#13;
    }&#13;
&#13;
    function handleMouseHovering() {&#13;
        getControlButtonsDOMElements().stop.hover(&#13;
            function () { // Hover in&#13;
                $(this).attr('class', 'slideshow-controls-stop-mouse-hover');&#13;
            },&#13;
            function () { // Hover out&#13;
                $(this).attr('class', 'slideshow-controls-stop');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().play.hover(&#13;
            function () { // Hover in&#13;
                var isPlayButton = $(this).hasClass('slideshow-controls-play') || $(this).hasClass('slideshow-controls-play-mouse-hover');&#13;
&#13;
                $(this).attr('class', isPlayButton ? 'slideshow-controls-play-mouse-hover' : 'slideshow-controls-play-pause-mouse-hover');&#13;
            },&#13;
            function () { // Hover out&#13;
                var isPlayButton = $(this).hasClass('slideshow-controls-play') || $(this).hasClass('slideshow-controls-play-mouse-hover');&#13;
&#13;
                $(this).attr('class', isPlayButton ? 'slideshow-controls-play' : 'slideshow-controls-play-pause');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().previous.hover(&#13;
            function () { // Hover in&#13;
                var isInactive = $(this).hasClass('slideshow-controls-previous-inactive') || $(this).hasClass('slideshow-controls-previous-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-previous-inactive-mouse-hover' : 'slideshow-controls-previous-mouse-hover');&#13;
            }, function () { // Hover out&#13;
                var isInactive = $(this).hasClass('slideshow-controls-previous-inactive') || $(this).hasClass('slideshow-controls-previous-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-previous-inactive' : 'slideshow-controls-previous');&#13;
            }&#13;
        );&#13;
&#13;
        getControlButtonsDOMElements().next.hover(&#13;
            function () { // Hover in&#13;
                var isInactive = $(this).hasClass('slideshow-controls-next-inactive') || $(this).hasClass('slideshow-controls-next-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-next-inactive-mouse-hover' : 'slideshow-controls-next-mouse-hover');&#13;
            }, function () { // Hover out&#13;
                var isInactive = $(this).hasClass('slideshow-controls-next-inactive') || $(this).hasClass('slideshow-controls-next-inactive-mouse-hover');&#13;
&#13;
                $(this).attr('class', isInactive ? 'slideshow-controls-next-inactive' : 'slideshow-controls-next');&#13;
            }&#13;
        );&#13;
    }&#13;
&#13;
    // Finds active texts in time line for given time and returns an array of theirs indexes.&#13;
    // Active texts in some time is a task that has been displayed before given time and weren't hidden.&#13;
    presenter.findActiveTexts = function (timeLine, time) {&#13;
        var activeTasks = [];&#13;
        var i, j, type, index, show, indexOfElement;&#13;
&#13;
        for (i = 0; i &lt; time; i++) {&#13;
            if (timeLine[i]) {&#13;
                for (j = 0; j &lt; timeLine[i].length; j++) {&#13;
                    type = timeLine[i][j].type;&#13;
                    index = timeLine[i][j].index;&#13;
&#13;
                    if (type === presenter.TIME_LINE_TASK.TYPE.TEXT) {&#13;
                        show = timeLine[i][j].task === presenter.TIME_LINE_TASK.TASK.SHOW;&#13;
&#13;
                        if (show) {&#13;
                            activeTasks.push(index);&#13;
                        } else {&#13;
                            indexOfElement = activeTasks.indexOf(index);&#13;
                            if (indexOfElement !== -1) {&#13;
                                activeTasks.splice(indexOfElement, 1);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        // Removing tasks that end on given time&#13;
        if (timeLine[time]) {&#13;
            for (j = 0; j &lt; timeLine[time].length; j++) {&#13;
                type = timeLine[time][j].type;&#13;
                index = timeLine[time][j].index;&#13;
&#13;
                if (type === presenter.TIME_LINE_TASK.TYPE.TEXT) {&#13;
                    show = timeLine[time][j].task === presenter.TIME_LINE_TASK.TASK.SHOW;&#13;
&#13;
                    if (!show) {&#13;
                        indexOfElement = activeTasks.indexOf(index);&#13;
                        if (indexOfElement !== -1) {&#13;
                            activeTasks.splice(indexOfElement, 1);&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return activeTasks;&#13;
    };&#13;
&#13;
    presenter.buildTimeLine = function (slides, texts) {&#13;
        var timeLine = [];&#13;
        var i;&#13;
&#13;
        // Slides&#13;
        for (i = 0; i &lt; slides.length; i++) {&#13;
            var time = slides[i].start;&#13;
&#13;
            if (!timeLine[time]) {&#13;
                timeLine[time] = [];&#13;
            }&#13;
&#13;
            timeLine[time].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.SLIDE,&#13;
                task:presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                index:i&#13;
            });&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; texts.length; i++) {&#13;
            var startTime = texts[i].start;&#13;
&#13;
            if (!timeLine[startTime]) {&#13;
                timeLine[startTime] = [];&#13;
            }&#13;
&#13;
            timeLine[startTime].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.TEXT,&#13;
                task:presenter.TIME_LINE_TASK.TASK.SHOW,&#13;
                index:i&#13;
            });&#13;
&#13;
            var endTime = texts[i].end;&#13;
&#13;
            if (!timeLine[endTime]) {&#13;
                timeLine[endTime] = [];&#13;
            }&#13;
&#13;
            timeLine[endTime].push({&#13;
                type:presenter.TIME_LINE_TASK.TYPE.TEXT,&#13;
                task:presenter.TIME_LINE_TASK.TASK.HIDE,&#13;
                index:i&#13;
            });&#13;
        }&#13;
&#13;
        return timeLine;&#13;
    };&#13;
&#13;
    function setDOMElementsHrefsAndSelectors(view) {&#13;
        DOMElements.viewContainer = $(view);&#13;
        DOMElements.container = $(DOMElements.viewContainer.find('.slideshow-container:first')[0]);&#13;
        DOMElements.loading = {&#13;
            image:$(DOMElements.viewContainer.find('.slideshow-loading-image:first')[0]),&#13;
            text:$(DOMElements.viewContainer.find('.slideshow-loading-text:first')[0])&#13;
        };&#13;
&#13;
        DOMElements.controls = {&#13;
            play:'[class*="slideshow-controls-play"]',&#13;
            pause:'[class*="slideshow-controls-pause"]',&#13;
            stop:'[class*="slideshow-controls-stop"]',&#13;
            next:'[class*=slideshow-controls-next]',&#13;
            previous:'[class*=slideshow-controls-previous]'&#13;
        };&#13;
&#13;
        DOMElements.controls.container = $(DOMElements.viewContainer.find('.slideshow-controls-container:first')[0]);&#13;
        DOMElements.controls.timer = $(DOMElements.viewContainer.find('.slideshow-controls-timer:first')[0]);&#13;
        DOMElements.controls.currentTime = $(DOMElements.viewContainer.find('.slideshow-controls-timer-time:first')[0]);&#13;
        DOMElements.controls.duration = $(DOMElements.viewContainer.find('.slideshow-controls-timer-duration:first')[0]);&#13;
        DOMElements.controls.progressbar = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar:first')[0]);&#13;
        DOMElements.controls.slider = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar-slider:first')[0]);&#13;
        DOMElements.controls.line = $(DOMElements.viewContainer.find('.slideshow-controls-progressbar-line:first')[0]);&#13;
        DOMElements.controls.counter = $(DOMElements.viewContainer.find('.slideshow-controls-slide-counter:first')[0]);&#13;
    }&#13;
&#13;
    function getControlButtonsDOMElements() {&#13;
        return {&#13;
            play:$(DOMElements.viewContainer.find(DOMElements.controls.play)[0]),&#13;
            pause:$(DOMElements.viewContainer.find(DOMElements.controls.pause)[0]),&#13;
            stop:$(DOMElements.viewContainer.find(DOMElements.controls.stop)[0]),&#13;
            next:$(DOMElements.viewContainer.find(DOMElements.controls.next)[0]),&#13;
            previous:$(DOMElements.viewContainer.find(DOMElements.controls.previous)[0])&#13;
        };&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = upgradeModelNoAudio(model);&#13;
        upgradedModel = upgradeModelAudiodescription(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function upgradeModelNoAudio(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
        if (!upgradedModel['No audio']) {&#13;
            upgradedModel['No audio'] = 'False'&#13;
        }&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    function upgradeModelAudiodescription(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
        for (var i = 0; i &lt; upgradedModel.Slides.length; i++) {&#13;
            if (!upgradedModel.Slides[i]['Audiodescription']) {&#13;
                upgradedModel.Slides[i]['Audiodescription'] = '';&#13;
            }&#13;
        }&#13;
        if(!upgradedModel['langAttribute']) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.hideInactiveControls = function () {&#13;
      if (presenter.configuration.noAudio) {&#13;
            DOMElements.controls.timer.css('display','none');&#13;
            DOMElements.controls.progressbar.css('display','none');&#13;
      }  else {&#13;
          DOMElements.controls.counter.css('display','none');&#13;
      }&#13;
&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        setDOMElementsHrefsAndSelectors(view);&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) {&#13;
            	$(DOMElements.loading.image).attr('src', loadingSrc);&#13;
            }&#13;
        }&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model, preview);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            $.when(loadedAudioDeferred, loadedImagesDeferred, loadedTextDeferred).done(function () {&#13;
                hideLoadingScreen();&#13;
                deferredSyncQueue.resolve();&#13;
            });&#13;
&#13;
        	if (presenter.configuration.groupNextAndPrevious) {&#13;
	            var $container = $(DOMElements.controls.container);&#13;
	            var $next = $(getControlButtonsDOMElements().next);&#13;
	            var $previous = $(getControlButtonsDOMElements().previous);&#13;
	            presenter.groupNavigationElements($container, $next, $previous);&#13;
	        }&#13;
	&#13;
	        setElementsDimensions(model.Width, model.Height);&#13;
	        adjustProgressBar();&#13;
	&#13;
	        var loadingResult = loadAudio(preview);&#13;
	        if (loadingResult.isError) {&#13;
	            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, loadingResult.errorCode);&#13;
	            return;&#13;
	        }&#13;
	&#13;
	        prepareLoadingScreen(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height);&#13;
	        // Manual load is necessary for Apple iPad/iPhone&#13;
	        presenter.configuration.buzzAudio.load();&#13;
	        presenter.configuration.timeLine = presenter.buildTimeLine(presenter.configuration.slides.content, presenter.configuration.texts.content);&#13;
	        loadTexts();&#13;
	&#13;
	        var buttons = getControlButtonsDOMElements();&#13;
	        presenter.checkBackgroundImageOfButtonElements(buttons);&#13;
	        &#13;
	        loadSlides(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height, preview);&#13;
	        &#13;
	        presenter.configuration.mouseData = {&#13;
	            isMouseDown : false,&#13;
	            oldPosition : {&#13;
	                x : 0,&#13;
	                y : 0&#13;
	            },&#13;
	            isMouseDragged : false&#13;
	        };&#13;
&#13;
            view.addEventListener('DOMNodeRemoved',function(ev) {&#13;
                if (ev.target === this) {&#13;
                    presenter.stopPresentation();&#13;
                }&#13;
            });&#13;
            presenter.hideInactiveControls();&#13;
        } else {&#13;
        	if (presenter.configuration.groupNextAndPrevious) {&#13;
	            var $container = $(DOMElements.controls.container);&#13;
	            var $next = $(getControlButtonsDOMElements().next);&#13;
	            var $previous = $(getControlButtonsDOMElements().previous);&#13;
	            presenter.groupNavigationElements($container, $next, $previous);&#13;
	        }&#13;
	&#13;
	        setElementsDimensions(model.Width, model.Height);&#13;
	        adjustProgressBar();&#13;
	        &#13;
	        prepareLoadingScreen(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height);&#13;
	        // Manual load is necessary for Apple iPad/iPhone&#13;
	        presenter.configuration.timeLine = presenter.buildTimeLine(presenter.configuration.slides.content, presenter.configuration.texts.content);&#13;
	        loadTexts();&#13;
	&#13;
	        var buttons = getControlButtonsDOMElements();&#13;
	        presenter.checkBackgroundImageOfButtonElements(buttons);&#13;
	        &#13;
	        loadSlides(presenter.configuration.slideDimensions.width, presenter.configuration.slideDimensions.height, preview);&#13;
	        &#13;
	        presenter.configuration.mouseData = {&#13;
	            isMouseDown : false,&#13;
	            oldPosition : {&#13;
	                x : 0,&#13;
	                y : 0&#13;
	            },&#13;
	            isMouseDragged : false&#13;
	        };&#13;
            presenter.hideInactiveControls();&#13;
            hideLoadingScreen();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(slidesContainerWidth, slidesContainerHeight) {&#13;
        $(DOMElements.loading.image).css({&#13;
            top:((slidesContainerHeight - $(DOMElements.loading.image).height()) / 2) + 'px',&#13;
            left:((slidesContainerWidth - $(DOMElements.loading.image).width()) / 2) + 'px'&#13;
        });&#13;
&#13;
        var textWidth = $(DOMElements.loading.text).width();&#13;
        var textHeight = $(DOMElements.loading.text).height();&#13;
&#13;
        $(DOMElements.loading.text).css({&#13;
            top:(slidesContainerHeight - textHeight) + 'px',&#13;
            left:((slidesContainerWidth - textWidth) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen(text) {&#13;
        $(DOMElements.loading.image).show();&#13;
        $(DOMElements.loading.text).text(text);&#13;
        $(DOMElements.loading.text).show();&#13;
        presenter.configuration.isLoadingScreenVisible = true;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        $(DOMElements.loading.image).hide();&#13;
        $(DOMElements.loading.text).hide();&#13;
        presenter.configuration.isLoadingScreenVisible = false;&#13;
    }&#13;
&#13;
    presenter.groupNavigationElements = function($container, $next, $previous) {&#13;
        var $groupElement = $(document.createElement('div'));&#13;
&#13;
        $groupElement.addClass('slideshow-controls-navigation');&#13;
        $groupElement.append($previous);&#13;
        $groupElement.append($next);&#13;
&#13;
        $container.append($groupElement);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        this.configuration.isVisible = this.configuration.isVisibleByDefault;&#13;
        this.setVisibility(this.configuration.isVisible);&#13;
        presenter.stopPresentation();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'pause': presenter.pause,&#13;
            'stop': presenter.stop,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'moveTo': presenter.moveToCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.moveTo = function (number) {&#13;
        presenter.moveToCommand([number + ""]);&#13;
    };&#13;
&#13;
    presenter.validateMoveToParams = function (params) {&#13;
        if (params.length &gt; 1 ) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        var number = Number(params[0]) - 1;&#13;
&#13;
        if (isNaN(number)) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        if (number &gt; (presenter.configuration.slides.count - 1)) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        if (number &lt; 0) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        return {isValid: true, number: number};&#13;
    };&#13;
&#13;
    presenter.moveToCommand = deferredSyncQueue.decorate(function (params) {&#13;
        var validatedParams = presenter.validateMoveToParams(params);&#13;
&#13;
        if (validatedParams.isValid) {&#13;
            var previousAudioState = presenter.configuration.audioState;&#13;
            var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
            presenter.goToSlide(validatedParams.number, false);&#13;
            presenter.setTimeFromSlideIndex(validatedParams.number);&#13;
&#13;
            presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
        }&#13;
    });&#13;
&#13;
    presenter.onSlideChangeAudioStateSetting = function (previousAudioState, wasPlayed) {&#13;
        if (previousAudioState != presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.configuration.audioState = presenter.AUDIO_STATE.PAUSE;&#13;
            presenter.sendValueChangedEvent("pause");&#13;
            presenter.configuration.audio.wasPlayed = wasPlayed;&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.audioState = presenter.AUDIO_STATE.PLAY;&#13;
        presenter.sendValueChangedEvent("playing");&#13;
        presenter.configuration.audio.wasPlayed = wasPlayed;&#13;
    };&#13;
&#13;
    presenter.next = deferredSyncQueue.decorate(function () {&#13;
        var previousAudioState = presenter.configuration.audioState;&#13;
        var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
        goToNextSlide(false);&#13;
&#13;
        presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
    });&#13;
&#13;
    presenter.previous = deferredSyncQueue.decorate(function () {&#13;
        var previousAudioState = presenter.configuration.audioState;&#13;
        var wasPlayed = presenter.configuration.audio.wasPlayed;&#13;
&#13;
        goToPreviousSlide(false);&#13;
&#13;
        presenter.onSlideChangeAudioStateSetting(previousAudioState, wasPlayed);&#13;
    });&#13;
&#13;
    presenter.play = deferredSyncQueue.decorate(function () {&#13;
&#13;
        switch (presenter.configuration.audioState) {&#13;
            case presenter.AUDIO_STATE.STOP:&#13;
                presenter.switchSlideShowStopToPlay();&#13;
                presenter.readSlide(0, true);&#13;
                break;&#13;
            case presenter.AUDIO_STATE.PAUSE:&#13;
                presenter.switchSlideShowPauseToPlay();&#13;
                break;&#13;
            case presenter.AUDIO_STATE.STOP_FROM_NAVIGATION:&#13;
                presenter.sendValueChangedEvent("playing");&#13;
                if(!presenter.isPlaying) {&#13;
                    presenter.playAudioAction();&#13;
                    presenter.readSlide(0, true);&#13;
                }&#13;
                break;&#13;
        }&#13;
    });&#13;
&#13;
    presenter.pause = deferredSyncQueue.decorate(function () {&#13;
        if(presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY || presenter.isPlaying) {&#13;
            presenter.switchSlideShowPlayToPause();&#13;
        }&#13;
    });&#13;
&#13;
    presenter.stop = deferredSyncQueue.decorate(function () {&#13;
        if(presenter.configuration.audioState != presenter.AUDIO_STATE.STOP) {&#13;
            presenter.stopPresentation();&#13;
        }&#13;
    });&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(DOMElements.viewContainer).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.playAudioResource();&#13;
        }&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.configuration.audioState == presenter.AUDIO_STATE.PLAY) {&#13;
            presenter.pauseAudioResource();&#13;
        }&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.onDestroy = function () {&#13;
        if (presenter.configuration.isDomReferenceArrayComplete) {&#13;
            presenter.pauseAudioResource();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var isVisible = JSON.parse(state).isVisible;&#13;
&#13;
        presenter.setVisibility(isVisible);&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.validateAudio = function (audioArray) {&#13;
        var audio = {&#13;
            MP3: audioArray.MP3 !== "" ? audioArray.MP3 : null,&#13;
            OGG: audioArray.OGG !== "" ? audioArray.OGG : null,&#13;
            wasPlayed: false&#13;
        };&#13;
&#13;
        if (audio.MP3 === null &amp;&amp; audio.OGG === null) {&#13;
            return { isError: true, errorCode: "A_01" };&#13;
        }&#13;
&#13;
        return { isError: false, audio: audio };&#13;
    };&#13;
&#13;
    presenter.validateAnimation = function (slideAnimation, textAnimation) {&#13;
        return {&#13;
            textAnimation:textAnimation === 'True',&#13;
            slideAnimation:slideAnimation === 'True'&#13;
        };&#13;
    };&#13;
&#13;
    function returnErrorObject() {&#13;
        return { isError: true }&#13;
    }&#13;
&#13;
    // This function validates and converts timer in MM:SS format to number of seconds&#13;
    presenter.sanitizeTimer = function (timer) {&#13;
        if (!timer || timer.length === 0) {&#13;
            return returnErrorObject();&#13;
        }&#13;
&#13;
        var buzzedTimer = buzz.fromTimer(timer);&#13;
        if (typeof buzzedTimer === "string") {&#13;
            if (buzzedTimer.split(':', 1).length !== 2) {&#13;
                return returnErrorObject();&#13;
            }&#13;
&#13;
            buzzedTimer = parseInt(buzzedTimer, 10);&#13;
            if (isNaN(buzzedTimer) || buzzedTimer &lt; 0) {&#13;
                return returnErrorObject();&#13;
            }&#13;
        }&#13;
&#13;
        if (buzzedTimer &lt; 0) {&#13;
            return returnErrorObject();&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            sinitizedTimer:buzzedTimer&#13;
        };&#13;
    };&#13;
&#13;
    // If validation error occurs then one of the following error codes are returned&#13;
    // S_01 - empty image&#13;
    // S_02 - problem with start time&#13;
    // S_03 - times imposed&#13;
    presenter.validateSlides = function (slidesArray) {&#13;
        var slides = {&#13;
            count:0,&#13;
            content:[]&#13;
        };&#13;
&#13;
        for (var i = 0; i &lt; slidesArray.length; i++) {&#13;
            if (!slidesArray[i].Image || slidesArray[i].Image === "") {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_01"&#13;
                };&#13;
            }&#13;
&#13;
            var startTime = slidesArray[i].Start;&#13;
            var sanitizedTime = presenter.sanitizeTimer(startTime);&#13;
&#13;
            if (sanitizedTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_02"&#13;
                };&#13;
            }&#13;
&#13;
            if (i === 0 &amp;&amp; sanitizedTime.sinitizedTimer !== 0) {&#13;
                sanitizedTime.sinitizedTimer = 0;&#13;
            }&#13;
&#13;
            var slide = {&#13;
                image:slidesArray[i].Image,&#13;
                start:sanitizedTime.sinitizedTimer,&#13;
                audiodescription:slidesArray[i].Audiodescription&#13;
            };&#13;
&#13;
            slides.content.push(slide);&#13;
            slides.count++;&#13;
        }&#13;
&#13;
        var previousTime = slides.content[0].start;&#13;
        for (var s = 1; s &lt; slides.count; s++) {&#13;
            var nextTime = slides.content[s].start;&#13;
            if (nextTime &lt; previousTime) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"S_03"&#13;
                };&#13;
            }&#13;
            previousTime = nextTime;&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            slides:slides&#13;
        };&#13;
    };&#13;
&#13;
    // This function validates and converts number from string representation to integer value&#13;
    presenter.sanitizePosition = function (position) {&#13;
        if (!position) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        var parsedPosition = parseInt(position, 10);&#13;
        if (isNaN(parsedPosition)) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        if (parsedPosition &lt; 0) {&#13;
            return {&#13;
                isError:true&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            position:parseInt(position, 10)&#13;
        };&#13;
    };&#13;
&#13;
    // If validation error occurs then one of the following error codes are returned&#13;
    // T_01 - empty image&#13;
    // T_02 - problem with start time&#13;
    // T_03 - problem with end time&#13;
    // T_04 - times imposed&#13;
    // T_05 - top value invalid&#13;
    // T_06 - left value invalid&#13;
    // T_07 - empty text and texts count &gt; 0&#13;
    presenter.validateTexts = function (textsArray) {&#13;
        var texts = {&#13;
            count:0,&#13;
            content:[]&#13;
        };&#13;
&#13;
        for (var i = 0; i &lt; textsArray.length; i++) {&#13;
            var startTime = textsArray[i].Start;&#13;
            var endTime = textsArray[i].End;&#13;
            var topPosition = textsArray[i].Top;&#13;
            var leftPosition = textsArray[i].Left;&#13;
&#13;
            if (textsArray[i].Text == "" &amp;&amp; startTime == "" &amp;&amp; endTime == "" &amp;&amp; topPosition == "" &amp;&amp; leftPosition == "") {&#13;
                if (textsArray.length == 1) {&#13;
                    texts.content = [];&#13;
                    texts.count = 0;&#13;
                    break;&#13;
                } else {&#13;
                    return {&#13;
                        isError:true,&#13;
                        errorCode:"T_07"&#13;
                    };&#13;
                }&#13;
            }&#13;
&#13;
            if (!textsArray[i].Text || textsArray[i].Text === "") {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_01"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedStartTime = presenter.sanitizeTimer(startTime);&#13;
            if (sanitizedStartTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_02"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedEndTime = presenter.sanitizeTimer(endTime);&#13;
            if (sanitizedEndTime.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_03"&#13;
                };&#13;
            }&#13;
&#13;
            if (sanitizedStartTime.sinitizedTimer &gt; sanitizedEndTime.sinitizedTimer) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_04"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedTopPosition = presenter.sanitizePosition(topPosition);&#13;
            if (sanitizedTopPosition.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_05"&#13;
                };&#13;
            }&#13;
&#13;
            var sanitizedLeftPosition = presenter.sanitizePosition(leftPosition);&#13;
            if (sanitizedLeftPosition.isError) {&#13;
                return {&#13;
                    isError:true,&#13;
                    errorCode:"T_06"&#13;
                };&#13;
            }&#13;
&#13;
            var text = {&#13;
                text:textsArray[i].Text,&#13;
                start:sanitizedStartTime.sinitizedTimer,&#13;
                end:sanitizedEndTime.sinitizedTimer,&#13;
                top:sanitizedTopPosition.position,&#13;
                left:sanitizedLeftPosition.position&#13;
            };&#13;
&#13;
            texts.content.push(text);&#13;
            texts.count++;&#13;
        }&#13;
&#13;
        return {&#13;
            isError:false,&#13;
            texts:texts&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates string representation of integer. Only positive integer values are allowed. If both (value and default) are&#13;
     * undefined then isError property is set to true.&#13;
     *&#13;
     */&#13;
    presenter.validatePositiveInteger = function (value, defaultValue) {&#13;
        var isValueDefined = value != undefined &amp;&amp; value !== "";&#13;
        var isDefaultDefined = defaultValue != undefined &amp;&amp; !isNaN(defaultValue);&#13;
&#13;
        if (!isValueDefined &amp;&amp; !isDefaultDefined) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        if (!isValueDefined &amp;&amp; isDefaultDefined) {&#13;
            return {&#13;
                isError: false,&#13;
                value: defaultValue&#13;
            };&#13;
        }&#13;
&#13;
        var parsedSize = parseInt(value, 10);&#13;
        if (isNaN(parsedSize) || parsedSize &lt; 1) {&#13;
            return {&#13;
                isError: true&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: parsedSize&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model, isPreview) {&#13;
        var noAudio = ModelValidationUtils.validateBoolean(model["No audio"]);&#13;
		var animationValidationResult = presenter.validateAnimation(model["Slide animation"], model["Text animation"]);&#13;
&#13;
		var audioValidationResult;&#13;
		if (noAudio) {&#13;
		    audioValidationResult = {audio: {wasPlayed: false}};&#13;
        } else {&#13;
            audioValidationResult = presenter.validateAudio(model.Audio[0]);&#13;
            if (audioValidationResult.isError) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: audioValidationResult.errorCode&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        var slidesValidationResult = presenter.validateSlides(model.Slides);&#13;
        if (slidesValidationResult.isError) {&#13;
            return {&#13;
                isError:true,&#13;
                errorCode:slidesValidationResult.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var textsValidationResult = presenter.validateTexts(model.Texts);&#13;
        if (textsValidationResult.isError) {&#13;
            return {&#13;
                isError:true,&#13;
                errorCode:textsValidationResult.errorCode&#13;
            };&#13;
        }&#13;
&#13;
        var maxDurationResult = ModelValidationUtils.validateInteger(model['Presentation duration']);&#13;
        if (noAudio &amp;&amp; (!maxDurationResult.isValid || maxDurationResult.value &lt;= 0)) {&#13;
            return {isError: true, errorCode: 'N_01'};&#13;
        }&#13;
&#13;
        var showSlide = 1;&#13;
        var validatedShowSlide = presenter.validatePositiveInteger(model["Show slide"], 1);&#13;
        if (!validatedShowSlide.isError &amp;&amp; validatedShowSlide.value &lt;= slidesValidationResult.slides.count) {&#13;
            showSlide = validatedShowSlide.value;&#13;
        }&#13;
&#13;
        var isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            audio: audioValidationResult.audio,&#13;
            textAnimation: animationValidationResult.textAnimation,&#13;
            slideAnimation: animationValidationResult.slideAnimation,&#13;
            slides: slidesValidationResult.slides,&#13;
            texts: textsValidationResult.texts,&#13;
            hideProgressbar: ModelValidationUtils.validateBoolean(model["Hide progressbar"]),&#13;
            groupNextAndPrevious: ModelValidationUtils.validateBoolean(model["Group next and previous buttons"]),&#13;
            showSlide: showSlide,&#13;
            isVisibleByDefault: isVisibleByDefault,&#13;
            isVisible: isVisibleByDefault,&#13;
            addonID: model['ID'],&#13;
            noAudio: noAudio,&#13;
            maxTime: maxDurationResult.value,&#13;
            lang: model['langAttribute']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendValueChangedEvent = function slideShowAddon_sendValueChangedEvent (eventValue) {&#13;
        presenter.sendEvent({&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '',&#13;
            'value': eventValue,&#13;
            'score': ''&#13;
        }, 'ValueChanged');&#13;
    };&#13;
&#13;
    presenter.sendEvent = function slideShowAddon_sendEvent(eventData, eventType) {&#13;
        if (presenter.eventBus != null) {&#13;
            presenter.eventBus.sendEvent(eventType, eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter._internal_state = {&#13;
        deferredQueue: deferredSyncQueue&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        event.preventDefault();&#13;
        presenter.shiftPressed = event.shiftKey;&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ESC: 27,&#13;
            SPACE: 32,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40&#13;
        };&#13;
&#13;
        var leftArrowHandler = function () {&#13;
            presenter.previous();&#13;
&#13;
            presenter.readSlide(presenter.getCurrentSlideIndex(), false);&#13;
        };&#13;
&#13;
        var rightArrowHandler = function () {&#13;
            presenter.next();&#13;
            presenter.readSlide(presenter.getCurrentSlideIndex(), false);&#13;
        };&#13;
&#13;
        var spaceHandler = function () {&#13;
            if (presenter.isPlaying) {&#13;
                presenter.pause();&#13;
            } else {&#13;
                if (presenter.isSpeaking) {&#13;
                    presenter.stopSpeech();&#13;
                } else {&#13;
                    presenter.play();&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        var upArrowHandler = function () {&#13;
            if (!presenter.noAudioPlayer &amp;&amp; presenter.configuration.audioLoadComplete) {&#13;
                var volume = presenter.configuration.buzzAudio.getVolume();&#13;
                volume += 10;&#13;
                if (volume &gt; 100) {&#13;
                    volume = 100;&#13;
                }&#13;
                presenter.configuration.buzzAudio.setVolume(volume);&#13;
            }&#13;
        };&#13;
&#13;
        var downArrowHandler = function () {&#13;
            if (!presenter.noAudioPlayer &amp;&amp; presenter.configuration.audioLoadComplete) {&#13;
                var volume = presenter.configuration.buzzAudio.getVolume();&#13;
                volume -= 10;&#13;
                if (volume &lt; 0) {&#13;
                    volume = 0;&#13;
                }&#13;
                presenter.configuration.buzzAudio.setVolume(volume);&#13;
            }&#13;
        };&#13;
&#13;
        var escapeHandler = function () {&#13;
            presenter.pause();&#13;
            presenter.stopSpeech();&#13;
        };&#13;
&#13;
        var enterHandler = function () {&#13;
            if (!isWCAGOn) {&#13;
                presenter.pause();&#13;
                presenter.stopSpeech();&#13;
            }&#13;
        };&#13;
&#13;
        var mapping = {};&#13;
&#13;
        mapping[keys.ENTER] = enterHandler;&#13;
        mapping[keys.ESC] = escapeHandler;&#13;
        mapping[keys.SPACE] = spaceHandler;&#13;
        mapping[keys.ARROW_LEFT] = leftArrowHandler;&#13;
        mapping[keys.ARROW_UP] = upArrowHandler;&#13;
        mapping[keys.ARROW_RIGHT] = rightArrowHandler;&#13;
        mapping[keys.ARROW_DOWN] = downArrowHandler;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {};&#13;
    };&#13;
&#13;
    presenter.readSlide = function(index, continueAfterTTS) {&#13;
        var audiodescription = presenter.configuration.slides.content[index].audiodescription;&#13;
        if (isWCAGOn &amp;&amp; audiodescription.length &gt; 0) {&#13;
            presenter.pause();&#13;
            if (continueAfterTTS) {&#13;
                presenter.speakWithCallback(&#13;
                    [window.TTSUtils.getTextVoiceObject(&#13;
                        audiodescription,&#13;
                        presenter.configuration.lang)],&#13;
                    readSlideCallback);&#13;
            } else {&#13;
                presenter.speak([window.TTSUtils.getTextVoiceObject(&#13;
                        audiodescription,&#13;
                        presenter.configuration.lang)]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function readSlideCallback() {&#13;
        if (presenter.isSpeaking) {&#13;
            presenter.isSpeaking = false;&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.speakWithCallback = function(data, callback) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            presenter.isSpeaking = true;&#13;
            tts.speakWithCallback(data, callback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.speak = function(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            presenter.isSpeaking = false;&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopSpeech = function() {&#13;
         var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            presenter.isSpeaking = false;&#13;
            tts.speakWithCallback([window.TTSUtils.getTextVoiceObject("-")], presenter.pause);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isEnterable = function() {&#13;
        presenter.pause();&#13;
        presenter.stopSpeech();&#13;
        return false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonSlideshow_create.__supported_player_options__ = {&#13;
    interfaceVersion: 2&#13;
};&#13;
</presenter></addon>