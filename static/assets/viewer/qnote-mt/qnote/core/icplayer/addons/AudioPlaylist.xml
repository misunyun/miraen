<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="AudioPlaylist" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Items" nameLabel="AudioPlaylist_property_files" type="list">
			<property name="Name" nameLabel="AudioPlaylist_property_name" type="string"/>
			<property name="Mp3" nameLabel="AudioPlaylist_property_mp3" type="audio"/>
			<property name="Ogg" nameLabel="AudioPlaylist_property_ogg" type="audio"/>
		</property>
		<property name="Stop playing" nameLabel="AudioPlaylist_property_stop_playing" type="boolean"/>
		<property displayName="Enable audio speed controller" name="Enable audio speed controller" nameLabel="Enable_playback_speed_controls" type="boolean"/>
		<property name="langAttribute" nameLabel="AudioPlaylist_lang_attribute" type="string"/>
		<property name="speechTexts" nameLabel="AudioPlaylist_property_speech_texts" type="staticlist">

            <property name="play" nameLabel="AudioPlaylist_play" type="staticrow">
                <property name="play" nameLabel="AudioPlaylist_play" type="string"/>
            </property>

            <property name="pause" nameLabel="AudioPlaylist_pause" type="staticrow">
                <property name="pause" nameLabel="AudioPlaylist_pause" type="string"/>
            </property>

            <property name="prev" nameLabel="AudioPlaylist_prev" type="staticrow">
                <property name="prev" nameLabel="AudioPlaylist_prev" type="string"/>
            </property>

            <property name="next" nameLabel="AudioPlaylist_next" type="staticrow">
                <property name="next" nameLabel="AudioPlaylist_next" type="string"/>
            </property>

            <property name="audioSpeedController" nameLabel="AudioPlaylist_audioSpeedController" type="staticrow">
                <property name="audioSpeedController" nameLabel="AudioPlaylist_audioSpeedController" type="string"/>
            </property>

            <property name="volume" nameLabel="AudioPlaylist_volume" type="staticrow">
                <property name="volume" nameLabel="AudioPlaylist_volume" type="string"/>
            </property>

            <property name="timer" nameLabel="AudioPlaylist_timer" type="staticrow">
                <property name="timer" nameLabel="AudioPlaylist_timer" type="string"/>
            </property>

            <property name="audioItem" nameLabel="AudioPlaylist_audioItem" type="staticrow">
                <property name="audioItem" nameLabel="AudioPlaylist_audioItem" type="string"/>
            </property>
		</property>
	</model>
<css>.wrapper-addon-audio-playlist audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio-playlist {&#13;
    height: 100%;&#13;
    background-color: white;&#13;
    border-radius: 10px;&#13;
    padding: 15px;&#13;
    box-sizing: border-box;&#13;
}&#13;
&#13;
div.addon-audio-playlist-controls {&#13;
    padding: 10px 25px;&#13;
    position: relative;&#13;
    border: 1px solid black;&#13;
    border-radius: 30px;&#13;
    display: flex;&#13;
}&#13;
&#13;
.audioplayer {&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    width: 340px;&#13;
    height: 40px;&#13;
    display: table;&#13;
    padding-right: 2px;&#13;
    position: relative;&#13;
}&#13;
&#13;
button.audio-playlist-control-btn {&#13;
    width: 38px;&#13;
    height: 40px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border: 0;&#13;
    background-color: white;&#13;
}&#13;
&#13;
button.audio-playlist-next-btn {&#13;
    background-image: url('resources/audio-next-btn.png');&#13;
}&#13;
&#13;
button.audio-playlist-prev-btn {&#13;
    background-image: url('resources/audio-prev-btn.png');&#13;
}&#13;
&#13;
button.audio-playlist-play-pause-btn {&#13;
    border: solid 3px #444;&#13;
    border-radius: 30px;&#13;
}&#13;
&#13;
button.audio-playlist-play-btn {&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
}&#13;
&#13;
button.audio-playlist-pause-btn {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
.audio-playlist-volume-btn {&#13;
    background: url('resources/audio-volume-btn.png');&#13;
    margin-left: auto;&#13;
}&#13;
&#13;
div.audio-playlist-slider {&#13;
    display: flex;&#13;
    flex-grow: 1;&#13;
    flex-direction: column;&#13;
}&#13;
&#13;
.addon-audio-playlist-items-wrapper {&#13;
    height: calc(100% - 62px);&#13;
    padding: 0 25px;&#13;
    overflow-y: auto;&#13;
    scrollbar-width: thin;&#13;
    scrollbar-color: #444 #F4F5F6;&#13;
}&#13;
&#13;
.addon-audio-playlist-items-wrapper::-webkit-scrollbar {&#13;
    width: 8px;&#13;
}&#13;
.addon-audio-playlist-items-wrapper::-webkit-scrollbar-thumb {&#13;
    background-color: #444;&#13;
}&#13;
&#13;
.addon-audio-playlist-items-wrapper::-webkit-scrollbar-track {&#13;
    background: #F4F5F6;&#13;
}&#13;
&#13;
&#13;
div.addon-audio-playlist-items {&#13;
    padding: 10px;&#13;
}&#13;
&#13;
div.addon-audio-playlist-item {&#13;
    display: flex;&#13;
    border-bottom: 1px solid lightgray;&#13;
    padding: 10px;&#13;
    background-color: white;&#13;
}&#13;
&#13;
div.addon-audio-playlist-item-selected {&#13;
    background-color: #F4F5F6;&#13;
}&#13;
&#13;
span.addon-audio-playlist-item--name {&#13;
    flex-grow: 1;&#13;
    padding: 0 5px;&#13;
}&#13;
&#13;
button.addon-audio-playlist-item--button {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
    border: 1px solid gray;&#13;
    border-radius: 15px;&#13;
    background-size: 10px;&#13;
    background-color: white;&#13;
}&#13;
&#13;
button.addon-audio-playlist-item--button-playing {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
&#13;
div.audio-playlist-timer {&#13;
    font-size: 15px;&#13;
}&#13;
&#13;
.audio-volume0 {&#13;
    background-image: url('resources/volume-0.png');&#13;
}&#13;
&#13;
.audio-volume1 {&#13;
    background-image: url('resources/volume-1.png');&#13;
}&#13;
&#13;
.audio-volume2 {&#13;
    background-image: url('resources/volume-2.png');&#13;
}&#13;
&#13;
.audio-volume3 {&#13;
    background-image: url('resources/volume-3.png');&#13;
}&#13;
&#13;
.player-time {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
}&#13;
&#13;
.audio-playlist-progress-bar {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
    width: 100px;&#13;
    margin-left: 15px;&#13;
    background-color: #FFF;&#13;
    border-radius: 5px;&#13;
    flex-grow: 1;&#13;
    display: flex;&#13;
}&#13;
&#13;
.audio-playlist-slider-btn {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat;&#13;
    float: left;&#13;
    margin-left: -10px;&#13;
    margin-top: -5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
div.audio-playlist-bar {&#13;
    background-color: #BDC2C7;&#13;
    float: left;&#13;
    height: 10px;&#13;
    margin-left: 0;&#13;
    position: relative;&#13;
    width: 100%;&#13;
    border-radius: 5px;&#13;
    border: 0;&#13;
}&#13;
&#13;
div.audio-playlist-bar--fill {&#13;
    height: 10px;&#13;
    width: 0;&#13;
    background-color: #0A8DBD;&#13;
    border-radius: 5px;&#13;
}&#13;
&#13;
.addon-audio-playlist-bar--ball {&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
    background: url("resources/audio-slider-btn.png");&#13;
    width: 14px;&#13;
    height: 14px;&#13;
    background-size: contain;&#13;
    margin-top: -2px;&#13;
    margin-left: -2px;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
div.audio-playlist-max-time {&#13;
    text-align: center;&#13;
    vertical-align: middle;&#13;
    line-height: 40px;&#13;
    padding: 0 15px;&#13;
}&#13;
&#13;
.addon-audio-playlist-volume-wrapper {&#13;
    width: auto;&#13;
    display: flex;&#13;
}&#13;
&#13;
.addon-audio-playlist-volume-wrapper--expanded {&#13;
    width: 30%;&#13;
}&#13;
&#13;
.addon-audio-playlist-volume-bar--hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.addon-audio-playlist-volume-bar {&#13;
    margin: auto;&#13;
    background-color: #BDC2C7;&#13;
    height: 5px;&#13;
    margin-left: 0;&#13;
    position: relative;&#13;
    width: 100%;&#13;
    border-radius: 2px;&#13;
    border: 0;&#13;
}&#13;
&#13;
.addon-audio-playlist-volume-bar-fill {&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
    left: 1px;&#13;
    top: 0;&#13;
    bottom: 0;&#13;
    height: 5px;&#13;
    background-color: #0A8DBD;&#13;
    border-radius: 2px;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.audio-volume-control {&#13;
    position: absolute;&#13;
    width: 20px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat center;&#13;
    margin-left: -10px;&#13;
}&#13;
&#13;
.audio-speed-controller {&#13;
    float: left;&#13;
    margin-top: 10px;&#13;
    height: 30px;&#13;
    width: 60px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    background-color: inherit;&#13;
}&#13;
&#13;
.audio-speed-controller select {&#13;
    width: 100%;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
    border: 0;&#13;
    background-color: inherit;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio-playlist"&gt;&#13;
    &lt;div class="addon-audio-playlist-controls"&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-prev-btn"&gt;&lt;/button&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-play-pause-btn audio-playlist-play-btn"&gt;&lt;/button&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-next-btn"&gt;&lt;/button&gt;&#13;
        &lt;div class="audio-playlist-progress-bar"&gt;&#13;
            &lt;div class="audio-playlist-slider"&gt;&#13;
                &lt;div class="audio-playlist-timer"&gt;00:00&lt;/div&gt;&#13;
                &lt;div class="audio-playlist-bar"&gt;&#13;
                    &lt;div class="audio-playlist-bar--fill"&gt;&lt;/div&gt;&#13;
                    &lt;div class="addon-audio-playlist-bar--ball"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="audio-playlist-max-time"&gt;00:00&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="audio-speed-controller" style="display: none"&gt;&lt;/div&gt;&#13;
        &lt;div class="addon-audio-playlist-volume-wrapper"&gt;&#13;
            &lt;button class="audio-playlist-control-btn audio-playlist-volume-btn"&gt;&lt;/button&gt;&#13;
            &lt;div class="addon-audio-playlist-volume-bar addon-audio-playlist-volume-bar--hidden"&gt;&#13;
                &lt;div class="addon-audio-playlist-volume-bar-fill"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="addon-audio-playlist-items-wrapper"&gt;&#13;
        &lt;div class="addon-audio-playlist-items"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;audio&gt;&lt;/audio&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio-playlist"&gt;&#13;
    &lt;div class="addon-audio-playlist-controls"&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-prev-btn"&gt;&lt;/button&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-play-pause-btn audio-playlist-play-btn"&gt;&lt;/button&gt;&#13;
        &lt;button class="audio-playlist-control-btn audio-playlist-next-btn"&gt;&lt;/button&gt;&#13;
        &lt;div class="audio-playlist-progress-bar"&gt;&#13;
            &lt;div class="audio-playlist-slider"&gt;&#13;
                &lt;div class="audio-playlist-timer"&gt;00:00&lt;/div&gt;&#13;
                &lt;div class="audio-playlist-bar"&gt;&#13;
                    &lt;div class="audio-playlist-bar--fill" style="width: 50%"&gt;&lt;/div&gt;&#13;
                    &lt;div class="addon-audio-playlist-bar--ball"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="audio-playlist-max-time"&gt;00:00&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="audio-speed-controller" style="display: none"&gt;&lt;/div&gt;&#13;
        &lt;div class="addon-audio-playlist-volume-wrapper"&gt;&#13;
            &lt;button class="audio-playlist-control-btn audio-playlist-volume-btn"&gt;&lt;/button&gt;&#13;
            &lt;div class="addon-audio-playlist-volume-bar addon-audio-playlist-volume-bar--hidden"&gt;&#13;
                &lt;div class="addon-audio-playlist-volume-bar-fill"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="addon-audio-playlist-items-wrapper"&gt;&#13;
        &lt;div class="addon-audio-playlist-items"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAudioPlaylist_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var eventBus;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ID_STR01': "Value provided to text property is empty.",&#13;
        'ID_STR02': "Value provided to text property is not a valid string.",&#13;
        'Is Visible_UMF01': "Is Visible cannot be found.",&#13;
        'Stop playing_UMF01': "Stop playing could not be found",&#13;
        'items|name_STR01': "Value provided to name property of the item is empty."&#13;
    };&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        PLAY: "Play button",&#13;
        PAUSE: "Pause button",&#13;
        PREVIOUS_AUDIO: "Previous audio",&#13;
        NEXT_AUDIO: "Next audio",&#13;
        AUDIO_SPEED_CONTROLLER: "Audio speed controller",&#13;
        VOLUME: "Volume level",&#13;
        TIMER: "Time",&#13;
        AUDIO_ITEM: "Audio item"&#13;
    };&#13;
&#13;
    presenter.NAVIGATION_ELEMENT = {&#13;
        PLAY: "Play",&#13;
        PAUSE: "Pause",&#13;
        PREVIOUS_AUDIO: "PreviousAudio",&#13;
        NEXT_AUDIO: "NextAudio",&#13;
        AUDIO_SPEED_CONTROLLER: "AudioSpeedController",&#13;
        VOLUME: "Volume",&#13;
        TIMER: "Timer",&#13;
        AUDIO_ITEM: "AudioItem"&#13;
    };&#13;
&#13;
&#13;
    var classList = {&#13;
        addonWrapper: 'wrapper-addon-audio-playlist',&#13;
        controls: 'addon-audio-playlist-controls',&#13;
        prev: 'audio-playlist-prev-btn',&#13;
        next: 'audio-playlist-next-btn',&#13;
        playPauseButton: 'audio-playlist-play-pause-btn',&#13;
        playButton: 'audio-playlist-play-btn',&#13;
        pauseButton: 'audio-playlist-pause-btn',&#13;
        timer: 'audio-playlist-timer',&#13;
        bar: 'audio-playlist-bar',&#13;
        barFilling: 'audio-playlist-bar--fill',&#13;
        barBall: 'addon-audio-playlist-bar--ball',&#13;
        duration: 'audio-playlist-max-time',&#13;
        volume: 'audio-playlist-volume-btn',&#13;
        items: 'addon-audio-playlist-items',&#13;
        item: 'addon-audio-playlist-item',&#13;
        itemName: 'addon-audio-playlist-item--name',&#13;
        itemSelected: 'addon-audio-playlist-item-selected',&#13;
        itemButton: 'addon-audio-playlist-item--button',&#13;
        itemPlay: 'addon-audio-playlist-item--button-playing',&#13;
        volumeWrapper: 'addon-audio-playlist-volume-wrapper',&#13;
        volumeWrapperExpanded: 'addon-audio-playlist-volume-wrapper--expanded',&#13;
        volumeBar: 'addon-audio-playlist-volume-bar',&#13;
        volumeBarHidden: 'addon-audio-playlist-volume-bar--hidden',&#13;
        volumeBarFill: 'addon-audio-playlist-volume-bar-fill',&#13;
        audioSpeedController: 'audio-speed-controller'&#13;
    };&#13;
&#13;
    var eventNames = {&#13;
        playing: "playing",&#13;
        pause: "pause",&#13;
        end: "end",&#13;
        next: "next"&#13;
    };&#13;
    var operationType = {&#13;
        increase: 'increase',&#13;
        decrease: 'decrease'&#13;
    }&#13;
    var playbackRateList = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0];&#13;
&#13;
    presenter.playbackRate = 1.0;&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.wrapper = null;&#13;
    presenter.viewItems = {&#13;
        prevButton: null,&#13;
        nextButton: null,&#13;
        playPauseButton: null,&#13;
        currentTime: null,&#13;
        timerBar: null,&#13;
        timerSlider: null,&#13;
        timerSliderBall: null,&#13;
        maxTime: null,&#13;
        volumeButton: null,&#13;
        items: null,&#13;
        volumeWrapper: null,&#13;
        volumeBar: null,&#13;
        volumeBarFill: null,&#13;
        audioSpeedController: null&#13;
    };&#13;
    presenter.keyboardControllerObject = null;&#13;
    presenter.selectedElement = null;&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.speechTexts = null;&#13;
&#13;
    presenter.dragData = {&#13;
        wasPlaying: false,&#13;
        started: false,&#13;
        position: 0&#13;
    };&#13;
&#13;
    presenter.items = []; // items in the playlist&#13;
&#13;
    presenter.state = {&#13;
        isVisible: false,&#13;
        isPlaying: false,&#13;
        currentItemIndex: 0,&#13;
        sentTime: "00:00",&#13;
        showingVolume: false&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonAudioPlaylist_setPlayerController(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function AddonAudioPlaylist_run(view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonAudioPlaylist_createPreview(view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonAudioPlaylist_initialize(view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.view = view;&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
        presenter.setSpeechTexts(model["speechTexts"]);&#13;
        this.assignViewItems(view);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            presenter.showValidationError(validatedModel);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = validatedModel.value;&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
&#13;
        presenter.createItems();&#13;
        if (!isPreview) {&#13;
            presenter.audio = presenter.view.getElementsByTagName("audio")[0];&#13;
            presenter.addHandlers();&#13;
&#13;
            if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
                presenter.viewItems.volumeButton.style.visibility = "hidden";&#13;
            }&#13;
        }&#13;
&#13;
        updateBallPosition();&#13;
        presenter.selectItem(this.state.currentItemIndex);&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradePlaybackSpeedControls(model);&#13;
        upgradedModel = presenter.upgradeLangAttribute(upgradedModel);&#13;
        upgradedModel = presenter.upgradeSpeechText(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradePlaybackSpeedControls = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('Enable audio speed controller')) {&#13;
            upgradedModel['Enable audio speed controller'] = 'False';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeLangAttribute = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('langAttribute')) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeSpeechText = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('speechTexts')) {&#13;
            upgradedModel['speechTexts'] = {};&#13;
        }&#13;
&#13;
        var speechTextProperties = ['play', 'pause', 'prev', 'next', 'audioSpeedController', 'volume', 'timer', 'audioItem'];&#13;
        speechTextProperties.forEach((propertyName) =&gt; {&#13;
            if (!upgradedModel['speechTexts'].hasOwnProperty(propertyName)) {&#13;
                var property = {};&#13;
                property[propertyName] = "";&#13;
                upgradedModel['speechTexts'][propertyName] = property;&#13;
            }&#13;
        });&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.getViewItemsWithClickAndTouchHandlers = function AddonAudioPlaylist_getViewItemsWithClickAndTouchHandlers() {&#13;
        return [&#13;
            { item: presenter.viewItems.playPauseButton, handler: AddonAudioPlaylist__playPauseButtonHandler },&#13;
            { item: presenter.viewItems.prevButton, handler: AddonAudioPlaylist__prevButtonHandler },&#13;
            { item: presenter.viewItems.nextButton, handler: AddonAudioPlaylist__nextButtonHandler },&#13;
            { item: presenter.viewItems.volumeButton, handler: AddonAudioPlaylist__volumeButtonHandler },&#13;
            { item: presenter.viewItems.volumeBar, handler: AddonAudioPlaylist__volumeBarHandler }&#13;
        ];&#13;
    };&#13;
&#13;
    presenter.getAudioHandlers = function AddonAudioPlaylist_getAudioHandlers() {&#13;
        return [&#13;
            { event: 'loadeddata', handler: AddonAudioPlaylist__onLoadedMetadataCallback },&#13;
            { event: 'durationchange', handler: AddonAudioPlaylist__onTimeDurationLoadedCallback },&#13;
            { event: 'timeupdate', handler: AddonAudioPlaylist__onTimeUpdateCallback },&#13;
            { event: 'ended', handler: AddonAudioPlaylist___onAudioEnded },&#13;
            { event: 'playing', handler: AddonAudioPlaylist___onAudioPlaying },&#13;
            { event: 'pause', handler: AddonAudioPlaylist___onAudioPause }&#13;
        ]&#13;
    };&#13;
&#13;
    presenter.initKeyboardNavigationHandlers = function AddonPlaylist_initKeyboardNavigationHandlers() {&#13;
        presenter.keyboardControllerObject.mapping[KeyboardControllerKeys.ARROW_LEFT] = presenter.keyboardControllerObject.left;&#13;
        presenter.keyboardControllerObject.mapping[KeyboardControllerKeys.ARROW_RIGHT] = presenter.keyboardControllerObject.right;&#13;
        presenter.keyboardControllerObject.mapping[KeyboardControllerKeys.ARROW_UP] = presenter.keyboardControllerObject.up;&#13;
        presenter.keyboardControllerObject.mapping[KeyboardControllerKeys.ARROW_DOWN] = presenter.keyboardControllerObject.down;&#13;
        presenter.keyboardControllerObject.mapping[KeyboardControllerKeys.TAB] = presenter.keyboardControllerObject.tab;&#13;
    }&#13;
&#13;
    presenter.buildKeyboardController = function AddonAudioPlaylist_buildKeyboardController() {&#13;
        var elements = [];&#13;
        presenter.getViewItemsWithClickAndTouchHandlers().forEach(function (item) {&#13;
            if (!item.item.className.includes('volume-bar')) {&#13;
                elements.push($(item.item));&#13;
            }&#13;
        });&#13;
&#13;
        elements.splice(3, 0, $(presenter.viewItems.timerBar));&#13;
&#13;
        if(presenter.configuration.enableAudioSpeedController) {&#13;
            elements.splice(4, 0, $(presenter.viewItems.audioSpeedController));&#13;
        }&#13;
&#13;
        presenter.items.forEach((audio) =&gt; {&#13;
            elements.push($(audio.row));&#13;
        })&#13;
&#13;
        presenter.keyboardControllerObject = new AudioPlaylistKeyboardController(elements);&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
&#13;
        presenter.initKeyboardNavigationHandlers();&#13;
    }&#13;
&#13;
    function AudioPlaylistKeyboardController(elements) {&#13;
        KeyboardController.call(this, elements, elements.length);&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    AudioPlaylistKeyboardController.prototype.constructor = AudioPlaylistKeyboardController;&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.tab = function (event) {&#13;
        this.closeVolumeBar();&#13;
        KeyboardController.prototype.nextElement.call(this, event);&#13;
        presenter.selectedElement = null;&#13;
        this.readCurrentElement();&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.closeVolumeBar = function () {&#13;
        const isVolumeBarClosed = presenter.viewItems.volumeBar.classList.contains(classList.volumeBarHidden);&#13;
        const isVolumeElementSelected = presenter.selectedElement === presenter.NAVIGATION_ELEMENT.VOLUME;&#13;
        if (isVolumeElementSelected &amp;&amp; !isVolumeBarClosed) {&#13;
            this.keyboardNavigationCurrentElement[0].click();&#13;
        }&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.previousElement = function (event) {&#13;
        this.closeVolumeBar();&#13;
        KeyboardController.prototype.previousElement.call(this, event);&#13;
        presenter.selectedElement = null;&#13;
        this.readCurrentElement();&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.enter = function (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.select = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.VOLUME) return;&#13;
&#13;
        var self = this;&#13;
        var promise = new Promise(function (resolve) {&#13;
                resolve(presenter.selectElement(self.keyboardNavigationCurrentElement[0]));&#13;
            });&#13;
        promise.then(function () {&#13;
            if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.AUDIO_ITEM) {&#13;
                self.keyboardNavigationCurrentElement[0].firstChild.click();&#13;
            } else {&#13;
                self.keyboardNavigationCurrentElement[0].click();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.up = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.AUDIO_SPEED_CONTROLLER) {&#13;
            presenter.changePlaybackRate(operationType.increase);&#13;
        } else if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.VOLUME) {&#13;
            presenter.changeVolume(operationType.increase);&#13;
        }&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.down = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.AUDIO_SPEED_CONTROLLER) {&#13;
            presenter.changePlaybackRate(operationType.decrease);&#13;
        } else if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.VOLUME) {&#13;
            presenter.changeVolume(operationType.decrease);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.changeVolume = function (type) {&#13;
        var volume = presenter.audio.volume;&#13;
&#13;
        switch (type) {&#13;
            case operationType.increase:&#13;
                volume += 0.1;&#13;
                if (volume &gt; 1.0) volume = 1.0;&#13;
                break;&#13;
            case operationType.decrease:&#13;
                volume -= 0.1;&#13;
                if (volume &lt; 0.0) volume = 0.0;&#13;
                break;&#13;
        }&#13;
&#13;
        presenter.audio.volume = volume;&#13;
        var percent = Math.round(volume * 100);&#13;
        presenter.viewItems.volumeBarFill.style.width = `${percent}%`;&#13;
    }&#13;
&#13;
    presenter.changePlaybackRate = function (type) {&#13;
        var index = playbackRateList.indexOf(presenter.playbackRate);&#13;
        var $select = $(presenter.viewItems.audioSpeedController).find('select');&#13;
&#13;
        switch (type) {&#13;
            case operationType.increase:&#13;
                if (index === (playbackRateList.length - 1)) return;&#13;
                index++;&#13;
                break;&#13;
            case operationType.decrease:&#13;
                if (index === 0) return;&#13;
                index--;&#13;
                break;&#13;
        }&#13;
&#13;
        $select.val(playbackRateList[index]);&#13;
        presenter.playbackRate = playbackRateList[index];&#13;
        presenter.audio.playbackRate = presenter.playbackRate&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.left = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.TIMER) {&#13;
            presenter.audio.currentTime -= 5;&#13;
        }&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.right = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.selectedElement === presenter.NAVIGATION_ELEMENT.TIMER) {&#13;
            presenter.audio.currentTime += 5;&#13;
        }&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.escape = function (event) {&#13;
        presenter.pause();&#13;
        this.closeVolumeBar();&#13;
&#13;
        if (!presenter.audio) presenter.audio.currentTime = 0;&#13;
        presenter.selectedElement = null;&#13;
&#13;
        KeyboardController.prototype.escape.call(this, event);&#13;
    }&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.exitWCAGMode = function (event) {&#13;
        this.closeVolumeBar();&#13;
        presenter.selectedElement = null;&#13;
&#13;
        KeyboardController.prototype.exitWCAGMode.call(this, event);&#13;
    }&#13;
&#13;
    presenter.getCurrentElement = function(elementHTML) {&#13;
        var elementHTML = elementHTML.outerHTML;&#13;
        switch (true) {&#13;
            case (elementHTML.includes(classList.playPauseButton) &amp;&amp; !presenter.state.isPlaying):&#13;
                return presenter.NAVIGATION_ELEMENT.PLAY;&#13;
            case (elementHTML.includes(classList.playPauseButton &amp;&amp; presenter.state.isPlaying)):&#13;
                return presenter.NAVIGATION_ELEMENT.PAUSE;&#13;
            case (elementHTML.includes(classList.prev)):&#13;
                return presenter.NAVIGATION_ELEMENT.PREVIOUS_AUDIO;&#13;
            case (elementHTML.includes(classList.next)):&#13;
                return presenter.NAVIGATION_ELEMENT.NEXT_AUDIO;&#13;
            case (elementHTML.includes(classList.volume)):&#13;
                return presenter.NAVIGATION_ELEMENT.VOLUME;&#13;
            case (elementHTML.includes(classList.audioSpeedController)):&#13;
                return presenter.NAVIGATION_ELEMENT.AUDIO_SPEED_CONTROLLER;&#13;
            case (elementHTML.includes(classList.bar)):&#13;
                return presenter.NAVIGATION_ELEMENT.TIMER;&#13;
            case (elementHTML.includes(classList.item)):&#13;
                return presenter.NAVIGATION_ELEMENT.AUDIO_ITEM;&#13;
            default:&#13;
                return null;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.selectElement = function (elementHTML) {&#13;
        presenter.selectedElement = presenter.getCurrentElement(elementHTML);&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.keyboardController = function (keycode, isShift, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShift, event);&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function () {&#13;
        if (presenter.playerController) {&#13;
            return presenter.playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    }&#13;
&#13;
    presenter.speak = function (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull();&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    AudioPlaylistKeyboardController.prototype.readCurrentElement = function () {&#13;
        if (!presenter.isWCAGOn) return;&#13;
&#13;
        var $element = this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
        var textToRead = presenter.getTextToRead($element);&#13;
&#13;
        presenter.speak(textToRead);&#13;
    }&#13;
&#13;
    presenter.getTextToRead = function ($element) {&#13;
        var currentElement = presenter.getCurrentElement($element[0]);&#13;
        var textToRead = presenter.speechTexts[currentElement];&#13;
&#13;
        if (currentElement === presenter.NAVIGATION_ELEMENT.AUDIO_ITEM) {&#13;
            var audioTitle = getAudioTitle($element);&#13;
            textToRead = `${presenter.getAudioIndex(audioTitle) + 1} ${textToRead}`;&#13;
            return [TTSUtils.getTextVoiceObject(textToRead), TTSUtils.getTextVoiceObject(audioTitle, presenter.configuration.langAttribute)];&#13;
        }&#13;
        return [TTSUtils.getTextVoiceObject(textToRead)];&#13;
    }&#13;
&#13;
    function getAudioTitle($element) {&#13;
        return $element[0].innerText.split(/\n/)[0];&#13;
    }&#13;
&#13;
    presenter.getAudioIndex = function (audioTitle) {&#13;
        for(var i = 0; i &lt; presenter.items.length; i++) {&#13;
            if (presenter.items[i].name === audioTitle) {&#13;
                return presenter.items[i].index;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.destroy = function AddonAudioPlaylist_destroy() {&#13;
        presenter.playerController = null;&#13;
        var i;&#13;
&#13;
        var elements = presenter.getViewItemsWithClickAndTouchHandlers();&#13;
&#13;
        for (i = 0; i &lt; elements.length; i++) {&#13;
            elements[i].item.removeEventListener('click', elements[i].handler);&#13;
            elements[i].item.removeEventListener('touch', elements[i].handler);&#13;
        }&#13;
&#13;
        elements = presenter.getAudioHandlers();&#13;
&#13;
        for (i = 0; i &lt; elements.length; i++) {&#13;
            presenter.audio.removeEventListener(elements[i].event, elements[i].handler);&#13;
        }&#13;
&#13;
        presenter.pause();&#13;
        presenter.audio = null;&#13;
&#13;
        for (i = 0; i &lt; presenter.items.length; i++) {&#13;
            presenter.items[i].button.removeEventListener('durationchange', AddonAudioPlaylistItemWrapper__buttonHandler);&#13;
&#13;
            if (presenter.items[i].audio) {&#13;
                presenter.items[i].audio.removeEventListener('durationchange', AddonAudioPlaylistItemWrapper__audioDurationChange);&#13;
                presenter.items[i].audio = null;&#13;
            }&#13;
        }&#13;
&#13;
        deferredSyncQueue = null;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function AddonAudioPlaylist_onEventReceived(eventName, eventData) {    };&#13;
&#13;
&#13;
    presenter.show = function AddonAudioPlaylist_show() {&#13;
        this.setVisibility(true);&#13;
        this.state.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function AddonAudioPlaylist_hide() {&#13;
        this.stop();&#13;
        this.setVisibility(false);&#13;
        this.state.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function AddonAudioPlaylist_reset() {&#13;
        if (!presenter.audio) return;&#13;
&#13;
        presenter.pause();&#13;
&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
        if (presenter.state.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * @return {string}&#13;
     */&#13;
    presenter.getState = function AddonAudioPlaylist_getState() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.state.isVisible,&#13;
            currentItemIndex: presenter.state.currentItemIndex&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonAudioPlaylist_setState(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.stop();&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        if (state.isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hideAddon();&#13;
        }&#13;
&#13;
        presenter.changeItem(state.currentItemIndex, false);&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonAudioPlaylist_validateModel(model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        return modelValidator.validate(model, [&#13;
            ModelValidators.String("ID"),&#13;
            ModelValidators.utils.FieldRename(&#13;
                "Is Visible", "isVisible", ModelValidators.Boolean("isVisible")&#13;
            ),&#13;
            ModelValidators.utils.FieldRename(&#13;
                "Items",&#13;
                "items",&#13;
                ModelValidators.List("items", [&#13;
                    ModelValidators.utils.FieldRename("Name", "name", ModelValidators.String("name")),&#13;
                    ModelValidators.utils.FieldRename("Mp3", "mp3", ModelValidators.String("mp3", {default: ""})),&#13;
                    ModelValidators.utils.FieldRename("Ogg", "ogg", ModelValidators.String("ogg", {default: ""}))&#13;
                ])&#13;
            ),&#13;
            ModelValidators.utils.FieldRename("Stop playing", "stopPlaying", ModelValidators.Boolean("stopPlaying")),&#13;
            ModelValidators.utils.FieldRename("Enable audio speed controller", "enableAudioSpeedController",&#13;
                ModelValidators.Boolean("enableAudioSpeedController", {default: false})),&#13;
            ModelValidators.String("langAttribute", {&#13;
                trim: true,&#13;
                default: ""&#13;
            })&#13;
        ]);&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function (speechText) {&#13;
        presenter.speechTexts = {&#13;
            Play: presenter.DEFAULT_TTS_PHRASES.PLAY,&#13;
            Pause: presenter.DEFAULT_TTS_PHRASES.PAUSE,&#13;
            PreviousAudio: presenter.DEFAULT_TTS_PHRASES.PREVIOUS_AUDIO,&#13;
            NextAudio: presenter.DEFAULT_TTS_PHRASES.NEXT_AUDIO,&#13;
            AudioSpeedController: presenter.DEFAULT_TTS_PHRASES.AUDIO_SPEED_CONTROLLER,&#13;
            Volume: presenter.DEFAULT_TTS_PHRASES.VOLUME,&#13;
            Timer: presenter.DEFAULT_TTS_PHRASES.TIMER,&#13;
            AudioItem: presenter.DEFAULT_TTS_PHRASES.AUDIO_ITEM&#13;
        };&#13;
&#13;
        if(!speechText) return;&#13;
&#13;
        presenter.speechTexts = {&#13;
            Play: TTSUtils.getSpeechTextProperty(&#13;
                speechText.play.play,&#13;
                presenter.speechTexts.Play),&#13;
            Pause: TTSUtils.getSpeechTextProperty(&#13;
                speechText.pause.pause,&#13;
                presenter.speechTexts.Pause),&#13;
            PreviousAudio: TTSUtils.getSpeechTextProperty(&#13;
                speechText.prev.prev,&#13;
                presenter.speechTexts.PreviousAudio),&#13;
            NextAudio: TTSUtils.getSpeechTextProperty(&#13;
                speechText.next.next,&#13;
                presenter.speechTexts.NextAudio),&#13;
            AudioSpeedController: TTSUtils.getSpeechTextProperty(&#13;
                speechText.audioSpeedController.audioSpeedController,&#13;
                presenter.speechTexts.AudioSpeedController),&#13;
            Volume: TTSUtils.getSpeechTextProperty(&#13;
                speechText.volume.volume,&#13;
                presenter.speechTexts.Volume),&#13;
            Timer: TTSUtils.getSpeechTextProperty(&#13;
                speechText.timer.timer,&#13;
                presenter.speechTexts.Timer),&#13;
            AudioItem: TTSUtils.getSpeechTextProperty(&#13;
                speechText.audioItem.audioItem,&#13;
                presenter.speechTexts.AudioItem)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonAudioPlaylist_executeCommand(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'pause': presenter.pause,&#13;
            'stop': presenter.stop,&#13;
            'jumpTo': presenter.changeItem,&#13;
            'previous': presenter.prev,&#13;
            'next': presenter.next,&#13;
            'setPlaybackRate': presenter.setPlaybackRate&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonAudioPlaylist_setVisibility(isVisible) {&#13;
        presenter.view.style.visibility = isVisible ? "visible" : "hidden";&#13;
    };&#13;
&#13;
    presenter.play = function () {&#13;
        if (!presenter.audio) return;&#13;
        if (presenter.audio.src &amp;&amp; presenter.audio.paused) {&#13;
            presenter.audio.play();&#13;
            presenter.viewItems.playPauseButton.classList.remove(classList.playButton);&#13;
            presenter.viewItems.playPauseButton.classList.add(classList.pauseButton);&#13;
            presenter.items[presenter.state.currentItemIndex].button.classList.add(classList.itemPlay);&#13;
            presenter.state.isPlaying = true;&#13;
            presenter.audio.playbackRate = presenter.playbackRate;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function AddonAudioPlaylist_pause() {&#13;
        if (!presenter.audio) return;&#13;
        if (presenter.audio.readyState &gt; 0) {&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.audio.pause();&#13;
            }&#13;
&#13;
            presenter.viewItems.playPauseButton.classList.add(classList.playButton);&#13;
            presenter.viewItems.playPauseButton.classList.remove(classList.pauseButton);&#13;
            presenter.items[presenter.state.currentItemIndex].button.classList.remove(classList.itemPlay);&#13;
&#13;
            presenter.state.isPlaying = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function AddonAudioPlaylist_stop() {&#13;
        if (!presenter.audio) return;&#13;
        if (presenter.audio.readyState &gt; 0) {&#13;
            presenter.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlaybackRate = function (value) {&#13;
        if (!presenter.audio) return;&#13;
        if (isNaN(value)) return;&#13;
        var parsedValue = parseFloat(value);&#13;
        presenter.playbackRate = parsedValue;&#13;
        presenter.audio.playbackRate = parsedValue;&#13;
        displayPlaybackRate();&#13;
    };&#13;
&#13;
    presenter.assignViewItems = function (view) {&#13;
        presenter.wrapper = view.getElementsByClassName(classList.addonWrapper)[0];&#13;
        presenter.viewItems = {&#13;
            mainController: view.getElementsByClassName(classList.controls)[0],&#13;
            prevButton: view.getElementsByClassName(classList.prev)[0],&#13;
            nextButton: view.getElementsByClassName(classList.next)[0],&#13;
            playPauseButton: view.getElementsByClassName(classList.playPauseButton)[0],&#13;
            currentTime: view.getElementsByClassName(classList.timer)[0],&#13;
            timerBar: view.getElementsByClassName(classList.bar)[0],&#13;
            timerSlider: view.getElementsByClassName(classList.barFilling)[0],&#13;
            timerSliderBall: view.getElementsByClassName(classList.barBall)[0],&#13;
            maxTime: view.getElementsByClassName(classList.duration)[0],&#13;
            volumeButton: view.getElementsByClassName(classList.volume)[0],&#13;
            items: view.getElementsByClassName(classList.items)[0],&#13;
            volumeWrapper: view.getElementsByClassName(classList.volumeWrapper)[0],&#13;
            volumeBar: view.getElementsByClassName(classList.volumeBar)[0],&#13;
            volumeBarFill: view.getElementsByClassName(classList.volumeBarFill)[0],&#13;
            audioSpeedController: view.getElementsByClassName(classList.audioSpeedController)[0]&#13;
        };&#13;
    };&#13;
&#13;
    function createPlaybackRateSelectElement() {&#13;
        var $select = $('&lt;select&gt;');&#13;
        for (var i = 0; i &lt; playbackRateList.length; i++) {&#13;
            var $option = $('&lt;option&gt;');&#13;
            $option.text(playbackRateList[i]);&#13;
            $option.attr('value', playbackRateList[i]);&#13;
            if (playbackRateList[i] === 1.0) {&#13;
                $option.attr('selected', 'selected');&#13;
            }&#13;
            $select.append($option);&#13;
        }&#13;
&#13;
        $select.on('change', function(){&#13;
            presenter.setPlaybackRate($select.val());&#13;
        })&#13;
&#13;
        $(presenter.viewItems.audioSpeedController).append($select);&#13;
    }&#13;
&#13;
    function displayPlaybackRate () {&#13;
        $(presenter.viewItems.audioSpeedController).css('display', 'block');&#13;
&#13;
        var $select = $(presenter.viewItems.audioSpeedController).find('select');&#13;
        if ($select.val() === presenter.playbackRate) {&#13;
            if (playbackRateList.indexOf(presenter.playbackRate) !== -1) {&#13;
                $select.find('.custom-option').remove();&#13;
            }&#13;
            return;&#13;
        }&#13;
        $select.find('.custom-option').remove();&#13;
        if (playbackRateList.indexOf(presenter.playbackRate) !== -1) {&#13;
            $select.val(presenter.playbackRate);&#13;
        } else {&#13;
            var $customOption = $('&lt;option&gt;');&#13;
            $customOption.text(presenter.playbackRate);&#13;
            $customOption.attr('value', presenter.playbackRate);&#13;
            $customOption.addClass('custom-option');&#13;
            $select.append($customOption);&#13;
            $select.val(presenter.playbackRate);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showValidationError = function AddonAudioPlaylist_showValidationError(errorModel) {&#13;
        presenter.viewItems.mainController.style.visibility = "hidden";&#13;
        presenter.viewItems.items.style.visibility = "visible";&#13;
        DOMOperationsUtils.showErrorMessage(presenter.viewItems.items, presenter.ERROR_CODES, errorModel.fieldName.join("|") + "_" + errorModel.errorCode);&#13;
    };&#13;
&#13;
    presenter.createItems = function AddonAudioPlaylist_createItems() {&#13;
        presenter.items = presenter.configuration.items.map(function (item, index) {&#13;
            return new AddonAudioPlaylistItemWrapper(item, index);&#13;
        });&#13;
&#13;
        presenter.items.forEach(function (item) {&#13;
            presenter.viewItems.items.appendChild(item.row);&#13;
        });&#13;
&#13;
        if (presenter.configuration.enableAudioSpeedController) {&#13;
            createPlaybackRateSelectElement();&#13;
            displayPlaybackRate();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.selectItem = function AddonAudioPlaylist_selectItem(index) {&#13;
        if (index &lt; 0 || index &gt; this.items.length - 1) {&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.pause();&#13;
        presenter.items[presenter.state.currentItemIndex].row.classList.remove(classList.itemSelected);&#13;
        presenter.items[presenter.state.currentItemIndex].button.classList.remove(classList.itemPlay);&#13;
&#13;
        presenter.state.currentItemIndex = index;&#13;
        if (presenter.audio) {&#13;
            presenter.audio.src = this.items[presenter.state.currentItemIndex].src;&#13;
        }&#13;
        presenter.items[presenter.state.currentItemIndex].row.classList.add(classList.itemSelected);&#13;
        presenter.sendEvent(&#13;
        "ValueChanged",&#13;
        {&#13;
            value: eventNames.next,&#13;
            item: presenter.state.currentItemIndex,&#13;
            source: presenter.configuration.ID,&#13;
            score: ""&#13;
        });&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.changeItem = function AddonAudioPlaylist_changeItem(index, startPlaying = true) {&#13;
        var wasSelected = presenter.selectItem(index);&#13;
&#13;
        if (wasSelected &amp;&amp; !presenter.configuration.stopPlaying &amp;&amp; startPlaying) {&#13;
            presenter.play();&#13;
        }&#13;
&#13;
        return wasSelected;&#13;
    };&#13;
&#13;
    presenter.addHandlers = function AddonAudioPlaylist_addHandlers() {&#13;
        var elements = presenter.getViewItemsWithClickAndTouchHandlers();&#13;
&#13;
        for (var i = 0; i &lt; elements.length; i++) {&#13;
            elements[i].item.addEventListener('click', elements[i].handler);&#13;
            elements[i].item.addEventListener('touch', elements[i].handler);&#13;
        }&#13;
&#13;
        elements = presenter.getAudioHandlers();&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            presenter.viewItems.timerSliderBall.addEventListener('touchstart', AddonAudioPlaylist__sliderTouchDragStartHandler);&#13;
            presenter.viewItems.timerBar.addEventListener('touchmove', AddonAudioPlaylist__sliderTouchDragMoveHandler);&#13;
            presenter.viewItems.timerBar.addEventListener('touchend', AddonAudioPlaylist__sliderDragStopHandler);&#13;
        } else {&#13;
            presenter.viewItems.timerSliderBall.addEventListener('mousedown', AddonAudioPlaylist__sliderMouseDragStartHandler);&#13;
            presenter.viewItems.timerBar.addEventListener('mousemove', AddonAudioPlaylist__sliderMouseDragMoveHandler);&#13;
            presenter.viewItems.timerBar.addEventListener('mouseup', AddonAudioPlaylist__sliderDragStopHandler);&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; elements.length; i++) {&#13;
            presenter.audio.addEventListener(elements[i].event, elements[i].handler);&#13;
        }&#13;
&#13;
        // adds the audio duration&#13;
        presenter.items.forEach(function (item) {&#13;
            item.audio = document.createElement("audio");&#13;
            item.audio.addEventListener("durationchange", AddonAudioPlaylistItemWrapper__audioDurationChange.bind(item));&#13;
            item.audio.src = item.src;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.updateMainTrackDuration = function AddonAudioPlaylist_updateMainTrackDuration(duration) {&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.viewItems.maxTime.innerText = StringUtils.timeFormat(duration);&#13;
    };&#13;
&#13;
    presenter.next = function () {&#13;
        return presenter.changeItem(presenter.state.currentItemIndex + 1);&#13;
    };&#13;
&#13;
    presenter.prev = function () {&#13;
        return presenter.changeItem(presenter.state.currentItemIndex - 1);&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (name, data) {&#13;
        if (presenter.eventBus) {&#13;
            presenter.eventBus.sendEvent(name, data);&#13;
        }&#13;
    };&#13;
&#13;
    function AddonAudioPlaylist__nextButtonHandler(ev) {&#13;
        ev.preventDefault();&#13;
        presenter.next();&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__prevButtonHandler(ev) {&#13;
        ev.preventDefault();&#13;
        if (presenter.audio.readyState &gt; 0 &amp;&amp; presenter.audio.currentTime &gt; 0) {&#13;
            presenter.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        } else {&#13;
            presenter.prev();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__playPauseButtonHandler(ev) {&#13;
        ev.preventDefault();&#13;
        if (presenter.state.isPlaying) {&#13;
            presenter.pause();&#13;
        } else {&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__onTimeDurationLoadedCallback() {&#13;
        presenter.updateMainTrackDuration(presenter.audio.duration);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__onLoadedMetadataCallback() {&#13;
        AddonAudioPlaylist__onTimeUpdateCallback();&#13;
        presenter.updateMainTrackDuration(presenter.audio.duration);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__onTimeUpdateCallback() {&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        var duration = isNaN(presenter.audio.duration) ? 1 : presenter.audio.duration;&#13;
        var fillPercent = Math.round(currentTime / duration * 100);&#13;
&#13;
        var time = StringUtils.timeFormat(currentTime);&#13;
        presenter.viewItems.currentTime.innerText = time;&#13;
&#13;
        presenter.viewItems.timerSlider.style.width = fillPercent + "%";&#13;
        updateBallPosition();&#13;
&#13;
        if (time !== presenter.state.sentTime) {&#13;
            presenter.sendEvent("ValueChanged", {&#13;
                value: time,&#13;
                item: presenter.state.currentItemIndex,&#13;
                source: presenter.configuration.ID,&#13;
                score: ""&#13;
            });&#13;
&#13;
            presenter.state.sentTime = time;&#13;
        }&#13;
    }&#13;
&#13;
    function updateBallPosition() {&#13;
        var halvedBallWidth = presenter.viewItems.timerSliderBall.offsetWidth / 2;&#13;
        var timerFillWidth = presenter.viewItems.timerSlider.offsetWidth;&#13;
        var ballPosition =  timerFillWidth- halvedBallWidth;&#13;
&#13;
        if (timerFillWidth &lt; halvedBallWidth) {&#13;
            ballPosition = 0;&#13;
        }&#13;
&#13;
        presenter.viewItems.timerSliderBall.style.left = ballPosition + "px";&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist___onAudioEnded() {&#13;
        presenter.pause();&#13;
&#13;
        presenter.sendEvent("ValueChanged", {&#13;
            value: eventNames.end,&#13;
            item: presenter.state.currentItemIndex,&#13;
            source: presenter.configuration.ID,&#13;
            score: ""&#13;
        });&#13;
        presenter.next();&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist___onAudioPlaying() {&#13;
        presenter.sendEvent("ValueChanged", {&#13;
            value: eventNames.playing,&#13;
            item: presenter.state.currentItemIndex,&#13;
            source: presenter.configuration.ID,&#13;
            score: ""&#13;
        });&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist___onAudioPause() {&#13;
        presenter.sendEvent("ValueChanged", {&#13;
            value: eventNames.pause,&#13;
            item: presenter.state.currentItemIndex,&#13;
            source: presenter.configuration.ID,&#13;
            score: ""&#13;
        });&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__volumeButtonHandler(ev) {&#13;
        if (presenter.state.showingVolume) {&#13;
            presenter.viewItems.volumeWrapper.classList.remove(classList.volumeWrapperExpanded);&#13;
            presenter.viewItems.volumeBar.classList.add(classList.volumeBarHidden);&#13;
        } else {&#13;
            presenter.viewItems.volumeWrapper.classList.add(classList.volumeWrapperExpanded);&#13;
            presenter.viewItems.volumeBar.classList.remove(classList.volumeBarHidden);&#13;
        }&#13;
&#13;
        presenter.state.showingVolume = !presenter.state.showingVolume;&#13;
        updateBallPosition();&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__volumeBarHandler(ev) {&#13;
        var width = presenter.viewItems.volumeBar.offsetWidth;&#13;
        var clickedWidth = ev.offsetX;&#13;
&#13;
        var value = clickedWidth / width;&#13;
        var percent = Math.round(value * 100);&#13;
        presenter.viewItems.volumeBarFill.style.width = percent + "%";&#13;
&#13;
        if (presenter.audio) {&#13;
            presenter.audio.volume = value;&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderMouseDragStartHandler(ev) {&#13;
        AddonAudioPlaylist__sliderDragStartHandler(ev.pageX);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderMouseDragMoveHandler(ev) {&#13;
        AddonAudioPlaylist__sliderDragMoveHandler(ev.pageX);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderTouchDragStartHandler(ev) {&#13;
        var pageX = ev.changedTouches ? ev.changedTouches[0].pageX : ev.pageX;&#13;
        AddonAudioPlaylist__sliderDragStartHandler(pageX || 0);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderTouchDragMoveHandler(ev) {&#13;
        var pageX = ev.changedTouches ? ev.changedTouches[0].pageX : ev.pageX;&#13;
        AddonAudioPlaylist__sliderDragMoveHandler(pageX || 0);&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderDragStartHandler(pageX) {&#13;
        presenter.dragData.wasPlaying = presenter.state.isPlaying;&#13;
        presenter.dragData.started = true;&#13;
        presenter.dragData.position = pageX;&#13;
&#13;
        presenter.pause();&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderDragMoveHandler(pageX) {&#13;
        if (!presenter.dragData.started) return;&#13;
&#13;
        var barWidth = presenter.viewItems.timerBar.offsetWidth;&#13;
&#13;
        var currentFillWidth = presenter.viewItems.timerSlider.offsetWidth;&#13;
        var change = pageX - presenter.dragData.position;&#13;
        if (currentFillWidth + change &gt;= 0 &amp;&amp; currentFillWidth + change &lt;= barWidth) {&#13;
            var percent = (currentFillWidth + change) / barWidth * 100;&#13;
            var value = currentFillWidth / barWidth;&#13;
            presenter.viewItems.timerSlider.style.width = percent + "%";&#13;
            updateBallPosition();&#13;
&#13;
            var estimatedTime = Math.round(presenter.audio.duration * value);&#13;
            presenter.viewItems.currentTime.innerText = StringUtils.timeFormat(estimatedTime);&#13;
        }&#13;
&#13;
        presenter.dragData.position = pageX;&#13;
    }&#13;
&#13;
    function AddonAudioPlaylist__sliderDragStopHandler(ev) {&#13;
        if (!presenter.dragData.started) return;&#13;
&#13;
        if (presenter.audio.readyState &gt; 0) {&#13;
            var barWidth = presenter.viewItems.timerBar.offsetWidth;&#13;
            var currentFillWidth = presenter.viewItems.timerSlider.offsetWidth;&#13;
            var percent = currentFillWidth / barWidth;&#13;
&#13;
            presenter.audio.currentTime = Math.round(presenter.audio.duration * percent);&#13;
        }&#13;
        presenter.dragData.started = false;&#13;
        if (presenter.dragData.wasPlaying) {&#13;
            presenter.play();&#13;
            presenter.dragData.wasPlaying = false;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
    Wrapper for audio item&#13;
    * */&#13;
    function AddonAudioPlaylistItemWrapper(item, index) {&#13;
        var row = document.createElement("div");&#13;
        var playButton = document.createElement("button");&#13;
        var name = document.createElement("span");&#13;
        var time = document.createElement("span");&#13;
&#13;
        row.classList.add(classList.item);&#13;
        name.classList.add(classList.itemName);&#13;
        playButton.classList.add(classList.itemButton);&#13;
        playButton.classList.add(classList.playButton);&#13;
&#13;
        row.appendChild(playButton);&#13;
        row.appendChild(name);&#13;
        row.appendChild(time);&#13;
&#13;
        name.innerText = item.name;&#13;
        time.innerText = "00:00";&#13;
&#13;
        playButton.addEventListener("click", AddonAudioPlaylistItemWrapper__buttonHandler.bind(this));&#13;
        playButton.addEventListener("touch", AddonAudioPlaylistItemWrapper__buttonHandler.bind(this));&#13;
&#13;
        this.name = item.name;&#13;
        this.src = item.mp3 || item.ogg;&#13;
        this.button = playButton;&#13;
        this.row = row;&#13;
        this.time = time;&#13;
        this.index = index;&#13;
        this.audio = null;&#13;
    }&#13;
&#13;
     function AddonAudioPlaylistItemWrapper__audioDurationChange(ev) {&#13;
        this.time.innerText = StringUtils.timeFormat(isNaN(this.audio.duration) ? 0 : this.audio.duration);&#13;
        this.audio.removeEventListener("durationchange", AddonAudioPlaylistItemWrapper__audioDurationChange);&#13;
        this.audio = null;&#13;
    }&#13;
&#13;
    function AddonAudioPlaylistItemWrapper__buttonHandler(ev) {&#13;
        ev.preventDefault();&#13;
        if (presenter.state.currentItemIndex !== this.index) {&#13;
            presenter.changeItem(this.index);&#13;
        }&#13;
        if (presenter.state.isPlaying) {&#13;
            presenter.pause();&#13;
        } else {&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonAudioPlaylist_create.__supported_player_options__ = {&#13;
    interfaceVersion: 2&#13;
};&#13;
</presenter></addon>