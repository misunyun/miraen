<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FlashCards" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
		<property displayName="Cards" name="Cards" nameLabel="FlashCards_property_Cards" type="list">
            <property displayName="Front" name="Front" nameLabel="FlashCards_property_Front" type="html"/>
            <property displayName="Back" name="Back" nameLabel="FlashCards_property_Back" type="html"/>
			<property displayName="Audio Front" name="AudioFront" nameLabel="FlashCards_property_Audio_Front" type="audio"/>
			<property displayName="Audio Back" name="AudioBack" nameLabel="FlashCards_property_Audio_Back" type="audio"/>
        </property>
        <property displayName="Disable Loop" name="NoLoop" nameLabel="FlashCards_property_Disable_Loop" type="boolean"/>
        <property displayName="Enable Favourites" name="Favourites" nameLabel="FlashCards_property_Enable_Favourites" type="boolean"/>
        <property displayName="Hide Previous and Next Buttons" name="HidePrevNext" nameLabel="FlashCards_property_Hide_Previous_and_Next_Buttons" type="boolean"/>
        <property displayName="Show Activity Buttons" name="ShowButtons" nameLabel="FlashCards_property_Show_Activity_Buttons" type="boolean"/>
        <property displayName="Is Activity" name="IsActivity" nameLabel="FlashCards_property_Is_Activity" type="boolean"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="FlashCards_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="FlashCards_property_speech_texts" type="staticlist">

            <property name="card" nameLabel="FlashCards_property_card" type="staticrow">
                <property name="card" nameLabel="FlashCards_property_card" type="string"/>
            </property>

            <property name="outOf" nameLabel="FlashCards_property_outOf" type="staticrow">
                <property name="outOf" nameLabel="FlashCards_property_outOf" type="string"/>
            </property>

            <property name="favourite" nameLabel="FlashCards_property_favourite" type="staticrow">
                <property name="favourite" nameLabel="FlashCards_property_favourite" type="string"/>
            </property>

            <property name="audio" nameLabel="FlashCards_property_audio" type="staticrow">
                <property name="audio" nameLabel="FlashCards_property_audio" type="string"/>
            </property>

            <property name="correct" nameLabel="FlashCards_property_correct" type="staticrow">
                <property name="correct" nameLabel="FlashCards_property_correct" type="string"/>
            </property>

            <property name="wrong" nameLabel="FlashCards_property_wrong" type="staticrow">
                <property name="wrong" nameLabel="FlashCards_property_wrong" type="string"/>
            </property>

            <property name="reset" nameLabel="FlashCards_property_reset" type="staticrow">
                <property name="reset" nameLabel="FlashCards_property_reset" type="string"/>
            </property>

            <property name="selected" nameLabel="FlashCards_property_selected" type="staticrow">
                <property name="selected" nameLabel="FlashCards_property_selected" type="string"/>
            </property>

            <property name="deselected" nameLabel="FlashCards_property_deselected" type="staticrow">
                <property name="deselected" nameLabel="FlashCards_property_deselected" type="string"/>
            </property>

            <property name="cardHasBeenReset" nameLabel="FlashCards_property_cardHasBeenReset" type="staticrow">
                <property name="cardHasBeenReset" nameLabel="FlashCards_property_cardHasBeenReset" type="string"/>
            </property>

            <property name="turned" nameLabel="FlashCards_property_turned" type="staticrow">
                <property name="turned" nameLabel="FlashCards_property_turned" type="string"/>
            </property>

        </property>
    </model>
<css>.flashcards-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    box-sizing: border-box;&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
}&#13;
&#13;
.flashcards-main{&#13;
    display: flex;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    perspective: 1000px;&#13;
}&#13;
&#13;
.flashcards-prev, .flashcards-next {&#13;
    display: block;&#13;
    width: 30px;&#13;
    height: 100%;&#13;
    background: #e8e8e8;&#13;
    cursor: pointer;&#13;
    border: none;&#13;
}&#13;
.flashcards-prev:disabled, .flashcards-next:disabled {&#13;
    opacity: 0.5;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.flashcards-card {&#13;
    position: relative;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.flashcards-card-audio-wrapper{&#13;
    display: none;&#13;
    position: absolute;&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    top: 40px;&#13;
    left: 10px;&#13;
}&#13;
    .flashcards-card-audio-button{&#13;
        cursor: pointer;&#13;
        width: 40px;&#13;
        height: 40px;&#13;
        border-radius: 50%;&#13;
        background-color: #017aaf;&#13;
        background-image: url(/file/serve/5957429735063552);&#13;
        background-size: 30px 30px;&#13;
        background-repeat: no-repeat;&#13;
        background-position: center center;&#13;
    }&#13;
    .flashcards-card-audio-button.playing{&#13;
        background-image: url(/file/serve/6424961084424192);&#13;
    }&#13;
    .flashcards-card-audio-button.disabled{&#13;
        cursor: pointer;&#13;
        opacity: 0.5;    &#13;
    }&#13;
&#13;
.flashcards-card.flashcards-card-reversed .flashcards-card-front{&#13;
    transform: rotateY(-180deg);&#13;
}&#13;
.flashcards-card.flashcards-card-reversed .flashcards-card-back {&#13;
    transform: rotateY(0deg);&#13;
}&#13;
&#13;
.flashcards-card-front, .flashcards-card-back {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    right: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    backface-visibility: hidden;&#13;
    transition: transform 0.5s;&#13;
    transform-style: preserve-3d;&#13;
    -webkit-backface-visibility: hidden;&#13;
}&#13;
.flashcards-card-front {&#13;
    background: #eee;&#13;
    color: black;&#13;
}&#13;
.flashcards-card-back {&#13;
    background: #d3e3f3;&#13;
    color: #000;&#13;
    transform: rotateY(180deg);&#13;
}&#13;
    .flashcards-card-contents {&#13;
        padding: 10px;&#13;
        top: 0;&#13;
        left: 0;&#13;
        right: 0;&#13;
        bottom: 50px;&#13;
        position: absolute;&#13;
        overflow-y: auto;&#13;
        cursor: pointer;&#13;
    }&#13;
    .flashcards-card-contents img {&#13;
        max-width: 100%;&#13;
    }&#13;
&#13;
.flashcards-button-favourite{&#13;
    position: absolute;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    top:0;&#13;
    right: 0;&#13;
    background: #999;&#13;
    cursor: pointer;&#13;
}&#13;
.flashcards-button-favourite.flashcards-button-selected {&#13;
    background: #83e1f7;&#13;
}&#13;
&#13;
.flashcards-buttons{&#13;
    position: absolute;&#13;
    bottom: 0px;&#13;
    width: 100%;&#13;
    height: 50px;&#13;
    background: #ddd;&#13;
    display: flex;&#13;
    cursor: pointer;&#13;
}&#13;
    .flashcards-button {&#13;
        width: 33.3333%;&#13;
        text-align: center;&#13;
        line-height: 50px;&#13;
        color: #000;&#13;
    }&#13;
    .flashcards-button.flashcards-button-selected {&#13;
        background: #83e1f7;&#13;
    }&#13;
&#13;
.flashcards-panel{&#13;
    height: 30px;&#13;
    width: 100%;&#13;
    background: #e8e8e8;&#13;
    text-align: center;&#13;
    color: #000;&#13;
    line-height: 30px;&#13;
}&#13;
</css><view>&lt;div class="flashcards-wrapper"&gt;&#13;
    &lt;div class="flashcards-main"&gt;&#13;
        &lt;div class="flashcards-prev-wrapper"&gt;&#13;
            &lt;button type="button" class="flashcards-prev"&gt;&lt;/button&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="flashcards-card"&gt;&#13;
            &lt;div class="flashcards-card-front"&gt;&#13;
                &lt;div class="flashcards-card-contents flashcards-card-contents-front"&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-card-audio-wrapper flashcards-card-audio-wrapper-front"&gt;&#13;
                    &lt;audio class="flashcards-card-audio flashcards-card-audio-front"&gt;&lt;/audio&gt;&#13;
                    &lt;div class="flashcards-card-audio-button flashcards-card-audio-button-front disabled"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="flashcards-card-back"&gt;&#13;
                &lt;div class="flashcards-card-contents flashcards-card-contents-back"&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-buttons"&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-wrong"&gt;&#13;
                        x&#13;
                    &lt;/div&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-reset"&gt;&#13;
                        o&#13;
                    &lt;/div&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-correct"&gt;&#13;
                        v&#13;
                    &lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-card-audio-wrapper flashcards-card-audio-wrapper-back"&gt;&#13;
                    &lt;audio class="flashcards-card-audio flashcards-card-audio-back"&gt;&lt;/audio&gt;&#13;
                    &lt;div class="flashcards-card-audio-button flashcards-card-audio-button-back disabled"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="flashcards-button-favourite"&gt;&lt;/div&gt;&#13;
            &lt;div class="flashcards-card-audio-wrapper flashcards-card-audio-wrapper-hidden"&gt;&#13;
                &lt;audio class="flashcards-card-audio flashcards-card-audio-hidden"&gt;&lt;/audio&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="flashcards-prev-wrapper"&gt;&#13;
            &lt;button type="button" class="flashcards-next"&gt;&lt;/button&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="flashcards-panel"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="flashcards-wrapper"&gt;&#13;
    &lt;div class="flashcards-main"&gt;&#13;
        &lt;div class="flashcards-prev-wrapper"&gt;&#13;
            &lt;button type="button" class="flashcards-prev"&gt;&lt;/button&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="flashcards-card"&gt;&#13;
            &lt;div class="flashcards-card-front"&gt;&#13;
                &lt;div class="flashcards-card-contents flashcards-card-contents-front"&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-card-audio-wrapper flashcards-card-audio-wrapper-front"&gt;&#13;
                    &lt;audio class="flashcards-card-audio flashcards-card-audio-front"&gt;&lt;/audio&gt;&#13;
                    &lt;div class="flashcards-card-audio-button flashcards-card-audio-button-front disabled"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="flashcards-card-back"&gt;&#13;
                &lt;div class="flashcards-card-contents flashcards-card-contents-back"&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-buttons"&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-wrong"&gt;&#13;
                        x&#13;
                    &lt;/div&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-reset"&gt;&#13;
                        o&#13;
                    &lt;/div&gt;&#13;
                    &lt;div class="flashcards-button flashcards-button-correct"&gt;&#13;
                        v&#13;
                    &lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
                &lt;div class="flashcards-card-audio-wrapper flashcards-card-audio-wrapper-back"&gt;&#13;
                    &lt;audio class="flashcards-card-audio flashcards-card-audio-back"&gt;&lt;/audio&gt;&#13;
                    &lt;div class="flashcards-card-audio-button flashcards-card-audio-button-back disabled"&gt;&lt;/div&gt;&#13;
                &lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="flashcards-button-favourite"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="flashcards-prev-wrapper"&gt;&#13;
            &lt;button type="button" class="flashcards-next"&gt;&lt;/button&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="flashcards-panel"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonFlashCards_create(){&#13;
&#13;
    var presenter = function () {}&#13;
&#13;
    presenter.configuration = {&#13;
        isVisible: false,&#13;
        currentCard: 1,&#13;
        noLoop: false,&#13;
        IsActivity: false,&#13;
        Favourites: false&#13;
    };&#13;
&#13;
    presenter.state = {&#13;
        isVisible: false,&#13;
        currentCard: 1,&#13;
        totalCards: 1,&#13;
        noLoop: false,&#13;
        IsActivity: false,&#13;
        Favourites: false,&#13;
        ShowOnlyFavourites: false,&#13;
        cardsScore: null,&#13;
        cardsFavourites: null&#13;
    };&#13;
&#13;
    presenter.isLoaded = false;&#13;
&#13;
    let isWCAGOn = false;&#13;
    presenter.speechTexts = {};&#13;
    let KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS = "keyboard_navigation_active_element";&#13;
&#13;
    let DEFAULT_TTS_PHRASES = {&#13;
        card: "Card",&#13;
        outOf: "out of",&#13;
        favourite: "Favourite",&#13;
        audio: "Audio",&#13;
        correct: "Correct",&#13;
        wrong: "Wrong",&#13;
        reset: "Reset",&#13;
        selected: "Selected",&#13;
        deselected: "Deselected",&#13;
        cardHasBeenReset: "Card has been reset",&#13;
        turned: "Turned"&#13;
    };&#13;
&#13;
    presenter.lastHiddenAudio = {&#13;
        cardIndex: -1,&#13;
        reverse: false&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item: item,&#13;
            value: value,&#13;
            score: score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerEvent = function (item, value, score) {&#13;
        var eventData = presenter.createEventData(item, value, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        return {&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            noLoop: ModelValidationUtils.validateBoolean(model['NoLoop']),&#13;
            Favourites: ModelValidationUtils.validateBoolean(model['Favourites']),&#13;
            HidePrevNext: ModelValidationUtils.validateBoolean(model['HidePrevNext']),&#13;
            ShowButtons: ModelValidationUtils.validateBoolean(model['ShowButtons']),&#13;
            IsActivity: ModelValidationUtils.validateBoolean(model["IsActivity"]),&#13;
            currentCard: presenter.configuration.currentCard,&#13;
            cardsScore: [],&#13;
            cardsFavourites: [],&#13;
            addonID: model['ID'],&#13;
            langTag: model['langAttribute']&#13;
        }&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeAddTTS(model);&#13;
    }&#13;
&#13;
    presenter.upgradeAddTTS = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
            upgradedModel["speechTexts"]["card"] = {card: ""};&#13;
            upgradedModel["speechTexts"]["outOf"] = {outOf: ""};&#13;
            upgradedModel["speechTexts"]["favourite"] = {favourite: ""};&#13;
            upgradedModel["speechTexts"]["audio"] = {audio: ""};&#13;
            upgradedModel["speechTexts"]["correct"] = {correct: ""};&#13;
            upgradedModel["speechTexts"]["wrong"] = {wrong: ""};&#13;
            upgradedModel["speechTexts"]["reset"] = {reset: ""};&#13;
            upgradedModel["speechTexts"]["selected"] = {selected: ""};&#13;
            upgradedModel["speechTexts"]["deselected"] = {deselected: ""};&#13;
            upgradedModel["speechTexts"]["cardHasBeenReset"] = {cardHasBeenReset: ""};&#13;
            upgradedModel["speechTexts"]["turned"] = {turned: ""};&#13;
        }&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = ""&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            card: DEFAULT_TTS_PHRASES.card,&#13;
            outOf: DEFAULT_TTS_PHRASES.outOf,&#13;
            favourite: DEFAULT_TTS_PHRASES.favourite,&#13;
            audio: DEFAULT_TTS_PHRASES.audio,&#13;
            correct: DEFAULT_TTS_PHRASES.correct,&#13;
            wrong: DEFAULT_TTS_PHRASES.wrong,&#13;
            reset: DEFAULT_TTS_PHRASES.reset,&#13;
            selected: DEFAULT_TTS_PHRASES.selected,&#13;
            deselected: DEFAULT_TTS_PHRASES.deselected,&#13;
            cardHasBeenReset: DEFAULT_TTS_PHRASES.cardHasBeenReset,&#13;
            turned: DEFAULT_TTS_PHRASES.turned&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
        presenter.speechTexts = {&#13;
            card: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.card.card,&#13;
                presenter.speechTexts.card),&#13;
            outOf: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.outOf.outOf,&#13;
                presenter.speechTexts.outOf),&#13;
            favourite: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.favourite.favourite,&#13;
                presenter.speechTexts.favourite),&#13;
            audio: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.audio.audio,&#13;
                presenter.speechTexts.audio),&#13;
            correct: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.correct.correct,&#13;
                presenter.speechTexts.correct),&#13;
            wrong: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.wrong.wrong,&#13;
                presenter.speechTexts.wrong),&#13;
            reset: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.reset.reset,&#13;
                presenter.speechTexts.reset),&#13;
            selected: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.selected.selected,&#13;
                presenter.speechTexts.selected),&#13;
            deselected: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.deselected.deselected,&#13;
                presenter.speechTexts.deselected),&#13;
            cardHasBeenReset: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.cardHasBeenReset.cardHasBeenReset,&#13;
                presenter.speechTexts.cardHasBeenReset),&#13;
            turned: window.TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.turned.turned,&#13;
                presenter.speechTexts.turned),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.init = function (view, model, isPreview) {&#13;
        model = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(model);&#13;
        presenter.configuration = validatedModel;&#13;
        presenter.isErrorMode = false;&#13;
        presenter.Cards = model.Cards;&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
        presenter.state.noLoop = presenter.configuration.noLoop;&#13;
        presenter.state.cardsScore = presenter.configuration.cardsScore;&#13;
        presenter.state.cardsFavourites = presenter.configuration.cardsFavourites;&#13;
&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.flashcardsMain = $(presenter.$view.find(".flashcards-card").get(0));&#13;
        presenter.flashcardsPrev = presenter.$view.find(".flashcards-prev");&#13;
        presenter.flashcardsNext = presenter.$view.find(".flashcards-next");&#13;
        presenter.flashcardsButtonFavourite = presenter.$view.find(".flashcards-button-favourite");&#13;
        presenter.flashcardsButtonWrong = presenter.$view.find(".flashcards-button-wrong");&#13;
        presenter.flashcardsButtonCorrect = presenter.$view.find(".flashcards-button-correct");&#13;
        presenter.flashcardsButtonReset = presenter.$view.find(".flashcards-button-reset");&#13;
        presenter.flashcardsButton = presenter.$view.find(".flashcards-button");&#13;
        presenter.flashcardsCardAudioButtonFront = presenter.$view.find(".flashcards-card-audio-button-front");&#13;
        presenter.flashcardsCardAudioButtonBack = presenter.$view.find(".flashcards-card-audio-button-back");&#13;
        presenter.audioElementBack =  presenter.$view.find(".flashcards-card-audio-back").get(0);&#13;
        presenter.audioElementFront =  presenter.$view.find(".flashcards-card-audio-front").get(0);&#13;
        presenter.audioElementHidden =  presenter.$view.find(".flashcards-card-audio-hidden").get(0);&#13;
        &#13;
        presenter.model = model;&#13;
        presenter.$card = $(presenter.$view.find(".flashcards-card").get(0));&#13;
&#13;
        $(presenter.Cards).each(function (key) {&#13;
            presenter.state.cardsScore[key] = 0;&#13;
            presenter.state.cardsFavourites[key] = false;&#13;
        });&#13;
&#13;
        presenter.state.totalCards = presenter.Cards.length;&#13;
&#13;
        if (presenter.configuration.HidePrevNext) {&#13;
            $(presenter.flashcardsPrev.get(0)).hide();&#13;
            $(presenter.flashcardsNext.get(0)).hide();&#13;
        }&#13;
        if (!presenter.configuration.ShowButtons) {&#13;
            $(presenter.$view.find(".flashcards-buttons").get(0)).hide();&#13;
        }&#13;
        if (presenter.configuration.Favourites == false) {&#13;
            $(presenter.flashcardsButtonFavourite.get(0)).hide();&#13;
        }        &#13;
&#13;
        presenter.showCard(1);&#13;
        presenter.addClickHandlers();&#13;
&#13;
        //audio&#13;
        presenter.isFrontPlaying = false;&#13;
        presenter.isBackPlaying = false;&#13;
        presenter.isHiddenPlaying = false;&#13;
        if (!isPreview) {&#13;
            presenter.addAudioEventHandlers();&#13;
        }&#13;
&#13;
        presenter.isLoaded = true;&#13;
    };&#13;
&#13;
    presenter.countFavourites = function () {&#13;
        var i = 0;&#13;
        $(presenter.Cards).each(function (k,v) {&#13;
            if (presenter.state.cardsFavourites[k] == true){i++};&#13;
        });&#13;
        return i;&#13;
    };&#13;
&#13;
    presenter.countNonFavouritesBefore = function (k) {&#13;
        var i = 0;&#13;
        for(j = 0; j &lt; k; j++){&#13;
            if (presenter.state.cardsFavourites[j] == false){i++};&#13;
        }&#13;
        return i;&#13;
    };&#13;
&#13;
    presenter.addClickHandlers = function () {&#13;
        //FLIP, PREV &amp; NEXT&#13;
        $(presenter.$view.find(".flashcards-card-contents")).click(function (e) {&#13;
            if (presenter.isErrorMode) return;&#13;
            e.preventDefault();&#13;
            presenter.revertCard();&#13;
        });&#13;
        $(presenter.flashcardsPrev).click(function (e) {&#13;
            if (presenter.isErrorMode) return;&#13;
            e.preventDefault();&#13;
            presenter.prevCard();&#13;
        });&#13;
        $(presenter.flashcardsNext).click(function (e) {&#13;
            if (presenter.isErrorMode) return;&#13;
            e.preventDefault();&#13;
            presenter.nextCard();&#13;
        });&#13;
&#13;
        //SCORE BUTTONS&#13;
        $(presenter.flashcardsButtonWrong).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            presenter.state.cardsScore[presenter.state.currentCard] = -1;&#13;
            $(presenter.flashcardsButton).removeClass("flashcards-button-selected");&#13;
            $(this).addClass("flashcards-button-selected");&#13;
        });&#13;
        $(presenter.flashcardsButtonCorrect).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            presenter.state.cardsScore[presenter.state.currentCard] = 1;&#13;
            $(presenter.flashcardsButton).removeClass("flashcards-button-selected");&#13;
            $(this).addClass("flashcards-button-selected");&#13;
        });&#13;
        $(presenter.flashcardsButtonReset).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            presenter.state.cardsScore[presenter.state.currentCard] = 0;&#13;
            $(presenter.flashcardsButton).removeClass("flashcards-button-selected");&#13;
        });&#13;
&#13;
        //FAVOURITE BUTTON&#13;
        $(presenter.flashcardsButtonFavourite).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            if (presenter.state.cardsFavourites[presenter.state.currentCard - 1] == false){&#13;
                presenter.state.cardsFavourites[presenter.state.currentCard - 1] = true;&#13;
                $(this).addClass("flashcards-button-selected");&#13;
                presenter.triggerEvent(presenter.state.currentCard,"favourite","");&#13;
            }else{&#13;
                presenter.state.cardsFavourites[presenter.state.currentCard - 1] = false;&#13;
                $(this).removeClass("flashcards-button-selected");&#13;
                presenter.triggerEvent(presenter.state.currentCard,"unfavourite","");&#13;
            }            &#13;
        });&#13;
&#13;
        //AUDIO&#13;
        $(presenter.flashcardsCardAudioButtonFront).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            &#13;
            if (presenter.isFrontPlaying == false) {&#13;
                presenter.isFrontPlaying = true;&#13;
                presenter.resetHiddenAudio();&#13;
                presenter.audioElementFront.play();&#13;
                $(presenter.flashcardsCardAudioButtonFront).addClass("playing");&#13;
                $(presenter.flashcardsCardAudioButtonFront).removeClass("paused");&#13;
                presenter.sendPlayEvent();&#13;
            }else{&#13;
                presenter.isFrontPlaying = false;&#13;
                presenter.audioElementFront.pause();&#13;
                $(presenter.flashcardsCardAudioButtonFront).removeClass("playing");&#13;
                $(presenter.flashcardsCardAudioButtonFront).addClass("paused");&#13;
                presenter.sendPauseEvent();&#13;
            }&#13;
        });&#13;
        $(presenter.flashcardsCardAudioButtonBack).click(function () {&#13;
            if (presenter.isErrorMode) return;&#13;
            presenter.audioElementBack =  presenter.$view.find(".flashcards-card-audio-back").get(0);&#13;
            if (presenter.isBackPlaying == false) {&#13;
                presenter.isBackPlaying = true;&#13;
                presenter.resetHiddenAudio();&#13;
                presenter.audioElementBack.play();&#13;
                $(presenter.flashcardsCardAudioButtonBack).addClass("playing");&#13;
                $(presenter.flashcardsCardAudioButtonBack).removeClass("paused");&#13;
                presenter.sendPlayEvent();&#13;
            }else{&#13;
                presenter.isBackPlaying = false;&#13;
                presenter.audioElementBack.pause();&#13;
                $(presenter.flashcardsCardAudioButtonBack).removeClass("playing");&#13;
                $(presenter.flashcardsCardAudioButtonBack).addClass("paused");&#13;
                presenter.sendPauseEvent();&#13;
            }&#13;
        });  &#13;
    };&#13;
&#13;
     presenter.addAudioEventHandlers = function () {&#13;
         presenter.audioElementFront.onended = function () {&#13;
             $(presenter.flashcardsCardAudioButtonFront).removeClass("playing");&#13;
             $(presenter.flashcardsCardAudioButtonFront).removeClass("paused");&#13;
             presenter.isFrontPlaying = false;&#13;
             presenter.sendEndedEvent();&#13;
         };&#13;
&#13;
         presenter.audioElementBack.onended = function () {&#13;
             $(presenter.flashcardsCardAudioButtonBack).removeClass("playing");&#13;
             $(presenter.flashcardsCardAudioButtonBack).removeClass("paused");&#13;
             presenter.isBackPlaying = false;&#13;
             presenter.sendEndedEvent();&#13;
         };&#13;
&#13;
        presenter.audioElementHidden.onended = function () {&#13;
            presenter.isHiddenPlaying = false;&#13;
            presenter.sendEndedEvent(presenter.lastHiddenAudio.cardIndex + 1);&#13;
        };&#13;
     };&#13;
    &#13;
    presenter.run = function (view, model) {&#13;
        presenter.init(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.init(view, model, true);&#13;
    };&#13;
&#13;
    presenter.revertCard = function () {&#13;
        if (presenter.isFrontPlaying || presenter.isBackPlaying) {&#13;
            presenter.sendPauseEvent();&#13;
            if (presenter.isFrontPlaying) {&#13;
                $(presenter.flashcardsCardAudioButtonFront).addClass("paused");&#13;
            } else {&#13;
                $(presenter.flashcardsCardAudioButtonBack).addClass("paused");&#13;
            }&#13;
        }&#13;
        presenter.isFrontPlaying = false;&#13;
        presenter.audioElementFront.pause();&#13;
        $(presenter.flashcardsCardAudioButtonFront).removeClass("playing");&#13;
&#13;
        presenter.isBackPlaying = false;&#13;
        presenter.audioElementBack.pause();&#13;
        $(presenter.flashcardsCardAudioButtonBack).removeClass("playing");&#13;
&#13;
        presenter.$card.find(".flashcards-card-back .flashcards-card-contents").show();&#13;
        $(presenter.$view.find(".flashcards-card").get(0)).toggleClass("flashcards-card-reversed");&#13;
    };&#13;
&#13;
    presenter.isFrontVisible = function() {&#13;
        return !$(presenter.$view.find(".flashcards-card").get(0)).hasClass("flashcards-card-reversed");&#13;
    }&#13;
&#13;
    presenter.originalCard = 1;&#13;
    presenter.prevCard = function () {&#13;
        if ((presenter.isFrontPlaying || presenter.isBackPlaying) &amp;&amp; presenter.state.currentCard &gt; 1) {&#13;
            presenter.sendEndedEvent(presenter.originalCard);&#13;
        }&#13;
        presenter.removeActiveElementClass();&#13;
        if (presenter.state.currentCard&gt;1){&#13;
            presenter.state.currentCard -= 1;&#13;
        }else if (presenter.state.noLoop == false){&#13;
            presenter.state.currentCard = presenter.state.totalCards;&#13;
        }&#13;
        presenter.showCard(presenter.state.currentCard);&#13;
    };&#13;
&#13;
    presenter.nextCard = function (disregardNoLoop) {&#13;
        presenter.removeActiveElementClass();&#13;
        if (presenter.state.currentCard &lt; presenter.state.totalCards){&#13;
            presenter.state.currentCard += 1;&#13;
        }else if (presenter.state.noLoop == false || disregardNoLoop){&#13;
            presenter.state.currentCard = 1;&#13;
        }&#13;
        if ((presenter.isFrontPlaying || presenter.isBackPlaying) &amp;&amp; presenter.state.currentCard != presenter.originalCard) {&#13;
            presenter.sendEndedEvent(presenter.originalCard);&#13;
        }&#13;
        presenter.showCard(presenter.state.currentCard);&#13;
    };&#13;
&#13;
    presenter.showCard = function (cardNumber) {&#13;
        presenter.originalCard = presenter.state.currentCard;&#13;
        cardNumber = parseInt(cardNumber,10);&#13;
        if (presenter.state.ShowOnlyFavourites == true &amp;&amp; presenter.countFavourites() &gt; 0 ){&#13;
            if (presenter.state.cardsFavourites[presenter.state.currentCard - 1] == true){&#13;
                presenter.displayCard(cardNumber);&#13;
            }else{&#13;
                if (cardNumber &lt;= presenter.state.totalCards){&#13;
                    presenter.nextCard(true);&#13;
                }&#13;
            }&#13;
        }else{&#13;
            presenter.displayCard(cardNumber);&#13;
        }        &#13;
    };&#13;
&#13;
    presenter.displayCard = function (cardNumber) {&#13;
        if (presenter.state.noLoop){&#13;
            $(presenter.flashcardsPrev.get(0)).attr("disabled", false);&#13;
            $(presenter.flashcardsNext.get(0)).attr("disabled", false);&#13;
            if (cardNumber == 1){&#13;
                $(presenter.flashcardsPrev.get(0)).attr("disabled", true);&#13;
            }else if (cardNumber == presenter.state.totalCards){&#13;
                $(presenter.flashcardsNext.get(0)).attr("disabled", true);&#13;
            }&#13;
        }&#13;
&#13;
        var currentCardNumber = cardNumber;&#13;
        var totalCardsNuber = 0;&#13;
        if (presenter.state.ShowOnlyFavourites == true) {&#13;
            currentCardNumber = cardNumber - presenter.countNonFavouritesBefore(cardNumber);&#13;
            totalCardsNuber = presenter.countFavourites();&#13;
        }else{&#13;
            totalCardsNuber = presenter.state.totalCards;&#13;
        }&#13;
        presenter.$view.find(".flashcards-panel").get(0).innerHTML = currentCardNumber + "/" + totalCardsNuber;&#13;
        presenter.$card.find(".flashcards-card-back .flashcards-card-contents").hide();&#13;
        presenter.$card.removeClass("flashcards-card-reversed");&#13;
&#13;
        presenter.$view.find(".flashcards-card-contents-front").get(0).innerHTML = presenter.Cards[cardNumber - 1].Front;&#13;
        presenter.$view.find(".flashcards-card-contents-back").get(0).innerHTML = presenter.Cards[cardNumber - 1].Back;&#13;
&#13;
        //SCORE BUTTONS&#13;
        $(presenter.flashcardsButton).removeClass("flashcards-button-selected");&#13;
        if (presenter.state.cardsScore[presenter.state.currentCard] == 1){&#13;
            $(presenter.flashcardsButtonCorrect).addClass("flashcards-button-selected");&#13;
        }&#13;
        if (presenter.state.cardsScore[presenter.state.currentCard] == -1){&#13;
            $(presenter.flashcardsButtonWrong).addClass("flashcards-button-selected");&#13;
        }&#13;
&#13;
        //FAV BUTTON&#13;
        if (presenter.state.cardsFavourites[presenter.state.currentCard - 1] == true) {&#13;
            $(presenter.flashcardsButtonFavourite).addClass("flashcards-button-selected");&#13;
        }else{&#13;
            $(presenter.flashcardsButtonFavourite).removeClass("flashcards-button-selected");&#13;
        }&#13;
&#13;
        //AUDIO - front&#13;
        presenter.isFrontPlaying = false;&#13;
        $(presenter.flashcardsCardAudioButtonFront).removeClass("playing");&#13;
        $(presenter.flashcardsCardAudioButtonFront).addClass("disabled");&#13;
        if (presenter.Cards[presenter.state.currentCard - 1].AudioFront != ""){&#13;
            $(presenter.$view.find(".flashcards-card-audio-wrapper-front")).show();&#13;
            if (presenter.audioElementFront.canPlayType("audio/mpeg")) {&#13;
                presenter.audioElementFront.setAttribute("src",presenter.Cards[presenter.state.currentCard - 1].AudioFront);&#13;
                presenter.audioElementFront.oncanplay = function () {&#13;
                    $(presenter.flashcardsCardAudioButtonFront).removeClass("disabled");&#13;
                };&#13;
            } &#13;
        }else{&#13;
            presenter.audioElementFront.setAttribute("src","");&#13;
            $(presenter.$view.find(".flashcards-card-audio-wrapper-front")).hide();&#13;
        }&#13;
        //AUDIO - back&#13;
        presenter.isBackPlaying = false;&#13;
        $(presenter.flashcardsCardAudioButtonBack).removeClass("playing");&#13;
        $(presenter.flashcardsCardAudioButtonBack).addClass("disabled");&#13;
        if (presenter.Cards[presenter.state.currentCard - 1].AudioBack != ""){&#13;
            $(presenter.$view.find(".flashcards-card-audio-wrapper-back")).show();&#13;
            if (presenter.audioElementBack.canPlayType("audio/mpeg")) {&#13;
                presenter.audioElementBack.setAttribute("src",presenter.Cards[presenter.state.currentCard - 1].AudioBack);&#13;
                presenter.audioElementBack.oncanplay = function () {&#13;
                    $(presenter.flashcardsCardAudioButtonBack).removeClass("disabled");&#13;
                };&#13;
            } &#13;
        }else{&#13;
            presenter.audioElementBack.setAttribute("src","");&#13;
            $(presenter.$view.find(".flashcards-card-audio-wrapper-back")).hide();&#13;
        }&#13;
        presenter.renderMathJax();&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.renderMathJax();&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function () {&#13;
        (presenter.state.isVisible) ? presenter.show() : presenter.hide();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.isErrorMode = true;&#13;
    }; &#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.showOnlyFavourites = function () {&#13;
        if (presenter.countFavourites() &gt; 0) {&#13;
            presenter.state.ShowOnlyFavourites = true;&#13;
            presenter.showCard(presenter.state.currentCard);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAllCards = function () {&#13;
        presenter.state.ShowOnlyFavourites = false;&#13;
        presenter.showCard(presenter.state.currentCard);&#13;
    };&#13;
&#13;
    presenter.resetFavourites = function () {&#13;
        presenter.state.ShowOnlyFavourites = false;&#13;
        $(presenter.Cards).each(function (key) {&#13;
            presenter.state.cardsFavourites[key] = false;&#13;
        });&#13;
        $(presenter.flashcardsButtonFavourite).removeClass("flashcards-button-selected");&#13;
    };&#13;
    &#13;
    presenter.reset = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.state.ShowOnlyFavourites = false;&#13;
        presenter.state.currentCard = presenter.configuration.currentCard;&#13;
&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
        presenter.updateVisibility();&#13;
&#13;
        $(presenter.model.Cards).each(function (key) {&#13;
            presenter.state.cardsScore[key] = 0;&#13;
            presenter.state.cardsFavourites[key] = false;&#13;
        });&#13;
&#13;
        presenter.showCard(presenter.state.currentCard);&#13;
    };&#13;
    &#13;
    presenter.getErrorCount = function () {&#13;
        var errors = null;&#13;
        if (presenter.configuration.IsActivity) {&#13;
            errors = 0;&#13;
            $(presenter.state.cardsScore).each(function (key) {&#13;
                if (presenter.state.cardsScore[key] == -1){&#13;
                    errors++;&#13;
                }&#13;
            });&#13;
        }&#13;
        return errors;&#13;
    };&#13;
    &#13;
    presenter.getMaxScore = function () {&#13;
        var maxScore = null;&#13;
        if (presenter.configuration.IsActivity) {&#13;
            maxScore = presenter.state.totalCards;&#13;
        }&#13;
        return maxScore;&#13;
    };&#13;
    &#13;
    presenter.getScore = function () {&#13;
        var score = null;&#13;
        if (presenter.configuration.IsActivity) {&#13;
            score = 0;&#13;
            $(presenter.state.cardsScore).each(function (key) {&#13;
                if (presenter.state.cardsScore[key] == 1){&#13;
                    score++;&#13;
                }&#13;
            });&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'nextCard': presenter.nextCard,&#13;
            'prevCard': presenter.prevCard,&#13;
            'reset': presenter.reset,&#13;
            'resetFavourites': presenter.resetFavourites,&#13;
            'ShowOnlyFavourites': presenter.showOnlyFavourites,&#13;
            'ShowAllCards': presenter.showAllCards,&#13;
            'countFavourites': presenter.countFavourites,&#13;
            'play': presenter.play,&#13;
            'pause': presenter.pause,&#13;
            'stop': presenter.stop&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
    &#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            state: presenter.state&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
        var parsedState = JSON.parse(stateString);&#13;
        presenter.state = parsedState.state;&#13;
&#13;
        presenter.updateVisibility();&#13;
        presenter.showCard(presenter.state.currentCard);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        $(presenter.$view.find(".flashcards-card-contents")).unbind();&#13;
        $(presenter.flashcardsButtonWrong).unbind();&#13;
        $(presenter.flashcardsButtonCorrect).unbind();&#13;
        $(presenter.flashcardsButtonReset).unbind();&#13;
        $(presenter.flashcardsButtonFavourite).unbind();&#13;
        $(presenter.flashcardsButtonFavourite).unbind();&#13;
        $(presenter.flashcardsNext).unbind();&#13;
        &#13;
    };&#13;
&#13;
    presenter.playHiddenCardAudio = function (cardIndex, reverse) {&#13;
        if (typeof reverse == 'string') {&#13;
            reverse = reverse.toLowerCase() == 'reverse' || reverse.toLowerCase() == 'true';&#13;
        }&#13;
        reverse = !!reverse;&#13;
        var card = presenter.Cards[cardIndex];&#13;
        if (!card) return;&#13;
        if (presenter.isFrontPlaying) {&#13;
            presenter.audioElementFront.pause();&#13;
            presenter.audioElementFront.currentTime = 0;&#13;
            presenter.isFrontPlaying = false;&#13;
            presenter.sendEndedEvent();&#13;
        }&#13;
        if (presenter.isBackPlaying) {&#13;
            presenter.audioElementBack.pause();&#13;
            presenter.audioElementBack.currentTime = 0;&#13;
            presenter.isBackPlaying = false;&#13;
            presenter.sendEndedEvent();&#13;
        }&#13;
        if ((!reverse &amp;&amp; card.AudioFront != "") || (reverse &amp;&amp; card.AudioBack != "")){&#13;
            if (presenter.audioElementHidden.canPlayType("audio/mpeg")) {&#13;
                var audioSrc = reverse ? card.AudioBack : card.AudioFront;&#13;
                if (presenter.lastHiddenAudio.cardIndex != cardIndex || presenter.lastHiddenAudio.reverse != reverse) {&#13;
                    presenter.lastHiddenAudio.cardIndex = cardIndex;&#13;
                    presenter.lastHiddenAudio.reverse = reverse;&#13;
                    presenter.audioElementHidden.setAttribute("src", audioSrc);&#13;
                    presenter.audioElementHidden.oncanplay = function () {&#13;
                        presenter.audioElementHidden.play();&#13;
                        presenter.sendPlayEvent(cardIndex + 1);&#13;
                        presenter.isHiddenPlaying = true;&#13;
                        presenter.audioElementHidden.oncanplay = null;&#13;
                    };&#13;
                } else if (!presenter.isHiddenPlaying) {&#13;
                    presenter.audioElementHidden.play();&#13;
                    presenter.sendPlayEvent(cardIndex + 1);&#13;
                    presenter.isHiddenPlaying = true;&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.resetHiddenAudio = function() {&#13;
        if (presenter.isHiddenPlaying) {&#13;
            presenter.isHiddenPlaying = false;&#13;
            presenter.audioElementHidden.pause();&#13;
            presenter.sendEndedEvent(presenter.lastHiddenAudio.cardIndex + 1);&#13;
        }&#13;
        presenter.audioElementHidden.currentTime = 0;&#13;
    }&#13;
&#13;
    presenter.sendAudioEvent = function(eventName, cardNumber) {&#13;
        var item = presenter.state.currentCard;&#13;
        if (cardNumber !== undefined) item = cardNumber;&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item,&#13;
            'value': eventName,&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.sendPlayEvent = function(cardNumber) {presenter.sendAudioEvent("playing", cardNumber)};&#13;
&#13;
    presenter.sendPauseEvent = function(cardNumber) {presenter.sendAudioEvent("pause", cardNumber)};&#13;
&#13;
    presenter.sendEndedEvent = function(cardNumber) {presenter.sendAudioEvent("ended", cardNumber)};&#13;
&#13;
    presenter.play = function(cardIndex = -1, reverse = false) {&#13;
        if (Array.isArray(cardIndex)) {&#13;
            if (cardIndex.length &gt; 0) {&#13;
                if (cardIndex.length &gt; 1) reverse = cardIndex[1];&#13;
                cardIndex = cardIndex[0];&#13;
            } else {&#13;
                cardIndex = -1;&#13;
            }&#13;
        }&#13;
        if (cardIndex != -1) {&#13;
            presenter.playHiddenCardAudio(cardIndex - 1, reverse);&#13;
        } else {&#13;
            presenter.audioCommand("play");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pause = function() {&#13;
        presenter.audioCommand("pause");&#13;
    };&#13;
&#13;
    presenter.stop = function() {&#13;
        presenter.audioCommand("stop");&#13;
    };&#13;
&#13;
    presenter.audioCommand = function(command) {&#13;
        if (presenter.isErrorMode) return;&#13;
        if (presenter.isHiddenPlaying &amp;&amp; command != "play") {&#13;
            if (command == "stop" &amp;&amp; presenter.audioElementHidden.currentTime &gt; 0) {&#13;
                presenter.audioElementHidden.currentTime = 0;&#13;
                presenter.sendEndedEvent(presenter.lastHiddenAudio.cardIndex + 1);&#13;
            }&#13;
            presenter.audioElementHidden.pause();&#13;
            if (command == "pause") {&#13;
                presenter.sendPauseEvent(presenter.lastHiddenAudio.cardIndex + 1);&#13;
            }&#13;
            presenter.isHiddenPlaying = false;&#13;
            return;&#13;
        }&#13;
&#13;
        var currentCard = presenter.Cards[presenter.state.currentCard - 1];&#13;
        if (presenter.isFrontVisible()) {&#13;
            if (currentCard.AudioFront != "") {&#13;
                if (command == "play") {&#13;
                    if (presenter.isFrontPlaying) return;&#13;
                    presenter.isFrontPlaying = true;&#13;
                    presenter.resetHiddenAudio();&#13;
                    presenter.audioElementFront.play();&#13;
                    $(presenter.flashcardsCardAudioButtonFront).addClass("playing");&#13;
                    $(presenter.flashcardsCardAudioButtonFront).removeClass("paused");&#13;
                    presenter.sendPlayEvent();&#13;
                }else{&#13;
                    if (command == "stop" &amp;&amp; presenter.audioElementFront.currentTime &gt; 0) {&#13;
                        presenter.audioElementFront.currentTime = 0;&#13;
                        presenter.sendEndedEvent();&#13;
                        $(presenter.flashcardsCardAudioButtonFront).removeClass("paused");&#13;
                    }&#13;
                    if (!presenter.isFrontPlaying) return;&#13;
                    presenter.isFrontPlaying = false;&#13;
                    presenter.audioElementFront.pause();&#13;
                    $(presenter.flashcardsCardAudioButtonFront).removeClass("playing");&#13;
                    if (command == "pause") {&#13;
                        $(presenter.flashcardsCardAudioButtonFront).addClass("paused");&#13;
                        presenter.sendPauseEvent();&#13;
                    }&#13;
                }&#13;
            }&#13;
        } else {&#13;
            if (currentCard.AudioBack != "") {&#13;
                presenter.audioElementBack =  presenter.$view.find(".flashcards-card-audio-back").get(0);&#13;
                if (command == "play") {&#13;
                    if (presenter.isBackPlaying == true) return;&#13;
                    presenter.isBackPlaying = true;&#13;
                    presenter.resetHiddenAudio();&#13;
                    presenter.audioElementBack.play();&#13;
                    $(presenter.flashcardsCardAudioButtonBack).addClass("playing");&#13;
                    $(presenter.flashcardsCardAudioButtonBack).removeClass("paused");&#13;
                    presenter.sendPlayEvent();&#13;
                }else{&#13;
                    if (command == "stop" &amp;&amp; presenter.audioElementBack.currentTime &gt; 0) {&#13;
                        presenter.audioElementBack.currentTime = 0;&#13;
                        presenter.sendEndedEvent();&#13;
                        $(presenter.flashcardsCardAudioButtonBack).removeClass("paused");&#13;
                    }&#13;
                    if (presenter.isBackPlaying == false) return;&#13;
                    presenter.isBackPlaying = false;&#13;
                    presenter.audioElementBack.pause();&#13;
                    $(presenter.flashcardsCardAudioButtonBack).removeClass("playing");&#13;
                    if (command == "pause") {&#13;
                        $(presenter.flashcardsCardAudioButtonBack).addClass("paused");&#13;
                        presenter.sendPauseEvent();&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setWCAGStatus = function(isOn) {&#13;
        isWCAGOn = isOn;&#13;
    }&#13;
&#13;
    presenter.removeActiveElementClass = function() {&#13;
        presenter.$view.find("."+KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS).removeClass(KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS);&#13;
    }&#13;
&#13;
    presenter.nextKeyboardElement = function() {&#13;
        cycleKeyboardElement(true);&#13;
    }&#13;
&#13;
    presenter.prevKeyboardElement = function() {&#13;
        cycleKeyboardElement(false);&#13;
    }&#13;
&#13;
    function cycleKeyboardElement(forward) {&#13;
        let elementList = [presenter.flashcardsMain, presenter.flashcardsButtonFavourite];&#13;
        let currentElementIndex = 0;&#13;
        if (presenter.flashcardsMain.is('.flashcards-card-reversed')) {&#13;
            elementList.push(presenter.flashcardsCardAudioButtonBack);&#13;
            elementList.push(presenter.flashcardsButtonWrong);&#13;
            elementList.push(presenter.flashcardsButtonReset);&#13;
            elementList.push(presenter.flashcardsButtonCorrect);&#13;
        } else {&#13;
            elementList.push(presenter.flashcardsCardAudioButtonFront);&#13;
        }&#13;
&#13;
        elementList = elementList.filter( function($el) {&#13;
            return $el != null &amp;&amp; $el.length &gt; 0 &amp;&amp; $el.is(":visible");&#13;
        });&#13;
&#13;
        for (let i = 0; i &lt; elementList.length; i++) {&#13;
            if (elementList[i].is("."+KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS)) {&#13;
                currentElementIndex = i;&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.removeActiveElementClass();&#13;
        if (forward) {&#13;
            currentElementIndex += 1;&#13;
            if (currentElementIndex &gt;= elementList.length) currentElementIndex = elementList.length - 1;&#13;
        } else {&#13;
            currentElementIndex -= 1;&#13;
            if (currentElementIndex &lt; 0) currentElementIndex = 0;&#13;
        }&#13;
        elementList[currentElementIndex].addClass(KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS);&#13;
&#13;
    }&#13;
&#13;
    presenter.onSpace = function() {&#13;
        let currentElement = presenter.$view.find("."+KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS);&#13;
        if (currentElement.length === 0 || currentElement.hasClass("flashcards-card")) {&#13;
            presenter.removeActiveElementClass();&#13;
            presenter.revertCard();&#13;
            speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.turned)]);&#13;
        } else {&#13;
            currentElement.click();&#13;
            if (currentElement.hasClass('flashcards-button-reset')) {&#13;
                speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.cardHasBeenReset)]);&#13;
            } else if (currentElement.hasClass('flashcards-button-correct')&#13;
                || currentElement.hasClass('flashcards-button-wrong')) {&#13;
                speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selected)]);&#13;
            } else if (currentElement.hasClass('flashcards-button-favourite')) {&#13;
                if (currentElement.hasClass('flashcards-button-selected')) {&#13;
                    speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selected)]);&#13;
                } else {&#13;
                    speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.deselected)]);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readSelected = function() {&#13;
        let textVoices = [];&#13;
        let currentElement = presenter.$view.find("."+KEYBOARD_NAVIGATION_ACTIVE_ITEM_CLASS);&#13;
        if (currentElement.length === 0 || currentElement.hasClass("flashcards-card")) {&#13;
            presenter.readCard();&#13;
        } else {&#13;
            if (currentElement.hasClass('flashcards-button-favourite')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.favourite));&#13;
            } else if (currentElement.hasClass('flashcards-card-audio-button')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.audio));&#13;
            } else if (currentElement.hasClass('flashcards-button-wrong')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.wrong));&#13;
            } else if (currentElement.hasClass('flashcards-button-correct')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.correct));&#13;
            } else if (currentElement.hasClass('flashcards-button-reset')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.reset));&#13;
            }&#13;
            if (currentElement.hasClass('flashcards-button-selected')) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selected));&#13;
            }&#13;
            speak(textVoices);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readCard = function() {&#13;
        let $content = null;&#13;
        if (presenter.flashcardsMain.is('.flashcards-card-reversed')) {&#13;
            $content = presenter.flashcardsMain.find('.flashcards-card-contents-back');&#13;
        } else {&#13;
            $content = presenter.flashcardsMain.find('.flashcards-card-contents-front');&#13;
        }&#13;
&#13;
        let textVoices = window.TTSUtils.getTextVoiceArrayFromElement($content, presenter.configuration.langTag);&#13;
        speak(textVoices);&#13;
    }&#13;
&#13;
    presenter.readCardNumber = function() {&#13;
        let textVoices = [];&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.card));&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.state.currentCard + ''));&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.outOf));&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.state.totalCards + ''));&#13;
        speak(textVoices);&#13;
    }&#13;
&#13;
    presenter.keyboardController = function(keycode, isShift, event) {&#13;
        event.preventDefault();&#13;
        switch (keycode) {&#13;
            case 9: // TAB&#13;
                if (isShift) {&#13;
                    presenter.prevKeyboardElement();&#13;
                } else {&#13;
                    presenter.nextKeyboardElement();&#13;
                }&#13;
                presenter.readSelected();&#13;
                break;&#13;
            case 13: //ENTER&#13;
                if (isShift) {&#13;
                    presenter.removeActiveElementClass();&#13;
                } else {&#13;
                    presenter.readSelected();&#13;
                }&#13;
                break;&#13;
            case 32: // SPACE&#13;
                presenter.onSpace();&#13;
                break;&#13;
            case 38: // UP&#13;
                presenter.prevCard();&#13;
                presenter.readCardNumber();&#13;
                break;&#13;
            case 40: // DOWN&#13;
                presenter.nextCard();&#13;
                presenter.readCardNumber();&#13;
                break;&#13;
            case 37: // LEFT&#13;
                presenter.prevCard();&#13;
                presenter.readCardNumber();&#13;
                break;&#13;
            case 39: // RIGHT&#13;
                presenter.nextCard();&#13;
                presenter.readCardNumber();&#13;
                break;&#13;
            case 27: // ESC&#13;
                presenter.removeActiveElementClass();&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.renderMathJax = function () {&#13;
        if (presenter.isLoaded) {&#13;
            reloadMathJax();&#13;
        }&#13;
    }&#13;
&#13;
    function reloadMathJax () {&#13;
        window.MathJax.Callback.Queue().Push(function () {&#13;
            window.MathJax.Hub.Typeset(presenter.$view[0]);&#13;
        });&#13;
    }&#13;
&#13;
    return presenter;&#13;
};&#13;
</presenter></addon>