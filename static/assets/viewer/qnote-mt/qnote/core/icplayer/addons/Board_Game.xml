<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Board_Game" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Background" name="Background" nameLabel="Board_game_property_background" type="image"/>
        <property displayName="has Fields" name="hasFields" nameLabel="Board_game_property_has_fields" type="boolean"/>
        <property isDefault="true" name="Fields" nameLabel="Board_game_property_fields" type="list">
            <property name="Top" nameLabel="Board_game_property_top" type="string"/>
            <property name="Left" nameLabel="Board_game_property_left" type="string"/>
            <property name="Width" nameLabel="Board_game_property_width" type="string"/>
            <property name="Height" nameLabel="Board_game_property_height" type="string"/>
            <property name="cssClass" nameLabel="Board_game_property_css_class" type="string"/>
        </property>
        <property displayName="Elements" name="Images" nameLabel="Board_game_property_images" type="list">
            <property displayName="Element Image" name="PawnImage" nameLabel="Board_game_property_pawn_image" type="image"/>
            <property name="Top" nameLabel="Board_game_property_top" type="string"/>
            <property name="Left" nameLabel="Board_game_property_left" type="string"/>
            <property name="Width" nameLabel="Board_game_property_width" type="string"/>
            <property name="Height" nameLabel="Board_game_property_height" type="string"/>
        </property>
        <property name="isDisabled" nameLabel="Board_game_property_is_disable" type="boolean"/>
        <property name="gameMode" nameLabel="Board_game_property_game_mode" type="{Free,Game}"/>
	</model>
<css>.board-game-container{&#13;
    background-color:white;&#13;
    -moz-background-size:100% 100%;&#13;
    -webkit-background-size:100% 100%;&#13;
    background-size:100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.board-game-element{&#13;
    position:absolute;&#13;
    background-color:blue;&#13;
}&#13;
&#13;
.counters-container {&#13;
    position:absolute;&#13;
}&#13;
&#13;
.board-game-field{&#13;
    position:absolute;&#13;
    background-color:blue;&#13;
    opacity: 0.3;&#13;
}&#13;
&#13;
.board-game-field.game {&#13;
    background-color: transparent;&#13;
    opacity: 1;&#13;
}&#13;
&#13;
.board-game-element.game {&#13;
    position: static;&#13;
    float: left;&#13;
    box-sizing: border-box;&#13;
}&#13;
</css><view>&lt;p class="board-game-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="board-game-container" class="board-game-container"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;p class="board-game-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="board-game-container" class="board-game-container"&gt;&lt;/div&gt;&#13;
</preview><presenter>/**&#13;
 * In game mode, counter elements are in first container. If element is moving, he got absolute position and is moved to&#13;
 * view. After animation, animated element must be moved to container as child and must receive static positioning.&#13;
 * @returns {presenter}&#13;
 * @constructor&#13;
 */&#13;
function AddonBoard_Game_create(){&#13;
&#13;
    var presenter = function() {&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'F01': 'Field is outside of addon!',&#13;
        'I01': 'Element is outside of addon!',&#13;
        "CSS01": "Provided css class name is not valid class name",&#13;
        "EV01": "Provided game type is not valid",&#13;
    };&#13;
&#13;
    presenter.ANIMATION_MOVE_TIME = 300;    //Time for one field animation in ms&#13;
    presenter.currentElement = 0;&#13;
    presenter.mouseX = 0;&#13;
    presenter.mouseY = 0;&#13;
    presenter.isElementInMove = false;&#13;
    presenter.showAnswersMode = false;&#13;
    presenter.isDisabled = false;&#13;
    presenter.hasFields = false;&#13;
    presenter.currentLeftValue = [];&#13;
    presenter.currentTopValue = [];&#13;
    presenter.originalLeftValue = [];&#13;
    presenter.originalTopValue = [];&#13;
    presenter.lastSelectedCounter = null;&#13;
    presenter.boardCounters = [];&#13;
    presenter.fields = [];&#13;
    presenter.fieldsPositions = [];&#13;
    presenter.gameTypes = {&#13;
        GAME: "Game",&#13;
        FREE: "Free"&#13;
    };&#13;
    presenter.counterPositions = [];&#13;
    /**&#13;
     * @type {{counterNumber: Number, position: Number}|null}&#13;
     */&#13;
    presenter.lastMove = null;&#13;
    &#13;
&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch (name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'move'.toLowerCase():&#13;
                presenter.move(params[0]);&#13;
                break;&#13;
            case 'undo'.toLowerCase():&#13;
                presenter.undo();&#13;
                break&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawBoard = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.Height = model.Height;&#13;
        presenter.Width = model.Width;&#13;
&#13;
        presenter.$view.find('.board-game-container').css({&#13;
            'width' : presenter.Width,&#13;
            'height' : presenter.Height,&#13;
            'background-image' : 'url('+ model.Background + ')'&#13;
        });&#13;
&#13;
        var fig = '';&#13;
        var i;&#13;
&#13;
        if(model.hasFields || presenter.gameMode !== presenter.gameTypes.FREE){&#13;
            for(i = 0; i &lt; presenter.fieldsLength; i++){&#13;
                fig += '&lt;div id="Field' + (i + 1) + '" class="board-game-field" style=""&gt;&lt;/div&gt;';&#13;
                fig += '&lt;div class="counters-container" style=""&gt;&lt;/div&gt;';&#13;
            }&#13;
        }&#13;
        for(i = 0; i &lt; model.Images.length; i++){&#13;
            fig += '&lt;div id="Element' + (i + 1) +'" class="board-game-element" style="background-image: url(' + model.Images[i].PawnImage + '); -moz-background-size:100% 100%; -webkit-background-size:100% 100%; background-size:100% 100%;; height: ' + model.Images[i].Height + 'px; width: ' + model.Images[i].Width + 'px;  "&gt;&lt;/div&gt;';&#13;
            presenter.currentLeftValue[i] = model.Images[i].Left;&#13;
            presenter.currentTopValue[i] = model.Images[i].Top;&#13;
            presenter.originalLeftValue[i] = model.Images[i].Left;&#13;
            presenter.originalTopValue[i] = model.Images[i].Top;&#13;
        }&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
    presenter.upgradeFields = function (model) {&#13;
        var fields = model["Fields"];&#13;
&#13;
        fields.forEach(function (element) {&#13;
            if (!element["cssClass"]) {&#13;
                element["cssClass"] = "";&#13;
            }&#13;
        });&#13;
&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        if (!model["isDisabled"]) {&#13;
            model["isDisabled"] = "False";&#13;
        }&#13;
&#13;
        if (!model["gameMode"]) {&#13;
            model["gameMode"] = "Free";&#13;
        }&#13;
&#13;
        model = presenter.upgradeFields(model);&#13;
&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.validateFieldsSizes = function (model) {&#13;
        var i,&#13;
            field;&#13;
&#13;
        for(i = 0; i &lt; model.Fields.length; i++) {&#13;
            field = model.Fields[i];&#13;
            if (field.Left + field.Width &gt; model.Width || field.Top + field.Height &gt; model.Height) {&#13;
                return {&#13;
                    isValid: false,&#13;
                    errorCode: "F01"&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return  {&#13;
            isValid: true&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateImagesSizes = function (model) {&#13;
        var i,&#13;
            image;&#13;
&#13;
        for(i = 0; i &lt; model.Images.length; i++) {&#13;
            image = model.Images[i];&#13;
            if (image.Left + image.Width &gt; model.Width || image.Top + image.Height &gt; model.Height) {&#13;
                return {&#13;
                    isValid: false,&#13;
                    errorCode: "I01"&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true&#13;
        };&#13;
    };&#13;
&#13;
    function _animate(element, xPosition, yPosition, callback) {&#13;
        $(element).animate({&#13;
            left: xPosition,&#13;
            top: yPosition&#13;
        }, presenter.ANIMATION_MOVE_TIME, callback);&#13;
    }&#13;
&#13;
    presenter.endAnimation = function (endPositionIndex, counter, counterIndex) {&#13;
        var destXPosition,&#13;
            destYPosition;&#13;
&#13;
        destXPosition = presenter.fieldsPositions[endPositionIndex].Left;&#13;
        destYPosition = presenter.fieldsPositions[endPositionIndex].Top;&#13;
&#13;
        $(counter).css({&#13;
            left: destXPosition + "px",&#13;
            top: destYPosition + "px"&#13;
        });&#13;
&#13;
        presenter.countersContainers[endPositionIndex].appendChild(counter);&#13;
        counter.style.position = 'static';&#13;
&#13;
        presenter.sendEventCounterMoved(counterIndex, endPositionIndex);&#13;
    };&#13;
&#13;
    presenter.animate = function (counterNumber, startPositionIndex, endPositionIndex, runAnimation) {&#13;
        var destXPosition,&#13;
            destYPosition,&#13;
            counter,&#13;
            nextElement;&#13;
&#13;
        if (!runAnimation) {&#13;
            startPositionIndex = endPositionIndex;&#13;
        }&#13;
&#13;
        counter = presenter.boardCounters[counterNumber];&#13;
        if (startPositionIndex === endPositionIndex) {&#13;
            presenter.endAnimation(endPositionIndex, counter, counterNumber);&#13;
            return;&#13;
        }&#13;
&#13;
        if (startPositionIndex &lt; endPositionIndex) {&#13;
            nextElement = startPositionIndex + 1;&#13;
        } else {&#13;
            nextElement = startPositionIndex - 1;&#13;
        }&#13;
&#13;
        destXPosition = presenter.fieldsPositions[nextElement].Left;&#13;
        destYPosition = presenter.fieldsPositions[nextElement].Top;&#13;
&#13;
        counter.style.position = 'absolute';&#13;
&#13;
        _animate(counter, destXPosition, destYPosition, function () {&#13;
            presenter.animate(counterNumber, nextElement, endPositionIndex, true);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        model = presenter.upgradeModel(model);&#13;
&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.Boolean("hasFields"),&#13;
            ModelValidators.Enum("gameMode", {values: ["Free", "Game"], useLowerCase: false}),&#13;
            ModelValidators.List("Fields", [&#13;
                ModelValidators.DumbInteger("Top"),&#13;
                ModelValidators.DumbInteger("Left"),&#13;
                ModelValidators.DumbInteger("Width"),&#13;
                ModelValidators.DumbInteger("Height"),&#13;
                ModelValidators.CSSClass("cssClass", {default: ""})&#13;
            ], function () {&#13;
                return this.validatedModel['hasFields'] || this.validatedModel["gameMode"] !== presenter.gameTypes.FREE;&#13;
            }),&#13;
            ModelValidators.List("Images", [&#13;
                ModelValidators.DumbInteger("Top"),&#13;
                ModelValidators.DumbInteger("Left"),&#13;
                ModelValidators.DumbInteger("Width"),&#13;
                ModelValidators.DumbInteger("Height"),&#13;
                ModelValidators.DumbString("PawnImage")&#13;
            ]),&#13;
            ModelValidators.Boolean("isDisabled"),&#13;
            ModelValidators.DumbInteger("Width"),&#13;
            ModelValidators.DumbInteger("Height"),&#13;
            ModelValidators.DumbString("ID"),&#13;
            ModelValidators.Boolean("Is Visible"),&#13;
            ModelValidators.DumbString("Background"),&#13;
        ]);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            return validatedModel;&#13;
        }&#13;
&#13;
        var validatedFields,&#13;
            validatedImages;&#13;
&#13;
        if (validatedModel.value["hasFields"] || validatedModel.value["gameMode"] !== presenter.gameTypes.FREE) {&#13;
            validatedFields = presenter.validateFieldsSizes(validatedModel.value);&#13;
            if (!validatedFields.isValid) {&#13;
                return validatedFields;&#13;
            }&#13;
        }&#13;
&#13;
        validatedImages = presenter.validateImagesSizes(validatedModel.value);&#13;
        if (!validatedImages.isValid) {&#13;
            return validatedImages;&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
&#13;
    };&#13;
&#13;
    presenter.selectCounter = function (element, index) {&#13;
        presenter.deselectLastCounter();&#13;
&#13;
        presenter.lastSelectedCounter = index;&#13;
&#13;
        element.classList.add('board-game-selected')&#13;
    };&#13;
&#13;
    presenter.deselectLastCounter = function () {&#13;
        if (presenter.lastSelectedCounter === null) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.boardCounters[presenter.lastSelectedCounter].classList.remove('board-game-selected');&#13;
    };&#13;
&#13;
    presenter.connectHandlers = function (view) {&#13;
        if (presenter.gameMode === presenter.gameTypes.GAME) {&#13;
            presenter.boardCounters.each(function (index, element) {&#13;
                $(element).on('click', function () {&#13;
                    if (presenter.isDisabled || presenter.showErrorsMode || presenter.showAnswersMode) {&#13;
                        return;&#13;
                    }&#13;
&#13;
                    presenter.selectCounter(this, index);&#13;
                });&#13;
            });&#13;
        }&#13;
&#13;
        if (presenter.gameMode === presenter.gameTypes.FREE) {&#13;
&#13;
            presenter.$view.find('.board-game-field').droppable({&#13;
                drop: function (e, ui) {&#13;
                    presenter.checkRevert(this);&#13;
                }&#13;
            });&#13;
&#13;
            jQuery(function ($) {&#13;
                presenter.boardCounters&#13;
                    .mousedown(function (e) {&#13;
                        presenter.moveCurrentElement(this);&#13;
                    })&#13;
                    .mouseup(function (e) {}).click(function (e) {});&#13;
            });&#13;
&#13;
            presenter.boardCounters.draggable({&#13;
                containment: "parent"&#13;
            });&#13;
        }&#13;
&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
&#13;
        clearInterval(presenter.interval);&#13;
&#13;
        presenter.removeHandlers();&#13;
    };&#13;
&#13;
    presenter.removeHandlers = function () {&#13;
        presenter.boardCounters.off();&#13;
        presenter.$view.find('.board-game-field').off();&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.getElementToNavigation = function () {&#13;
        var elementsToNavigation = [];&#13;
        presenter.boardCounters.each(function (index, element) {&#13;
            elementsToNavigation.push($(element));&#13;
        });&#13;
&#13;
        return elementsToNavigation;&#13;
    };&#13;
&#13;
    presenter.setFieldsSizes = function (model) {&#13;
        var i;&#13;
&#13;
        for(i = 0; i &lt; presenter.fieldsLength; i++) {&#13;
            var cssValue = {&#13;
                'width' : model.Fields[i].Width + "px",&#13;
                'height' : model.Fields[i].Height + "px",&#13;
                'top' : model.Fields[i].Top + "px",&#13;
                'left' : model.Fields[i].Left + "px"&#13;
            };&#13;
&#13;
            $(presenter.fields[i]).css(cssValue);&#13;
            $(presenter.countersContainers[i]).css(cssValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveCountersToFirstField = function () {&#13;
        var i,&#13;
            destXPosition = presenter.fieldsPositions[0].Left,&#13;
            destYPosition = presenter.fieldsPositions[0].Top;&#13;
        presenter.counterPositions = [];&#13;
&#13;
        for (i = 0; i &lt; presenter.boardCounters.length; i++) {&#13;
            presenter.counterPositions.push(0);&#13;
&#13;
            presenter.boardCounters[i].classList.add('game');&#13;
            presenter.boardCounters[i].style.position = 'static';&#13;
            $(presenter.boardCounters[i]).css({&#13;
                left: destXPosition + 'px',&#13;
                top: destYPosition + 'px'&#13;
            });&#13;
            presenter.countersContainers[0].appendChild(presenter.boardCounters[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initGameMode = function (model) {&#13;
        presenter.setFieldsSizes(model);&#13;
        presenter.moveCountersToFirstField();&#13;
        presenter.selectCounter(presenter.boardCounters[0], 0);&#13;
&#13;
        presenter.boardGameKeyboardController = new BoardGameGameModeKeyboardController(presenter.getElementToNavigation());&#13;
    };&#13;
&#13;
    presenter.initFreeMode = function (model) {&#13;
        if (presenter.hasFields) {&#13;
            presenter.setFieldsSizes(model);&#13;
        }&#13;
&#13;
        presenter.boardGameKeyboardController = new BoardGameFreeModeKeyboardController(presenter.getElementToNavigation());&#13;
        presenter.boardGameKeyboardController.mapping[KeyboardControllerKeys.ARROW_LEFT] = presenter.boardGameKeyboardController.left;&#13;
        presenter.boardGameKeyboardController.mapping[KeyboardControllerKeys.ARROW_RIGHT] = presenter.boardGameKeyboardController.right;&#13;
        presenter.boardGameKeyboardController.mapping[KeyboardControllerKeys.ARROW_UP] = presenter.boardGameKeyboardController.up;&#13;
        presenter.boardGameKeyboardController.mapping[KeyboardControllerKeys.ARROW_DOWN] = presenter.boardGameKeyboardController.down;&#13;
        presenter.boardGameKeyboardController.mapping[KeyboardControllerKeys.TAB] = presenter.boardGameKeyboardController.tab;&#13;
    };&#13;
&#13;
    presenter.init = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isDisable = model.isDisabled;&#13;
        presenter.wasDisable = model.isDisabled;&#13;
        presenter.hasFields = model.hasFields;&#13;
        presenter.wasVisible = model["Is Visible"];&#13;
        presenter.isVisible = model["Is Visible"];&#13;
        presenter.fieldsLength = model.Fields ? model.Fields.length : 0;&#13;
        presenter.imagesLength = model.Images.length;&#13;
        presenter.gameMode = model.gameMode;&#13;
        presenter.fieldsPositions = model.Fields;&#13;
        presenter.interval = 0;&#13;
&#13;
        presenter.lastSelectedCounter = null;&#13;
&#13;
        var myDiv = $(view).find('.board-game-container')[0];&#13;
        var board = presenter.drawBoard(view, model);&#13;
        $(myDiv).append(board);&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.boardCounters = presenter.$view.find('.board-game-element');&#13;
        presenter.fields = presenter.$view.find('.board-game-field');&#13;
        presenter.countersContainers = presenter.$view.find('.counters-container');&#13;
&#13;
&#13;
        if (presenter.gameMode === presenter.gameTypes.GAME) {&#13;
            presenter.initGameMode(model);&#13;
        } else {&#13;
            presenter.setElementsPosition(presenter.originalLeftValue, presenter.originalTopValue);&#13;
            presenter.initFreeMode(model);&#13;
        }&#13;
&#13;
        presenter.setFieldsClasses(model);&#13;
        presenter.connectHandlers(view);&#13;
&#13;
        presenter.view = view;&#13;
    };&#13;
&#13;
    presenter.setFieldsClasses = function (model) {&#13;
        if (!model.Fields) {&#13;
            return;&#13;
        }&#13;
&#13;
        model.Fields.forEach(function (element, idx) {&#13;
            if (element.cssClass !== "") {&#13;
                presenter.fields[idx].classList.add(element.cssClass);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (view, error) {&#13;
        var $counter = $(view).find('.board-game-counter');&#13;
        $counter.text(presenter.ERROR_CODES[error.errorCode]);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        var validatedModel = presenter.validateModel(model);&#13;
&#13;
        if (validatedModel.isValid) {&#13;
            presenter.init(view, validatedModel.value);&#13;
&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
            if(presenter.isDisable){&#13;
                presenter.disable();&#13;
            }&#13;
        } else {&#13;
            presenter.showErrorMessage(view, validatedModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveCurrentElement = function(element) {&#13;
        presenter.currentElement = element.id;&#13;
        if(presenter.hasFields) {&#13;
            presenter.$view.find('#' + presenter.currentElement + '').draggable({ revert: true });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkRevert = function(element){&#13;
        var field = element.id;&#13;
        presenter.$view.find('#' + presenter.currentElement + '').draggable({ revert: false });&#13;
        presenter.triggerFrameChangeEvent(field, presenter.currentElement);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        var validatedModel = presenter.validateModel(model);&#13;
        if (!validatedModel.isValid) {&#13;
            presenter.showErrorMessage(view, validatedModel);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.init(view, model);&#13;
        $(view).find('.board-game-element').draggable({ containment: "parent" });&#13;
&#13;
        var coordinations = {x: 0, y: 0};&#13;
&#13;
        var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
            xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
            yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
        coordinatesContainer.addClass('coordinates');&#13;
        coordinatesContainer.append(xContainer).append(yContainer);&#13;
        $(view).find('.board-game-container').append(coordinatesContainer);&#13;
&#13;
        function setCalculatedPosition(e) {&#13;
            coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
            coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
            presenter.mouseSX = parseInt(coordinations.x, 10) - parseInt($(view).find('.board-game-container').offset().left,10);&#13;
            presenter.mouseSY = parseInt(coordinations.y, 10) - parseInt($(view).find('.board-game-container').offset().top,10);&#13;
            xContainer.find('.value').html(presenter.mouseSX);&#13;
            yContainer.find('.value').html(presenter.mouseSY);&#13;
        }&#13;
&#13;
        var doesElementExist = function() {&#13;
            var $moduleSelector = $('.moduleSelector[data-id="' + presenter.modelID + '"]');&#13;
&#13;
            if ($moduleSelector.length &gt; 0) {&#13;
                $moduleSelector.on('mousemove', function(e) {&#13;
                    setCalculatedPosition(e);&#13;
                });&#13;
&#13;
                clearInterval(presenter.interval);&#13;
            }&#13;
        };&#13;
&#13;
        presenter.interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
        $(view).find('.board-game-container').on('mousemove', function(e) {&#13;
            setCalculatedPosition(e);&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('disable');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isDisable = false;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
        presenter.$view.find('.board-game-element').draggable("enable");&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
&#13;
    presenter.setElementsPosition = function(arrayLeft, arrayTop){&#13;
        var i;&#13;
&#13;
        for(i = 0; i &lt; presenter.imagesLength; i++){&#13;
            $(presenter.boardCounters[i]).css({&#13;
                'left' : arrayLeft[i] + "px",&#13;
                'top' : arrayTop[i] + "px"&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getElementsPosition = function(){&#13;
        var i;&#13;
&#13;
        for(i = 0; i &lt; presenter.imagesLength; i++) {&#13;
            presenter.currentLeftValue[i] = parseInt($(presenter.$view.find('.board-game-element')[i]).css("left"),10);&#13;
            presenter.currentTopValue[i] = parseInt($(presenter.$view.find('.board-game-element')[i]).css("top"),10);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
&#13;
        var additionalState = {};&#13;
&#13;
        if (presenter.gameTypes.FREE === presenter.gameMode) {&#13;
            additionalState = presenter.getStateForFreeMode();&#13;
        } else {&#13;
            additionalState = presenter.getStateForGameMode();&#13;
        }&#13;
&#13;
        return JSON.stringify($.extend({&#13;
            isVisible : isVisible,&#13;
            wasVisible : wasVisible,&#13;
            wasDisable : wasDisable,&#13;
            isDisable : isDisable&#13;
        }, additionalState));&#13;
&#13;
    };&#13;
&#13;
    presenter.getStateForFreeMode = function () {&#13;
        presenter.getElementsPosition();&#13;
&#13;
        var originalLeftValue = presenter.originalLeftValue;&#13;
        var originalTopValue = presenter.originalTopValue;&#13;
        var currentLeftValue = presenter.currentLeftValue;&#13;
        var currentTopValue = presenter.currentTopValue;&#13;
&#13;
        return {&#13;
            originalLeftValue : originalLeftValue,&#13;
            originalTopValue : originalTopValue,&#13;
            currentLeftValue : currentLeftValue,&#13;
            currentTopValue : currentTopValue,&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getStateForGameMode = function () {&#13;
        return {&#13;
            counterPositions: presenter.counterPositions,&#13;
            lastSelectedCounter: presenter.lastSelectedCounter,&#13;
            lastMove: presenter.lastMove&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsedState = JSON.parse(state), $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        if(presenter.isDisable){&#13;
            $($myDiv).addClass('disable');&#13;
        } else{&#13;
            $($myDiv).removeClass('disable');&#13;
        }&#13;
&#13;
        if (presenter.gameMode === presenter.gameTypes.FREE) {&#13;
            presenter.setStateForFreeMode(parsedState);&#13;
        } else {&#13;
            presenter.setStateForGameMode(parsedState);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setStateForFreeMode = function (parsedState) {&#13;
        presenter.originalLeftValue = parsedState.originalLeftValue;&#13;
        presenter.originalTopValue = parsedState.originalTopValue;&#13;
        presenter.currentLeftValue = parsedState.currentLeftValue;&#13;
        presenter.currentTopValue = parsedState.currentTopValue;&#13;
&#13;
        if(presenter.isDisable){&#13;
            presenter.$view.find('.board-game-element').draggable("disable");&#13;
        } else{&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
&#13;
        presenter.setElementsPosition(presenter.currentLeftValue, presenter.currentTopValue);&#13;
&#13;
    };&#13;
&#13;
    presenter.setStateForGameMode = function (parsedState) {&#13;
        presenter.boardCounters.each(function (index, element) {&#13;
            presenter.selectCounter(element, index);&#13;
            presenter.moveCounter(parsedState.counterPositions[index], false);&#13;
        });&#13;
&#13;
        presenter.selectCounter(presenter.boardCounters[parsedState.lastSelectedCounter], parsedState.lastSelectedCounter);&#13;
        presenter.lastMove = parsedState.lastMove;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
&#13;
        if(presenter.isDisable){&#13;
            $($myDiv).addClass('disable');&#13;
        } else{&#13;
            $($myDiv).removeClass('disable');&#13;
        }&#13;
&#13;
        if (presenter.gameMode === presenter.gameTypes.FREE) {&#13;
            presenter.resetFreeGame();&#13;
        } else {&#13;
            presenter.resetGameMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.resetFreeGame = function () {&#13;
        presenter.setElementsPosition(presenter.originalLeftValue, presenter.originalTopValue);&#13;
&#13;
        if (presenter.isDisable) {&#13;
            presenter.$view.find('.board-game-element').draggable("disable");&#13;
        } else {&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.resetGameMode = function () {&#13;
        $(presenter.boardCounters).stop();&#13;
        presenter.moveCountersToFirstField();&#13;
&#13;
        presenter.selectCounter(presenter.boardCounters[0], 0);&#13;
        presenter.lastMove = null;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.showErrorsMode = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('check');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.showErrorsMode = false;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).removeClass('check');&#13;
&#13;
        if(!presenter.isDisable){&#13;
            presenter.$view.find('.board-game-element').draggable("enable");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.showErrorsMode === true){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.showAnswersMode = true;&#13;
        var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
        $($myDiv).addClass('show-answer');&#13;
        presenter.$view.find('.board-game-element').draggable("disable");&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.showAnswersMode === true){&#13;
            var $myDiv = presenter.$view.find('.board-game-container')[0];&#13;
            $($myDiv).removeClass('show-answer');&#13;
&#13;
            if(!presenter.isDisable){&#13;
                presenter.$view.find('.board-game-element').draggable("enable");&#13;
            }&#13;
&#13;
            presenter.showAnswersMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName === "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(eventItem, eventValue) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + eventItem,&#13;
            value : '' + eventValue,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(eventItem, eventValue) {&#13;
        var eventData = presenter.createEventData(eventItem, eventValue);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.sendEventCounterMoved = function (counterIndex, position) {&#13;
        var eventData = presenter.createEventData(counterIndex + 1, position + 1);&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.moveCounter = function (distance, withAnimation) {&#13;
        if (withAnimation === undefined) {&#13;
            withAnimation = true;&#13;
        }&#13;
&#13;
        var counterIndex = presenter.lastSelectedCounter,&#13;
            counterElementToMove = presenter.boardCounters[counterIndex],&#13;
            counterPosition = presenter.counterPositions[counterIndex],&#13;
            newCounterPosition = Math.min(presenter.countersContainers.length - 1, counterPosition + distance);&#13;
&#13;
        newCounterPosition = Math.max(0, newCounterPosition);&#13;
&#13;
        $(counterElementToMove).stop();&#13;
&#13;
        presenter.counterPositions[counterIndex] = newCounterPosition;&#13;
        presenter.view.appendChild(counterElementToMove);&#13;
        presenter.lastMove = {&#13;
            counterNumber: counterIndex,&#13;
            position: counterPosition&#13;
        };&#13;
&#13;
        var nextCounterPosition = (counterIndex + 1) % presenter.boardCounters.length;&#13;
        presenter.selectCounter(presenter.boardCounters[nextCounterPosition], nextCounterPosition);&#13;
&#13;
        presenter.animate(counterIndex, counterPosition, newCounterPosition, withAnimation);&#13;
    };&#13;
&#13;
    presenter.canExecuteAction = function () {&#13;
        if (presenter.isDisable || presenter.showErrorsMode || presenter.showAnswersMode) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (presenter.gameMode !== presenter.gameTypes.GAME) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.move = function (distance) {&#13;
        distance = parseInt(distance, 10);&#13;
        if (isNaN(distance)) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.canExecuteAction()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.moveCounter(distance);&#13;
    };&#13;
&#13;
    presenter.undo = function () {&#13;
        if (!presenter.canExecuteAction()) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.lastMove === null) {&#13;
            return;&#13;
        }&#13;
&#13;
&#13;
        var counterElementToMove = presenter.boardCounters[presenter.lastMove.counterNumber];&#13;
        $(counterElementToMove).stop();&#13;
&#13;
        presenter.selectCounter(counterElementToMove, presenter.lastMove.counterNumber);&#13;
        presenter.countersContainers[presenter.lastMove.position].appendChild(counterElementToMove);&#13;
        presenter.counterPositions[presenter.lastMove.counterNumber] = presenter.lastMove.position;&#13;
        presenter.setUndoCorrectCSSPosition();&#13;
&#13;
        presenter.lastMove = null;&#13;
    };&#13;
&#13;
    presenter.setUndoCorrectCSSPosition = function () {&#13;
        var destXPosition = presenter.fieldsPositions[presenter.lastMove.position].Left;&#13;
        var destYPosition = presenter.fieldsPositions[presenter.lastMove.position].Top;&#13;
        var counterElementToMove = presenter.boardCounters[presenter.lastMove.counterNumber];&#13;
&#13;
        $(counterElementToMove).css({&#13;
            left: destXPosition + 'px',&#13;
            top: destYPosition + 'px',&#13;
            position: 'static'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.diceExecute = function (distance) {&#13;
        presenter.move(distance);&#13;
    };&#13;
&#13;
    // Game mode controller&#13;
    function BoardGameGameModeKeyboardController(elements) {&#13;
        KeyboardController.call(this, elements, elements.length);&#13;
    }&#13;
    BoardGameGameModeKeyboardController.prototype = Object.create(KeyboardController.prototype);&#13;
    BoardGameGameModeKeyboardController.prototype.constructor = BoardGameGameModeKeyboardController;&#13;
&#13;
    //Free mode controller&#13;
&#13;
    /**&#13;
     * Get clientX and clientY positions based on element position&#13;
     * @param {jQuery} $element&#13;
     * @returns {{left: number, top: number}}&#13;
     */&#13;
    function getElementPosition ($element) {&#13;
        var top = $element.offset().top - document.documentElement.scrollTop,&#13;
            left = $element.offset().left - document.documentElement.scrollLeft;&#13;
&#13;
        return {&#13;
            left: left,&#13;
            top: top&#13;
        };&#13;
    }&#13;
&#13;
    /**&#13;
     * Build mouse event for simulating drag n drop&#13;
     * @param {"mousedown"|"mouseup"|"mousemove"} type&#13;
     * @param position {{top: Number, left: Number}}&#13;
     * @returns {MouseEvent}&#13;
     */&#13;
    function buildMouseEvent(type, position) {&#13;
        var event = document.createEvent("MouseEvent");&#13;
        event.initMouseEvent(type, true, true, window, 1, 0, 0, position.left, position.top, false, false, false, false, 0, null);&#13;
&#13;
        return event;&#13;
    }&#13;
&#13;
    function BoardGameFreeModeKeyboardController(elements) {&#13;
        KeyboardController.call(this, elements, elements.length);&#13;
    }&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype = Object.create(KeyboardController.prototype);&#13;
    BoardGameFreeModeKeyboardController.prototype.constructor = BoardGameFreeModeKeyboardController;&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.left = function () {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        position.left -= 2;&#13;
&#13;
        var event = buildMouseEvent("mousemove", position);&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.right = function () {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        position.left += 2;&#13;
&#13;
        var event = buildMouseEvent("mousemove", position);&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.up = function () {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        position.top -= 2;&#13;
&#13;
        var event = buildMouseEvent("mousemove", position);&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.down = function () {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        position.top += 2;&#13;
&#13;
        var event = buildMouseEvent("mousemove", position);&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.tab = function (ev) {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement),&#13;
            event = buildMouseEvent("mouseup", position);&#13;
&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
&#13;
        KeyboardController.prototype.nextElement.call(this, ev);&#13;
&#13;
        position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        event = buildMouseEvent("mousedown", position);&#13;
&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.enter = function (ev) {&#13;
        KeyboardController.prototype.enter.call(this, ev);&#13;
&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement);&#13;
        var event = buildMouseEvent("mousedown", position);&#13;
&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
    };&#13;
&#13;
    BoardGameFreeModeKeyboardController.prototype.exitWCAGMode = function (ev) {&#13;
        var position = getElementPosition(this.keyboardNavigationCurrentElement),&#13;
            event = buildMouseEvent("mouseup", position);&#13;
&#13;
        this.keyboardNavigationCurrentElement[0].dispatchEvent(event);&#13;
&#13;
        KeyboardController.prototype.exitWCAGMode.call(this, ev);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keyCode, isShiftDown, originalEvent) {&#13;
        presenter.boardGameKeyboardController.handle(keyCode, isShiftDown, originalEvent);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>