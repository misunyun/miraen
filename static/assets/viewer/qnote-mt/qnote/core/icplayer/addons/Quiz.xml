<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Quiz" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isDefault="true" name="Questions" nameLabel="Quiz_property_Questions" type="list">
            <property isLocalized="true" name="Question" nameLabel="Quiz_property_Question" type="html"/>
            <property name="CorrectAnswer" nameLabel="Quiz_property_CorrectAnswer" type="string"/>
            <property name="WrongAnswer1" nameLabel="Quiz_property_WrongAnswer1" type="string"/>
            <property name="WrongAnswer2" nameLabel="Quiz_property_WrongAnswer2" type="string"/>
            <property name="WrongAnswer3" nameLabel="Quiz_property_WrongAnswer3" type="string"/>
            <property isLocalized="true" name="Hint" nameLabel="Quiz_property_hint" type="html"/>
        </property>
        <property name="TestMode" nameLabel="Quiz_property_TestMode" type="boolean"/>
        <property name="ShowHelpButtons" nameLabel="Quiz_property_ShowHelpButtons" type="boolean"/>
        <property name="HelpButtonsMode" nameLabel="Quiz_property_HelpButtonsMode" type="{Both, Hint, 50/50}"/>
        <property name="NextAfterSelect" nameLabel="Quiz_property_NextAfterSelect" type="boolean"/>
        <property isLocalized="true" name="NextLabel" nameLabel="Quiz_property_NextLabel" type="string"/>
        <property isLocalized="true" name="GameLostMessage" nameLabel="Quiz_property_GameLostMessage" type="html"/>
        <property isLocalized="true" name="GameWonMessage" nameLabel="Quiz_property_GameWonMessage" type="html"/>
        <property name="ShowSummary" nameLabel="Quiz_property_Summary" type="boolean"/>
        <property isLocalized="true" name="GameSummaryMessage" nameLabel="Quiz_property_GameSummaryMessage" type="html"/>
        <property isLocalized="true" name="CorrectGameMessage" nameLabel="Quiz_property_CorrectGameMessage" type="html"/>
        <property isLocalized="true" name="WrongGameMessage" nameLabel="Quiz_property_WrongGameMessage" type="html"/>
        <property name="Center vertically" nameLabel="Quiz_property_center_vertically" type="boolean"/>
        <property name="isActivity" nameLabel="Quiz_property_isActivity" type="boolean"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Quiz_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Quiz_property_speech_texts" type="staticlist">
            <property name="Question" nameLabel="Quiz_speech_text_question" type="staticrow">
                <property name="Question" nameLabel="Quiz_speech_text_question" type="string"/>
            </property>
            <property name="Answer" nameLabel="Quiz_speech_text_answer" type="staticrow">
                <property name="Answer" nameLabel="Quiz_speech_text_answer" type="string"/>
            </property>
            <property name="FiftyFiftyButton" nameLabel="Quiz_speech_text_fifty_fifty_button" type="staticrow">
                <property name="FiftyFiftyButton" nameLabel="Quiz_speech_text_fifty_fifty_button" type="string"/>
            </property>
            <property name="FiftyFiftyButtonWhenNotEnoughAnswers" nameLabel="Quiz_speech_text_fifty_fifty_button_when_not_enough_answers" type="staticrow">
                <property name="FiftyFiftyButtonWhenNotEnoughAnswers" nameLabel="Quiz_speech_text_fifty_fifty_button_when_not_enough_answers" type="string"/>
            </property>
            <property name="HintButton" nameLabel="Quiz_speech_text_hint_button" type="staticrow">
                <property name="HintButton" nameLabel="Quiz_speech_text_hint_button" type="string"/>
            </property>
            <property name="CommentField" nameLabel="Quiz_speech_text_comment_field" type="staticrow">
                <property name="CommentField" nameLabel="Quiz_speech_text_comment_field" type="string"/>
            </property>
            <property name="Hint" nameLabel="Quiz_speech_text_hint" type="staticrow">
                <property name="Hint" nameLabel="Quiz_speech_text_hint" type="string"/>
            </property>
            <property name="Summary" nameLabel="Quiz_speech_text_summary" type="staticrow">
                <property name="Summary" nameLabel="Quiz_speech_text_summary" type="string"/>
            </property>
            <property name="Selected" nameLabel="Quiz_speech_text_selected" type="staticrow">
                <property name="Selected" nameLabel="Quiz_speech_text_selected" type="string"/>
            </property>
            <property name="Correct" nameLabel="Quiz_speech_text_correct" type="staticrow">
                <property name="Correct" nameLabel="Quiz_speech_text_correct" type="string"/>
            </property>
            <property name="Wrong" nameLabel="Quiz_speech_text_wrong" type="staticrow">
                <property name="Wrong" nameLabel="Quiz_speech_text_wrong" type="string"/>
            </property>
            <property name="Inactive" nameLabel="Quiz_speech_text_inactive" type="staticrow">
                <property name="Inactive" nameLabel="Quiz_speech_text_inactive" type="string"/>
            </property>
            <property name="OutOf" nameLabel="Quiz_speech_text_out_of" type="staticrow">
                <property name="OutOf" nameLabel="Quiz_speech_text_out_of" type="string"/>
            </property>
        </property>
    </model>
<css>.quiz-error-layer {&#13;
    color: #FF0000;&#13;
    background-color: #FFFFFF;&#13;
    width:100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper .question-title {&#13;
    text-align: center;&#13;
    height: 33%;&#13;
}&#13;
&#13;
.question-wrapper .hint-button {&#13;
    background: url("resources/hint.svg") #c0c0c0 no-repeat center;&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: pointer;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .fifty-fifty {&#13;
    background: url("resources/50-50.svg") #c0c0c0 no-repeat center;&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: pointer;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .next-question-button {&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: default;&#13;
    float: right;&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
.question-wrapper .next-question-button.active {&#13;
    cursor: pointer;&#13;
    opacity: 1;&#13;
}&#13;
&#13;
.question-wrapper .question-tips {&#13;
    display: inline-block;&#13;
    width: 80%;&#13;
    float: left;&#13;
    height: 34%;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-buttons {&#13;
    display: block;&#13;
    width: 20%;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-buttons .used {&#13;
    opacity: 0.5;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.question-wrapper .removed {&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip {&#13;
    display: inline-block;&#13;
    cursor: pointer;&#13;
    width: 50%;&#13;
    height: 50%;&#13;
}&#13;
&#13;
.headers-of-answers {&#13;
    display: inline-flex;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.answers {&#13;
    width: 85%;&#13;
    display: inline-flex;&#13;
    margin-left: 0.5em;&#13;
}&#13;
&#13;
.center-vertically{&#13;
    position: relative;&#13;
    top: 50%;&#13;
    transform: translateY(-50%);&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.correct {&#13;
    background-color: greenyellow;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.wrong {&#13;
    background-color: #A52A2A;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.option {&#13;
    background-color: #fba600;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-wrapper {&#13;
    height: 33%;&#13;
    width: 80%;&#13;
    float: left;&#13;
    display: block;&#13;
}&#13;
&#13;
.question-wrapper .question-hint {&#13;
    background-color: #FFFF00;&#13;
    color: #000000;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper .game-won-message-wrapper {&#13;
    background-color: #00aa00;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.question-wrapper .game-won-message {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.question-wrapper .game-lost-message-wrapper {&#13;
    background-color: #aa0000;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: relative;&#13;
&#13;
}&#13;
.question-wrapper .game-lost-message {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.question-wrapper .game-summary-message-wrapper {&#13;
    background-color: #ffffff;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    color: #000000;&#13;
}&#13;
.question-wrapper .game-summary-message {&#13;
    text-align: center;&#13;
}&#13;
.question-wrapper.disabled,&#13;
.question-wrapper.disabled .hint-button,&#13;
.question-wrapper.disabled .fifty-fifty,&#13;
.question-wrapper.disabled .question-tips .question-tip {&#13;
    cursor: not-allowed;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.correct-answer {&#13;
    background-color: #99FF55;&#13;
}&#13;
&#13;
.question-wrapper .quiz-progress {&#13;
    width: 60px;&#13;
    float: right;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="question-wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="question-wrapper"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonQuiz_create() {&#13;
    /*&#13;
    *  KNOWN ISSUES:&#13;
    *&#13;
    *  The first time the addon is loaded, mathjax is rendered.&#13;
    *  Each reload content requires mathjax reload.&#13;
    *  When addon is loaded first time you shouldn't manually reload mathjax.&#13;
    *&#13;
    */&#13;
&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var playerController;&#13;
    var eventBus; // Modules communication&#13;
    var state;&#13;
&#13;
    var ERRORS = {&#13;
        'QUESTION_REQUIRED': "At least 1 question is required.",&#13;
        'EMPTY_QUESTION': "At least one question is not specified",&#13;
        'MISSING_CORRECT_ANSWER': "At least one question doesn't have specified correct answer",&#13;
        'MISSING_WRONG_ANSWER': "At least one question doesn't have specified wrong answer",&#13;
        'MISSING_HINT': "At least one question doesn't have specified hint",&#13;
    };&#13;
&#13;
    var CSS_CLASSES = {&#13;
        QUESTION_TITLE: 'question-title',&#13;
        QUESTION_TIP: 'question-tip',&#13;
        FIFTY_FIFTY: 'fifty-fifty',&#13;
        HINT_BUTTON: 'hint-button',&#13;
        NEXT_QUESTION_BUTTON: 'next-question-button',&#13;
        QUESTION_HINT_WRAPPER: 'question-hint-wrapper',&#13;
        QUESTION_HINT: 'question-hint',&#13;
        GAME_WON_MESSAGE: 'game-won-message',&#13;
        GAME_LOST_MESSAGE: 'game-lost-message',&#13;
        ACTIVE: 'active',&#13;
        CORRECT: 'correct',&#13;
        WRONG: 'wrong',&#13;
        REMOVED: 'removed',&#13;
        OPTION: 'option',&#13;
    };&#13;
&#13;
    var DEFAULT_TTS_PHRASES = {&#13;
        Question: 'Question',&#13;
        Answer: 'Answer',&#13;
        FiftyFiftyButton: 'Fifty-Fifty button',&#13;
        FiftyFiftyButtonWhenNotEnoughAnswers: 'Fifty-Fifty button is inactive because there are less than 4 answers',&#13;
        HintButton: 'Hint button',&#13;
        CommentField: 'Comment field',&#13;
        Hint: 'Hint',&#13;
        Summary: 'Summary',&#13;
        Selected: 'Selected',&#13;
        Correct: 'Correct',&#13;
        Wrong: 'Wrong',&#13;
        Inactive: 'Inactive',&#13;
        OutOf: 'Out of',&#13;
    };&#13;
&#13;
    function ConfigurationError(label) {&#13;
        return {&#13;
            name: 'ConfigurationError',&#13;
            message: ERRORS[label] || label&#13;
        }&#13;
    }&#13;
&#13;
    presenter.activeElements = [];&#13;
    presenter.isLoaded = false;&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    function setupDefaults() {&#13;
        state = {&#13;
            currentQuestion: 1,&#13;
            answersOrder: false,&#13;
            wasWrong: false,&#13;
            haveWon: false,&#13;
            fiftyFiftyUsed: false,&#13;
            hintUsed: null,&#13;
            selectedAnswer: null,&#13;
            isVisible: true,&#13;
            score: []&#13;
        };&#13;
        // addon's modes&#13;
        presenter.isErrorMode = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
    }&#13;
&#13;
    presenter.createAllOKEventData = function AddonQuiz_createAllOKEventData() {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    function validateQuestions(questions, helpButtons, helpButtonsMode) {&#13;
        if (questions.length &lt; 1) {&#13;
            throw ConfigurationError('QUESTION_REQUIRED');&#13;
        }&#13;
        for (var i = 0; i &lt; questions.length; i++) {&#13;
            var q = questions[i];&#13;
            if (ModelValidationUtils.isHtmlEmpty(q.Question)) {&#13;
                throw ConfigurationError('EMPTY_QUESTION');&#13;
            }&#13;
            if (ModelValidationUtils.isStringEmpty(q.CorrectAnswer)) {&#13;
                throw ConfigurationError('MISSING_CORRECT_ANSWER');&#13;
            }&#13;
            if (ModelValidationUtils.isStringEmpty(q.WrongAnswer1) &amp;&amp; ModelValidationUtils.isStringEmpty(q.WrongAnswer2) &amp;&amp; ModelValidationUtils.isStringEmpty(q.WrongAnswer3)&#13;
            ) {&#13;
                throw ConfigurationError('MISSING_WRONG_ANSWER');&#13;
            }&#13;
            if (helpButtons &amp;&amp; ModelValidationUtils.isHtmlEmpty(q.Hint) &amp;&amp; helpButtonsMode !== '50/50') {&#13;
                throw ConfigurationError('MISSING_HINT');&#13;
            }&#13;
        }&#13;
        return questions;&#13;
    }&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            Question: DEFAULT_TTS_PHRASES.Question,&#13;
            Answer: DEFAULT_TTS_PHRASES.Answer,&#13;
            FiftyFiftyButton: DEFAULT_TTS_PHRASES.FiftyFiftyButton,&#13;
            FiftyFiftyButtonWhenNotEnoughAnswers: DEFAULT_TTS_PHRASES.FiftyFiftyButtonWhenNotEnoughAnswers,&#13;
            HintButton: DEFAULT_TTS_PHRASES.HintButton,&#13;
            CommentField: DEFAULT_TTS_PHRASES.CommentField,&#13;
            Hint: DEFAULT_TTS_PHRASES.Hint,&#13;
            Summary: DEFAULT_TTS_PHRASES.Summary,&#13;
            Selected: DEFAULT_TTS_PHRASES.Selected,&#13;
            Correct: DEFAULT_TTS_PHRASES.Correct,&#13;
            Wrong: DEFAULT_TTS_PHRASES.Wrong,&#13;
            Inactive: DEFAULT_TTS_PHRASES.Inactive,&#13;
            OutOf: DEFAULT_TTS_PHRASES.OutOf,&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            Question: getSpeechTextProperty(&#13;
                speechTexts.Question.Question,&#13;
                presenter.speechTexts.Question),&#13;
            Answer: getSpeechTextProperty(&#13;
                speechTexts.Answer.Answer,&#13;
                presenter.speechTexts.Answer),&#13;
            FiftyFiftyButton: getSpeechTextProperty(&#13;
                speechTexts.FiftyFiftyButton.FiftyFiftyButton,&#13;
                presenter.speechTexts.FiftyFiftyButton),&#13;
            FiftyFiftyButtonWhenNotEnoughAnswers: getSpeechTextProperty(&#13;
                speechTexts.FiftyFiftyButtonWhenNotEnoughAnswers.FiftyFiftyButtonWhenNotEnoughAnswers,&#13;
                presenter.speechTexts.FiftyFiftyButtonWhenNotEnoughAnswers),&#13;
            HintButton: getSpeechTextProperty(&#13;
                speechTexts.HintButton.HintButton,&#13;
                presenter.speechTexts.HintButton),&#13;
            CommentField: getSpeechTextProperty(&#13;
                speechTexts.CommentField.CommentField,&#13;
                presenter.speechTexts.CommentField),&#13;
            Hint: getSpeechTextProperty(&#13;
                speechTexts.Hint.Hint,&#13;
                presenter.speechTexts.Hint),&#13;
            Summary: getSpeechTextProperty(&#13;
                speechTexts.Summary.Summary,&#13;
                presenter.speechTexts.Summary),&#13;
            Selected: getSpeechTextProperty(&#13;
                speechTexts.Selected.Selected,&#13;
                presenter.speechTexts.Selected),&#13;
            Correct: getSpeechTextProperty(&#13;
                speechTexts.Correct.Correct,&#13;
                presenter.speechTexts.Correct),&#13;
            Wrong: getSpeechTextProperty(&#13;
                speechTexts.Wrong.Wrong,&#13;
                presenter.speechTexts.Wrong),&#13;
            Inactive: getSpeechTextProperty(&#13;
                speechTexts.Inactive.Inactive,&#13;
                presenter.speechTexts.Inactive),&#13;
            OutOf: getSpeechTextProperty(&#13;
                speechTexts.OutOf.OutOf,&#13;
                presenter.speechTexts.OutOf)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setupConfig = function AddonQuiz_setupConfig(model) {&#13;
        var helpButtons = ModelValidationUtils.validateBoolean(model['ShowHelpButtons']);&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        presenter.config = {&#13;
            visibility: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            questions: validateQuestions(model['Questions'], helpButtons, model["HelpButtonsMode"]),&#13;
            helpButtons: helpButtons,&#13;
            nextLabel: model['NextLabel'] || '',&#13;
            gameLostMessage: model['GameLostMessage'],&#13;
            gameWonMessage: model['GameWonMessage'],&#13;
            gameSummaryMessage: model['GameSummaryMessage'],&#13;
            correctGameMessage: model['CorrectGameMessage'],&#13;
            wrongGameMessage: model['WrongGameMessage'],&#13;
            centerVertically: ModelValidationUtils.validateBoolean(model['Center vertically']),&#13;
            isActivity: ModelValidationUtils.validateBoolean(model['isActivity']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            nextAfterSelect: ModelValidationUtils.validateBoolean(model['NextAfterSelect']),&#13;
            testMode: ModelValidationUtils.validateBoolean(model['TestMode']),&#13;
            showSummary: ModelValidationUtils.validateBoolean(model['ShowSummary']),&#13;
            langTag: model["langAttribute"],&#13;
            helpButtonsMode: model["HelpButtonsMode"]&#13;
        }&#13;
    };&#13;
&#13;
    function shuffle(a) {&#13;
        var j, x, i;&#13;
        for (i = a.length; i; i--) {&#13;
            j = Math.floor(Math.random() * i);&#13;
            x = a[i - 1];&#13;
            a[i - 1] = a[j];&#13;
            a[j] = x;&#13;
        }&#13;
    };&#13;
&#13;
    function cleanWorkspace() {&#13;
        unbindEvents();&#13;
        presenter.activeElements = [];&#13;
        var wrapper = presenter.$view.find('.question-wrapper');&#13;
        wrapper.children().remove();&#13;
    };&#13;
&#13;
    function showInHintArea($element) {&#13;
        presenter.hintWrapper.children().remove();&#13;
        presenter.hintWrapper.append($element);&#13;
    };&#13;
&#13;
    function gameWonMessage() {&#13;
        var wrapper = $('&lt;div class="game-won-message-wrapper"&gt;&lt;/div&gt;');&#13;
        var message = $(`&lt;div class="${CSS_CLASSES.GAME_WON_MESSAGE}"&gt;&lt;/div&gt;`);&#13;
        if(presenter.config.showSummary) {&#13;
            message.html(window.xssUtils.sanitize(&#13;
                parseAltText(presenter.config.gameWonMessage) +&#13;
                '&lt;div&gt;' + parseAltText(presenter.config.gameSummaryMessage) +&#13;
                '&lt;div&gt;' + parseAltText(presenter.config.correctGameMessage) + ': ' + getScore() +&#13;
                '&lt;/div&gt;&lt;div&gt;' + parseAltText(presenter.config.wrongGameMessage) + ': ' + (presenter.config.questions.length - getScore()) +&#13;
                '&lt;/div&gt;' + '&lt;/div&gt;'));&#13;
        } else {&#13;
            message.html(window.xssUtils.sanitize(parseAltText(presenter.config.gameWonMessage)));&#13;
        }&#13;
        wrapper.append(message);&#13;
        showInHintArea(wrapper);&#13;
    };&#13;
&#13;
    function gameLostMessage() {&#13;
        var wrapper = $('&lt;div class="game-lost-message-wrapper"&gt;&lt;/div&gt;');&#13;
        var message = $(`&lt;div class="${CSS_CLASSES.GAME_LOST_MESSAGE}"&gt;&lt;/div&gt;`);&#13;
        if(presenter.config.showSummary) {&#13;
            message.html(window.xssUtils.sanitize(&#13;
                parseAltText(presenter.config.gameLostMessage) +&#13;
                '&lt;div&gt;' + parseAltText(presenter.config.gameSummaryMessage) +&#13;
                '&lt;div&gt;' + parseAltText(presenter.config.correctGameMessage) + ': ' + getScore() +&#13;
                '&lt;/div&gt;&lt;div&gt;' + parseAltText(presenter.config.wrongGameMessage) + ': ' + (presenter.config.questions.length - getScore()) +&#13;
                '&lt;/div&gt;' + '&lt;/div&gt;'));&#13;
        }else{&#13;
            message.html(window.xssUtils.sanitize(parseAltText(presenter.config.gameLostMessage)));&#13;
        }&#13;
        wrapper.append(message);&#13;
        showInHintArea(wrapper);&#13;
    };&#13;
&#13;
    function parseAltText(text) {&#13;
        return presenter.preview ? window.TTSUtils.parsePreviewAltText(text) : presenter.textParser.parse(text);&#13;
    }&#13;
&#13;
    function getSelectItemAction(answer, $this) {&#13;
        var isCorrect = answer == getCurrentQuestion().CorrectAnswer;&#13;
        return function selectItemAction(e) {&#13;
            if (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
            }&#13;
            var eventData = {&#13;
                'source': presenter.addonID,&#13;
                'item': state.currentQuestion,&#13;
                'value': '1',&#13;
                'score': '1'&#13;
            };&#13;
            state.selectedAnswer = answer;&#13;
            if (!presenter.config.testMode) {&#13;
                if (isCorrect) {&#13;
                    state.score[state.currentQuestion - 1] = 1;&#13;
                    $this.addClass(CSS_CLASSES.CORRECT);&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                    if (isLastQuestion()) {&#13;
                        gameWonMessage();&#13;
                        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
                        unbindEvents();&#13;
                    } else {&#13;
                        presenter.nextButton.addClass(CSS_CLASSES.ACTIVE);&#13;
                        unbindEvents(presenter.nextButton);&#13;
                        if (presenter.config.nextAfterSelect &#13;
                            &amp;&amp; !presenter.isWCAGOn) {&#13;
                            unbindEvents();&#13;
                            setTimeout(function () {&#13;
                                nextAfterSelectCallback();&#13;
                            }, 500);&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    state.score[state.currentQuestion - 1] = 0;&#13;
                    $this.addClass(CSS_CLASSES.WRONG);&#13;
                    eventData['score'] = '0';&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                    gameLostMessage();&#13;
                    state.wasWrong = true;&#13;
                    unbindEvents();&#13;
                }&#13;
            } else {&#13;
                $this.addClass(CSS_CLASSES.OPTION);&#13;
&#13;
                if (isCorrect) {&#13;
                    state.score[state.currentQuestion - 1] = 1;&#13;
                } else {&#13;
                    state.score[state.currentQuestion - 1] = 0;&#13;
                    eventData['score'] = '0';&#13;
                }&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
                if (isLastQuestion()) {&#13;
                    if (getScore() &gt;= presenter.config.questions.length) {&#13;
                        gameWonMessage();&#13;
                        state.wasWrong = false;&#13;
                        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
                    }else{&#13;
                        gameLostMessage();&#13;
                        state.wasWrong = true;&#13;
                    }&#13;
                    unbindEvents();&#13;
                } else {&#13;
                    presenter.nextButton.addClass(CSS_CLASSES.ACTIVE);&#13;
                    unbindEvents(presenter.nextButton);&#13;
                    if (presenter.config.nextAfterSelect &#13;
                        &amp;&amp; !presenter.isWCAGOn) {&#13;
                        unbindEvents();&#13;
                        setTimeout(function () {&#13;
                            nextAfterSelectCallback();&#13;
                        }, 500);&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function bindEvents() {&#13;
        var elements;&#13;
        if (arguments.length &gt; 0) {&#13;
            elements = Array.prototype.slice.call(arguments);&#13;
        } else {&#13;
            elements = presenter.activeElements;&#13;
        }&#13;
        unbindEvents();&#13;
        for (var i = 0; i &lt; elements.length; i++) {&#13;
            var $el = elements[i];&#13;
            $el.bind('click', $el.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    function unbindEvents() {&#13;
        var args = Array.prototype.slice.call(arguments);&#13;
        for (var i = 0; i &lt; presenter.activeElements.length; i++) {&#13;
            var $el = presenter.activeElements[i];&#13;
            if (args.indexOf($el) &gt; -1) {&#13;
                continue;&#13;
            }&#13;
            $el.unbind('click', $el.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    function getCurrentQuestion() {&#13;
        return presenter.config.questions[state.currentQuestion - 1];&#13;
    }&#13;
&#13;
    function isLastQuestion() {&#13;
        return state.currentQuestion === presenter.config.questions.length;&#13;
    }&#13;
&#13;
    function nextAfterSelectCallback() {&#13;
        nextButtonAction();&#13;
        bindEvents();&#13;
    }&#13;
&#13;
    function fiftyFiftyAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if (state.answersOrder.length &gt;= 4 &amp;&amp; !state.fiftyFiftyUsed) {&#13;
            // clue:&#13;
            state.fiftyFiftyUsed = true;&#13;
            unbindEvents();&#13;
            var removedItems = 0,&#13;
                i = -1;&#13;
            while (removedItems &lt; 2) {&#13;
                i++;&#13;
                if (i == state.answersOrder.length) {&#13;
                    i = 0;&#13;
                }&#13;
                var item = state.answersOrder[i];&#13;
                if (item === 0 || item == null) {&#13;
                    continue;&#13;
                }&#13;
                var x = Math.round(Math.random());&#13;
                if (x) {&#13;
                    removedItems++;&#13;
                    state.answersOrder[i] = null;&#13;
                }&#13;
            }&#13;
            presenter.showCurrentQuestion();&#13;
            bindEvents();&#13;
        }&#13;
    };&#13;
&#13;
    function showHint() {&#13;
        var $hint = $(`&lt;div class="${CSS_CLASSES.QUESTION_HINT}"&gt;&lt;/div&gt;`);&#13;
        $hint.html(window.xssUtils.sanitize(parseAltText(getCurrentQuestion().Hint)));&#13;
        showInHintArea($hint);&#13;
        presenter.$view.find('.hint-button').addClass('used');&#13;
    }&#13;
&#13;
    function nextButtonAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if ((!state.wasWrong) &amp;&amp; (state.selectedAnswer !== null) &amp;&amp; state.currentQuestion &lt; presenter.config.questions.length) {&#13;
            state.selectedAnswer = null;&#13;
            state.answersOrder = false;&#13;
            state.currentQuestion++;&#13;
            presenter.showCurrentQuestion();&#13;
            if (presenter.keyboardControllerObject.keyboardNavigationActive) {&#13;
                presenter.keyboardControllerObject.markCurrentElement(0);&#13;
                presenter.keyboardControllerObject.readCurrentElement();&#13;
            }&#13;
            bindEvents();&#13;
        }&#13;
    }&#13;
&#13;
    function hintAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if (state.hintUsed === null) {&#13;
            state.hintUsed = state.currentQuestion;&#13;
            showHint();&#13;
        }&#13;
    };&#13;
&#13;
    function addProgressBar(wrapper) {&#13;
        var progress = $('&lt;div class="quiz-progress"&gt;&lt;/div&gt;'),&#13;
            current = state.currentQuestion,&#13;
            len = presenter.config.questions.length,&#13;
            info = '&lt;span class="current-question-number"&gt;' + current + '&lt;/span&gt;' +&#13;
                '&lt;span class="divider"&gt;/&lt;/span&gt;' +&#13;
                '&lt;span class="questions-number"&gt;' + len + '&lt;/span&gt;';&#13;
        progress.html(info);&#13;
        wrapper.append(progress);&#13;
    };&#13;
&#13;
    function showQuestion(q, showAnswer) {&#13;
        var $q = presenter.$view.find('.question-wrapper');&#13;
        var $title = $(`&lt;div class="${CSS_CLASSES.QUESTION_TITLE}"&gt;&lt;/div&gt;`);&#13;
        var $tips = $('&lt;div class="question-tips"&gt;&lt;/div&gt;');&#13;
        var $nextButton = $(`&lt;div class="${CSS_CLASSES.NEXT_QUESTION_BUTTON}"&gt;&lt;/div&gt;`);&#13;
        $nextButton.html(window.xssUtils.sanitize(parseAltText(presenter.config.nextLabel)));&#13;
        $nextButton.clickAction = nextButtonAction;&#13;
&#13;
        cleanWorkspace();&#13;
&#13;
        $title.html(window.xssUtils.sanitize(parseAltText(q.Question)));&#13;
&#13;
        var tempAnswers = [q.CorrectAnswer];&#13;
        [q.WrongAnswer1, q.WrongAnswer2, q.WrongAnswer3].forEach(function (wrongAnswer) {&#13;
            if (wrongAnswer &amp;&amp; wrongAnswer.length &gt; 0) {&#13;
                tempAnswers.push(wrongAnswer);&#13;
            }&#13;
        });&#13;
&#13;
        if (!state.answersOrder) {&#13;
            state.answersOrder = $.map(tempAnswers, function (element, index) {&#13;
                return index;&#13;
            });&#13;
            shuffle(state.answersOrder);&#13;
        }&#13;
&#13;
        var answers = $.map(tempAnswers, function (element, index) {&#13;
            return index;&#13;
        });&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            var index = state.answersOrder[i];&#13;
            if (index === null) {&#13;
                answers[i] = null;&#13;
            } else {&#13;
                answers[i] = tempAnswers[index];&#13;
            }&#13;
        }&#13;
&#13;
        var labels = ['A: ', 'B: ', 'C: ', 'D: '];&#13;
&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            var $tip = $(`&lt;div class="${CSS_CLASSES.QUESTION_TIP}"&gt;&lt;/div&gt;`);&#13;
            var answer = answers[i];&#13;
&#13;
            var headersOfAnswer = document.createElement('div');&#13;
            var $headersOfAnswer = $(headersOfAnswer);&#13;
            $headersOfAnswer.addClass("headers-of-answers");&#13;
&#13;
            var divAnswers = document.createElement('div');&#13;
            var $divAnswers = $(divAnswers);&#13;
            $divAnswers.addClass('answers');&#13;
&#13;
            var label = labels[i];&#13;
            $headersOfAnswer.text(label);&#13;
            $divAnswers.html(window.xssUtils.sanitize(parseAltText(answer || '')));&#13;
            if (answer === null) {&#13;
                $tip.addClass(CSS_CLASSES.REMOVED);&#13;
                $tip.clickAction = function () {&#13;
                };&#13;
            } else {&#13;
                $tip.clickAction = getSelectItemAction(answer, $tip);&#13;
            }&#13;
&#13;
            if (answer == q.CorrectAnswer) {&#13;
                if (showAnswer) {&#13;
                    $tip.addClass('correct-answer');&#13;
                } else if (state.selectedAnswer == answer) {&#13;
                    $tip.addClass('correct-answer');&#13;
                    if (state.currentQuestion &lt; presenter.config.questions.length) {&#13;
                        $nextButton.addClass(CSS_CLASSES.ACTIVE);&#13;
                    }&#13;
                }&#13;
            } else if (state.wasWrong &amp;&amp; state.selectedAnswer == answer) {&#13;
                $tip.addClass(CSS_CLASSES.WRONG);&#13;
            }&#13;
            $tips.append($tip);&#13;
            $tip.append($headersOfAnswer);&#13;
            $tip.append($divAnswers);&#13;
            presenter.activeElements.push($tip)&#13;
&#13;
            if (presenter.config.centerVertically) {&#13;
                $headersOfAnswer.addClass('center-vertically');&#13;
                $divAnswers.addClass('center-vertically');&#13;
            }&#13;
        }&#13;
&#13;
        $q.append($title);&#13;
        $q.append($tips);&#13;
        var $buttons = $('&lt;div class="question-hint-buttons"&gt;&lt;/div&gt;');&#13;
        addProgressBar($buttons);&#13;
        $q.append($buttons);&#13;
        presenter.hintWrapper = $(`&lt;div class="${CSS_CLASSES.QUESTION_HINT_WRAPPER}"&gt;&lt;/div&gt;`);&#13;
        $q.append(presenter.hintWrapper);&#13;
&#13;
        presenter.displayHint($q, $buttons);&#13;
&#13;
        presenter.activeElements.push($nextButton);&#13;
        presenter.nextButton = $nextButton;&#13;
        if (!presenter.config.nextAfterSelect) {&#13;
            $buttons.append($nextButton);&#13;
        }&#13;
        if (state.wasWrong) {&#13;
            gameLostMessage();&#13;
        } else if (haveWon()) {&#13;
            gameWonMessage();&#13;
        } else if (state.selectedAnswer) {&#13;
            bindEvents(presenter.nextButton);&#13;
        } else if (!showAnswer) {&#13;
            bindEvents();&#13;
        }&#13;
        if (presenter.keyboardControllerObject) {&#13;
            presenter.reloadKeyboardController();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.displayHint = function ($q, $buttons) {&#13;
        if (presenter.config.helpButtons) {&#13;
            var $fiftyFifty = $(`&lt;div class="${CSS_CLASSES.FIFTY_FIFTY}"&gt;&lt;/div&gt;`);&#13;
            var $hintButton = $(`&lt;div class="${CSS_CLASSES.HINT_BUTTON}"&gt;&lt;/div&gt;`);&#13;
            $fiftyFifty.clickAction = fiftyFiftyAction;&#13;
            $hintButton.clickAction = hintAction;&#13;
&#13;
            if (presenter.config.helpButtonsMode === 'Hint') {&#13;
                $buttons.append($hintButton);&#13;
                presenter.activeElements.push($hintButton);&#13;
            } else if (presenter.config.helpButtonsMode === '50/50') {&#13;
                $buttons.append($fiftyFifty);&#13;
                presenter.activeElements.push($fiftyFifty);&#13;
            } else {&#13;
                $buttons.append($fiftyFifty);&#13;
                $buttons.append($hintButton);&#13;
                presenter.activeElements.push($fiftyFifty);&#13;
                presenter.activeElements.push($hintButton);&#13;
            }&#13;
&#13;
            $q.addClass('with-hint');&#13;
            if (state.fiftyFiftyUsed) {&#13;
                $fiftyFifty.addClass('used');&#13;
            }&#13;
            if (state.hintUsed) {&#13;
                $hintButton.addClass('used');&#13;
                if (state.hintUsed == state.currentQuestion) {&#13;
                    showHint();&#13;
                }&#13;
            }&#13;
        } else {&#13;
            $q.addClass('without-hint');&#13;
        }&#13;
    }&#13;
&#13;
    function haveWon() {&#13;
        var q = getCurrentQuestion();&#13;
        return state.selectedAnswer == q.CorrectAnswer &amp;&amp; state.currentQuestion == presenter.config.questions.length;&#13;
    }&#13;
&#13;
    function initializeLogic(view, model, preview) {&#13;
        setupDefaults();&#13;
        presenter.$view = $(view);&#13;
        presenter.preview = preview;&#13;
        try {&#13;
            presenter.setupConfig(model);&#13;
            presenter.showCurrentQuestion();&#13;
            presenter.config.questions.forEach(function () {&#13;
                state.score.push(0);&#13;
            });&#13;
        } catch (error) {&#13;
            var $error = $('&lt;div class="quiz-error-layer"&gt;&lt;/div&gt;');&#13;
            var text = "&lt;strong&gt;" + error.name + "&lt;/strong&gt;: " + error.message;&#13;
            $error.html(text);&#13;
            presenter.$view.find('.question-wrapper').append($error);&#13;
            presenter.config = {};&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            bindEvents();&#13;
        }&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.showCurrentQuestion = function AddonQuiz_showCurrentQuestion() {&#13;
        showQuestion(getCurrentQuestion(), false);&#13;
        renderMathJax();&#13;
    };&#13;
&#13;
    function renderMathJax() {&#13;
        if (presenter.isLoaded) {&#13;
            reloadMathJax();&#13;
        }&#13;
    }&#13;
&#13;
    function reloadMathJax() {&#13;
        window.MathJax.Callback.Queue().Push(function () {&#13;
            window.MathJax.Hub.Typeset(presenter.$view[0]);&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function AddonQuiz_setPlayerController(controller) {&#13;
        playerController = controller;&#13;
&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonQuiz_setVisibility(isVisible) {&#13;
        state.isVisible = isVisible;&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function AddonQuiz_hide() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function AddonQuiz_show() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.run = function AddonQuiz_run(view, model) {&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        initializeLogic(view, upgradedModel, false);&#13;
        presenter.setVisibility(presenter.config.isVisible);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        presenter.$view[0].addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
&#13;
        presenter.isLoaded = true;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonQuiz_createPreview(view, model) {&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        initializeLogic(view, upgradedModel, true);&#13;
    };&#13;
&#13;
    presenter.getState = function AddonQuiz_getState() {&#13;
        if ("{}" === JSON.stringify(presenter.config)) {&#13;
            return "";&#13;
        }&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function AddonQuiz_setState(gotState) {&#13;
        if (!gotState) {&#13;
            return;&#13;
        }&#13;
        state = JSON.parse(gotState);&#13;
        presenter.showCurrentQuestion();&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function AddonQuiz_setShowErrorsMode() {&#13;
        if (!presenter.config.isActivity || presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        showErrorsMode();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function AddonQuiz_setWorkMode() {&#13;
        if (!presenter.config.isActivity || !presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        workMode();&#13;
    };&#13;
&#13;
    function showErrorsMode() {&#13;
        presenter.disable();&#13;
    };&#13;
&#13;
    function workMode() {&#13;
        presenter.enable();&#13;
    };&#13;
&#13;
    presenter.reset = function AddonQuiz_reset() {&#13;
        presenter.setWorkMode();&#13;
        setupDefaults();&#13;
        presenter.showCurrentQuestion();&#13;
        bindEvents();&#13;
        presenter.setVisibility(presenter.config.isVisible);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function AddonQuiz_getErrorCount() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getErrorCount();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function AddonQuiz_getMaxScore() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getMaxScore();&#13;
    };&#13;
&#13;
    presenter.getScore = function AddonQuiz_getScore() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getScore();&#13;
    };&#13;
&#13;
    function getErrorCount() {&#13;
        if (!presenter.config.testMode) {&#13;
            return state.wasWrong ? 1 : 0;&#13;
        } else {&#13;
            var errors = 0;&#13;
            state.score.forEach(function (e) {&#13;
                if (e == 0) {&#13;
                    errors = errors + 1;&#13;
                }&#13;
            });&#13;
            return errors;&#13;
        }&#13;
    }&#13;
&#13;
    function getMaxScore() {&#13;
        return presenter.config.questions.length;&#13;
    }&#13;
&#13;
    function getScore() {&#13;
        var score = 0;&#13;
        state.score.forEach(function (e) {&#13;
            if (e &gt; 0) {&#13;
                score = score + e;&#13;
            }&#13;
        });&#13;
        return score;&#13;
    }&#13;
&#13;
    presenter.executeCommand = function AddonQuiz_executeCommand(name, params) {&#13;
        if (presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted': presenter.isAttempted,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable,&#13;
            'reset': presenter.reset&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function AddonQuiz_isAllOK() {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function AddonQuiz_isAttempted() {&#13;
        return (state.currentQuestion &gt; 1) || state.wasWrong || (state.selectedAnswer !== null);&#13;
    };&#13;
&#13;
    presenter.disable = function AddonQuiz_disable() {&#13;
        presenter.$view.find('.question-wrapper').addClass('disabled');&#13;
        unbindEvents();&#13;
    };&#13;
&#13;
    presenter.enable = function AddonQuiz_enable() {&#13;
        presenter.$view.find('.question-wrapper').removeClass('disabled');&#13;
        bindEvents();&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        presenter.$view[0].removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        unbindEvents();&#13;
        presenter.$view.off();&#13;
        presenter.eventBus = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeAcceptWrongAnswers(model);&#13;
        upgradedModel = presenter.addLangTag(upgradedModel);&#13;
        upgradedModel = presenter.addSpeechTexts(upgradedModel);&#13;
        upgradedModel = presenter.addHelpButtonsMode(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeAcceptWrongAnswers = function (model) {&#13;
        if (!model['GameSummaryMessage']) {&#13;
            model['GameSummaryMessage'] = 'Score';&#13;
        }&#13;
        if (!model['CorrectGameMessage']) {&#13;
            model['CorrectGameMessage'] = 'Correct';&#13;
        }&#13;
        if (!model['WrongGameMessage']) {&#13;
            model['WrongGameMessage'] = 'Wrong';&#13;
        }&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.addLangTag = function AddonTable_upgradeLangTag(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] =  '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addHelpButtonsMode = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('HelpButtonsMode')) {&#13;
            upgradedModel['HelpButtonsMode'] =  'Both';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.addSpeechTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
        if (!model['speechTexts']) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Question: {Question: ''},&#13;
                Answer: {Answer: ''},&#13;
                FiftyFiftyButton: {FiftyFiftyButton: ''},&#13;
                FiftyFiftyButtonWhenNotEnoughAnswers: {FiftyFiftyButtonWhenNotEnoughAnswers: ''},&#13;
                HintButton: {HintButton: ''},&#13;
                CommentField: {CommentField: ''},&#13;
                Hint: {Hint: ''},&#13;
                Summary: {Summary: ''},&#13;
                Selected: {Selected: ''},&#13;
                Correct: {Correct: ''},&#13;
                Wrong: {Wrong: ''},&#13;
                Inactive: {Inactive: ''},&#13;
                OutOf: {OutOf: ''},&#13;
            }&#13;
        }&#13;
        return upgradedModel;&#13;
   };&#13;
&#13;
&#13;
    presenter.onEventReceived = function AddonQuiz_onEventReceived(eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function AddonQuiz_showAnswers() {&#13;
        if (!presenter.config.isActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.isShowAnswersActive = true;&#13;
        showAnswers();&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function AddonQuiz_hideAnswers() {&#13;
        if (!presenter.config.isActivity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
        presenter.isShowAnswersActive = false;&#13;
        hideAnswers();&#13;
    };&#13;
&#13;
    function showAnswers() {&#13;
        showQuestion(getCurrentQuestion(), true);&#13;
        reloadMathJax();&#13;
    }&#13;
&#13;
    function hideAnswers() {&#13;
        presenter.showCurrentQuestion();&#13;
    }&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function AddonQuiz_getTextToSpeechOrNull(playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.speak = function (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.speakWithCallback = function (data, callbackFunction) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speakWithCallback(data, callbackFunction);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject&#13;
            = new QuizKeyboardController(&#13;
                presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.reloadKeyboardController = function () {&#13;
        presenter.keyboardControllerObject.reload(&#13;
            presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        return presenter.$view.find(`&#13;
            .${CSS_CLASSES.QUESTION_TITLE},&#13;
            .${CSS_CLASSES.QUESTION_TIP},&#13;
            .${CSS_CLASSES.FIFTY_FIFTY},&#13;
            .${CSS_CLASSES.HINT_BUTTON},&#13;
            .${CSS_CLASSES.NEXT_QUESTION_BUTTON},&#13;
            .${CSS_CLASSES.QUESTION_HINT_WRAPPER}&#13;
        `);&#13;
    };&#13;
&#13;
    presenter.getQuestionTipsElementsForKeyboardNavigation = function () {&#13;
        return presenter.$view.find(`.${CSS_CLASSES.QUESTION_TIP}`);&#13;
    };&#13;
&#13;
    presenter.getCommendFieldElementForKeyboardNavigation = function () {&#13;
        return presenter.$view.find(`.${CSS_CLASSES.QUESTION_HINT_WRAPPER}`);&#13;
    };&#13;
&#13;
    presenter.getGameMessageElementForKeyboardNavigationFromElement = function ($element) {&#13;
        return $element.find(`.${CSS_CLASSES.GAME_LOST_MESSAGE}, .${CSS_CLASSES.GAME_WON_MESSAGE}`);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    function QuizKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    QuizKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    QuizKeyboardController.prototype.constructor = QuizKeyboardController;&#13;
&#13;
    QuizKeyboardController.prototype.exitWCAGMode = function () {&#13;
        KeyboardController.prototype.exitWCAGMode.call(this);&#13;
        presenter.setWCAGStatus(false);&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.reload = function (elements, columnsCount) {&#13;
        this.isSelectEnabled = true;&#13;
        this.keyboardNavigationElements = elements;&#13;
        this.columnsCount = columnsCount;&#13;
        this.keyboardNavigationElementsLen = elements.length;&#13;
        if (this.keyboardNavigationActive) {&#13;
            this.refreshMarkOnCurrentElement();&#13;
            this.enter();&#13;
        }&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.switchElement = function (move) {&#13;
        KeyboardController.prototype.switchElement.call(this, move);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.readCurrentElement = function () {&#13;
        this.readElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.refreshMarkOnCurrentElement = function () {&#13;
        this.markCurrentElement(this.keyboardNavigationCurrentElementIndex);&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.readElement = function (element) {&#13;
        var $element = this.getTarget(element, false);&#13;
&#13;
        if ($element.hasClass(CSS_CLASSES.QUESTION_TITLE))&#13;
            presenter.speak(getQuestionTitleTextVoiceObject($element))&#13;
        else if ($element.hasClass(CSS_CLASSES.QUESTION_TIP))&#13;
            presenter.speak(getQuestionTipTextVoiceObject($element))&#13;
        else if ($element.hasClass(CSS_CLASSES.FIFTY_FIFTY))&#13;
            presenter.speak(getFiftyFiftyButtonTextVoiceObject())&#13;
        else if ($element.hasClass(CSS_CLASSES.HINT_BUTTON))&#13;
            presenter.speak(getHintButtonTextVoiceObject())&#13;
        else if ($element.hasClass(CSS_CLASSES.NEXT_QUESTION_BUTTON))&#13;
            presenter.speak(getNextQuestionTextVoiceObject($element))&#13;
        else if ($element.hasClass(CSS_CLASSES.QUESTION_HINT_WRAPPER))&#13;
            presenter.speak(getCommentFieldTextVoiceObject($element))&#13;
    };&#13;
&#13;
    function getQuestionTitleTextVoiceObject($element) {&#13;
        var voicesArray = [];&#13;
&#13;
        const prefix = presenter.speechTexts.Question;&#13;
&#13;
        var language = document.documentElement.lang;&#13;
&#13;
        const currentQuestionAsText = window.TTSUtils.numberToOrdinalNumber(state.currentQuestion, language, window.TTSUtils.GENDER.NEUTER);&#13;
        const questionsLengthAsText = window.TTSUtils.numberToOrdinalNumber(presenter.config.questions.length, language, window.TTSUtils.GENDER.FEMININE);&#13;
        const questionInfo = `${currentQuestionAsText} ${presenter.speechTexts.OutOf} ${questionsLengthAsText}`;&#13;
        const texts = [prefix, questionInfo, ];&#13;
        pushMessagesToTextVoiceObject(voicesArray, texts);&#13;
        &#13;
        return createAndConcatElementWithTextVoiceObject(voicesArray, $element);&#13;
    }&#13;
&#13;
    function getQuestionTipTextVoiceObject($element) {&#13;
        var voicesArray = [];&#13;
&#13;
        const prefix = presenter.speechTexts.Answer;&#13;
        pushMessageToTextVoiceObject(voicesArray, prefix);&#13;
&#13;
&#13;
        voicesArray = createAndConcatElementsWithTextVoiceObject(voicesArray, $element.children());&#13;
        if ($element.hasClass(CSS_CLASSES.REMOVED))&#13;
            return updateQuestionTipTextVoiceObjectWithRemoved(voicesArray);&#13;
        else if (isQuestionTipSelected($element))&#13;
            return updateQuestionTipTextVoiceObjectWithSelected(voicesArray, $element);&#13;
        return voicesArray;&#13;
    }&#13;
&#13;
    function isQuestionTipSelected($questionTip) {&#13;
        return ($questionTip.hasClass(CSS_CLASSES.CORRECT)&#13;
                || $questionTip.hasClass(CSS_CLASSES.WRONG)&#13;
                || $questionTip.hasClass(CSS_CLASSES.OPTION));&#13;
    }&#13;
&#13;
    function updateQuestionTipTextVoiceObjectWithRemoved(textVoiceObject) {&#13;
        var voicesArray = [];&#13;
        const status = presenter.speechTexts.Inactive;&#13;
        pushMessageToTextVoiceObject(voicesArray, status);&#13;
        return textVoiceObject.concat(voicesArray);&#13;
    }&#13;
&#13;
    function updateQuestionTipTextVoiceObjectWithSelected(textVoiceObject, $element) {&#13;
        var voicesArray = [];&#13;
        var texts = [presenter.speechTexts.Selected, ]&#13;
        if ($element.hasClass(CSS_CLASSES.CORRECT)) &#13;
            texts.push(presenter.speechTexts.Correct);&#13;
        else if ($element.hasClass(CSS_CLASSES.WRONG))&#13;
            texts.push(presenter.speechTexts.Wrong);&#13;
        pushMessagesToTextVoiceObject(voicesArray, texts);&#13;
        return textVoiceObject.concat(voicesArray);&#13;
    }&#13;
&#13;
    function getFiftyFiftyButtonTextVoiceObject() {&#13;
        var voicesArray = [];&#13;
        var texts = [presenter.speechTexts.FiftyFiftyButton, ];&#13;
&#13;
        var isNotEnoughAnswers = isLessThenFourAnswers();&#13;
&#13;
        if (state.fiftyFiftyUsed || isNotEnoughAnswers || isQuestionAnswered()) {&#13;
            texts.push(presenter.speechTexts.Inactive);&#13;
            &#13;
            if (isNotEnoughAnswers) {&#13;
                texts.push(presenter.speechTexts.FiftyFiftyButtonWhenNotEnoughAnswers);&#13;
            }&#13;
        }&#13;
        pushMessagesToTextVoiceObject(voicesArray, texts);&#13;
        return voicesArray;&#13;
    }&#13;
&#13;
    function isLessThenFourAnswers() {&#13;
        return state.answersOrder &amp;&amp; state.answersOrder.length &lt; 4;&#13;
    }&#13;
&#13;
    function getHintButtonTextVoiceObject() {&#13;
        var voicesArray = [];&#13;
        var texts = [presenter.speechTexts.HintButton, ];&#13;
        if (state.hintUsed || isQuestionAnswered()) {&#13;
            texts.push(presenter.speechTexts.Inactive);&#13;
        }&#13;
        pushMessagesToTextVoiceObject(voicesArray, texts);&#13;
        return voicesArray;&#13;
    }&#13;
&#13;
    function getNextQuestionTextVoiceObject($element) {&#13;
        var voicesArray = [];&#13;
&#13;
        const text = presenter.config.nextLabel;&#13;
        pushMessageToTextVoiceObject(voicesArray, text, true);&#13;
&#13;
        if (!$element.hasClass(CSS_CLASSES.ACTIVE))&#13;
            pushMessageToTextVoiceObject(voicesArray, presenter.speechTexts.Inactive);&#13;
&#13;
        return voicesArray;&#13;
    }&#13;
    &#13;
    function getCommentFieldTextVoiceObject($element) {&#13;
        var voicesArray = [];&#13;
&#13;
        const commentField = presenter.speechTexts.CommentField;&#13;
        pushMessageToTextVoiceObject(voicesArray, commentField);&#13;
&#13;
        if ($element.children().length === 0)&#13;
            return updateCommentFieldTextVoiceObjectWithInactive(voicesArray);&#13;
&#13;
        const $gameMessage = $(presenter.getGameMessageElementForKeyboardNavigationFromElement($element));&#13;
        if ($gameMessage.length === 0)&#13;
            return updateCommentFieldTextVoiceObjectWithHint(voicesArray, $element);&#13;
        return updateCommentFieldTextVoiceObjectWithSummary(voicesArray, $gameMessage);&#13;
    }&#13;
&#13;
    function updateCommentFieldTextVoiceObjectWithInactive(textVoiceObject) {&#13;
        var voicesArray = [];&#13;
        const inactiveMessage = presenter.speechTexts.Inactive;&#13;
        pushMessageToTextVoiceObject(voicesArray, inactiveMessage);&#13;
        return textVoiceObject.concat(voicesArray);&#13;
    }&#13;
&#13;
    function updateCommentFieldTextVoiceObjectWithSummary(&#13;
            textVoiceObject, $gameMessageElement) {&#13;
        var voicesArray = [];&#13;
        const summaryMessage = presenter.speechTexts.Summary;&#13;
        pushMessageToTextVoiceObject(voicesArray, summaryMessage);&#13;
&#13;
        const $gameMessageChildren = $gameMessageElement.children();&#13;
        &#13;
        var $gameMessageText = null;&#13;
        var gameSummaryChildID = 1;&#13;
        if ($gameMessageChildren.length === 2) {&#13;
            $gameMessageText = $($gameMessageChildren.get(0));&#13;
        } else {&#13;
            $gameMessageText = getTextNodeFromElement($gameMessageElement);&#13;
            gameSummaryChildID = 0;&#13;
        }&#13;
        voicesArray = createAndConcatElementWithTextVoiceObject(&#13;
            voicesArray, $gameMessageText);&#13;
        const $gameSummary = $($gameMessageChildren.get(gameSummaryChildID));&#13;
        &#13;
        const $gameSummaryText = getTextNodeFromElement($gameSummary);&#13;
        voicesArray = createAndConcatElementWithTextVoiceObject(&#13;
            voicesArray, $gameSummaryText);&#13;
&#13;
        voicesArray = createAndConcatElementsWithTextVoiceObject(&#13;
            voicesArray, $gameSummary.children());&#13;
&#13;
        return textVoiceObject.concat(voicesArray);&#13;
    }&#13;
&#13;
    function updateCommentFieldTextVoiceObjectWithHint(&#13;
            textVoiceObject, $commendFieldElement) {&#13;
        var voicesArray = [];&#13;
&#13;
        const hintMessage = presenter.speechTexts.Hint;&#13;
        pushMessageToTextVoiceObject(voicesArray, hintMessage);&#13;
&#13;
        voicesArray = createAndConcatElementWithTextVoiceObject(&#13;
            voicesArray, $commendFieldElement);&#13;
        return textVoiceObject.concat(voicesArray);&#13;
    }&#13;
&#13;
    QuizKeyboardController.prototype.enter = function (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    QuizKeyboardController.prototype.select = function (event) {&#13;
        var currentElement = this.keyboardNavigationCurrentElement;&#13;
        var $element = this.getTarget(currentElement, false);&#13;
        &#13;
        if ($element.hasClass(CSS_CLASSES.QUESTION_TIP))&#13;
            selectQuestionTip(event, $element);&#13;
        else if ($element.hasClass(CSS_CLASSES.FIFTY_FIFTY))&#13;
            selectFiftyFiftyButton(event);&#13;
        else if ($element.hasClass(CSS_CLASSES.HINT_BUTTON))&#13;
            selectHintButton(event);&#13;
        else KeyboardController.prototype.select.call(this, event);&#13;
    };&#13;
&#13;
    function selectQuestionTip(event, $element) {&#13;
        const isQuestionAnsweredBefore = isQuestionAnswered(); &#13;
        KeyboardController.prototype.select.call(presenter.keyboardControllerObject, event);&#13;
        const isQuestionAnsweredAfter = isQuestionAnswered();&#13;
&#13;
        if (isQuestionAnsweredBefore !== isQuestionAnsweredAfter) {&#13;
            var voicesArray = updateQuestionTipTextVoiceObjectWithSelected([], $element);&#13;
            const $gameMessage = presenter.getGameMessageElementForKeyboardNavigationFromElement(presenter.$view);&#13;
            if ($gameMessage.length !== 0) {&#13;
                voicesArray = updateCommentFieldTextVoiceObjectWithSummary(voicesArray, $gameMessage);&#13;
            }&#13;
            &#13;
            if (!isLastQuestion() &#13;
                &amp;&amp; presenter.config.nextAfterSelect &#13;
                &amp;&amp; presenter.isWCAGOn) {&#13;
                presenter.speakWithCallback(&#13;
                    voicesArray, nextAfterSelectCallback);&#13;
            } else {&#13;
                presenter.speak(voicesArray);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function isQuestionAnswered() {&#13;
        return state.selectedAnswer !== null;&#13;
    }&#13;
&#13;
    function selectFiftyFiftyButton(event) {&#13;
        const fiftyFiftyUsedBefore = state.fiftyFiftyUsed;&#13;
        KeyboardController.prototype.select.call(presenter.keyboardControllerObject, event);&#13;
        const fiftyFiftyUsedAfter = state.fiftyFiftyUsed;&#13;
&#13;
        if (fiftyFiftyUsedBefore !== fiftyFiftyUsedAfter) {&#13;
            var voicesArray = [];&#13;
            const selectedMessage = presenter.speechTexts.Selected;&#13;
            pushMessageToTextVoiceObject(voicesArray, selectedMessage);&#13;
            const $questionTips = $(presenter.getQuestionTipsElementsForKeyboardNavigation());&#13;
            for (var i = 0; i &lt; state.answersOrder.length; i++) {&#13;
                if (state.answersOrder[i] === null) {&#13;
                    const $questionTip = $($questionTips.get(i));&#13;
                    voicesArray = voicesArray.concat(getQuestionTipTextVoiceObject($questionTip));&#13;
                }&#13;
            }&#13;
            presenter.speak(voicesArray);&#13;
            presenter.keyboardControllerObject.refreshMarkOnCurrentElement();&#13;
        }&#13;
    }&#13;
&#13;
    function selectHintButton(event) {&#13;
        const hintUsedBefore = state.hintUsed;&#13;
        KeyboardController.prototype.select.call(presenter.keyboardControllerObject, event);&#13;
        const hintUsedAfter = state.hintUsed;&#13;
&#13;
        if (hintUsedBefore !== hintUsedAfter) {&#13;
            var voicesArray = [];&#13;
            const selectedMessage = presenter.speechTexts.Selected;&#13;
            pushMessageToTextVoiceObject(voicesArray, selectedMessage);&#13;
&#13;
            const $commendFieldElement = $(presenter.getCommendFieldElementForKeyboardNavigation());&#13;
            voicesArray = updateCommentFieldTextVoiceObjectWithHint(voicesArray, $commendFieldElement);&#13;
            presenter.speak(voicesArray);&#13;
        }&#13;
    }&#13;
&#13;
    function getTextNodeFromElement($element) {&#13;
        return $element.contents().filter(&#13;
            function () {&#13;
                return this.nodeType === 3;&#13;
            }&#13;
        )&#13;
    }&#13;
&#13;
    function createAndConcatElementsWithTextVoiceObject(textVoiceObject, $elements, usePresenterLangTag = true) {&#13;
        $elements.each( function() { &#13;
            textVoiceObject = createAndConcatElementWithTextVoiceObject(textVoiceObject, $(this), usePresenterLangTag);&#13;
        });&#13;
        return textVoiceObject;&#13;
    }&#13;
&#13;
    function createAndConcatElementWithTextVoiceObject(textVoiceObject, $element, usePresenterLangTag = true) {&#13;
        var elementTextVoiceArray = null;&#13;
        if (usePresenterLangTag)&#13;
            elementTextVoiceArray = window.TTSUtils.getTextVoiceArrayFromElement($element, presenter.config.langTag)&#13;
        else&#13;
            elementTextVoiceArray = window.TTSUtils.getTextVoiceArrayFromElement($element)&#13;
        return textVoiceObject.concat(elementTextVoiceArray);&#13;
    }&#13;
&#13;
    function pushMessagesToTextVoiceObject(textVoiceObject, messages, usePresenterLangTag = false) {&#13;
        for (var i = 0; i &lt; messages.length; i++) {&#13;
            pushMessageToTextVoiceObject(textVoiceObject, messages[i], usePresenterLangTag);&#13;
        }&#13;
    }&#13;
    &#13;
    function pushMessageToTextVoiceObject(textVoiceObject, message, usePresenterLangTag = false) {&#13;
        if (usePresenterLangTag)&#13;
            textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message, presenter.config.langTag));&#13;
        else&#13;
            textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message));&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>