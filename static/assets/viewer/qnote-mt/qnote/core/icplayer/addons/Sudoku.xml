<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Sudoku" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Rows Values" isLocalized="true" name="Values" nameLabel="Sudoku_property_values" type="text"/>
        <property name="isDisable" nameLabel="Sudoku_property_is_disabled" type="boolean"/>
        <property name="isActivity" nameLabel="Sudoku_property_is_activity" type="boolean"/>
    </model>
<css>.board input.cell {&#13;
            font-size: 15pt;&#13;
            text-align: center;&#13;
        }&#13;
.board input.wrong {&#13;
            background-color: #ff2a2a; &#13;
        }&#13;
.board input.correct {&#13;
            background-color: #99FF55; &#13;
        }  &#13;
.board input.filled {&#13;
            background-color: white; &#13;
        } &#13;
&#13;
        .c {&#13;
            border: 1px black solid;&#13;
            -webkit-border-radius: 0px;&#13;
            -khtml-border-radius: 0px;&#13;
            -moz-border-radius: 0px;&#13;
            width: 2.2em !important;&#13;
            height: 2.2em !important;&#13;
            padding: 0px;&#13;
        }&#13;
&#13;
        .v {&#13;
            border-right: 0;&#13;
        }&#13;
&#13;
        .h {&#13;
            border-bottom: 0;&#13;
        }&#13;
        .filled{&#13;
            color: blue;&#13;
            }&#13;
        .sudoku-counter{&#13;
            color:red;&#13;
        background-color: #f2f2f2;        &#13;
            }&#13;
</css><view>&lt;p class="sudoku-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id = "sudoku-wrapper" class= "sudoku-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;p class="sudoku-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id = "sudoku-wrapper" class= "sudoku-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSudoku_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.isActivity = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.isActivity = false;&#13;
    presenter.initialView = [];&#13;
    presenter.initialViewNumbers = 0;&#13;
    presenter.currentViewNumbers = 0;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.cells = [];&#13;
    presenter.currentAnswer = [];&#13;
    presenter.eventBus = '';&#13;
    presenter.isShowAnswerMode = false;&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'],&#13;
            isTextColored = presenter.model['Color text'] === 'True',&#13;
            $textContainer = presenter.$view.find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawSudoku = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.modelID = model.ID;&#13;
        presenter.Height = parseInt(model.Height,10);&#13;
        presenter.Width = parseInt(model.Width,10);&#13;
        presenter.number = Math.floor((Math.random()*100)+1);&#13;
&#13;
&#13;
        var fig = '&lt;table&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
&#13;
        fig += '&lt;td valign="top"&gt;';&#13;
        fig += '&lt;form class="board" autocomplete="off"&gt;';&#13;
        fig += '&lt;table cellspacing="0" cellpadding="0" border="0"&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c11'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c12'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c13'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c14'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c15'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c16'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c17'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c18'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c19'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c21'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c22'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c23'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c24'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c25'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c26'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c27'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c28'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c29'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c31'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c32'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c33'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c34'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c35'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c36'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c37'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c38'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c39'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c41'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c42'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c43'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c44'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c45'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c46'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c47'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c48'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c49'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c51'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c52'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c53'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c54'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c55'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c56'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c57'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c58'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c59'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c61'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c62'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c63'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c64'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c65'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c66'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c67'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c68'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c69'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c71'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c72'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c73'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c74'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c75'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c76'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c77'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c78'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c79'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c81'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c82'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c83'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c84'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c85'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c86'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c87'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v h cell active" id="c88'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c   h cell active" id="c89'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;tr&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c91'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c92'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c93'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c94'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c95'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c96'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c97'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c v  cell active" id="c98'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;td&gt;&lt;input class="c    cell active" id="c99'+ presenter.modelID + presenter.number +'" maxlength="1" autocomplete="off" /&gt;&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;/table&gt;';&#13;
        fig += '&lt;/form&gt;';&#13;
        fig += '&lt;/td&gt;';&#13;
        fig += '&lt;/tr&gt;';&#13;
        fig += '&lt;/table&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
    presenter.checkRowsValues = function(value, view){&#13;
        var regExp = new RegExp('\n');&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
        var step = 1;&#13;
        var enters = 0;&#13;
        for(i = 0; i&lt; value.length; i++){&#13;
            if(value[i] != ' ') {&#13;
                if((parseInt(value[i],10) &lt; 1 || isNaN(value[i],10)) &amp;&amp; !value[i].match(regExp) &amp;&amp; value[i] != '_'){&#13;
                    $counter.text('Row '+(enters + 1)+' has incorrect value.');&#13;
                    return false;&#13;
                }&#13;
                if(step &gt; 10){&#13;
                    $counter.text('Row '+(enters + 1)+' has more than 9 values.');&#13;
                    return false;&#13;
                }&#13;
                if(enters &gt; 8){&#13;
                    $counter.text('There are more than 9 rows.');&#13;
                    return false;&#13;
                }&#13;
                if(value[i].match(regExp)) {&#13;
                    enters++;&#13;
                    step = 1;&#13;
                } else{&#13;
                    step++;&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
&#13;
    presenter.validate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
&#13;
        if(!presenter.checkRowsValues(model.Values, view)){&#13;
            return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.init = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isActivity = model.isActivity == "True" ? true : false;&#13;
        presenter.isDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.Values = model.Values;&#13;
&#13;
&#13;
        var myDiv =  $(view).find('.sudoku-wrapper')[0];&#13;
&#13;
        var figureSudoku = presenter.drawSudoku(view, model);&#13;
        $(myDiv).append(figureSudoku);&#13;
&#13;
        if(presenter.isDisable){&#13;
            presenter.disable();&#13;
        }&#13;
&#13;
        presenter.cells = [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]];&#13;
        presenter.currentAnswer = [['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','','']];&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                presenter.cells[j-1][i-1] = presenter.$view.find('"#c'+j+i+ presenter.modelID + presenter.number + '"');&#13;
            }&#13;
        }&#13;
&#13;
        presenter.drawInitial(model.Values);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.Values = model.Values;&#13;
        var score = '';&#13;
        var test = false;&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        if(presenter.validate(view,model)){&#13;
            presenter.init(view, model);&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
&#13;
            if(model.isActivity == "True"){&#13;
                presenter.correctAnswer = presenter.checkSudoku(view);&#13;
            }&#13;
&#13;
            presenter.$view.find("input.active").change(function() {&#13;
&#13;
                if(parseInt(this.value,10) &lt; 1 || isNaN(this.value,10) || this.value == ' '){&#13;
                    test = true;&#13;
                    presenter.cells[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)].attr("value", '');&#13;
&#13;
                    if(presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] != ''){&#13;
                        presenter.currentViewNumbers--;&#13;
                        presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = '';&#13;
                    }&#13;
&#13;
                } else{&#13;
&#13;
                    test = false;&#13;
&#13;
                }&#13;
&#13;
                if(!test) {&#13;
&#13;
                    var id = this.id.slice(2,3) + "-" + this.id.slice(1,2);&#13;
&#13;
                    if(presenter.isActivity){&#13;
                        score = this.value == presenter.correctAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] ? 1 : 0;&#13;
                    } else {&#13;
                        score = '';&#13;
&#13;
                    }&#13;
                    presenter.triggerFrameChangeEvent(this.value, id, score);&#13;
&#13;
                    if(presenter.isActivity){&#13;
                        if(this.value != ''){&#13;
                            if(presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] == ''){&#13;
                                presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = this.value;&#13;
                                presenter.currentViewNumbers++;&#13;
                            } else{&#13;
                                presenter.currentAnswer[(this.id.slice(1,2)-1)][(this.id.slice(2,3)-1)] = this.value;&#13;
                            }&#13;
                        } else{&#13;
                            presenter.currentViewNumbers--;&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                if(presenter.currentViewNumbers == 81){&#13;
                    presenter.isAllOkEvent();&#13;
                }&#13;
            });&#13;
&#13;
&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if(presenter.validate(view,model)){&#13;
            presenter.init(view, model);&#13;
&#13;
            presenter.setVisibility(true);&#13;
&#13;
            if(model.isActivity == "True"){&#13;
                presenter.checkSudoku(view);&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
    presenter.isAllOkEvent = function(){&#13;
        if(presenter.isAllOk()){&#13;
            presenter.triggerFrameChangeEvent("allOk", "", "");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOkChecker = function(){&#13;
        var correct = 0;&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                if(presenter.currentAnswer[j-1][i-1] == presenter.correctAnswer[j-1][i-1])&#13;
                {&#13;
                    correct++;&#13;
                } else{&#13;
                    return correct;&#13;
                }&#13;
            }&#13;
        }&#13;
        return correct;&#13;
    };&#13;
&#13;
    presenter.isAllOk = function(){&#13;
        var check = presenter.isAllOkChecker();&#13;
        if(check == 81){&#13;
            return true;&#13;
        } else{&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function(){&#13;
        presenter.hideAnswers();&#13;
        if(presenter.isActivity){&#13;
            return presenter.initialViewNumbers == presenter.currentViewNumbers ? false: true;&#13;
        } else{&#13;
            return true;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.checkSudoku = function(view) {&#13;
        function dlx_cover(c)&#13;
        {&#13;
            c.right.left = c.left;&#13;
            c.left.right = c.right;&#13;
            for (var i = c.down; i != c; i = i.down) {&#13;
                for (var j = i.right; j != i; j = j.right) {&#13;
                    j.down.up = j.up;&#13;
                    j.up.down = j.down;&#13;
                    j.column.size--;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        function dlx_uncover(c)&#13;
        {&#13;
            for (var i = c.up; i != c; i = i.up) {&#13;
                for (var j = i.left; j != i; j = j.left) {&#13;
                    j.column.size++;&#13;
                    j.down.up = j;&#13;
                    j.up.down = j;&#13;
                }&#13;
            }&#13;
            c.right.left = c;&#13;
            c.left.right = c;&#13;
        }&#13;
&#13;
        function dlx_search(head, solution, k, solutions, maxsolutions)&#13;
        {&#13;
            if (head.right == head) {&#13;
                solutions.push(solution.slice(0));&#13;
                if (solutions.length &gt;= maxsolutions) {&#13;
                    return solutions;&#13;
                }&#13;
                return null;&#13;
            }&#13;
            var c = null;&#13;
            var s = 99999;&#13;
            for (var j = head.right; j != head; j = j.right) {&#13;
                if (j.size == 0) {&#13;
                    return null;&#13;
                }&#13;
                if (j.size &lt; s) {&#13;
                    s = j.size;&#13;
                    c = j;&#13;
                }&#13;
            }&#13;
&#13;
            dlx_cover(c);&#13;
            for (var r = c.down; r != c; r = r.down) {&#13;
                solution[k] = r.row;&#13;
                for (var j = r.right; j != r; j = j.right) {&#13;
                    dlx_cover(j.column);&#13;
                }&#13;
                var s = dlx_search(head, solution, k+1, solutions, maxsolutions);&#13;
                if (s != null) {&#13;
                    return s;&#13;
                }&#13;
                for (var j = r.left; j != r; j = j.left) {&#13;
                    dlx_uncover(j.column);&#13;
                }&#13;
            }&#13;
            dlx_uncover(c);&#13;
            return null;&#13;
        }&#13;
&#13;
        function dlx_solve(matrix, skip, maxsolutions)&#13;
        {&#13;
            var columns = new Array(matrix[0].length);&#13;
            for (var i = 0; i &lt; columns.length; i++) {&#13;
                columns[i] = new Object;&#13;
            }&#13;
            for (var i = 0; i &lt; columns.length; i++) {&#13;
                columns[i].index = i;&#13;
                columns[i].up = columns[i];&#13;
                columns[i].down = columns[i];&#13;
                if (i &gt;= skip) {&#13;
                    if (i-1 &gt;= skip) {&#13;
                        columns[i].left = columns[i-1];&#13;
                    }&#13;
                    if (i+1 &lt; columns.length) {&#13;
                        columns[i].right = columns[i+1];&#13;
                    }&#13;
                } else {&#13;
                    columns[i].left = columns[i];&#13;
                    columns[i].right = columns[i];&#13;
                }&#13;
                columns[i].size = 0;&#13;
            }&#13;
            for (var i = 0; i &lt; matrix.length; i++) {&#13;
                var last = null;&#13;
                for (var j = 0; j &lt; matrix[i].length; j++) {&#13;
                    if (matrix[i][j]) {&#13;
                        var node = new Object;&#13;
                        node.row = i;&#13;
                        node.column = columns[j];&#13;
                        node.up = columns[j].up;&#13;
                        node.down = columns[j];&#13;
                        if (last) {&#13;
                            node.left = last;&#13;
                            node.right = last.right;&#13;
                            last.right.left = node;&#13;
                            last.right = node;&#13;
                        } else {&#13;
                            node.left = node;&#13;
                            node.right = node;&#13;
                        }&#13;
                        columns[j].up.down = node;&#13;
                        columns[j].up = node;&#13;
                        columns[j].size++;&#13;
                        last = node;&#13;
                    }&#13;
                }&#13;
            }&#13;
            var head = new Object;&#13;
            head.right = columns[skip];&#13;
            head.left = columns[columns.length-1];&#13;
            columns[skip].left = head;&#13;
            columns[columns.length-1].right = head;&#13;
            solutions = [];&#13;
            dlx_search(head, [], 0, solutions, maxsolutions);&#13;
            return solutions;&#13;
        }&#13;
&#13;
        function solve_sudoku(grid)&#13;
        {&#13;
            var mat = [];&#13;
            var rinfo = [];&#13;
            for (var i = 0; i &lt; 9; i++) {&#13;
                for (var j = 0; j &lt; 9; j++) {&#13;
                    var g = grid[i][j] - 1;&#13;
                    if (g &gt;= 0) {&#13;
                        var row = new Array(324);&#13;
                        row[i*9+j] = 1;&#13;
                        row[9*9+i*9+g] = 1;&#13;
                        row[9*9*2+j*9+g] = 1;&#13;
                        row[9*9*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+g] = 1;&#13;
                        mat.push(row);&#13;
                        rinfo.push({'row': i, 'col': j, 'n': g+1});&#13;
                    } else {&#13;
                        for (var n = 0; n &lt; 9; n++) {&#13;
                            var row = new Array(324);&#13;
                            row[i*9+j] = 1;&#13;
                            row[9*9+i*9+n] = 1;&#13;
                            row[9*9*2+j*9+n] = 1;&#13;
                            row[9*9*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+n] = 1;&#13;
                            mat.push(row);&#13;
                            rinfo.push({'row': i, 'col': j, 'n': n+1});&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var solutions = dlx_solve(mat, 0, 2);&#13;
            if (solutions.length &gt; 0) {&#13;
                var r = solutions[0];&#13;
                for (var i = 0; i &lt; r.length; i++) {&#13;
                    grid[rinfo[r[i]]['row']][rinfo[r[i]]['col']] = rinfo[r[i]]['n'];&#13;
                }&#13;
                return solutions.length;&#13;
            }&#13;
            return 0;&#13;
        }&#13;
&#13;
&#13;
        $counter = $(view).find('.sudoku-counter');&#13;
        $counter.text('');&#13;
        var g = [];&#13;
        for (var i = 1; i &lt;= 9; i++) {&#13;
            var r = [];&#13;
            for (var j = 1; j &lt;= 9; j++) {&#13;
                r.push(presenter.cells[i-1][j-1].attr("value"));&#13;
            }&#13;
            g.push(r);&#13;
&#13;
        }&#13;
        var r = solve_sudoku(g);&#13;
        if (r &gt; 0) {&#13;
            if (r &gt; 1) {&#13;
                $counter = $(view).find('.sudoku-counter');&#13;
                $counter.text('There is more than one solution.');&#13;
                presenter.isDisable = true;&#13;
                return false;&#13;
            }&#13;
        } else {&#13;
            $counter = $(view).find('.sudoku-counter');&#13;
            $counter.text('There is no solution.');&#13;
            presenter.isDisable = true;&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.isActivity = true;&#13;
        return g;&#13;
    };&#13;
&#13;
    presenter.clearSudoku = function() {&#13;
&#13;
        for (var i = 1; i &lt;= 9; i++) {&#13;
            for (var j = 1; j &lt;= 9; j++) {&#13;
                presenter.cells[i-1][j-1].attr("value", '');&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        presenter.currentAnswer = [['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','','']];&#13;
        presenter.drawInitial(presenter.Values);&#13;
    };&#13;
&#13;
    presenter.drawInitial = function (value){&#13;
        presenter.initialViewNumbers = 0;&#13;
        presenter.currentViewNumbers = 0;&#13;
&#13;
        var regExp = new RegExp('\n');&#13;
        var j= 1;&#13;
        var step = 1;&#13;
        for(i = 0; i&lt; value.length; i++){&#13;
            if(value[i] != ' ') {&#13;
                if(value[i].match(regExp)) {&#13;
                    j++;&#13;
                    step = 1;&#13;
                } else{&#13;
                    $element = presenter.cells[j-1][step-1];&#13;
                    if(value[i] == '_'){&#13;
                        $($element).attr("value", '');&#13;
                    } else{&#13;
                        $($element).attr("value", value[i]);&#13;
                        $($element).attr( "readonly", "readonly" );&#13;
                        $($element).addClass("filled");&#13;
                        $($element).removeClass("active");&#13;
                        presenter.initialViewNumbers++;&#13;
                        presenter.currentViewNumbers++;&#13;
                        presenter.currentAnswer[j-1][step-1] = value[i];&#13;
                    }&#13;
                    step++;&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = true;&#13;
        presenter.$view.find('input.active').attr( "readonly", "readonly" );&#13;
        presenter.$view.find('input.cell').addClass('disable');&#13;
&#13;
    };&#13;
&#13;
    presenter.enable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = false;&#13;
        presenter.$view.find('input.active').removeAttr("readonly");&#13;
        presenter.$view.find('input.cell').removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.checkMyCurrentAnswer = function(){&#13;
&#13;
        var test = 0;&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                if($($element).attr("value") != ''){&#13;
                    if(presenter.correctAnswer[j-1][i-1] != $($element).attr("value")){&#13;
                        $($element).addClass("wrong");&#13;
                        $($element).removeClass("correct");&#13;
&#13;
                    } else{&#13;
                        $($element).removeClass("wrong");&#13;
                        $($element).addClass("correct");&#13;
                    }&#13;
                } else{&#13;
                    $($element).removeClass("wrong");&#13;
                    $($element).removeClass("correct");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var initialViewNumbers = presenter.initialViewNumbers;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        var Values = presenter.Values;&#13;
        var currentViewNumbers = presenter.currentViewNumbers;&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
&#13;
        var current = presenter.currentAnswer;&#13;
&#13;
        return JSON.stringify({&#13;
            initialViewNumbers: initialViewNumbers,&#13;
            isVisible: isVisible,&#13;
            wasVisible: wasVisible,&#13;
            wasDisable: wasDisable,&#13;
            isDisable: isDisable,&#13;
            Values: Values,&#13;
            current: current,&#13;
            currentViewNumbers: currentViewNumbers&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.initialViewNumbers = parsedState.initialViewNumbers;&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.Values = parsedState.Values;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.currentAnswer = parsedState.current;&#13;
        presenter.currentViewNumbers = parsedState.currentViewNumbers;&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $(presenter.cells[j-1][i-1]).attr("value", presenter.currentAnswer[j-1][i-1]);&#13;
            }&#13;
        }&#13;
&#13;
        if(presenter.isDisable){&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.cell").addClass('disable');&#13;
        } else {&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
            presenter.$view.find("input.cell").removeClass('disable');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.hideAnswers();&#13;
        presenter.setWorkMode();&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.isShowAnswerMode = false;&#13;
        presenter.clearSudoku();&#13;
&#13;
        presenter.drawInitial(presenter.Values);&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ?  presenter.disable() : presenter.enable();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var maxScore = 81 - presenter.initialViewNumbers;&#13;
            return maxScore;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.getScore = function () {&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var correct = 0;&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $element = presenter.cells[j-1][i-1];&#13;
                    if($($element).attr("value") != ''){&#13;
                        if(presenter.correctAnswer[j-1][i-1] == $($element).attr("value")){&#13;
                            correct++;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var score = correct - presenter.initialViewNumbers;&#13;
            return score;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            var errors = 0;&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $element = presenter.cells[j-1][i-1];&#13;
                    if($($element).attr("value") != ''){&#13;
                        if(presenter.correctAnswer[j-1][i-1] != $($element).attr("value")){&#13;
                            errors++;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            return errors;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.neutralOption = function(){&#13;
        return presenter.getCurrentTime() == presenter.InitialTime ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.active").addClass("check");&#13;
            presenter.checkMyCurrentAnswer();&#13;
&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.$view.find("input.active").removeClass("check");&#13;
&#13;
        for(j=1;j&lt;=9;j++){&#13;
            for(i=1;i&lt;=9;i++){&#13;
                $element = presenter.cells[j-1][i-1];&#13;
                $($element).removeClass("wrong");&#13;
                $($element).removeClass("correct");&#13;
            }&#13;
        }&#13;
        if(!presenter.isDisable){&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(value, id, score) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + id,&#13;
            value : '' + value,&#13;
            score : '' + score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(value, id, score) {&#13;
        var eventData = presenter.createEventData(value, id, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
&#13;
        presenter.setWorkMode();&#13;
&#13;
        if(presenter.isActivity === true) {&#13;
            presenter.isShowAnswerMode = true;&#13;
            presenter.isErrorCheckingMode = true;&#13;
&#13;
            presenter.$view.find("input.active").attr( "readonly", "readonly" );&#13;
            presenter.$view.find("input.active").addClass("showAnswers");&#13;
&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $(presenter.cells[j-1][i-1]).attr("value", presenter.correctAnswer[j-1][i-1]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
&#13;
        if(presenter.isActivity === true &amp;&amp; presenter.isShowAnswerMode == true) {&#13;
            presenter.isErrorCheckingMode = false;&#13;
            presenter.$view.find("input.active").removeClass("showAnswers");&#13;
            presenter.$view.find("input.active").removeAttr("readonly");&#13;
&#13;
            for(j=1;j&lt;=9;j++){&#13;
                for(i=1;i&lt;=9;i++){&#13;
                    $(presenter.cells[j-1][i-1]).attr("value", presenter.currentAnswer[j-1][i-1]);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>