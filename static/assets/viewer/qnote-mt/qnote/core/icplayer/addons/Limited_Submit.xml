<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Limited_Submit" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isLocalized="true" name="Text" nameLabel="Limited_Submit_property_text" type="string"/>
        <property isLocalized="true" name="Text selected" nameLabel="Limited_Submit_property_text_selected" type="string"/>
        <property isDefault="true" name="worksWith" nameLabel="Limited_Submit_property_works_with" type="text"/>

        <property displayName="Speech texts" name="speechTexts" nameLabel="Limited_Submit_speech_texts" type="staticlist">
            <property name="selected" nameLabel="Limited_Submit_speech_text_selected" type="staticrow">
                <property name="textToSpeechText" nameLabel="Limited_Submit_speech_text_selected" type="string"/>
            </property>

            <property name="blockEdit" nameLabel="Limited_Submit_speech_text_selected_button_edit_block" type="staticrow">
                <property name="textToSpeechText" nameLabel="Limited_Submit_speech_text_selected_button_edit_block" type="string"/>
            </property>

            <property name="noBlockEdit" nameLabel="Limited_Submit_speech_text_selected_button_no_edit_block" type="staticrow">
                <property name="textToSpeechText" nameLabel="Limited_Submit_speech_text_selected_button_no_edit_block" type="string"/>
            </property>

            <property name="notAllAttempted" nameLabel="Limited_Submit_speech_text_selected_button_not_attempted" type="staticrow">
                <property name="textToSpeechText" nameLabel="Limited_Submit_speech_text_selected_button_not_attempted" type="string"/>
            </property>
        </property>
    </model>
<css>.limited-submit-wrapper,&#13;
.limited-submit-wrapper .limited-submit-container,&#13;
.limited-submit-wrapper .limited-submit-container .limited-submit-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.limited-submit-wrapper .limited-submit-container .limited-submit-button {&#13;
    background: url('resources/submit-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="limited-submit-wrapper"&gt;&#13;
    &lt;div class="limited-submit-container"&gt;&#13;
        &lt;div class="limited-submit-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="limited-submit-wrapper"&gt;&#13;
    &lt;div class="limited-submit-container"&gt;&#13;
        &lt;div class="limited-submit-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLimited_Submit_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.EVENTS_NAMES = {&#13;
        SELECTED: "selected",&#13;
        DESELECTED: "deselected",&#13;
        TRIED_SELECT: "canceled"&#13;
    };&#13;
&#13;
    presenter.state = {&#13;
        isSelected: false,&#13;
        isEnabled: true,&#13;
        isVisible: true&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (eventValue) {&#13;
        var eventData = {&#13;
            'value': eventValue,&#13;
            'source': presenter.configuration.addonID&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.getWorksWithModulesList = function () {&#13;
        return presenter.configuration.worksWithModulesList.slice();    // Make a copy of this list&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        var speechToTextListModelValidator = {&#13;
            'blockEdit': [ModelValidators.String('textToSpeechText', {default: 'Exercise edition is blocked'})],&#13;
            'noBlockEdit': [ModelValidators.String('textToSpeechText', {default: 'Exercise edition is not blocked'})],&#13;
            'notAllAttempted': [ModelValidators.String('textToSpeechText', {default: 'Not all attempted'})],&#13;
            'selected': [ModelValidators.String('textToSpeechText', {default: 'Selected'})]&#13;
        };&#13;
&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.utils.FieldRename("Is Visible", "isVisible", ModelValidators.Boolean("isVisible")),&#13;
            ModelValidators.utils.FieldRename("Text", "text", ModelValidators.String("text", {default: ""})),&#13;
            ModelValidators.utils.FieldRename("Text selected", "textSelected", ModelValidators.String("textSelected", {default: ""})),&#13;
            ModelValidators.utils.FieldRename("ID", "addonID", ModelValidators.DumbString("addonID")),&#13;
            ModelValidators.utils.FieldRename("Is Tabindex Enabled", "isTabindexEnabled", ModelValidators.Boolean("isTabindexEnabled")),&#13;
            ModelValidators.String("worksWith", {default: ""}),&#13;
            ModelValidators.StaticList('speechTexts', speechToTextListModelValidator)&#13;
        ]);&#13;
&#13;
        if (validatedModel.isValid) {&#13;
            validatedModel.value.worksWithModulesList = validatedModel.value.worksWith.split("\n")&#13;
                .map(function (value) {&#13;
                    return value.trim();&#13;
                })&#13;
                .filter(function (value) {&#13;
                    return value !== "";&#13;
                })&#13;
                .filter(function (value, index, self) { //Unique elements&#13;
                    return self.indexOf(value) === index;&#13;
                });&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
&#13;
    };&#13;
&#13;
    presenter.handleClick = function () {&#13;
        if (presenter.state.isSelected) {&#13;
            presenter.onButtonDeselect();&#13;
        } else {&#13;
            presenter.onButtonSelect();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onButtonDeselect = function () {&#13;
        var text = presenter.configuration.text;&#13;
&#13;
        presenter.state.isSelected = false;&#13;
        presenter.$wrapper.removeClass('selected');&#13;
&#13;
        presenter.sendEvent(presenter.EVENTS_NAMES.DESELECTED);&#13;
&#13;
        presenter.executeUnCheckForAllModules();&#13;
        presenter.$button.text(text);&#13;
    };&#13;
&#13;
    presenter.onButtonSelect = function () {&#13;
        if (presenter.allModulesAttempted()) {&#13;
            var text = presenter.configuration.textSelected;&#13;
&#13;
            presenter.$wrapper.addClass('selected');&#13;
            presenter.state.isSelected = true;&#13;
&#13;
            presenter.sendEvent(presenter.EVENTS_NAMES.SELECTED);&#13;
&#13;
            presenter.executeCheckForAllModules();&#13;
            presenter.$button.text(text);&#13;
        } else {&#13;
            presenter.sendEvent(presenter.EVENTS_NAMES.TRIED_SELECT);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.executeCheckForAllModules = function () {&#13;
        presenter.configuration.worksWithModulesList.forEach(function (moduleId) {&#13;
            var module = presenter.playerController.getModule(moduleId);&#13;
            if (module &amp;&amp; module.setShowErrorsMode) {&#13;
                module.setShowErrorsMode();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.executeUnCheckForAllModules = function () {&#13;
        presenter.configuration.worksWithModulesList.forEach(function (moduleId) {&#13;
            var module = presenter.playerController.getModule(moduleId);&#13;
            if (module &amp;&amp; module.setWorkMode) {&#13;
                module.setWorkMode();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.allModulesAttempted = function () {&#13;
        var i = 0;&#13;
        var worksWithModulesList = presenter.configuration.worksWithModulesList;&#13;
&#13;
        for (; i &lt; worksWithModulesList.length; i++) {&#13;
            var moduleId = worksWithModulesList[i];&#13;
            var module = presenter.playerController.getModule(moduleId);&#13;
&#13;
            if (module &amp;&amp; module.isAttempted &amp;&amp; !module.isAttempted()) {&#13;
                return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.connectClickAction = function () {&#13;
        presenter.$button.on('click', function (eventData) {&#13;
            eventData.stopPropagation();&#13;
            if (presenter.state.isEnabled)&#13;
                presenter.handleClick();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.connectKeyDownAction = function () {&#13;
        presenter.$view.on('keydown', function (eventData) {&#13;
            if (eventData.which === 13) {&#13;
                eventData.stopPropagation();&#13;
                presenter.handleClick();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model).value;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.$button = presenter.$view.find('.limited-submit-button');&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper = presenter.$view.find('.limited-submit-wrapper');&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            presenter.$wrapper.attr('tabindex', '0');&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
            presenter.connectClickAction();&#13;
            presenter.connectKeyDownAction();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.presenterLogic(view, model, false);&#13;
&#13;
        presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        presenter.$button.off();&#13;
        presenter.$view.off();&#13;
&#13;
        presenter.$button = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'isVisible': presenter.state.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        presenter.setVisibility(JSON.parse(state).isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.resetSelection();&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.resetSelection = function () {&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper.removeClass('selected');&#13;
        presenter.$wrapper.removeClass("disabled");&#13;
        presenter.state.isEnabled = true;&#13;
        presenter.state.isSelected = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.reset();&#13;
        presenter.$wrapper.addClass("selected");&#13;
        presenter.$wrapper.addClass("disabled");&#13;
        presenter.state.isEnabled = false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    function getTextVoiceObject(text, lang) {&#13;
        return {&#13;
            text: text,&#13;
            lang: lang&#13;
        };&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.getTitlePostfix = function () {&#13;
        if(presenter.state.isSelected) {&#13;
            return presenter.configuration.speechTexts.selected.textToSpeechText;&#13;
        } else {&#13;
            return ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keycode) {&#13;
        if (keycode === 13) {&#13;
            var wasSelected = presenter.state.isSelected;&#13;
            presenter.$button.click();&#13;
            if (isWCAGOn) {&#13;
                if (presenter.state.isSelected) {&#13;
                    speak([getTextVoiceObject(presenter.configuration.speechTexts.blockEdit.textToSpeechText)]);&#13;
                } else if (wasSelected &amp;&amp; !presenter.state.isSelected) {&#13;
                    speak([getTextVoiceObject(presenter.configuration.speechTexts.noBlockEdit.textToSpeechText)]);&#13;
                } else {&#13;
                    speak([getTextVoiceObject(presenter.configuration.speechTexts.notAllAttempted.textToSpeechText)]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>