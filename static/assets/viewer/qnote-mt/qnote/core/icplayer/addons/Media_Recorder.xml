<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Media_Recorder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="isDisabled" nameLabel="Media_Recorder_property_is_disabled" type="boolean"/>
        <property name="maxTime" nameLabel="Media_Recorder_property_max_time" type="integer"/>
        <property name="defaultRecording" nameLabel="Media_Recorder_property_default_recording" type="audio"/>
        <property name="startRecordingSound" nameLabel="Media_Recorder_property_start_recording_sound" type="audio"/>
        <property name="stopRecordingSound" nameLabel="Media_Recorder_property_stop_recording_sound" type="audio"/>
        <property name="isShowedTimer" nameLabel="Media_Recorder_property_is_showed_timer" type="boolean"/>
        <property name="isShowedDefaultRecordingButton" nameLabel="Media_Recorder_property_is_showed_default_recording_button" type="boolean"/>
        <property name="isResetRemovesRecording" nameLabel="Media_Recorder_property_is_reset_removes_recording" type="boolean"/>
        <property name="enableInErrorCheckingMode" nameLabel="Media_Recorder_property_enable_in_error_checking_mode" type="boolean"/>
        <property name="extendedMode" nameLabel="Media_Recorder_property_extended_mode" type="boolean"/>
        <property name="disableRecording" nameLabel="Media_Recorder_property_is_disable_recording" type="boolean"/>
        <property name="enableIntensityChangeEvents" nameLabel="Media_Recorder_property_is_enable_intensity_events" type="boolean"/>
        <property name="resetDialogLabels" nameLabel="Media_Recorder_property_reset_dialog_labels" type="staticlist">
            <property name="resetDialogText" nameLabel="Media_Recorder_property_reset_dialog_text" type="staticrow">
                <property name="resetDialogLabel" nameLabel="Media_Recorder_property_reset_dialog_label" type="string"/>
            </property>
            <property name="resetDialogConfirm" nameLabel="Media_Recorder_property_reset_dialog_confirm" type="staticrow">
                <property name="resetDialogLabel" nameLabel="Media_Recorder_property_reset_dialog_label" type="string"/>
            </property>
            <property name="resetDialogDeny" nameLabel="Media_Recorder_property_reset_dialog_deny" type="staticrow">
                <property name="resetDialogLabel" nameLabel="Media_Recorder_property_reset_dialog_label" type="string"/>
            </property>
        </property>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Media_Recorder_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Media_Recorder_property_speech_texts" type="staticlist">
            <property name="DefaultRecordingPlayButton" nameLabel="Media_Recorder_speech_text_default_recording_play_button" type="staticrow">
                <property name="DefaultRecordingPlayButton" nameLabel="Media_Recorder_speech_text_default_recording_play_button" type="string"/>
            </property>
            <property name="RecordingButton" nameLabel="Media_Recorder_speech_text_recording_button" type="staticrow">
                <property name="RecordingButton" nameLabel="Media_Recorder_speech_text_recording_button" type="string"/>
            </property>
            <property name="PlayButton" nameLabel="Media_Recorder_speech_text_play_button" type="staticrow">
                <property name="PlayButton" nameLabel="Media_Recorder_speech_text_play_button" type="string"/>
            </property>
            <property name="ResetButton" nameLabel="Media_Recorder_speech_text_reset_button" type="staticrow">
                <property name="ResetButton" nameLabel="Media_Recorder_speech_text_reset_button" type="string"/>
            </property>
            <property name="DownloadButton" nameLabel="Media_Recorder_speech_text_download_button" type="staticrow">
                <property name="DownloadButton" nameLabel="Media_Recorder_speech_text_download_button" type="string"/>
            </property>
            <property name="ResetDialog" nameLabel="Media_Recorder_speech_text_reset_dialog" type="staticrow">
                <property name="ResetDialog" nameLabel="Media_Recorder_speech_text_reset_dialog" type="string"/>
            </property>
            <property name="StartRecording" nameLabel="Media_Recorder_speech_text_start_recording" type="staticrow">
                <property name="StartRecording" nameLabel="Media_Recorder_speech_text_start_recording" type="string"/>
            </property>
            <property name="StopRecording" nameLabel="Media_Recorder_speech_text_stop_recording" type="staticrow">
                <property name="StopRecording" nameLabel="Media_Recorder_speech_text_stop_recording" type="string"/>
            </property>
            <property name="Disabled" nameLabel="Media_Recorder_speech_text_disabled" type="staticrow">
                <property name="Disabled" nameLabel="Media_Recorder_speech_text_disabled" type="string"/>
            </property>
        </property>
    </model>
<css>.media-recorder-wrapper {&#13;
    position: absolute;&#13;
    width: auto;&#13;
    height: auto;&#13;
    display: block;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-player-wrapper {&#13;
    position: relative;&#13;
    width: auto;&#13;
    height: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-interface-wrapper {&#13;
    width: 300px;&#13;
    height: 40px;&#13;
    display: flex;&#13;
    align-items: center;&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    padding-left: 10px;&#13;
    -webkit-border-radius: 20px;&#13;
    -moz-border-radius: 20px;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-recording-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/003-record-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-recording-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    border-radius: 50%;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-play-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/001-play-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-play-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-default-recording-play-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/002-play-default-recording-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-default-recording-play-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-timer {&#13;
    width: 100px;&#13;
    height: 30px;&#13;
    line-height: 30px;&#13;
    margin: 0px 10px;&#13;
    text-align: center;&#13;
    font-size: 14px;&#13;
    color: grey;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
}&#13;
&#13;
.media-recorder-wrapper.extended-mode .media-recorder-timer {&#13;
    width: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-sound-intensity {&#13;
    width: 20px;&#13;
    margin: 0px 10px;&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-dotted-sound-intensity {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 10px;&#13;
    display: flex;&#13;
    flex-direction: row;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-dot-container {&#13;
    height: 100%;&#13;
    position: relative;&#13;
    width: 8px;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-dot {&#13;
    width: 6px;&#13;
    height: 6px;&#13;
    border-radius: 6px;&#13;
    display: block;&#13;
    background-color: #1870b7;&#13;
    margin: 0;&#13;
    position: absolute;&#13;
    top: 50%;&#13;
    -ms-transform: translateY(-50%);&#13;
    transform: translateY(-50%);&#13;
}&#13;
&#13;
.media-recorder-wrapper .center {&#13;
    margin: 0;&#13;
    position: absolute;&#13;
    top: 50%;&#13;
    -ms-transform: translateY(-50%);&#13;
    transform: translateY(-50%);&#13;
  }&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large:first-child {&#13;
    border-top: 1px solid;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #990000;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large.selected {&#13;
    background-color: #FF0000;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-medium {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #999900;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-medium.selected {&#13;
    background-color: #E4E400;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-low {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #4C9900;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-low.selected {&#13;
    background-color: #71E200;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-player-loader {&#13;
}&#13;
&#13;
.media-recorder-wrapper .video-loader {&#13;
    border: 5px solid #f3f3f3;&#13;
    border-top: 5px solid #1d2830;&#13;
    border-radius: 50%;&#13;
    animation: spin 0.7s linear infinite;&#13;
    position: absolute;&#13;
    margin: auto;&#13;
    left: 0;&#13;
    right: 0;&#13;
    top: 0;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.media-recorder-wrapper.disabled {&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background-size: 100%;&#13;
    background: url('resources/005-reset-button.svg') no-repeat center;&#13;
    display: none;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-download-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background-size: 100%;&#13;
    background: url('resources/006-download-button.svg') no-repeat center;&#13;
    display: none;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-progress-bar {&#13;
    width: 80px;&#13;
    height: 10px;&#13;
    margin: 1px 1px;&#13;
    display: none;&#13;
    background-color: white;&#13;
    border-radius: 5px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-progress-bar-slider {&#13;
    width: 10px;&#13;
    height: 10px;&#13;
    display: block;&#13;
    background-color: black;&#13;
    border-radius: 5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-progress-bar-wrapper {&#13;
    width: 80px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    display: none&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-dialog {&#13;
    display: none;&#13;
    width:300px;&#13;
    padding: 10px 10px 15px;&#13;
    position:absolute;&#13;
    top:-90px;&#13;
    background-color: white;&#13;
    box-shadow: 8px 8px 5px rgb(0 0 0 / 40%);&#13;
    z-index: 99999;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-dialog .dialog-text {&#13;
    text-align: center;&#13;
    padding: 5px 5px 10px;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-dialog .dialog-buttons {&#13;
    display: flex;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-dialog .deny-button {&#13;
    margin: auto;&#13;
    text-align: center;&#13;
    background-color: red;&#13;
    color: white;&#13;
    padding: 3px 15px;&#13;
    display: block;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-reset-dialog .confirm-button {&#13;
    margin: auto;&#13;
    text-align: center;&#13;
    background-color: green;&#13;
    color: white;&#13;
    padding: 3px 15px;&#13;
    display: block;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.disable-record-button {&#13;
    pointer-events: none;&#13;
  	cursor: default;&#13;
	opacity: 0.5;&#13;
}&#13;
&#13;
@keyframes spin {&#13;
    0% {&#13;
        transform: rotate(0deg);&#13;
    }&#13;
    100% {&#13;
        transform: rotate(360deg);&#13;
    }&#13;
}&#13;
</css><view>&lt;div class="media-recorder-wrapper"&gt;&#13;
    &lt;div class="media-recorder-player-wrapper"&gt;&#13;
        &lt;div class="media-recorder-player-loader"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="media-recorder-interface-wrapper"&gt;&#13;
        &lt;div class="media-recorder-default-recording-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-recording-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-timer"&gt;00:00/00:00&lt;/div&gt;&#13;
        &lt;div class="media-recorder-sound-intensity"&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-6"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-5"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-4"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-3"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-2"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-1"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="media-recorder-dotted-sound-intensity"&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot short-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot tall-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot short-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="media-recorder-progress-bar"&gt;&#13;
            &lt;div class="media-recorder-progress-bar-slider"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="media-recorder-reset-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-download-button"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div&gt;&#13;
        &lt;div class="media-recorder-reset-dialog"&gt;&#13;
            &lt;div class="dialog-text"&gt;&lt;/div&gt;&#13;
            &lt;div class="dialog-buttons"&gt;&#13;
                &lt;div class="confirm-button"&gt;&lt;/div&gt;&#13;
                &lt;div class="deny-button"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="media-recorder-wrapper"&gt;&#13;
    &lt;div class="media-recorder-player-wrapper"&gt;&#13;
        &lt;div class="media-recorder-player-loader"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="media-recorder-interface-wrapper"&gt;&#13;
        &lt;div class="media-recorder-default-recording-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-recording-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-timer"&gt;00:00/00:00&lt;/div&gt;&#13;
        &lt;div class="media-recorder-sound-intensity"&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-6"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-5"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-4"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-3"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-2"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-1"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="media-recorder-dotted-sound-intensity"&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot short-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot tall-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
            &lt;div class="media-recorder-dot-container"&gt;&lt;div class="sound-intensity-dot short-dot"&gt;&lt;/div&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>/******/ (function(modules) { // webpackBootstrap&#13;
/******/ 	// The module cache&#13;
/******/ 	var installedModules = {};&#13;
/******/&#13;
/******/ 	// The require function&#13;
/******/ 	function __webpack_require__(moduleId) {&#13;
/******/&#13;
/******/ 		// Check if module is in cache&#13;
/******/ 		if(installedModules[moduleId]) {&#13;
/******/ 			return installedModules[moduleId].exports;&#13;
/******/ 		}&#13;
/******/ 		// Create a new module (and put it into the cache)&#13;
/******/ 		var module = installedModules[moduleId] = {&#13;
/******/ 			i: moduleId,&#13;
/******/ 			l: false,&#13;
/******/ 			exports: {}&#13;
/******/ 		};&#13;
/******/&#13;
/******/ 		// Execute the module function&#13;
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);&#13;
/******/&#13;
/******/ 		// Flag the module as loaded&#13;
/******/ 		module.l = true;&#13;
/******/&#13;
/******/ 		// Return the exports of the module&#13;
/******/ 		return module.exports;&#13;
/******/ 	}&#13;
/******/&#13;
/******/&#13;
/******/ 	// expose the modules object (__webpack_modules__)&#13;
/******/ 	__webpack_require__.m = modules;&#13;
/******/&#13;
/******/ 	// expose the module cache&#13;
/******/ 	__webpack_require__.c = installedModules;&#13;
/******/&#13;
/******/ 	// define getter function for harmony exports&#13;
/******/ 	__webpack_require__.d = function(exports, name, getter) {&#13;
/******/ 		if(!__webpack_require__.o(exports, name)) {&#13;
/******/ 			Object.defineProperty(exports, name, {&#13;
/******/ 				configurable: false,&#13;
/******/ 				enumerable: true,&#13;
/******/ 				get: getter&#13;
/******/ 			});&#13;
/******/ 		}&#13;
/******/ 	};&#13;
/******/&#13;
/******/ 	// getDefaultExport function for compatibility with non-harmony modules&#13;
/******/ 	__webpack_require__.n = function(module) {&#13;
/******/ 		var getter = module &amp;&amp; module.__esModule ?&#13;
/******/ 			function getDefault() { return module['default']; } :&#13;
/******/ 			function getModuleExports() { return module; };&#13;
/******/ 		__webpack_require__.d(getter, 'a', getter);&#13;
/******/ 		return getter;&#13;
/******/ 	};&#13;
/******/&#13;
/******/ 	// Object.prototype.hasOwnProperty.call&#13;
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };&#13;
/******/&#13;
/******/ 	// __webpack_public_path__&#13;
/******/ 	__webpack_require__.p = "";&#13;
/******/&#13;
/******/ 	// Load entry module and return exports&#13;
/******/ 	return __webpack_require__(__webpack_require__.s = 16);&#13;
/******/ })&#13;
/************************************************************************/&#13;
/******/ ([&#13;
/* 0 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
var CSS_CLASSES = exports.CSS_CLASSES = {&#13;
    PLAYER_WRAPPER: "media-recorder-player-wrapper",&#13;
    PLAYER_LOADER: "media-recorder-player-loader",&#13;
    AUDIO_LOADER: "audio-loader",&#13;
    WRAPPER: "media-recorder-wrapper",&#13;
    WRAPPER_BROWSER_NOT_SUPPORTED: "media-recorder-wrapper-browser-not-supported",&#13;
    DEFAULT_RECORDING_PLAY_BUTTON: "media-recorder-default-recording-play-button",&#13;
    RECORDING_BUTTON: "media-recorder-recording-button",&#13;
    PLAY_BUTTON: "media-recorder-play-button",&#13;
    RESET_BUTTON: "media-recorder-reset-button",&#13;
    DOWNLOAD_BUTTON: "media-recorder-download-button",&#13;
    PROGRESS_BAR: "media-recorder-progress-bar",&#13;
    PROGRESS_BAR_SLIDER: "media-recorder-progress-bar-slider",&#13;
    TIMER: "media-recorder-timer",&#13;
    SOUND_INTENSITY: "media-recorder-sound-intensity",&#13;
    DOTTED_SOUND_INTENSITY: "media-recorder-dotted-sound-intensity",&#13;
    TALL_DOT: "tall-dot",&#13;
    SHORT_DOT: "short-dot",&#13;
    SOUND_INTENSITY_DOT: "sound-intensity-dot",&#13;
    RESET_DIALOG: "media-recorder-reset-dialog",&#13;
    DIALOG_TEXT: "dialog-text",&#13;
    CONFIRM_BUTTON: "confirm-button",&#13;
    DENY_BUTTON: "deny-button",&#13;
    EXTENDED_MODE: "extended-mode",&#13;
    SELECTED: "selected",&#13;
    DISABLED: "disabled",&#13;
    DISABLE_RECORD_BUTTON: "disable-record-button"&#13;
};&#13;
&#13;
/***/ }),&#13;
/* 1 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Button = exports.Button = function () {&#13;
    function Button($view) {&#13;
        _classCallCheck(this, Button);&#13;
&#13;
        if (this.constructor === Button) throw new Error("Cannot create an instance of BasePlayer abstract class");&#13;
&#13;
        this.$view = $view;&#13;
        this.$view.css("z-index", "100");&#13;
    }&#13;
&#13;
    _createClass(Button, [{&#13;
        key: "activate",&#13;
        value: function activate() {&#13;
            var _this = this;&#13;
&#13;
            this.$view.click(function (event) {&#13;
                if (!_this.isDoubleClick(event)) {&#13;
                    _this._eventHandler();&#13;
                }&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "isDoubleClick",&#13;
        value: function isDoubleClick(event) {&#13;
            return event.originalEvent &amp;&amp; event.originalEvent.detail &gt; 1;&#13;
        }&#13;
    }, {&#13;
        key: "deactivate",&#13;
        value: function deactivate() {&#13;
            this.$view.unbind();&#13;
        }&#13;
    }, {&#13;
        key: "forceClick",&#13;
        value: function forceClick() {&#13;
            this.$view.click();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.deactivate();&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            throw new Error("EventHandler accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return Button;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 2 */,&#13;
/* 3 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.RecordButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(1);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var RecordButton = exports.RecordButton = function (_Button) {&#13;
    _inherits(RecordButton, _Button);&#13;
&#13;
    function RecordButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state;&#13;
&#13;
        _classCallCheck(this, RecordButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (RecordButton.__proto__ || Object.getPrototypeOf(RecordButton)).call(this, $view));&#13;
&#13;
        _this._keyboardController = null;&#13;
        _this._timeoutID = null;&#13;
&#13;
        _this.state = state;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(RecordButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(RecordButton.prototype.__proto__ || Object.getPrototypeOf(RecordButton.prototype), "destroy", this).call(this);&#13;
            this._keyboardController = null;&#13;
            this.state = null;&#13;
            this._clearTimeout();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onResetCallback();&#13;
            this._clearTimeout();&#13;
        }&#13;
    }, {&#13;
        key: "setUnclickView",&#13;
        value: function setUnclickView() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.state.isNew() || this.state.isLoaded() || this.state.isLoadedDefaultRecording() || this.state.isBlockedSafari()) this._startRecording();else if (this.state.isRecording()) this._stopRecording();&#13;
        }&#13;
    }, {&#13;
        key: "_startRecording",&#13;
        value: function _startRecording() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onStartRecordingCallback();&#13;
            this._handleDisablingRecordButton();&#13;
        }&#13;
    }, {&#13;
        key: "_stopRecording",&#13;
        value: function _stopRecording() {&#13;
            if (!this._timeoutID) {&#13;
                this.$view.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
                this.onStopRecordingCallback();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_handleDisablingRecordButton",&#13;
        value: function _handleDisablingRecordButton() {&#13;
            this._disableRecordButton();&#13;
            _self = this;&#13;
            this._timeoutID = setTimeout(function () {&#13;
                _self._enableRecordButton();&#13;
            }, 1000);&#13;
        }&#13;
    }, {&#13;
        key: "_disableRecordButton",&#13;
        value: function _disableRecordButton() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.DISABLE_RECORD_BUTTON);&#13;
        }&#13;
    }, {&#13;
        key: "_enableRecordButton",&#13;
        value: function _enableRecordButton() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.DISABLE_RECORD_BUTTON);&#13;
            this._clearTimeout();&#13;
        }&#13;
    }, {&#13;
        key: "_clearTimeout",&#13;
        value: function _clearTimeout() {&#13;
            if (this._timeoutID) {&#13;
                clearTimeout(this._timeoutID);&#13;
                this._timeoutID = null;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "setKeyboardController",&#13;
        value: function setKeyboardController(keyboardController) {&#13;
            this._keyboardController = keyboardController;&#13;
        }&#13;
    }, {&#13;
        key: "onStartRecording",&#13;
        set: function set(callback) {&#13;
            this.onStartRecordingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecording",&#13;
        set: function set(callback) {&#13;
            this.onStopRecordingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onReset",&#13;
        set: function set(callback) {&#13;
            this.onResetCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 4 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var BlobService = exports.BlobService = function () {&#13;
    function BlobService() {&#13;
        _classCallCheck(this, BlobService);&#13;
    }&#13;
&#13;
    _createClass(BlobService, null, [{&#13;
        key: "serialize",&#13;
        value: function serialize(blob) {&#13;
            return new Promise(function (resolve) {&#13;
                var reader = new FileReader();&#13;
                if (blob instanceof Blob) {&#13;
                    var realFileReader = reader._realReader;&#13;
                    if (realFileReader) {&#13;
                        reader = realFileReader;&#13;
                    }&#13;
                }&#13;
                reader.onloadend = function () {&#13;
                    return resolve(reader.result);&#13;
                };&#13;
                reader.readAsDataURL(blob);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "deserialize",&#13;
        value: function deserialize(base64Data) {&#13;
            var mediaSourceData = base64Data.split(",");&#13;
            var recording = mediaSourceData[1];&#13;
            var contentType = mediaSourceData[0].replace(";base64", "").replace("data:", "");&#13;
            return this._b64toBlob(recording, contentType);&#13;
        }&#13;
    }, {&#13;
        key: "_b64toBlob",&#13;
        value: function _b64toBlob(b64Data, contentType, sliceSize) {&#13;
            contentType = contentType || '';&#13;
            sliceSize = sliceSize || 512;&#13;
&#13;
            var byteCharacters = atob(b64Data);&#13;
            var byteArrays = [];&#13;
&#13;
            for (var offset = 0; offset &lt; byteCharacters.length; offset += sliceSize) {&#13;
                var slice = byteCharacters.slice(offset, offset + sliceSize);&#13;
&#13;
                var byteNumbers = new Array(slice.length);&#13;
                for (var i = 0; i &lt; slice.length; i++) {&#13;
                    byteNumbers[i] = slice.charCodeAt(i);&#13;
                }&#13;
&#13;
                var byteArray = new Uint8Array(byteNumbers);&#13;
&#13;
                byteArrays.push(byteArray);&#13;
            }&#13;
&#13;
            return new Blob(byteArrays, { type: contentType });&#13;
        }&#13;
    }, {&#13;
        key: "getMp3BlobFromDecodedDataByWorker",&#13;
        value: function getMp3BlobFromDecodedDataByWorker(worker, decodedData) {&#13;
            var newSampleRate = 22050;&#13;
            var buffers = this.prepareSampleBuffers(decodedData);&#13;
            var left = this._interpolateArray(buffers[0], newSampleRate, decodedData.sampleRate);&#13;
            var right = this._interpolateArray(buffers[1], newSampleRate, decodedData.sampleRate);&#13;
&#13;
            return worker.execute(decodedData.numberOfChannels, newSampleRate, decodedData.length, left, right);&#13;
        }&#13;
    }, {&#13;
        key: "getMp3BlobFromDecodedData",&#13;
        value: function getMp3BlobFromDecodedData(decodedData) {&#13;
            var newSampleRate = 22050;&#13;
            var buffers = this.prepareSampleBuffers(decodedData);&#13;
            var left = this._interpolateArray(buffers[0], newSampleRate, decodedData.sampleRate);&#13;
            var right = this._interpolateArray(buffers[1], newSampleRate, decodedData.sampleRate);&#13;
&#13;
            return this._encode(decodedData.numberOfChannels, newSampleRate, decodedData.length, left, right);&#13;
        }&#13;
    }, {&#13;
        key: "_interpolateArray",&#13;
        value: function _interpolateArray(data, newSampleRate, oldSampleRate) {&#13;
            var fitCount = Math.round(data.length * (newSampleRate / oldSampleRate));&#13;
            var newData = new Int16Array(fitCount - 1);&#13;
            var springFactor = Number((data.length - 1) / (fitCount - 1));&#13;
            newData[0] = data[0];&#13;
            for (var i = 1; i &lt; fitCount - 1; i++) {&#13;
                var tmp = i * springFactor;&#13;
                var before = Number(Math.floor(tmp)).toFixed();&#13;
                var after = Number(Math.ceil(tmp)).toFixed();&#13;
                var atPoint = tmp - before;&#13;
                newData[i] = this._linearInterpolate(data[before], data[after], atPoint);&#13;
            }&#13;
            newData[fitCount - 1] = data[data.length - 1];&#13;
&#13;
            return newData;&#13;
        }&#13;
    }, {&#13;
        key: "_linearInterpolate",&#13;
        value: function _linearInterpolate(before, after, atPoint) {&#13;
            return before + (after - before) * atPoint;&#13;
        }&#13;
    }, {&#13;
        key: "prepareSampleBuffers",&#13;
        value: function prepareSampleBuffers(decodedData) {&#13;
            var left = this._convertFloat32ToInt16Array(decodedData.getChannelData(0));&#13;
            var right = left;&#13;
            if (decodedData.numberOfChannels === 2) {&#13;
                right = this._convertFloat32ToInt16Array(decodedData.getChannelData(1));&#13;
            }&#13;
            return [left, right];&#13;
        }&#13;
    }, {&#13;
        key: "_encode",&#13;
        value: function _encode(channels, sampleRate, sampleLen, left, right) {&#13;
            var buffer = [];&#13;
            var mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, 96); //third value determinate bitrate&#13;
&#13;
            var maxSamples = 1152;&#13;
            for (var i = 0; i &lt; sampleLen; i += maxSamples) {&#13;
                var leftChunk = left.subarray(i, i + maxSamples);&#13;
                var rightChunk = right.subarray(i, i + maxSamples);&#13;
&#13;
                var mp3buf = mp3enc.encodeBuffer(leftChunk, rightChunk);&#13;
                if (mp3buf.length &gt; 0) {&#13;
                    buffer.push(new Int8Array(mp3buf));&#13;
                }&#13;
            }&#13;
            var d = mp3enc.flush();&#13;
            if (d.length &gt; 0) {&#13;
                buffer.push(new Int8Array(d));&#13;
            }&#13;
&#13;
            var blob = new Blob(buffer, { type: 'audio/mpeg-3' });&#13;
            return blob;&#13;
        }&#13;
&#13;
        //lamejs require int16 array&#13;
        //see more at - https://github.com/zhuker/lamejs/issues/10#issuecomment-141718262&#13;
&#13;
    }, {&#13;
        key: "_convertFloat32ToInt16Array",&#13;
        value: function _convertFloat32ToInt16Array(data) {&#13;
            var len = data.length,&#13;
                i = 0;&#13;
            var dataAsInt16Array = new Int16Array(len);&#13;
&#13;
            while (i &lt; len) {&#13;
                dataAsInt16Array[i] = convert(data[i++]);&#13;
            }&#13;
            function convert(n) {&#13;
                var v = n &lt; 0 ? n * 32768 : n * 32767; // convert in range [-32768, 32767]&#13;
                return Math.max(-32768, Math.min(32768, v)); // clamp&#13;
            }&#13;
            return dataAsInt16Array;&#13;
        }&#13;
    }]);&#13;
&#13;
    return BlobService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 5 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.SoundIntensity = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var SoundIntensity = exports.SoundIntensity = function () {&#13;
    function SoundIntensity($view) {&#13;
        _classCallCheck(this, SoundIntensity);&#13;
&#13;
        this.$view = $view;&#13;
        this.volumeLevels = 6;&#13;
        this.interval = null;&#13;
        this.enableAnalyser = true;&#13;
        this.shouldBeVisible = true;&#13;
    }&#13;
&#13;
    _createClass(SoundIntensity, [{&#13;
        key: 'setEnableAnalyser',&#13;
        value: function setEnableAnalyser(enableAnalyser) {&#13;
            this.enableAnalyser = enableAnalyser;&#13;
            if (this.shouldBeVisible) {&#13;
                if (this.enableAnalyser) {&#13;
                    this.show();&#13;
                } else {&#13;
                    this.hide();&#13;
                }&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: 'startAnalyzing',&#13;
        value: function startAnalyzing(analyser) {&#13;
            var _this = this;&#13;
&#13;
            this.interval = setInterval(function () {&#13;
                return _this._updateIntensity(analyser);&#13;
            }, 100);&#13;
        }&#13;
    }, {&#13;
        key: 'stopAnalyzing',&#13;
        value: function stopAnalyzing() {&#13;
            if (this.interval) clearInterval(this.interval);&#13;
            this._clearIntensity();&#13;
        }&#13;
    }, {&#13;
        key: 'destroy',&#13;
        value: function destroy() {&#13;
            this.stopAnalyzing();&#13;
            this.interval = null;&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: 'show',&#13;
        value: function show() {&#13;
            if (this.enableAnalyser) {&#13;
                this.$view.css('display', '');&#13;
            }&#13;
            this.shouldBeVisible = true;&#13;
        }&#13;
    }, {&#13;
        key: 'hide',&#13;
        value: function hide() {&#13;
            this.$view.css('display', 'none');&#13;
            this.shouldBeVisible = false;&#13;
        }&#13;
    }, {&#13;
        key: 'setEventBus',&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            this.eventBus = eventBus;&#13;
            this.sourceID = sourceID;&#13;
        }&#13;
    }, {&#13;
        key: '_updateIntensity',&#13;
        value: function _updateIntensity(analyser) {&#13;
            var frequencyArray = new Uint8Array(analyser.frequencyBinCount);&#13;
            analyser.getByteFrequencyData(frequencyArray);&#13;
            var avgVolume = this._calculateAvgVolume(frequencyArray);&#13;
            var raisedVolume = this._raiseVolume(avgVolume);&#13;
            var alignedVolume = this._alignVolume(raisedVolume);&#13;
            var intensity = alignedVolume * this.volumeLevels;&#13;
            this._setIntensity(intensity);&#13;
            if (this.eventBus) {&#13;
                this._handleEvents(intensity);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: '_handleEvents',&#13;
        value: function _handleEvents(intensity) {&#13;
            if (this.lastIntensityLevel === undefined) {&#13;
                this.lastIntensityLevel = 0;&#13;
                return;&#13;
            }&#13;
            var newIntensityLevel = Math.floor(intensity);&#13;
            if (newIntensityLevel !== this.lastIntensityLevel) {&#13;
                this.lastIntensityLevel = newIntensityLevel;&#13;
                var eventData = {&#13;
                    'source': this.sourceID,&#13;
                    'item': 'intensity',&#13;
                    'value': newIntensityLevel,&#13;
                    'score': ''&#13;
                };&#13;
                this.eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: '_calculateAvgVolume',&#13;
        value: function _calculateAvgVolume(volumeArray) {&#13;
            var sum = 0;&#13;
            var _iteratorNormalCompletion = true;&#13;
            var _didIteratorError = false;&#13;
            var _iteratorError = undefined;&#13;
&#13;
            try {&#13;
                for (var _iterator = volumeArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {&#13;
                    var i = _step.value;&#13;
&#13;
                    sum += i;&#13;
                }&#13;
            } catch (err) {&#13;
                _didIteratorError = true;&#13;
                _iteratorError = err;&#13;
            } finally {&#13;
                try {&#13;
                    if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {&#13;
                        _iterator.return();&#13;
                    }&#13;
                } finally {&#13;
                    if (_didIteratorError) {&#13;
                        throw _iteratorError;&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            return sum / volumeArray.length;&#13;
        }&#13;
    }, {&#13;
        key: '_raiseVolume',&#13;
        value: function _raiseVolume(volume) {&#13;
            return volume &gt; 0 ? volume * 1.2 : volume;&#13;
        }&#13;
    }, {&#13;
        key: '_alignVolume',&#13;
        value: function _alignVolume(volume) {&#13;
            volume = volume &gt; 0 ? volume : 0;&#13;
            volume = volume &lt; 64 ? volume : 64;&#13;
            return volume / 64;&#13;
        }&#13;
    }, {&#13;
        key: '_setIntensity',&#13;
        value: function _setIntensity(intensity) {&#13;
            this._clearIntensity();&#13;
            for (var currentLevel = 1; currentLevel &lt;= intensity; currentLevel++) {&#13;
                var levelId = "#sound-intensity-" + currentLevel;&#13;
                var $level = this.$view.find(levelId);&#13;
                $level.addClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: '_clearIntensity',&#13;
        value: function _clearIntensity() {&#13;
            for (var currentLevel = 1; currentLevel &lt;= this.volumeLevels; currentLevel++) {&#13;
                var levelId = "#sound-intensity-" + currentLevel;&#13;
                var $level = this.$view.find(levelId);&#13;
                $level.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return SoundIntensity;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 6 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.BaseKeyboardController = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var BaseKeyboardController = exports.BaseKeyboardController = function (_KeyboardController) {&#13;
    _inherits(BaseKeyboardController, _KeyboardController);&#13;
&#13;
    function BaseKeyboardController(elements, columnsCount, model, mediaState, activationState, speak, speakAndExecuteCallback) {&#13;
        _classCallCheck(this, BaseKeyboardController);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (BaseKeyboardController.__proto__ || Object.getPrototypeOf(BaseKeyboardController)).call(this, elements, columnsCount));&#13;
&#13;
        _this._isRecording = false;&#13;
        _this.DEFAULT_TTS_PHRASES = {&#13;
            DEFAULT_RECORDING_PLAY_BUTTON: "Default recording play button",&#13;
            RECORDING_BUTTON: "Recording button",&#13;
            PLAY_BUTTON: "Play button",&#13;
            RESET_BUTTON: "Reset button",&#13;
            DOWNLOAD_BUTTON: "Download button",&#13;
            RESET_DIALOG: "Reset dialog",&#13;
            START_RECORDING: "Start recording",&#13;
            STOP_RECORDING: "Recording stopped",&#13;
            DISABLED: "Disabled"&#13;
        };&#13;
&#13;
&#13;
        if (_this.constructor === BaseKeyboardController) throw new Error("Cannot create an instance of KeyboardController abstract class");&#13;
&#13;
        _this._langTag = model.langAttribute;&#13;
        _this._mediaState = mediaState;&#13;
        _this._activationState = activationState;&#13;
        _this._speak = speak;&#13;
        _this._speakAndExecuteCallback = speakAndExecuteCallback;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(BaseKeyboardController, [{&#13;
        key: "setSpeechTexts",&#13;
        value: function setSpeechTexts(speechTexts) {&#13;
            this.speechTexts = {&#13;
                DefaultRecordingPlayButton: this.DEFAULT_TTS_PHRASES.DEFAULT_RECORDING_PLAY_BUTTON,&#13;
                RecordingButton: this.DEFAULT_TTS_PHRASES.RECORDING_BUTTON,&#13;
                PlayButton: this.DEFAULT_TTS_PHRASES.PLAY_BUTTON,&#13;
                ResetButton: this.DEFAULT_TTS_PHRASES.RESET_BUTTON,&#13;
                DownloadButton: this.DEFAULT_TTS_PHRASES.DOWNLOAD_BUTTON,&#13;
                ResetDialog: this.DEFAULT_TTS_PHRASES.RESET_DIALOG,&#13;
                StartRecording: this.DEFAULT_TTS_PHRASES.START_RECORDING,&#13;
                StopRecording: this.DEFAULT_TTS_PHRASES.STOP_RECORDING,&#13;
                Disabled: this.DEFAULT_TTS_PHRASES.DISABLED&#13;
            };&#13;
&#13;
            if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
                return;&#13;
            };&#13;
&#13;
            this.speechTexts = {&#13;
                DefaultRecordingPlayButton: TTSUtils.getSpeechTextProperty(speechTexts.DefaultRecordingPlayButton.DefaultRecordingPlayButton, this.speechTexts.DefaultRecordingPlayButton),&#13;
                RecordingButton: TTSUtils.getSpeechTextProperty(speechTexts.RecordingButton.RecordingButton, this.speechTexts.RecordingButton),&#13;
                PlayButton: TTSUtils.getSpeechTextProperty(speechTexts.PlayButton.PlayButton, this.speechTexts.PlayButton),&#13;
                ResetButton: TTSUtils.getSpeechTextProperty(speechTexts.ResetButton.ResetButton, this.speechTexts.ResetButton),&#13;
                DownloadButton: TTSUtils.getSpeechTextProperty(speechTexts.DownloadButton.DownloadButton, this.speechTexts.DownloadButton),&#13;
                ResetDialog: TTSUtils.getSpeechTextProperty(speechTexts.ResetDialog.ResetDialog, this.speechTexts.ResetDialog),&#13;
                StartRecording: TTSUtils.getSpeechTextProperty(speechTexts.StartRecording.StartRecording, this.speechTexts.StartRecording),&#13;
                StopRecording: TTSUtils.getSpeechTextProperty(speechTexts.StopRecording.StopRecording, this.speechTexts.StopRecording),&#13;
                Disabled: TTSUtils.getSpeechTextProperty(speechTexts.Disabled.Disabled, this.speechTexts.Disabled)&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "getTarget",&#13;
        value: function getTarget(element, willBeClicked) {&#13;
            return $(element);&#13;
        }&#13;
    }, {&#13;
        key: "switchElement",&#13;
        value: function switchElement(move) {&#13;
            _get(BaseKeyboardController.prototype.__proto__ || Object.getPrototypeOf(BaseKeyboardController.prototype), "switchElement", this).call(this, move);&#13;
            if (!this._isCurrentElementNotDisplayed()) {&#13;
                this.readCurrentElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "nextElement",&#13;
        value: function nextElement(event) {&#13;
            if (event) {&#13;
                event.preventDefault();&#13;
            }&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                return;&#13;
            }&#13;
&#13;
            this.switchElement(1);&#13;
&#13;
            if (this._isCurrentElementNotDisplayed()) {&#13;
                this.nextElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "previousElement",&#13;
        value: function previousElement(event) {&#13;
            if (event) {&#13;
                event.preventDefault();&#13;
            }&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                return;&#13;
            }&#13;
&#13;
            this.switchElement(-1);&#13;
&#13;
            if (this._isCurrentElementNotDisplayed()) {&#13;
                this.previousElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "nextRow",&#13;
        value: function nextRow(event) {&#13;
            if (event) {&#13;
                event.preventDefault();&#13;
            }&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                return;&#13;
            }&#13;
&#13;
            this.switchElement(this.columnsCount);&#13;
&#13;
            if (this._isCurrentElementNotDisplayed()) {&#13;
                this.nextRow();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "previousRow",&#13;
        value: function previousRow(event) {&#13;
            if (event) {&#13;
                event.preventDefault();&#13;
            }&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                return;&#13;
            }&#13;
&#13;
            this.switchElement(-this.columnsCount);&#13;
&#13;
            if (this._isCurrentElementNotDisplayed()) {&#13;
                this.previousRow();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "enter",&#13;
        value: function enter(event) {&#13;
            if (event) {&#13;
                event.preventDefault();&#13;
            }&#13;
&#13;
            if (!this.keyboardNavigationActive) {&#13;
                this._performFirstEnterEvent();&#13;
            } else {&#13;
                this._performNotFirstEnterEvent();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_performFirstEnterEvent",&#13;
        value: function _performFirstEnterEvent() {&#13;
            this.keyboardNavigationActive = true;&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                this._markActiveElement();&#13;
            } else {&#13;
                this._markAndReadFirstDisplayedElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_markActiveElement",&#13;
        value: function _markActiveElement() {&#13;
            if (this._mediaState.isPlayingDefaultRecording()) {&#13;
                this.markDefaultRecordingPlayButton();&#13;
            } else if (this._mediaState.isRecording() || this._isRecording) {&#13;
                this.markRecordingButton();&#13;
            } else if (this._mediaState.isPlaying()) {&#13;
                this.markPlayButton();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "markDefaultRecordingPlayButton",&#13;
        value: function markDefaultRecordingPlayButton() {&#13;
            throw new Error("readElement method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "markRecordingButton",&#13;
        value: function markRecordingButton() {&#13;
            throw new Error("readElement method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "markPlayButton",&#13;
        value: function markPlayButton() {&#13;
            throw new Error("readElement method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "_markAndReadFirstDisplayedElement",&#13;
        value: function _markAndReadFirstDisplayedElement() {&#13;
            this.markCurrentElement(0);&#13;
            if (this._isCurrentElementNotDisplayed()) {&#13;
                this.nextElement();&#13;
            } else {&#13;
                this.readCurrentElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_performNotFirstEnterEvent",&#13;
        value: function _performNotFirstEnterEvent() {&#13;
            if (!this._isKeyboardNavigationBlocked()) {&#13;
                this.readCurrentElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "select",&#13;
        value: function select(event) {&#13;
            if (this._isAddonDisabled() &amp;&amp; !this._getCurrentElement().hasClass(_CssClasses.CSS_CLASSES.DIALOG_TEXT)) {&#13;
                var textVoiceObject = [];&#13;
&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
&#13;
                this._speak(textVoiceObject);&#13;
            }&#13;
&#13;
            _get(BaseKeyboardController.prototype.__proto__ || Object.getPrototypeOf(BaseKeyboardController.prototype), "select", this).call(this, event);&#13;
        }&#13;
    }, {&#13;
        key: "exitWCAGMode",&#13;
        value: function exitWCAGMode() {&#13;
            this._isRecording = false;&#13;
            _get(BaseKeyboardController.prototype.__proto__ || Object.getPrototypeOf(BaseKeyboardController.prototype), "exitWCAGMode", this).call(this);&#13;
        }&#13;
    }, {&#13;
        key: "_isAddonDisabled",&#13;
        value: function _isAddonDisabled() {&#13;
            return this._activationState.isInactive();&#13;
        }&#13;
    }, {&#13;
        key: "_isKeyboardNavigationBlocked",&#13;
        value: function _isKeyboardNavigationBlocked() {&#13;
            return this._mediaState.isPlayingDefaultRecording() || this._mediaState.isRecording() || this._mediaState.isPlaying() || this._isRecording;&#13;
        }&#13;
    }, {&#13;
        key: "_isCurrentElementNotDisplayed",&#13;
        value: function _isCurrentElementNotDisplayed() {&#13;
            return this._getCurrentElement().style("display") === "none";&#13;
        }&#13;
    }, {&#13;
        key: "_getCurrentElement",&#13;
        value: function _getCurrentElement() {&#13;
            return this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
        }&#13;
    }, {&#13;
        key: "readCurrentElement",&#13;
        value: function readCurrentElement() {&#13;
            this.readElement(this.keyboardNavigationCurrentElement);&#13;
        }&#13;
    }, {&#13;
        key: "readElement",&#13;
        value: function readElement(element) {&#13;
            throw new Error("readElement method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "isCurrentElementDisabled",&#13;
        value: function isCurrentElementDisabled() {&#13;
            return this._getCurrentElement().hasClass(_CssClasses.CSS_CLASSES.DISABLE_RECORD_BUTTON);&#13;
        }&#13;
    }, {&#13;
        key: "_speakRecordingButtonTTS",&#13;
        value: function _speakRecordingButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.RecordingButton);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_speakPlayButtonTTS",&#13;
        value: function _speakPlayButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.PlayButton);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "onStartRecording",&#13;
        value: function onStartRecording(callbackFunction) {&#13;
            this._isRecording = true;&#13;
            this._speakStartRecordingTTS(callbackFunction);&#13;
        }&#13;
    }, {&#13;
        key: "onStartRecordingWhenSoundEffect",&#13;
        value: function onStartRecordingWhenSoundEffect() {&#13;
            this._isRecording = true;&#13;
        }&#13;
    }, {&#13;
        key: "_speakStartRecordingTTS",&#13;
        value: function _speakStartRecordingTTS(callbackFunction) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.StartRecording);&#13;
&#13;
            this._speakAndExecuteCallback(textVoiceObject, callbackFunction);&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecording",&#13;
        value: function onStopRecording() {&#13;
            this._isRecording = false;&#13;
            this._speakStopRecordingTTS();&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecordingWhenSoundEffect",&#13;
        value: function onStopRecordingWhenSoundEffect() {&#13;
            this._isRecording = false;&#13;
        }&#13;
    }, {&#13;
        key: "_speakStopRecordingTTS",&#13;
        value: function _speakStopRecordingTTS() {&#13;
            if (this.isCurrentElementDisabled()) return;&#13;
&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.StopRecording);&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_pushDisabledMessageToTextVoiceObject",&#13;
        value: function _pushDisabledMessageToTextVoiceObject(textVoiceObject) {&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.Disabled);&#13;
        }&#13;
    }, {&#13;
        key: "_pushMessageToTextVoiceObjectWithLanguageFromLesson",&#13;
        value: function _pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, message) {&#13;
            this._pushMessageToTextVoiceObject(textVoiceObject, message, false);&#13;
        }&#13;
    }, {&#13;
        key: "_pushMessageToTextVoiceObjectWithLanguageFromPresenter",&#13;
        value: function _pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, message) {&#13;
            this._pushMessageToTextVoiceObject(textVoiceObject, message, true);&#13;
        }&#13;
    }, {&#13;
        key: "_pushMessageToTextVoiceObject",&#13;
        value: function _pushMessageToTextVoiceObject(textVoiceObject, message) {&#13;
            var usePresenterLangTag = arguments.length &gt; 2 &amp;&amp; arguments[2] !== undefined ? arguments[2] : false;&#13;
&#13;
            if (usePresenterLangTag) {&#13;
                textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message, this._langTag));&#13;
            } else {&#13;
                textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message));&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return BaseKeyboardController;&#13;
}(KeyboardController);&#13;
&#13;
/***/ }),&#13;
/* 7 */,&#13;
/* 8 */,&#13;
/* 9 */,&#13;
/* 10 */,&#13;
/* 11 */,&#13;
/* 12 */,&#13;
/* 13 */,&#13;
/* 14 */,&#13;
/* 15 */,&#13;
/* 16 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
var _MediaRecorder = __webpack_require__(17);&#13;
&#13;
function AddonMedia_Recorder_create() {&#13;
&#13;
    var presenter = function presenter() {};&#13;
&#13;
    presenter.mediaRecorder = new _MediaRecorder.MediaRecorder();&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.mediaRecorder.setPlayerController(controller);&#13;
    };&#13;
&#13;
    presenter.run = function run(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.mediaRecorder.run(view, model);&#13;
        handleDestroyEvent(view);&#13;
    };&#13;
&#13;
    presenter.createPreview = function createPreview(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.mediaRecorder.createPreview(view, model);&#13;
        handleDestroyEvent(view);&#13;
    };&#13;
&#13;
    presenter.isEmpty = function isEmpty() {&#13;
        return presenter.mediaRecorder.isEmpty();&#13;
    };&#13;
&#13;
    presenter.getMP3File = function getMP3File() {&#13;
        return presenter.mediaRecorder.getMP3File();&#13;
    };&#13;
&#13;
    presenter.getState = function getState() {&#13;
        return presenter.mediaRecorder.getState();&#13;
    };&#13;
&#13;
    presenter.setState = function setState(state) {&#13;
        presenter.mediaRecorder.setState(state);&#13;
    };&#13;
&#13;
    presenter.startRecording = function startRecording() {&#13;
        presenter.mediaRecorder.startRecording();&#13;
    };&#13;
&#13;
    presenter.stopRecording = function stopRecording() {&#13;
        presenter.mediaRecorder.stopRecording();&#13;
    };&#13;
&#13;
    presenter.startPlaying = function startPlaying() {&#13;
        presenter.mediaRecorder.startPlaying();&#13;
    };&#13;
&#13;
    presenter.stopPlaying = function stopPlaying() {&#13;
        presenter.mediaRecorder.stopPlaying();&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function getErrorCount() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function getMaxScore() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function getScore() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.mediaRecorder.show();&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.mediaRecorder.hide();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function setShowErrorsMode() {&#13;
        if (!presenter.mediaRecorder.model.enableInErrorCheckingMode) {&#13;
            presenter.mediaRecorder.deactivate();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function setWorkMode() {&#13;
        presenter.mediaRecorder.activate();&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isWCAGOn) {&#13;
        presenter.mediaRecorder.setWCAGStatus(isWCAGOn);&#13;
    };&#13;
&#13;
    presenter.reset = function reset() {&#13;
        presenter.mediaRecorder.reset();&#13;
    };&#13;
&#13;
    presenter.enable = function enable() {&#13;
        presenter.mediaRecorder.enable();&#13;
    };&#13;
&#13;
    presenter.isEnabledInGSAMode = function () {&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.disable = function disable() {&#13;
        presenter.mediaRecorder.disable();&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keycode, isShiftKeyDown, event) {&#13;
        presenter.mediaRecorder.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function executeCommand(name, params) {&#13;
        var commands = {&#13;
            'startRecording': presenter.startRecording,&#13;
            'stopRecording': presenter.stopRecording,&#13;
            'startPlaying': presenter.startPlaying,&#13;
            'stopPlaying': presenter.stopPlaying,&#13;
            'setShowErrorsMode': presenter.setShowErrorsMode,&#13;
            'setWorkMode': presenter.setWorkMode,&#13;
            'reset': presenter.reset,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.destroy = function destroy(event) {&#13;
        if (event.target === presenter.view) {&#13;
            event.target.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
            presenter.mediaRecorder.destroy();&#13;
            event.target = null;&#13;
            presenter.mediaRecorder = null;&#13;
            presenter.validateModel = null;&#13;
        }&#13;
    };&#13;
&#13;
    presenter._internalElements = function () {&#13;
        return this.mediaRecorder._internalElements();&#13;
    };&#13;
&#13;
    presenter._internalUpgradeModel = function (model) {&#13;
        return this.mediaRecorder._upgradeModel(model);&#13;
    };&#13;
&#13;
    function handleDestroyEvent(view) {&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
window.AddonMedia_Recorder_create = AddonMedia_Recorder_create;&#13;
&#13;
/***/ }),&#13;
/* 17 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.MediaRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _validateModel = __webpack_require__(18);&#13;
&#13;
var _ActivationState = __webpack_require__(20);&#13;
&#13;
var _MediaState = __webpack_require__(21);&#13;
&#13;
var _Errors = __webpack_require__(22);&#13;
&#13;
var _PlayButton = __webpack_require__(23);&#13;
&#13;
var _RecordButton = __webpack_require__(3);&#13;
&#13;
var _ResetButton = __webpack_require__(24);&#13;
&#13;
var _ResetDialog = __webpack_require__(25);&#13;
&#13;
var _DownloadButton = __webpack_require__(26);&#13;
&#13;
var _Timer = __webpack_require__(27);&#13;
&#13;
var _ProgressBar = __webpack_require__(28);&#13;
&#13;
var _AddonState = __webpack_require__(29);&#13;
&#13;
var _RecordingTimeLimiter = __webpack_require__(30);&#13;
&#13;
var _SoundIntensity = __webpack_require__(5);&#13;
&#13;
var _DottedSoundIntensity = __webpack_require__(31);&#13;
&#13;
var _MediaAnalyserService = __webpack_require__(32);&#13;
&#13;
var _AudioLoader = __webpack_require__(34);&#13;
&#13;
var _SoundEffect = __webpack_require__(36);&#13;
&#13;
var _RecordButtonSoundEffect = __webpack_require__(37);&#13;
&#13;
var _AddonViewService = __webpack_require__(38);&#13;
&#13;
var _AudioResourcesProvider = __webpack_require__(39);&#13;
&#13;
var _AudioRecorder = __webpack_require__(41);&#13;
&#13;
var _AudioPlayer = __webpack_require__(44);&#13;
&#13;
var _DefaultRecordingPlayButton = __webpack_require__(47);&#13;
&#13;
var _DefaultKeyboardController = __webpack_require__(48);&#13;
&#13;
var _ExtendedKeyboardController = __webpack_require__(49);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
var _MP3ConvertHandler = __webpack_require__(50);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaRecorder = exports.MediaRecorder = function () {&#13;
    function MediaRecorder() {&#13;
        _classCallCheck(this, MediaRecorder);&#13;
&#13;
        this.enableAnalyser = true;&#13;
        this.isMlibro = false;&#13;
        this.isWCAGOn = false;&#13;
        this.keyboardControllerObject = null;&#13;
        this.mp3ConvertHandler = null;&#13;
    }&#13;
&#13;
    _createClass(MediaRecorder, [{&#13;
        key: "run",&#13;
        value: function run(view, model) {&#13;
            var upgradedModel = this._upgradeModel(model);&#13;
            var validatedModel = (0, _validateModel.validateModel)(upgradedModel);&#13;
&#13;
            var isSafari = DevicesUtils.getBrowserVersion().toLowerCase().indexOf("safari") &gt; -1;&#13;
            if (isSafari) {&#13;
                this.enableAnalyser = false;&#13;
            }&#13;
&#13;
            if (this._isBrowserNotSupported()) {&#13;
                this._showBrowserError(view);&#13;
            } else if (validatedModel.isValid) {&#13;
                this.mp3ConvertHandler = new _MP3ConvertHandler.MP3ConvertHandler(this.playerController);&#13;
                this._runAddon(view, validatedModel.value);&#13;
            } else {&#13;
                this._showError(view, validatedModel);&#13;
            }&#13;
&#13;
            this._executeNotification(JSON.stringify({ type: "platform", target: this.model.ID }));&#13;
            this._buildKeyboardController();&#13;
            this.keyboardControllerObject.setSpeechTexts(upgradedModel['speechTexts']);&#13;
            this.recordButton.setKeyboardController(this.keyboardControllerObject);&#13;
        }&#13;
    }, {&#13;
        key: "createPreview",&#13;
        value: function createPreview(view, model) {&#13;
            var upgradedModel = this._upgradeModel(model);&#13;
            var validatedModel = (0, _validateModel.validateModel)(upgradedModel);&#13;
&#13;
            if (!validatedModel.isValid) this._showError(view, validatedModel);else this._updatePreview(view, validatedModel);&#13;
        }&#13;
    }, {&#13;
        key: "setPlayerController",&#13;
        value: function setPlayerController(playerController) {&#13;
            this.playerController = playerController;&#13;
            if (this.player &amp;&amp; this.recorder) this._loadEventBus();&#13;
&#13;
            var context = playerController.getContextMetadata();&#13;
            this.isMlibro = false;&#13;
            if (context != null &amp;&amp; "ismLibro" in context) {&#13;
                this.isMlibro = context["ismLibro"];&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "isEmpty",&#13;
        value: function isEmpty() {&#13;
            return this.addonState.isEmpty();&#13;
        }&#13;
    }, {&#13;
        key: "getMP3File",&#13;
        value: function getMP3File() {&#13;
            return this.addonState.getMP3File();&#13;
        }&#13;
    }, {&#13;
        key: "getState",&#13;
        value: function getState() {&#13;
            return this.addonState.getState();&#13;
        }&#13;
    }, {&#13;
        key: "setState",&#13;
        value: function setState(state) {&#13;
            var _this = this;&#13;
&#13;
            Object.assign(this.addonState, JSON.parse(state));&#13;
            this.addonState.getRecordingBlob().then(function (blob) {&#13;
                _this.mediaState.setLoading();&#13;
                var recording = void 0;&#13;
                if (_this.addonState.isMP3Format(blob)) {&#13;
                    var tmpFile = new File([blob], "recording.mp3", { type: "audio/mp3" });&#13;
                    try {&#13;
                        recording = URL.createObjectURL(tmpFile);&#13;
                    } catch (error) {&#13;
                        recording = URL.createObjectURL(blob);&#13;
                    }&#13;
                } else {&#13;
                    recording = URL.createObjectURL(blob);&#13;
                }&#13;
                _this.player.setRecording(recording);&#13;
                if (_this.model.extendedMode) {&#13;
                    _this.setEMRecordedStateView();&#13;
                }&#13;
            });&#13;
            this.addonState.getVisibility().then(function (isVisible) {&#13;
                _this.setVisibility(isVisible);&#13;
            });&#13;
            this.addonState.getEnabled().then(function (isEnable) {&#13;
                _this._setEnableState(isEnable);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "startRecording",&#13;
        value: function startRecording() {&#13;
            if (this.mediaState.isNew() || this.mediaState.isLoaded()) this.recordButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            if (this.mediaState.isRecording()) this.recordButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            if (this.mediaState.isLoaded()) this.playButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            if (this.mediaState.isPlaying()) this.playButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.playButton.destroy();&#13;
            this.defaultRecordingPlayButton.destroy();&#13;
            this.recordButton.destroy();&#13;
            this.recorder.destroy();&#13;
            this.player.destroy();&#13;
            this.resourcesProvider.destroy();&#13;
            this.recordingTimeLimiter.destroy();&#13;
            this.soundIntensity.destroy();&#13;
            this.timer.destroy();&#13;
            this.startRecordingSoundEffect.destroy();&#13;
            this.stopRecordingSoundEffect.destroy();&#13;
            this.loader.destroy();&#13;
            this.addonViewService.destroy();&#13;
            this.mediaAnalyserService.destroy();&#13;
            this.addonState.destroy();&#13;
            this.mediaState.destroy();&#13;
            this.activationState.destroy();&#13;
            this.mp3ConvertHandler.destroy();&#13;
&#13;
            this.viewHandlers = null;&#13;
            this.defaultRecordingPlayButton = null;&#13;
            this.recorder = null;&#13;
            this.player = null;&#13;
            this.resourcesProvider = null;&#13;
            this.recordingTimeLimiter = null;&#13;
            this.soundIntensity = null;&#13;
            this.timer = null;&#13;
            this.recordButton = null;&#13;
            this.playButton = null;&#13;
            this.downloadButton = null;&#13;
            this.resetButton = null;&#13;
            this.progressBar = null;&#13;
            this.stopRecordingSoundEffect = null;&#13;
            this.startRecordingSoundEffect = null;&#13;
            this.loader = null;&#13;
            this.addonViewService = null;&#13;
            this.mediaAnalyserService = null;&#13;
            this.addonState = null;&#13;
            this.mediaState = null;&#13;
            this.activationState = null;&#13;
            this.extendedModeButtonList = null;&#13;
&#13;
            this.playerController = null;&#13;
            this.keyboardControllerObject = null;&#13;
            this.mp3ConvertHandler = null;&#13;
            this.view = null;&#13;
            this.model = null;&#13;
        }&#13;
    }, {&#13;
        key: "enable",&#13;
        value: function enable() {&#13;
            this._setEnableState(true);&#13;
        }&#13;
    }, {&#13;
        key: "disable",&#13;
        value: function disable() {&#13;
            this._setEnableState(false);&#13;
        }&#13;
    }, {&#13;
        key: "activate",&#13;
        value: function activate() {&#13;
            if (this.activationState.isInactive()) {&#13;
                this.activationState.setActive();&#13;
                this.addonViewService.activate();&#13;
                this._activateButtons();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "deactivate",&#13;
        value: function deactivate() {&#13;
            this._stopActions();&#13;
            this._deactivateButtons();&#13;
            this.activationState.setInactive();&#13;
            this.addonViewService.deactivate();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.deactivate();&#13;
            if (this.model.isResetRemovesRecording) {&#13;
                this.resetRecording();&#13;
            }&#13;
            this.activate();&#13;
            this.setVisibility(this.model["Is Visible"]);&#13;
            this._setEnableState(!this.model.isDisabled);&#13;
        }&#13;
    }, {&#13;
        key: "resetRecording",&#13;
        value: function resetRecording() {&#13;
            this.recordButton.reset();&#13;
            this.player.reset();&#13;
            this.addonState.reset();&#13;
            this.timer.reset();&#13;
            if (this.defaultRecordingPlayer.hasRecording) {&#13;
                this.mediaState.setLoadedDefaultRecording();&#13;
                this.timer.setDuration(this.defaultRecordingPlayer.duration);&#13;
            } else this.mediaState.setNew();&#13;
        }&#13;
    }, {&#13;
        key: "show",&#13;
        value: function show() {&#13;
            this.setVisibility(true);&#13;
            this.addonState.setVisibility(true);&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            this.setVisibility(false);&#13;
            this.addonState.setVisibility(false);&#13;
        }&#13;
    }, {&#13;
        key: "setVisibility",&#13;
        value: function setVisibility(isVisible) {&#13;
            this.addonViewService.setVisibility(isVisible);&#13;
        }&#13;
    }, {&#13;
        key: "_runAddon",&#13;
        value: function _runAddon(view, model) {&#13;
            this._loadAddon(view, model);&#13;
            this._loadLogic();&#13;
            this._loadDefaultRecording(this.model);&#13;
            this._activateButtons();&#13;
            this._loadWebViewMessageListener();&#13;
            this.setVisibility(model["Is Visible"]);&#13;
            this._setEnableState(!model.isDisabled);&#13;
        }&#13;
    }, {&#13;
        key: "_loadAddon",&#13;
        value: function _loadAddon(view, model) {&#13;
            this._loadCoreElements(view, model);&#13;
&#13;
            this.mediaAnalyserService = new _MediaAnalyserService.MediaAnalyserService();&#13;
            this.recordingTimeLimiter = new _RecordingTimeLimiter.RecordingTimeLimiter(this.model.maxTime);&#13;
&#13;
            this._loadMediaElements();&#13;
            this._loadViewElements();&#13;
        }&#13;
    }, {&#13;
        key: "_loadCoreElements",&#13;
        value: function _loadCoreElements(view, model) {&#13;
            this.view = view;&#13;
            this.model = model;&#13;
            this.viewHandlers = this._loadViewHandlers(this.view);&#13;
            if (this.model.extendedMode) {&#13;
                this._prepareExtendedModeView();&#13;
                this.setEMDefaultStateView();&#13;
            }&#13;
            if (this.model.disableRecording) {&#13;
                this._hidePlayAndTimerWidgets();&#13;
            }&#13;
            this.mediaState = new _MediaState.MediaState();&#13;
            this.activationState = new _ActivationState.ActivationState();&#13;
            this.addonState = new _AddonState.AddonState();&#13;
            this.addonState.setMP3ConvertHandler(this.mp3ConvertHandler);&#13;
        }&#13;
    }, {&#13;
        key: "_loadViewHandlers",&#13;
        value: function _loadViewHandlers(view) {&#13;
            return {&#13;
                $wrapperView: $(view).find("." + _CssClasses.CSS_CLASSES.WRAPPER),&#13;
                $playerView: $(view).find("." + _CssClasses.CSS_CLASSES.PLAYER_WRAPPER),&#13;
                $loaderView: $(view).find("." + _CssClasses.CSS_CLASSES.PLAYER_LOADER),&#13;
                $defaultRecordingPlayButtonView: $(view).find("." + _CssClasses.CSS_CLASSES.DEFAULT_RECORDING_PLAY_BUTTON),&#13;
                $recordButtonView: $(view).find("." + _CssClasses.CSS_CLASSES.RECORDING_BUTTON),&#13;
                $playButtonView: $(view).find("." + _CssClasses.CSS_CLASSES.PLAY_BUTTON),&#13;
                $timerView: $(view).find("." + _CssClasses.CSS_CLASSES.TIMER),&#13;
                $soundIntensityView: $(view).find("." + _CssClasses.CSS_CLASSES.SOUND_INTENSITY),&#13;
                $dottedSoundIntensityView: $(view).find("." + _CssClasses.CSS_CLASSES.DOTTED_SOUND_INTENSITY),&#13;
                $progressBarWrapperView: $(view).find("." + _CssClasses.CSS_CLASSES.PROGRESS_BAR),&#13;
                $progressBarSliderView: $(view).find("." + _CssClasses.CSS_CLASSES.PROGRESS_BAR_SLIDER),&#13;
                $resetButtonView: $(view).find("." + _CssClasses.CSS_CLASSES.RESET_BUTTON),&#13;
                $downloadButtonView: $(view).find("." + _CssClasses.CSS_CLASSES.DOWNLOAD_BUTTON),&#13;
                $resetDialogView: $(view).find("." + _CssClasses.CSS_CLASSES.RESET_DIALOG)&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_prepareExtendedModeView",&#13;
        value: function _prepareExtendedModeView() {&#13;
            this.viewHandlers.$wrapperView.addClass(_CssClasses.CSS_CLASSES.EXTENDED_MODE);&#13;
            this.viewHandlers.$timerView.insertBefore(this.viewHandlers.$playButtonView);&#13;
        }&#13;
    }, {&#13;
        key: "_hidePlayAndTimerWidgets",&#13;
        value: function _hidePlayAndTimerWidgets() {&#13;
            this.viewHandlers.$playButtonView.hide();&#13;
            this.viewHandlers.$defaultRecordingPlayButtonView.hide();&#13;
            this.viewHandlers.$timerView.hide();&#13;
        }&#13;
    }, {&#13;
        key: "_loadMediaElements",&#13;
        value: function _loadMediaElements() {&#13;
            this.recorder = new _AudioRecorder.AudioRecorder();&#13;
            this.player = new _AudioPlayer.AudioPlayer(this.viewHandlers.$playerView, this.isMlibro);&#13;
            this.player.setIsMlibro(this.isMlibro);&#13;
            this.defaultRecordingPlayer = new _AudioPlayer.AudioPlayer(this.viewHandlers.$playerView, this.isMlibro);&#13;
            this.resourcesProvider = new _AudioResourcesProvider.AudioResourcesProvider(this.viewHandlers.$wrapperView);&#13;
            if (this.playerController) this._loadEventBus();&#13;
        }&#13;
    }, {&#13;
        key: "_loadEventBus",&#13;
        value: function _loadEventBus() {&#13;
            var eventBus = this.playerController.getEventBus();&#13;
            this.player.setEventBus(eventBus, this.model.ID, "player");&#13;
            this.defaultRecordingPlayer.setEventBus(eventBus, this.model.ID, "default");&#13;
            this.recorder.setEventBus(eventBus, this.model.ID);&#13;
            this.eventBus = eventBus;&#13;
        }&#13;
    }, {&#13;
        key: "_loadViewElements",&#13;
        value: function _loadViewElements() {&#13;
            this.addonViewService = new _AddonViewService.AddonViewService(this.viewHandlers.$wrapperView);&#13;
            this.recordButton = this._loadRecordButton();&#13;
&#13;
            this.defaultRecordingPlayButton = new _DefaultRecordingPlayButton.DefaultRecordingPlayButton({&#13;
                $view: this.viewHandlers.$defaultRecordingPlayButtonView,&#13;
                state: this.mediaState,&#13;
                defaultRecording: this.model.defaultRecording&#13;
            });&#13;
&#13;
            this.playButton = new _PlayButton.PlayButton({&#13;
                $view: this.viewHandlers.$playButtonView,&#13;
                state: this.mediaState&#13;
            });&#13;
&#13;
            this.extendedModeButtonList = [];&#13;
            if (this.model.extendedMode) {&#13;
                this.downloadButton = new _DownloadButton.DownloadButton({&#13;
                    $view: this.viewHandlers.$downloadButtonView,&#13;
                    addonState: this.addonState&#13;
                });&#13;
                this.resetButton = new _ResetButton.ResetButton(this.viewHandlers.$resetButtonView);&#13;
                this.resetDialog = new _ResetDialog.ResetDialog(this.viewHandlers.$resetDialogView, this.model.resetDialogLabels);&#13;
                this.progressBar = new _ProgressBar.ProgressBar(this.viewHandlers.$progressBarWrapperView);&#13;
                this.extendedModeButtonList.push(this.downloadButton);&#13;
                this.extendedModeButtonList.push(this.resetButton);&#13;
            }&#13;
&#13;
            this.loader = new _AudioLoader.AudioLoader(this.viewHandlers.$loaderView);&#13;
&#13;
            this.timer = new _Timer.Timer(this.viewHandlers.$timerView);&#13;
            if (this.model.extendedMode) {&#13;
                this.soundIntensity = new _DottedSoundIntensity.DottedSoundIntensity(this.viewHandlers.$dottedSoundIntensityView);&#13;
                this.viewHandlers.$soundIntensityView.css('display', 'none');&#13;
            } else {&#13;
                this.soundIntensity = new _SoundIntensity.SoundIntensity(this.viewHandlers.$soundIntensityView);&#13;
                this.viewHandlers.$dottedSoundIntensityView.css('display', 'none');&#13;
            }&#13;
            if (this.eventBus &amp;&amp; this.model.enableIntensityChangeEvents) {&#13;
                this.soundIntensity.setEventBus(this.eventBus, this.model.ID);&#13;
            }&#13;
            this.soundIntensity.setEnableAnalyser(this.enableAnalyser);&#13;
&#13;
            this._hideSelectedElements();&#13;
        }&#13;
    }, {&#13;
        key: "_loadRecordButton",&#13;
        value: function _loadRecordButton() {&#13;
            var recordButton = new _RecordButton.RecordButton({&#13;
                $view: this.viewHandlers.$recordButtonView,&#13;
                state: this.mediaState&#13;
            });&#13;
&#13;
            this.startRecordingSoundEffect = new _SoundEffect.SoundEffect(this.model.startRecordingSound, this.viewHandlers.$playerView);&#13;
            this.stopRecordingSoundEffect = new _SoundEffect.SoundEffect(this.model.stopRecordingSound, this.viewHandlers.$playerView);&#13;
&#13;
            return new _RecordButtonSoundEffect.RecordButtonSoundEffect(recordButton, this.startRecordingSoundEffect, this.stopRecordingSoundEffect);&#13;
        }&#13;
    }, {&#13;
        key: "setEMDefaultStateView",&#13;
        value: function setEMDefaultStateView() {&#13;
            this.viewHandlers.$defaultRecordingPlayButtonView.css('display', 'none');&#13;
            this.viewHandlers.$recordButtonView.css('display', '');&#13;
            if (this.model.disableRecording) {&#13;
                this.viewHandlers.$timerView.css('display', 'none');&#13;
            } else {&#13;
                this.viewHandlers.$timerView.css('display', '');&#13;
            }&#13;
            if (this.soundIntensity) {&#13;
                this.soundIntensity.show();&#13;
            }&#13;
            this.viewHandlers.$playButtonView.css('display', 'none');&#13;
            this.viewHandlers.$progressBarWrapperView.css('display', 'none');&#13;
            this.viewHandlers.$progressBarWrapperView.css('visibility', 'hidden');&#13;
            this.viewHandlers.$resetButtonView.css('display', 'none');&#13;
            this.viewHandlers.$downloadButtonView.css('display', 'none');&#13;
        }&#13;
    }, {&#13;
        key: "setEMRecordedStateView",&#13;
        value: function setEMRecordedStateView() {&#13;
            this.viewHandlers.$defaultRecordingPlayButtonView.css('display', 'none');&#13;
            this.viewHandlers.$recordButtonView.css('display', 'none');&#13;
            this.viewHandlers.$timerView.css('display', '');&#13;
            if (this.soundIntensity) {&#13;
                this.soundIntensity.hide();&#13;
            }&#13;
            this.viewHandlers.$playButtonView.css('display', '');&#13;
            this.viewHandlers.$progressBarWrapperView.css('display', 'block');&#13;
            this.viewHandlers.$progressBarWrapperView.css('visibility', 'visible');&#13;
            this.viewHandlers.$resetButtonView.css('display', 'block');&#13;
            this.viewHandlers.$downloadButtonView.css('display', 'block');&#13;
        }&#13;
    }, {&#13;
        key: "setEMPlayingStateView",&#13;
        value: function setEMPlayingStateView() {&#13;
            this.viewHandlers.$defaultRecordingPlayButtonView.css('display', 'none');&#13;
            this.viewHandlers.$recordButtonView.css('display', 'none');&#13;
            this.viewHandlers.$timerView.css('display', '');&#13;
            if (this.soundIntensity) {&#13;
                this.soundIntensity.hide();&#13;
            }&#13;
            this.viewHandlers.$playButtonView.css('display', '');&#13;
            this.viewHandlers.$progressBarWrapperView.css('display', 'block');&#13;
            this.viewHandlers.$progressBarWrapperView.css('visibility', 'visible');&#13;
            this.viewHandlers.$resetButtonView.css('display', 'block');&#13;
            this.viewHandlers.$downloadButtonView.css('display', 'block');&#13;
        }&#13;
    }, {&#13;
        key: "_loadLogic",&#13;
        value: function _loadLogic() {&#13;
            var _this2 = this;&#13;
&#13;
            this.recordButton.onStartRecording = function () {&#13;
                _this2.mediaState.setBlocked();&#13;
                if (_this2.platform === 'mlibro') {&#13;
                    _this2._handleMlibroStartRecording();&#13;
                } else {&#13;
                    _this2.resourcesProvider.getMediaResources().then(function (stream) {&#13;
                        var isSafari = window.DevicesUtils.getBrowserVersion().toLowerCase().indexOf("safari") &gt; -1;&#13;
                        if (isSafari) {&#13;
                            _this2.mediaState.setBlockedSafari();&#13;
                        }&#13;
                        _this2._handleRecording(stream);&#13;
                    });&#13;
                }&#13;
            };&#13;
&#13;
            this.recordButton.onStopRecording = function () {&#13;
                if (_this2.platform === 'mlibro') _this2._handleMlibroStopRecording();else {&#13;
                    _this2.mediaState.setLoading();&#13;
                    _this2.timer.stopCountdown();&#13;
                    _this2.recordingTimeLimiter.stopCountdown();&#13;
                    _this2.soundIntensity.stopAnalyzing();&#13;
                    if (_this2.enableAnalyser) {&#13;
                        _this2.mediaAnalyserService.closeAnalyzing();&#13;
                    }&#13;
                    if (!_this2.model.disableRecording) {&#13;
                        _this2.recorder.stopRecording().then(function (blob) {&#13;
                            _this2.addonState.setRecordingBlob(blob);&#13;
                            var recording = URL.createObjectURL(blob);&#13;
                            _this2.player.reset();&#13;
                            _this2.player.setRecording(recording);&#13;
&#13;
                            return blob;&#13;
                        }).then(function (wavBlob) {&#13;
                            return _this2.addonState.convertWavBlobToMP3BlobByWorker(wavBlob);&#13;
                        }).then(function (mp3Blob) {&#13;
                            _this2.addonState.setRecordingBlob(mp3Blob);&#13;
                        }, function () {});&#13;
                    }&#13;
                    _this2.resourcesProvider.destroy();&#13;
                }&#13;
                if (_this2.model.extendedMode) {&#13;
                    if (_this2.model.disableRecording) {&#13;
                        _this2.setEMDefaultStateView();&#13;
                    } else {&#13;
                        _this2.setEMRecordedStateView();&#13;
                    }&#13;
                }&#13;
                if (_this2.model.disableRecording) {&#13;
                    _this2.mediaState.setLoaded();&#13;
                }&#13;
            };&#13;
&#13;
            this.recordButton.onReset = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.recordingTimeLimiter.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                if (_this2.enableAnalyser) {&#13;
                    _this2.mediaAnalyserService.closeAnalyzing();&#13;
                }&#13;
                _this2.recorder.stopRecording();&#13;
                _this2.resourcesProvider.destroy();&#13;
            };&#13;
&#13;
            if (this.model.extendedMode) {&#13;
                this.resetButton.onReset = function () {&#13;
                    _this2.resetDialog.open();&#13;
                    _this2.keyboardControllerObject.setElements(_this2._getElementsForResetDialogKeyboardNavigation());&#13;
                    if (_this2.keyboardControllerObject.keyboardNavigationActive) {&#13;
                        _this2.keyboardControllerObject.markDialogTextAndReadResetDialogTTS();&#13;
                    }&#13;
                };&#13;
                this.resetDialog.onConfirm = function () {&#13;
                    _this2.timer.startCountdown();&#13;
                    _this2.resetRecording();&#13;
                    if (_this2.model.extendedMode) {&#13;
                        _this2.setEMDefaultStateView();&#13;
                    }&#13;
                    _this2.progressBar.setProgress(0.0);&#13;
                    _this2.keyboardControllerObject.setElements(_this2._getElementsForExtendedKeyboardNavigation());&#13;
                    if (_this2.keyboardControllerObject.keyboardNavigationActive) {&#13;
                        _this2.keyboardControllerObject.markRecordingButton();&#13;
                        _this2.keyboardControllerObject.readCurrentElement();&#13;
                    }&#13;
                };&#13;
                this.resetDialog.onDeny = function () {&#13;
                    _this2.keyboardControllerObject.setElements(_this2._getElementsForExtendedKeyboardNavigation());&#13;
                    if (_this2.keyboardControllerObject.keyboardNavigationActive) {&#13;
                        _this2.keyboardControllerObject.markResetButton();&#13;
                        _this2.keyboardControllerObject.readCurrentElement();&#13;
                    }&#13;
                };&#13;
&#13;
                this.progressBar.onStartDragging = function () {&#13;
                    if (_this2.mediaState.isPlaying()) {&#13;
                        _this2.player.pausePlaying();&#13;
                        _this2.playButton.forceClick();&#13;
                    }&#13;
                };&#13;
&#13;
                this.progressBar.onStopDragging = function (progress) {&#13;
                    _this2.player.setProgress(progress);&#13;
                };&#13;
            }&#13;
&#13;
            this.playButton.onStartPlaying = function () {&#13;
                _this2.mediaState.setPlaying();&#13;
                if (_this2.enableAnalyser) {&#13;
                    _this2.player.startPlaying().then(function (htmlMediaElement) {&#13;
                        return _this2.mediaAnalyserService.createAnalyserFromElement(htmlMediaElement).then(function (analyser) {&#13;
                            return _this2.soundIntensity.startAnalyzing(analyser);&#13;
                        });&#13;
                    });&#13;
                } else {&#13;
                    _this2.player.startPlaying();&#13;
                }&#13;
            };&#13;
&#13;
            this.playButton.onStopPlaying = function () {&#13;
                _this2.mediaState.setLoaded();&#13;
                if (_this2.model.extendedMode) {&#13;
                    _this2.player.pausePlaying();&#13;
                } else {&#13;
                    _this2.player.stopPlaying();&#13;
                }&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                if (_this2.enableAnalyser) {&#13;
                    _this2.mediaAnalyserService.closeAnalyzing();&#13;
                }&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayButton.onStartPlaying = function () {&#13;
                _this2.mediaState.setPlayingDefaultRecording();&#13;
                _this2.timer.setDuration(_this2.defaultRecordingPlayer.duration);&#13;
                _this2.timer.startCountdown();&#13;
                if (_this2.enableAnalyser) {&#13;
                    _this2.defaultRecordingPlayer.startPlaying().then(function (htmlMediaElement) {&#13;
                        return _this2.mediaAnalyserService.createAnalyserFromElement(htmlMediaElement).then(function (analyser) {&#13;
                            return _this2.soundIntensity.startAnalyzing(analyser);&#13;
                        });&#13;
                    });&#13;
                } else {&#13;
                    _this2.defaultRecordingPlayer.startPlaying();&#13;
                }&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayButton.onStopPlaying = function () {&#13;
                if (_this2.player.hasRecording) {&#13;
                    _this2.mediaState.setLoaded();&#13;
                    _this2.timer.setDuration(_this2.player.duration);&#13;
                } else {&#13;
                    _this2.mediaState.setLoadedDefaultRecording();&#13;
                }&#13;
&#13;
                _this2.defaultRecordingPlayer.stopPlaying();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                if (_this2.enableAnalyser) {&#13;
                    _this2.mediaAnalyserService.closeAnalyzing();&#13;
                }&#13;
            };&#13;
&#13;
            this.player.onStartLoading = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.loader.show();&#13;
            };&#13;
&#13;
            this.player.onEndLoading = function () {&#13;
                if (_this2.mediaState.isLoading()) {&#13;
                    _this2.mediaState.setLoaded();&#13;
                    _this2.loader.hide();&#13;
                }&#13;
            };&#13;
&#13;
            var player = this.player;&#13;
            var timer = this.timer;&#13;
            var progressBar = this.progressBar;&#13;
            function timeUpdateCallback(event) {&#13;
                var currentTime = player.getCurrentTime();&#13;
                timer.setTime(currentTime);&#13;
                if (progressBar) {&#13;
                    player._getDuration().then(function (duration) {&#13;
                        progressBar.setProgress(currentTime / duration);&#13;
                    });&#13;
                }&#13;
            }&#13;
&#13;
            this.player.onDurationChange = function (duration) {&#13;
                return _this2.timer.setDuration(duration);&#13;
            };&#13;
            this.player.onTimeUpdate = function (event) {&#13;
                return timeUpdateCallback(event);&#13;
            };&#13;
            this.player.onEndPlaying = function () {&#13;
                return _this2.playButton.forceClick();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onStartLoading = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.loader.show();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onEndLoading = function () {&#13;
                if (_this2.player.hasRecording) {&#13;
                    _this2.mediaState.setLoaded();&#13;
                } else {&#13;
                    _this2.mediaState.setLoadedDefaultRecording();&#13;
                }&#13;
                _this2.loader.hide();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onDurationChange = function (duration) {&#13;
                return _this2.timer.setDuration(duration);&#13;
            };&#13;
            this.defaultRecordingPlayer.onEndPlaying = function () {&#13;
                return _this2.defaultRecordingPlayButton.forceClick();&#13;
            };&#13;
&#13;
            this.recordingTimeLimiter.onTimeExpired = function () {&#13;
                return _this2.recordButton.forceClick();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_handleRecording",&#13;
        value: function _handleRecording(stream) {&#13;
            var _this3 = this;&#13;
&#13;
            this.mediaState.setRecording();&#13;
            if (!this.model.disableRecording) {&#13;
                this.recorder.startRecording(stream);&#13;
                this.timer.reset();&#13;
                this.timer.startDecrementalCountdown(this.recordingTimeLimiter.maxTime);&#13;
                this.recordingTimeLimiter.startCountdown();&#13;
            }&#13;
            if (this.enableAnalyser) {&#13;
                this.mediaAnalyserService.createAnalyserFromStream(stream).then(function (analyser) {&#13;
                    return _this3.soundIntensity.startAnalyzing(analyser);&#13;
                });&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_loadDefaultRecording",&#13;
        value: function _loadDefaultRecording(model) {&#13;
            if (_isValid(model.defaultRecording) &amp;&amp; model.isShowedDefaultRecordingButton) {&#13;
                this.mediaState.setLoading();&#13;
                this.defaultRecordingPlayer.setRecording(model.defaultRecording);&#13;
            }&#13;
&#13;
            function _isValid(recording) {&#13;
                return recording != "" &amp;&amp; recording != null &amp;&amp; typeof recording != "undefined";&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_activateButtons",&#13;
        value: function _activateButtons() {&#13;
            this.recordButton.activate();&#13;
            if (!this.model.disableRecording) {&#13;
                this.playButton.activate();&#13;
            }&#13;
            this.defaultRecordingPlayButton.activate();&#13;
            if (this.model.extendedMode) {&#13;
                for (var i = 0; i &lt; this.extendedModeButtonList.length; i++) {&#13;
                    this.extendedModeButtonList[i].activate();&#13;
                }&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_deactivateButtons",&#13;
        value: function _deactivateButtons() {&#13;
            this.recordButton.deactivate();&#13;
            this.playButton.deactivate();&#13;
            this.defaultRecordingPlayButton.deactivate();&#13;
            if (this.model.extendedMode) {&#13;
                for (var i = 0; i &lt; this.extendedModeButtonList.length; i++) {&#13;
                    this.extendedModeButtonList[i].deactivate();&#13;
                }&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_stopActions",&#13;
        value: function _stopActions() {&#13;
            if (this.mediaState.isRecording()) {&#13;
                this.recordButton.forceClick();&#13;
            }&#13;
            if (this.mediaState.isPlaying()) {&#13;
                this.playButton.forceClick();&#13;
            }&#13;
            if (this.mediaState.isPlayingDefaultRecording()) {&#13;
                this.defaultRecordingPlayButton.forceClick();&#13;
            }&#13;
            if (this.mediaState.isLoaded()) {&#13;
                this.timer.setTime(0);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_internalElements",&#13;
        value: function _internalElements() {&#13;
            return {&#13;
                validateModel: _validateModel.validateModel,&#13;
                ActivationState: _ActivationState.ActivationState,&#13;
                AddonState: _AddonState.AddonState,&#13;
                AudioLoader: _AudioLoader.AudioLoader,&#13;
                PlayButton: _PlayButton.PlayButton,&#13;
                RecordButton: _RecordButton.RecordButton,&#13;
                RecordingTimeLimiter: _RecordingTimeLimiter.RecordingTimeLimiter,&#13;
                MediaState: _MediaState.MediaState,&#13;
                Timer: _Timer.Timer,&#13;
                AudioPlayer: _AudioPlayer.AudioPlayer,&#13;
                DownloadButton: _DownloadButton.DownloadButton,&#13;
                SoundIntensity: _SoundIntensity.SoundIntensity,&#13;
                MP3ConvertHandler: _MP3ConvertHandler.MP3ConvertHandler&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_showError",&#13;
        value: function _showError(view, validatedModel) {&#13;
            DOMOperationsUtils.showErrorMessage(view, _Errors.Errors, validatedModel.fieldName.join("|") + "_" + validatedModel.errorCode);&#13;
        }&#13;
    }, {&#13;
        key: "_showBrowserError",&#13;
        value: function _showBrowserError(view) {&#13;
            var $wrapper = $(view).find("." + _CssClasses.CSS_CLASSES.WRAPPER);&#13;
            $wrapper.addClass(_CssClasses.CSS_CLASSES.WRAPPER_BROWSER_NOT_SUPPORTED);&#13;
            $wrapper.text(_Errors.Errors["not_supported_browser"] + window.DevicesUtils.getBrowserVersion());&#13;
        }&#13;
    }, {&#13;
        key: "_updatePreview",&#13;
        value: function _updatePreview(view, validatedModel) {&#13;
            var valid_model = validatedModel.value;&#13;
            var timerViewHandler = $(view).find("." + _CssClasses.CSS_CLASSES.TIMER);&#13;
            var defaultButtonViewHandler = $(view).find("." + _CssClasses.CSS_CLASSES.DEFAULT_RECORDING_PLAY_BUTTON);&#13;
            var $wrapperViewHandler = $(view).find("." + _CssClasses.CSS_CLASSES.WRAPPER);&#13;
            var intensityView = $(view).find("." + _CssClasses.CSS_CLASSES.SOUND_INTENSITY);&#13;
            var dottedSoundIntensityView = $(view).find("." + _CssClasses.CSS_CLASSES.DOTTED_SOUND_INTENSITY);&#13;
            var playButton = $(view).find("." + _CssClasses.CSS_CLASSES.PLAY_BUTTON);&#13;
&#13;
            if (valid_model.extendedMode) {&#13;
                intensityView.css('display', 'none');&#13;
                playButton.css('display', 'none');&#13;
                dottedSoundIntensityView.css('display', '');&#13;
                defaultButtonViewHandler.hide();&#13;
                timerViewHandler.text('00:00');&#13;
                $wrapperViewHandler.addClass(_CssClasses.CSS_CLASSES.EXTENDED_MODE);&#13;
            } else {&#13;
                intensityView.css('display', '');&#13;
                dottedSoundIntensityView.css('display', 'none');&#13;
&#13;
                if (valid_model.isShowedTimer == false) timerViewHandler.hide();else timerViewHandler.show();&#13;
&#13;
                if (!valid_model.isShowedDefaultRecordingButton) defaultButtonViewHandler.hide();else defaultButtonViewHandler.show();&#13;
&#13;
                if (valid_model.isDisabled) {&#13;
                    this.addonViewService = new _AddonViewService.AddonViewService($wrapperViewHandler);&#13;
                    this.addonViewService.deactivate();&#13;
                }&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_hideSelectedElements",&#13;
        value: function _hideSelectedElements() {&#13;
            if (this.model.isShowedTimer == false) this.viewHandlers.$timerView.hide();&#13;
            if (this.model.isShowedDefaultRecordingButton == false) this.viewHandlers.$defaultRecordingPlayButtonView.hide();&#13;
        }&#13;
    }, {&#13;
        key: "_isBrowserNotSupported",&#13;
        value: function _isBrowserNotSupported() {&#13;
            var browser = window.DevicesUtils.getBrowserVersion().split(" ")[0].toLowerCase();&#13;
            var browserVersion = window.DevicesUtils.getBrowserVersion().split(" ")[1];&#13;
&#13;
            if (browser.indexOf("safari") &gt; -1 &amp;&amp; browserVersion &lt; 11) return true;&#13;
&#13;
            if (browser.indexOf("chrome") &gt; -1 &amp;&amp; browserVersion &lt; 53) return true;&#13;
&#13;
            if (window.DevicesUtils.isInternetExplorer()) return true;&#13;
&#13;
            return false;&#13;
        }&#13;
    }, {&#13;
        key: "_loadWebViewMessageListener",&#13;
        value: function _loadWebViewMessageListener() {&#13;
            var _this4 = this;&#13;
&#13;
            window.addEventListener('message', function (event) {&#13;
                try {&#13;
                    var eventData = JSON.parse(event.data);&#13;
                    var isTypePlatform = eventData.type ? eventData.type.toLowerCase() === 'platform' : false;&#13;
                    var isValueMlibro = eventData.value ? eventData.value.toLowerCase().includes('mlibro') : false;&#13;
                    if (isTypePlatform &amp;&amp; isValueMlibro) _this4._handleWebViewBehaviour();&#13;
                } catch (e) {&#13;
                    if (e instanceof SyntaxError) {&#13;
                        return;&#13;
                    }&#13;
                }&#13;
            }, false);&#13;
        }&#13;
    }, {&#13;
        key: "_handleWebViewBehaviour",&#13;
        value: function _handleWebViewBehaviour() {&#13;
            var _this5 = this;&#13;
&#13;
            if (this.platform === undefined || this.platform === null) {&#13;
                this.platform = 'mlibro';&#13;
                window.addEventListener('message', function (event) {&#13;
                    var eventData = JSON.parse(event.data);&#13;
                    var isTypeRecording = eventData.type ? eventData.type.toLowerCase() === 'recording' : false;&#13;
                    var isTargetMe = eventData.target ? eventData.target === _this5.model.ID : false;&#13;
                    var isStateLoading = _this5.mediaState.isLoading();&#13;
                    if (isTypeRecording &amp;&amp; isTargetMe &amp;&amp; isStateLoading) {&#13;
                        _this5.addonState.setRecordingBase64(eventData.value);&#13;
                        _this5.player.reset();&#13;
                        _this5.player.setRecording(eventData.value);&#13;
                    } else {&#13;
                        console.log("The recording has not been received");&#13;
                    }&#13;
                }, false);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_executeNotification",&#13;
        value: function _executeNotification(notifyInput) {&#13;
            try {&#13;
                if (mLibroChromium != undefined) {&#13;
                    mLibroChromium.notify(notifyInput);&#13;
                } else {&#13;
                    window.external.notify(notifyInput);&#13;
                }&#13;
            } catch (e) {&#13;
                // silent message&#13;
                // can't use a conditional expression&#13;
                // https://social.msdn.microsoft.com/Forums/en-US/1a8b3295-cd4d-4916-9cf6-666de1d3e26c/windowexternalnotify-always-undefined?forum=winappswithcsharp&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_handleMlibroStartRecording",&#13;
        value: function _handleMlibroStartRecording() {&#13;
            this.mediaState.setRecording();&#13;
            this.timer.reset();&#13;
            this.timer.startDecrementalCountdown(this.recordingTimeLimiter.maxTime);&#13;
            this.recordingTimeLimiter.startCountdown();&#13;
            this._executeNotification(JSON.stringify({ type: "mediaRecord", target: this.model.ID }));&#13;
        }&#13;
    }, {&#13;
        key: "_handleMlibroStopRecording",&#13;
        value: function _handleMlibroStopRecording() {&#13;
            this.mediaState.setLoading();&#13;
            this.timer.stopCountdown();&#13;
            this.recordingTimeLimiter.stopCountdown();&#13;
            this._executeNotification(JSON.stringify({ type: "mediaStop", target: this.model.ID }));&#13;
        }&#13;
    }, {&#13;
        key: "_setEnableState",&#13;
        value: function _setEnableState(isEnable) {&#13;
            if (isEnable) {&#13;
                this.addonState.setEnabled(true);&#13;
                this.activate();&#13;
            } else {&#13;
                this.addonState.setEnabled(false);&#13;
                this.deactivate();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeModel",&#13;
        value: function _upgradeModel(model) {&#13;
            var upgradedModel = this._upgradeIsDisabled(model);&#13;
            upgradedModel = this._upgradeEnableInErrorCheckigMode(upgradedModel);&#13;
            upgradedModel = this._upgradeExtendedMode(upgradedModel);&#13;
            upgradedModel = this._upgradeResetDialog(upgradedModel);&#13;
            upgradedModel = this._upgradeDisableRecording(upgradedModel);&#13;
            upgradedModel = this._upgradeEnableIntensityChangeEvents(upgradedModel);&#13;
            upgradedModel = this._upgradeLangTag(upgradedModel);&#13;
            upgradedModel = this._upgradeSpeechTexts(upgradedModel);&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeIsDisabled",&#13;
        value: function _upgradeIsDisabled(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["isDisabled"]) {&#13;
                upgradedModel["isDisabled"] = "False";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeEnableInErrorCheckigMode",&#13;
        value: function _upgradeEnableInErrorCheckigMode(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["enableInErrorCheckingMode"]) {&#13;
                upgradedModel["enableInErrorCheckingMode"] = "False";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeExtendedMode",&#13;
        value: function _upgradeExtendedMode(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["extendedMode"]) {&#13;
                upgradedModel["extendedMode"] = "False";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeResetDialog",&#13;
        value: function _upgradeResetDialog(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["resetDialogLabels"]) {&#13;
                upgradedModel["resetDialogLabels"] = {&#13;
                    "resetDialogText": { "resetDialogLabel": "" },&#13;
                    "resetDialogConfirm": { "resetDialogLabel": "" },&#13;
                    "resetDialogDeny": { "resetDialogLabel": "" }&#13;
                };&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeDisableRecording",&#13;
        value: function _upgradeDisableRecording(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["disableRecording"]) {&#13;
                upgradedModel["disableRecording"] = "False";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeEnableIntensityChangeEvents",&#13;
        value: function _upgradeEnableIntensityChangeEvents(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["enableIntensityChangeEvents"]) {&#13;
                upgradedModel["enableIntensityChangeEvents"] = "False";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeLangTag",&#13;
        value: function _upgradeLangTag(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["langAttribute"]) {&#13;
                upgradedModel["langAttribute"] = "";&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "_upgradeSpeechTexts",&#13;
        value: function _upgradeSpeechTexts(model) {&#13;
            var upgradedModel = {};&#13;
            $.extend(true, upgradedModel, model);&#13;
&#13;
            if (!upgradedModel["speechTexts"]) {&#13;
                upgradedModel["speechTexts"] = {};&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["DefaultRecordingPlayButton"]) {&#13;
                upgradedModel["speechTexts"]["DefaultRecordingPlayButton"] = { DefaultRecordingPlayButton: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["RecordingButton"]) {&#13;
                upgradedModel["speechTexts"]["RecordingButton"] = { RecordingButton: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["PlayButton"]) {&#13;
                upgradedModel["speechTexts"]["PlayButton"] = { PlayButton: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["ResetButton"]) {&#13;
                upgradedModel["speechTexts"]["ResetButton"] = { ResetButton: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["DownloadButton"]) {&#13;
                upgradedModel["speechTexts"]["DownloadButton"] = { DownloadButton: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["ResetDialog"]) {&#13;
                upgradedModel["speechTexts"]["ResetDialog"] = { ResetDialog: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["StartRecording"]) {&#13;
                upgradedModel["speechTexts"]["StartRecording"] = { StartRecording: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["StopRecording"]) {&#13;
                upgradedModel["speechTexts"]["StopRecording"] = { StopRecording: "" };&#13;
            }&#13;
            if (!upgradedModel["speechTexts"]["Disabled"]) {&#13;
                upgradedModel["speechTexts"]["Disabled"] = { Disabled: "" };&#13;
            }&#13;
&#13;
            return upgradedModel;&#13;
        }&#13;
    }, {&#13;
        key: "setWCAGStatus",&#13;
        value: function setWCAGStatus(isWCAGOn) {&#13;
            this.isWCAGOn = isWCAGOn;&#13;
        }&#13;
    }, {&#13;
        key: "_buildKeyboardController",&#13;
        value: function _buildKeyboardController() {&#13;
            var columnsCount = 1;&#13;
            var model = this.model;&#13;
            var mediaState = this.mediaState;&#13;
            var activationState = this.activationState;&#13;
            var speak = this._speak.bind(this);&#13;
            var speakAndExecuteCallback = this._speakAndExecuteCallback.bind(this);&#13;
&#13;
            if (this.model.extendedMode) {&#13;
                this.keyboardControllerObject = new _ExtendedKeyboardController.ExtendedKeyboardController(this._getElementsForExtendedKeyboardNavigation(), columnsCount, model, mediaState, activationState, speak, speakAndExecuteCallback);&#13;
            } else {&#13;
                this.keyboardControllerObject = new _DefaultKeyboardController.DefaultKeyboardController(this._getElementsForDefaultKeyboardNavigation(), columnsCount, model, mediaState, activationState, speak, speakAndExecuteCallback);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "getKeyboardController",&#13;
        value: function getKeyboardController() {&#13;
            return this.keyboardControllerObject;&#13;
        }&#13;
    }, {&#13;
        key: "_getElementsForDefaultKeyboardNavigation",&#13;
        value: function _getElementsForDefaultKeyboardNavigation() {&#13;
            return $(this.view).find("\n            ." + _CssClasses.CSS_CLASSES.DEFAULT_RECORDING_PLAY_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.RECORDING_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.PLAY_BUTTON + "\n        ");&#13;
        }&#13;
    }, {&#13;
        key: "_getElementsForExtendedKeyboardNavigation",&#13;
        value: function _getElementsForExtendedKeyboardNavigation() {&#13;
            return $(this.view).find("\n            ." + _CssClasses.CSS_CLASSES.RECORDING_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.PLAY_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.RESET_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.DOWNLOAD_BUTTON + "\n        ");&#13;
        }&#13;
    }, {&#13;
        key: "_getElementsForResetDialogKeyboardNavigation",&#13;
        value: function _getElementsForResetDialogKeyboardNavigation() {&#13;
            return $(this.view).find("\n            ." + _CssClasses.CSS_CLASSES.DIALOG_TEXT + ",\n            ." + _CssClasses.CSS_CLASSES.CONFIRM_BUTTON + ",\n            ." + _CssClasses.CSS_CLASSES.DENY_BUTTON + "\n        ");&#13;
        }&#13;
    }, {&#13;
        key: "_speak",&#13;
        value: function _speak(data) {&#13;
            var tts = this.keyboardControllerObject.getTextToSpeechOrNull(this.playerController);&#13;
            if (tts &amp;&amp; this.isWCAGOn) {&#13;
                tts.speak(data);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_speakAndExecuteCallback",&#13;
        value: function _speakAndExecuteCallback(data, callbackFunction) {&#13;
            var tts = this.keyboardControllerObject.getTextToSpeechOrNull(this.playerController);&#13;
            if (tts &amp;&amp; this.isWCAGOn) {&#13;
                tts.speakWithCallback(data, callbackFunction);&#13;
            } else {&#13;
                callbackFunction();&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaRecorder;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 18 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.validateModel = validateModel;&#13;
&#13;
var _DefaultValues = __webpack_require__(19);&#13;
&#13;
function validateModel(model) {&#13;
    var modelValidator = new ModelValidator();&#13;
&#13;
    return modelValidator.validate(model, [ModelValidators.DumbString("ID"), ModelValidators.Boolean("Is Visible"), ModelValidators.Integer("maxTime", {&#13;
        minValue: 0,&#13;
        maxValue: _DefaultValues.DefaultValues.MAX_TIME,&#13;
        default: _DefaultValues.DefaultValues.DEFAULT_MAX_TIME&#13;
    }), ModelValidators.String("defaultRecording", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.String("startRecordingSound", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.String("stopRecordingSound", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.Boolean("isResetRemovesRecording"), ModelValidators.Boolean("isShowedTimer"), ModelValidators.Boolean("isShowedDefaultRecordingButton"), ModelValidators.Boolean("enableInErrorCheckingMode"), ModelValidators.Boolean("isDisabled"), ModelValidators.Boolean("extendedMode"), ModelValidators.Boolean("disableRecording"), ModelValidators.Boolean("enableIntensityChangeEvents"), ModelValidators.StaticList('resetDialogLabels', {&#13;
        'resetDialogText': [ModelValidators.String('resetDialogLabel', { default: 'Are you sure you want to reset the recording?' })],&#13;
        'resetDialogConfirm': [ModelValidators.String('resetDialogLabel', { default: 'Yes' })],&#13;
        'resetDialogDeny': [ModelValidators.String('resetDialogLabel', { default: 'No' })]&#13;
    }), ModelValidators.String("langAttribute", {&#13;
        trim: true,&#13;
        default: ""&#13;
    })]);&#13;
}&#13;
&#13;
/***/ }),&#13;
/* 19 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
var DefaultValues = exports.DefaultValues = {&#13;
    MAX_TIME: 30 * 60,&#13;
    DEFAULT_MAX_TIME: 10&#13;
};&#13;
&#13;
/***/ }),&#13;
/* 20 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ActivationState = exports.ActivationState = function () {&#13;
    function ActivationState() {&#13;
        _classCallCheck(this, ActivationState);&#13;
&#13;
        this.values = {&#13;
            ACTIVE: 0,&#13;
            INACTIVE: 1&#13;
        };&#13;
&#13;
        this._value = this.values.ACTIVE;&#13;
    }&#13;
&#13;
    _createClass(ActivationState, [{&#13;
        key: "isActive",&#13;
        value: function isActive() {&#13;
            return this._value === this.values.ACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "isInactive",&#13;
        value: function isInactive() {&#13;
            return this._value === this.values.INACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "setActive",&#13;
        value: function setActive() {&#13;
            this._value = this.values.ACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "setInactive",&#13;
        value: function setInactive() {&#13;
            this._value = this.values.INACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.value = null;&#13;
            this.values = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return ActivationState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 21 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaState = exports.MediaState = function () {&#13;
    function MediaState() {&#13;
        _classCallCheck(this, MediaState);&#13;
&#13;
        this.values = {&#13;
            NEW: 0,&#13;
            BLOCKED: 1, // waiting for a resources permit&#13;
            RECORDING: 2,&#13;
            LOADING: 3,&#13;
            LOADED: 4,&#13;
            PLAYING: 5,&#13;
            PLAYING_DEFAULT_RECORDING: 6,&#13;
            LOADED_DEFAULT_RECORDING: 7,&#13;
            BLOCKED_SAFARI: 8&#13;
        };&#13;
&#13;
        this._value = this.values.NEW;&#13;
    }&#13;
&#13;
    _createClass(MediaState, [{&#13;
        key: "isNew",&#13;
        value: function isNew() {&#13;
            return this._value === this.values.NEW;&#13;
        }&#13;
    }, {&#13;
        key: "isRecording",&#13;
        value: function isRecording() {&#13;
            return this._value === this.values.RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoading",&#13;
        value: function isLoading() {&#13;
            return this._value === this.values.LOADING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoaded",&#13;
        value: function isLoaded() {&#13;
            return this._value === this.values.LOADED;&#13;
        }&#13;
    }, {&#13;
        key: "isPlaying",&#13;
        value: function isPlaying() {&#13;
            return this._value === this.values.PLAYING;&#13;
        }&#13;
    }, {&#13;
        key: "isPlayingDefaultRecording",&#13;
        value: function isPlayingDefaultRecording() {&#13;
            return this._value === this.values.PLAYING_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoadedDefaultRecording",&#13;
        value: function isLoadedDefaultRecording() {&#13;
            return this._value === this.values.LOADED_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isBlockedSafari",&#13;
        value: function isBlockedSafari() {&#13;
            return this._value === this.values.BLOCKED_SAFARI;&#13;
        }&#13;
    }, {&#13;
        key: "isBlocked",&#13;
        value: function isBlocked() {&#13;
            return this._value === this.values.BLOCKED;&#13;
        }&#13;
    }, {&#13;
        key: "setNew",&#13;
        value: function setNew() {&#13;
            this._value = this.values.NEW;&#13;
        }&#13;
    }, {&#13;
        key: "setRecording",&#13;
        value: function setRecording() {&#13;
            this._value = this.values.RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoading",&#13;
        value: function setLoading() {&#13;
            this._value = this.values.LOADING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoaded",&#13;
        value: function setLoaded() {&#13;
            this._value = this.values.LOADED;&#13;
        }&#13;
    }, {&#13;
        key: "setPlaying",&#13;
        value: function setPlaying() {&#13;
            this._value = this.values.PLAYING;&#13;
        }&#13;
    }, {&#13;
        key: "setPlayingDefaultRecording",&#13;
        value: function setPlayingDefaultRecording() {&#13;
            this._value = this.values.PLAYING_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoadedDefaultRecording",&#13;
        value: function setLoadedDefaultRecording() {&#13;
            this._value = this.values.LOADED_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setBlocked",&#13;
        value: function setBlocked() {&#13;
            this._value = this.values.BLOCKED;&#13;
        }&#13;
    }, {&#13;
        key: "setBlockedSafari",&#13;
        value: function setBlockedSafari() {&#13;
            this._value = this.values.BLOCKED_SAFARI;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this._value = null;&#13;
            this.values = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 22 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
var Errors = exports.Errors = {&#13;
    "maxTime_INT02": "Time value contains non numerical characters",&#13;
    "maxTime_INT03": "Recording can not take more than 30 minutes",&#13;
    "maxTime_INT04": "Time in seconds cannot be negative value",&#13;
    "type_EV01": "Selected type is not supported",&#13;
    "not_supported_browser": "Your browser is not supported: ",&#13;
    "safari_select_recording_button_again": "Please click start recording button again. First time we tried to access your microphone. Now we will record it."&#13;
};&#13;
&#13;
/***/ }),&#13;
/* 23 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.PlayButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(1);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var PlayButton = exports.PlayButton = function (_Button) {&#13;
    _inherits(PlayButton, _Button);&#13;
&#13;
    function PlayButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state;&#13;
&#13;
        _classCallCheck(this, PlayButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (PlayButton.__proto__ || Object.getPrototypeOf(PlayButton)).call(this, $view));&#13;
&#13;
        _this.state = state;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(PlayButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(PlayButton.prototype.__proto__ || Object.getPrototypeOf(PlayButton.prototype), "destroy", this).call(this);&#13;
            this.state = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.state.isLoaded()) this._startPlaying();else if (this.state.isPlaying()) this._stopPlaying();&#13;
        }&#13;
    }, {&#13;
        key: "_startPlaying",&#13;
        value: function _startPlaying() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onStartPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_stopPlaying",&#13;
        value: function _stopPlaying() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onStopPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "onStartPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStartPlayingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStopPlayingCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return PlayButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 24 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.ResetButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Button2 = __webpack_require__(1);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var ResetButton = exports.ResetButton = function (_Button) {&#13;
    _inherits(ResetButton, _Button);&#13;
&#13;
    function ResetButton($view) {&#13;
        _classCallCheck(this, ResetButton);&#13;
&#13;
        return _possibleConstructorReturn(this, (ResetButton.__proto__ || Object.getPrototypeOf(ResetButton)).call(this, $view));&#13;
    }&#13;
&#13;
    _createClass(ResetButton, [{&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.onResetCallback != null) {&#13;
                this.onResetCallback();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "onReset",&#13;
        set: function set(callback) {&#13;
            this.onResetCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return ResetButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 25 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.ResetDialog = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ResetDialog = exports.ResetDialog = function () {&#13;
    function ResetDialog($view, resetDialogLabels) {&#13;
        _classCallCheck(this, ResetDialog);&#13;
&#13;
        this.$view = $view;&#13;
        this.labels = {&#13;
            text: resetDialogLabels['resetDialogText']['resetDialogLabel'],&#13;
            confirm: resetDialogLabels['resetDialogConfirm']['resetDialogLabel'],&#13;
            deny: resetDialogLabels['resetDialogDeny']['resetDialogLabel']&#13;
        };&#13;
        this._createView();&#13;
    }&#13;
&#13;
    _createClass(ResetDialog, [{&#13;
        key: 'open',&#13;
        value: function open() {&#13;
            this.$view.css('display', 'block');&#13;
            this.$view.css('left', '');&#13;
            this.$view.css('top', '');&#13;
        }&#13;
    }, {&#13;
        key: 'close',&#13;
        value: function close() {&#13;
            this.$view.css('display', 'none');&#13;
        }&#13;
    }, {&#13;
        key: '_createView',&#13;
        value: function _createView() {&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.DIALOG_TEXT).text(this.labels.text);&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.CONFIRM_BUTTON).text(this.labels.confirm);&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.DENY_BUTTON).text(this.labels.deny);&#13;
            this.$view.draggable({});&#13;
            var self = this;&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.CONFIRM_BUTTON).click(function () {&#13;
                self.close();&#13;
                if (self.onConfirmCallback) self.onConfirmCallback();&#13;
            });&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.DENY_BUTTON).click(function () {&#13;
                self.close();&#13;
                if (self.onDenyCallback) self.onDenyCallback();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: 'onConfirm',&#13;
        set: function set(callback) {&#13;
            this.onConfirmCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: 'onDeny',&#13;
        set: function set(callback) {&#13;
            this.onDenyCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return ResetDialog;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 26 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.DownloadButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Button2 = __webpack_require__(1);&#13;
&#13;
var _BlobService = __webpack_require__(4);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var DownloadButton = exports.DownloadButton = function (_Button) {&#13;
    _inherits(DownloadButton, _Button);&#13;
&#13;
    function DownloadButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            addonState = _ref.addonState;&#13;
&#13;
        _classCallCheck(this, DownloadButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (DownloadButton.__proto__ || Object.getPrototypeOf(DownloadButton)).call(this, $view));&#13;
&#13;
        _this.addonState = addonState;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(DownloadButton, [{&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.addonState.recording) {&#13;
                this.downloadRecording();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "downloadRecording",&#13;
        value: function downloadRecording() {&#13;
            var element = document.createElement("a");&#13;
            element.setAttribute("id", "dl");&#13;
            element.setAttribute("download", "recording.mp3");&#13;
            element.setAttribute("href", "#");&#13;
&#13;
            this.addonState.getMP3Blob().then(function (mp3Blob) {&#13;
                return _BlobService.BlobService.serialize(mp3Blob);&#13;
            }).then(function (b64Recording) {&#13;
                function handleDownloadRecording() {&#13;
                    var data = b64Recording;&#13;
                    data = data.replace(/^data:audio\/[^;]*/, 'data:application/octet-stream');&#13;
                    data = data.replace(/^data:application\/octet-stream/, 'data:application/octet-stream;headers=Content-Disposition%3A%20attachment%3B%20filename=recording.mp3');&#13;
                    this.href = data;&#13;
                }&#13;
                element.onclick = handleDownloadRecording;&#13;
                element.click();&#13;
            });&#13;
        }&#13;
    }]);&#13;
&#13;
    return DownloadButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 27 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Timer = exports.Timer = function () {&#13;
    function Timer($view) {&#13;
        _classCallCheck(this, Timer);&#13;
&#13;
        this.$view = $view;&#13;
        this.interval = null;&#13;
        this.currentMinutes = 0;&#13;
        this.currentSeconds = 0;&#13;
        this.loadedMinutes = 0;&#13;
        this.loadedSeconds = 0;&#13;
        this.duration = 0;&#13;
        this.isLoaded = false;&#13;
&#13;
        this.$view.css("z-index", "100");&#13;
        this._updateText();&#13;
    }&#13;
&#13;
    _createClass(Timer, [{&#13;
        key: "startCountdown",&#13;
        value: function startCountdown() {&#13;
            var _this = this;&#13;
&#13;
            this._clearCurrentTime();&#13;
            this.interval = setInterval(function () {&#13;
                _this._incrementTimer();&#13;
                _this._updateText();&#13;
            }, 1000);&#13;
        }&#13;
    }, {&#13;
        key: "startDecrementalCountdown",&#13;
        value: function startDecrementalCountdown(duration) {&#13;
            var _this2 = this;&#13;
&#13;
            this._clearCurrentTime();&#13;
            this.setDuration(duration);&#13;
            this.currentMinutes = this.loadedMinutes;&#13;
            this.currentSeconds = this.loadedSeconds;&#13;
            this._updateText();&#13;
            this.interval = setInterval(function () {&#13;
                _this2._decrementTimer();&#13;
                _this2._updateText();&#13;
            }, 1000);&#13;
        }&#13;
    }, {&#13;
        key: "stopCountdown",&#13;
        value: function stopCountdown() {&#13;
            if (this.interval != null) {&#13;
                clearInterval(this.interval);&#13;
                this.interval = null;&#13;
            }&#13;
            this._clearCurrentTime();&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "setDuration",&#13;
        value: function setDuration(duration) {&#13;
            this.duration = duration;&#13;
            this.loadedMinutes = parseInt(duration / 60);&#13;
            this.loadedSeconds = parseInt(duration % 60);&#13;
            this.isLoaded = true;&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            clearInterval(this.interval);&#13;
            this.isLoaded = false;&#13;
            this._clearCurrentTime();&#13;
            this._clearLoadedTime();&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            clearInterval(this.interval);&#13;
            this.interval = null;&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "_clearCurrentTime",&#13;
        value: function _clearCurrentTime() {&#13;
            this.currentMinutes = 0;&#13;
            this.currentSeconds = 0;&#13;
        }&#13;
    }, {&#13;
        key: "_clearLoadedTime",&#13;
        value: function _clearLoadedTime() {&#13;
            this.loadedMinutes = 0;&#13;
            this.loadedSeconds = 0;&#13;
        }&#13;
    }, {&#13;
        key: "_incrementTimer",&#13;
        value: function _incrementTimer() {&#13;
            this.currentSeconds++;&#13;
&#13;
            if (this.currentSeconds &gt;= 60) {&#13;
                this.currentSeconds = 0;&#13;
                this.currentMinutes++;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_decrementTimer",&#13;
        value: function _decrementTimer() {&#13;
            this.currentSeconds--;&#13;
&#13;
            if (this.currentSeconds &lt; 0) {&#13;
                this.currentSeconds = 59;&#13;
                this.currentMinutes--;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_updateText",&#13;
        value: function _updateText() {&#13;
            this.$view[0].innerText = this.isLoaded ? this._generateTextTime(this.currentMinutes, this.currentSeconds) + " / " + this._generateTextTime(this.loadedMinutes, this.loadedSeconds) : this._generateTextTime(this.currentMinutes, this.currentSeconds);&#13;
        }&#13;
    }, {&#13;
        key: "_generateTextTime",&#13;
        value: function _generateTextTime(minutes, seconds) {&#13;
            var text = "";&#13;
            text += minutes &lt; 10 ? "0" + minutes : minutes;&#13;
            text += ":";&#13;
            text += seconds &lt; 10 ? "0" + seconds : seconds;&#13;
&#13;
            return text;&#13;
        }&#13;
    }, {&#13;
        key: "setTime",&#13;
        value: function setTime(seconds) {&#13;
            this.currentMinutes = parseInt(seconds / 60);&#13;
            this.currentSeconds = parseInt(seconds % 60);&#13;
            this._updateText();&#13;
        }&#13;
    }]);&#13;
&#13;
    return Timer;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 28 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.ProgressBar = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ProgressBar = exports.ProgressBar = function () {&#13;
    function ProgressBar($view) {&#13;
        _classCallCheck(this, ProgressBar);&#13;
&#13;
        this.$view = $view;&#13;
        this.progress = 0.0;&#13;
        this.$slider = $view.find("." + _CssClasses.CSS_CLASSES.PROGRESS_BAR_SLIDER);&#13;
        this.maxWidth = $view[0].offsetWidth - this.$slider[0].offsetWidth;&#13;
        var self = this;&#13;
        this.$slider.draggable({&#13;
            axis: "x",&#13;
            containment: "parent",&#13;
            start: function start(event, ui) {&#13;
                self._startDragging();&#13;
            },&#13;
            stop: function stop(event, ui) {&#13;
                self._stopDragging();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    _createClass(ProgressBar, [{&#13;
        key: "setProgress",&#13;
        value: function setProgress(progress) {&#13;
            this.progress = progress;&#13;
            if (this.progress &gt; 1.0) this.progress = 1.0;&#13;
            if (this.progress &lt; 0.0) this.progress = 0.0;&#13;
            this._updateView();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.setProgress(0.0);&#13;
        }&#13;
    }, {&#13;
        key: "_updateView",&#13;
        value: function _updateView() {&#13;
            this._updateMaxWidth();&#13;
            var left = Math.round(this.maxWidth * this.progress);&#13;
            this.$slider.css('left', left + 'px');&#13;
        }&#13;
    }, {&#13;
        key: "_updateMaxWidth",&#13;
        value: function _updateMaxWidth() {&#13;
            if (this.maxWidth === 0) {&#13;
                this.maxWidth = this.$view[0].offsetWidth - this.$slider[0].offsetWidth;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_startDragging",&#13;
        value: function _startDragging() {&#13;
            if (this.onStartDraggingCallback) {&#13;
                this.onStartDraggingCallback();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_stopDragging",&#13;
        value: function _stopDragging() {&#13;
            if (this.onStopDraggingCallback) {&#13;
                this._updateMaxWidth();&#13;
                this.progress = this.$slider[0].offsetLeft / this.maxWidth;&#13;
                this.onStopDraggingCallback(this.progress);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "onStartDragging",&#13;
        set: function set(callback) {&#13;
            this.onStartDraggingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopDragging",&#13;
        set: function set(callback) {&#13;
            this.onStopDraggingCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return ProgressBar;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 29 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AddonState = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BlobService = __webpack_require__(4);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AddonState = exports.AddonState = function () {&#13;
    function AddonState() {&#13;
        _classCallCheck(this, AddonState);&#13;
&#13;
        this.recording = null;&#13;
        this.visibility = null;&#13;
        this.enabled = null;&#13;
        this.mp3ConvertHandler = null;&#13;
    }&#13;
&#13;
    _createClass(AddonState, [{&#13;
        key: "setMP3ConvertHandler",&#13;
        value: function setMP3ConvertHandler(handler) {&#13;
            this.mp3ConvertHandler = handler;&#13;
        }&#13;
    }, {&#13;
        key: "setRecordingBlob",&#13;
        value: function setRecordingBlob(blob) {&#13;
            var _this = this;&#13;
&#13;
            _BlobService.BlobService.serialize(blob).then(function (recording) {&#13;
                return _this.recording = recording;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "setRecordingBase64",&#13;
        value: function setRecordingBase64(recording) {&#13;
            this.recording = recording;&#13;
        }&#13;
    }, {&#13;
        key: "getRecordingBlob",&#13;
        value: function getRecordingBlob() {&#13;
            var _this2 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                if (_this2.recording) resolve(_BlobService.BlobService.deserialize(_this2.recording));&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "isEmpty",&#13;
        value: function isEmpty() {&#13;
            return this.recording == null;&#13;
        }&#13;
    }, {&#13;
        key: "isMP3Format",&#13;
        value: function isMP3Format(blob) {&#13;
            return !this.isEmpty() &amp;&amp; blob.type.includes("audio/mpeg");&#13;
        }&#13;
    }, {&#13;
        key: "isWAVFormat",&#13;
        value: function isWAVFormat(blob) {&#13;
            return !this.isEmpty() &amp;&amp; blob.type.includes("audio/wav");&#13;
        }&#13;
    }, {&#13;
        key: "getMP3File",&#13;
        value: function getMP3File() {&#13;
            return this.getMP3Blob().then(function (mp3Blob) {&#13;
                return new File([mp3Blob], "recording.mp3");&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "getMP3Blob",&#13;
        value: function getMP3Blob() {&#13;
            var _this3 = this;&#13;
&#13;
            return this.getRecordingBlob().then(function (blob) {&#13;
                if (_this3.isMP3Format(blob)) {&#13;
                    return blob;&#13;
                }&#13;
                if (!!_this3.mp3ConvertHandler &amp;&amp; _this3.mp3ConvertHandler.isSupported() &amp;&amp; _this3.mp3ConvertHandler.isValid &amp;&amp; !_this3.mp3ConvertHandler.isWorkerExist()) {&#13;
                    return _this3.convertWavBlobToMP3BlobByWorker(blob);&#13;
                }&#13;
                return _this3.convertWavBlobToMP3Blob(blob);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "convertWavBlobToMP3BlobByWorker",&#13;
        value: function convertWavBlobToMP3BlobByWorker(wavBlob) {&#13;
            var _this4 = this;&#13;
&#13;
            return this.decodeVawBlobData(wavBlob).then(function (decodedData) {&#13;
                return _BlobService.BlobService.getMp3BlobFromDecodedDataByWorker(_this4.mp3ConvertHandler, decodedData);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "convertWavBlobToMP3Blob",&#13;
        value: function convertWavBlobToMP3Blob(wavBlob) {&#13;
            return this.decodeVawBlobData(wavBlob).then(function (decodedData) {&#13;
                return _BlobService.BlobService.getMp3BlobFromDecodedData(decodedData);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "decodeVawBlobData",&#13;
        value: function decodeVawBlobData(wavBlob) {&#13;
            var _this5 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                resolve(wavBlob);&#13;
            }).then(function (wavBlob) {&#13;
                File.prototype.arrayBuffer = File.prototype.arrayBuffer || _this5._fixArrayBuffer;&#13;
                Blob.prototype.arrayBuffer = Blob.prototype.arrayBuffer || _this5._fixArrayBuffer;&#13;
&#13;
                return wavBlob.arrayBuffer();&#13;
            }).then(function (arrayBuffer) {&#13;
                window.AudioContext = window.AudioContext || window.webkitAudioContext;&#13;
                var context = new AudioContext();&#13;
                return new Promise(function (resolve) {&#13;
                    context.decodeAudioData(arrayBuffer, function (buffer) {&#13;
                        resolve(buffer);&#13;
                    });&#13;
                });&#13;
            });&#13;
        }&#13;
&#13;
        //for some reason there is a bug in some lower Safari versions &lt;14, it cause arrayBuffer() undefined&#13;
        //https://gist.github.com/hanayashiki/8dac237671343e7f0b15de617b0051bd&#13;
&#13;
    }, {&#13;
        key: "_fixArrayBuffer",&#13;
        value: function _fixArrayBuffer() {&#13;
            var _this6 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                var fr = new FileReader();&#13;
                fr.onload = function () {&#13;
                    resolve(fr.result);&#13;
                };&#13;
                fr.readAsArrayBuffer(_this6);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "setVisibility",&#13;
        value: function setVisibility(isVisible) {&#13;
            this.visibility = isVisible ? true : false;&#13;
        }&#13;
    }, {&#13;
        key: "getVisibility",&#13;
        value: function getVisibility() {&#13;
            var self = this;&#13;
            return new Promise(function (resolve) {&#13;
                if (self.visibility != null) resolve(self.visibility);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "setEnabled",&#13;
        value: function setEnabled(isEnable) {&#13;
            this.enabled = isEnable ? true : false;&#13;
        }&#13;
    }, {&#13;
        key: "getEnabled",&#13;
        value: function getEnabled() {&#13;
            var self = this;&#13;
            return new Promise(function (resolve) {&#13;
                if (self.enabled != null) resolve(self.enabled);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "getState",&#13;
        value: function getState() {&#13;
            var state = {&#13;
                recording: this.recording,&#13;
                visibility: this.visibility,&#13;
                enabled: this.enabled&#13;
            };&#13;
            return JSON.stringify(state);&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.recording = null;&#13;
            this.visibility = null;&#13;
            this.enabled = null;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.recording = null;&#13;
            this.visibility = null;&#13;
            this.enabled = null;&#13;
            this.mp3ConvertHandler = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AddonState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 30 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var RecordingTimeLimiter = exports.RecordingTimeLimiter = function () {&#13;
    function RecordingTimeLimiter(maxTime) {&#13;
        _classCallCheck(this, RecordingTimeLimiter);&#13;
&#13;
        this.workingDelay = 0.2;&#13;
        this.maxTime = maxTime + this.workingDelay;&#13;
        this.counter = 0;&#13;
        this.interval;&#13;
        this.callback;&#13;
    }&#13;
&#13;
    _createClass(RecordingTimeLimiter, [{&#13;
        key: "startCountdown",&#13;
        value: function startCountdown() {&#13;
            var _this = this;&#13;
&#13;
            if (this.maxTime || this.callback) this.interval = setInterval(function () {&#13;
                return _this._incrementTimer();&#13;
            }, this.workingDelay * 1000);&#13;
        }&#13;
    }, {&#13;
        key: "stopCountdown",&#13;
        value: function stopCountdown() {&#13;
            clearInterval(this.interval);&#13;
            this.counter = 0;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.callback = function () {};&#13;
            clearInterval(this.interval);&#13;
            this.interval = null;&#13;
            this.callback = null;&#13;
        }&#13;
    }, {&#13;
        key: "_incrementTimer",&#13;
        value: function _incrementTimer() {&#13;
            this.counter += this.workingDelay;&#13;
            if (this.counter &gt;= this.maxTime) {&#13;
                this.stopCountdown();&#13;
                this.callback();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "onTimeExpired",&#13;
        set: function set(callback) {&#13;
            this.callback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordingTimeLimiter;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 31 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.DottedSoundIntensity = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _SoundIntensity2 = __webpack_require__(5);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var DottedSoundIntensity = exports.DottedSoundIntensity = function (_SoundIntensity) {&#13;
    _inherits(DottedSoundIntensity, _SoundIntensity);&#13;
&#13;
    function DottedSoundIntensity() {&#13;
        _classCallCheck(this, DottedSoundIntensity);&#13;
&#13;
        return _possibleConstructorReturn(this, (DottedSoundIntensity.__proto__ || Object.getPrototypeOf(DottedSoundIntensity)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(DottedSoundIntensity, [{&#13;
        key: "_setIntensity",&#13;
        value: function _setIntensity(intensity) {&#13;
            this._clearIntensity();&#13;
            var cappedIntensity = intensity;&#13;
            if (cappedIntensity &gt; this.volumeLevels) cappedIntensity = this.volumeLevels;&#13;
            var heightPercent = cappedIntensity / this.volumeLevels;&#13;
            var heightDiff = heightPercent * (this.$view[0].offsetHeight - 6);&#13;
            var tallDotNewHeight = Math.round(6 + heightDiff);&#13;
            var shortDotNewHeight = Math.round(6 + heightDiff / 2);&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.TALL_DOT).css('height', tallDotNewHeight + 'px');&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.SHORT_DOT).css('height', shortDotNewHeight + 'px');&#13;
        }&#13;
    }, {&#13;
        key: "_clearIntensity",&#13;
        value: function _clearIntensity() {&#13;
            this.$view.find("." + _CssClasses.CSS_CLASSES.SOUND_INTENSITY_DOT).css('height', '');&#13;
        }&#13;
    }]);&#13;
&#13;
    return DottedSoundIntensity;&#13;
}(_SoundIntensity2.SoundIntensity);&#13;
&#13;
/***/ }),&#13;
/* 32 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.MediaAnalyserService = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _AnalyserProvider = __webpack_require__(33);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaAnalyserService = exports.MediaAnalyserService = function () {&#13;
    function MediaAnalyserService() {&#13;
        _classCallCheck(this, MediaAnalyserService);&#13;
&#13;
        this.audioContext = AudioContextSingleton.getOrCreate();&#13;
        this.mediaStreamSource = null;&#13;
        this.mediaElementSource = null;&#13;
    }&#13;
&#13;
    _createClass(MediaAnalyserService, [{&#13;
        key: "createAnalyserFromStream",&#13;
        value: function createAnalyserFromStream(stream) {&#13;
            var _this = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                // on Chrome when user hasn't interacted with the page before AudioContext was created it will be created in suspended state&#13;
                // this will happen if MediaRecorder is on the first page user visits (constructor call will happen before user interaction)&#13;
                // resume is then needed to unblock AudioContext (see https://goo.gl/7K7WLu)&#13;
                _this.audioContext.resume().then(function () {&#13;
                    _this.mediaStreamSource = _this.audioContext.createMediaStreamSource(stream);&#13;
&#13;
                    var analyser = _AnalyserProvider.AnalyserProvider.create(_this.audioContext);&#13;
                    _this.mediaStreamSource.connect(analyser);&#13;
&#13;
                    resolve(analyser);&#13;
                });&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "createAnalyserFromElement",&#13;
        value: function createAnalyserFromElement(htmlMediaElement) {&#13;
            var _this2 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                if (!_this2.mediaElementSource) _this2.mediaElementSource = _this2.audioContext.createMediaElementSource(htmlMediaElement);&#13;
&#13;
                var analyser = _AnalyserProvider.AnalyserProvider.create(_this2.audioContext);&#13;
                _this2.mediaElementSource.connect(analyser);&#13;
                analyser.connect(_this2.audioContext.destination);&#13;
&#13;
                resolve(analyser);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "closeAnalyzing",&#13;
        value: function closeAnalyzing() {&#13;
            if (this.mediaStreamSource) this.mediaStreamSource.disconnect();&#13;
            if (this.mediaElementSource) this.mediaElementSource.disconnect();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.closeAnalyzing();&#13;
            AudioContextSingleton.close();&#13;
            this.audioContext = null;&#13;
            this.mediaElementSource = null;&#13;
            this.mediaStreamSource = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaAnalyserService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 33 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AnalyserProvider = exports.AnalyserProvider = function () {&#13;
    function AnalyserProvider() {&#13;
        _classCallCheck(this, AnalyserProvider);&#13;
    }&#13;
&#13;
    _createClass(AnalyserProvider, null, [{&#13;
        key: "create",&#13;
        value: function create(audioContext) {&#13;
            return this._createAnalyser(audioContext);&#13;
        }&#13;
    }, {&#13;
        key: "_createAnalyser",&#13;
        value: function _createAnalyser(audioContext) {&#13;
            var analyser = audioContext.createAnalyser();&#13;
            analyser.fftSize = 1024;&#13;
            analyser.smoothingTimeConstant = 0.3;&#13;
            return analyser;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AnalyserProvider;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 34 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioLoader = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Loader2 = __webpack_require__(35);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioLoader = exports.AudioLoader = function (_Loader) {&#13;
    _inherits(AudioLoader, _Loader);&#13;
&#13;
    function AudioLoader($view) {&#13;
        _classCallCheck(this, AudioLoader);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioLoader.__proto__ || Object.getPrototypeOf(AudioLoader)).call(this, $view));&#13;
    }&#13;
&#13;
    _createClass(AudioLoader, [{&#13;
        key: "show",&#13;
        value: function show() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.AUDIO_LOADER);&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.AUDIO_LOADER);&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioLoader;&#13;
}(_Loader2.Loader);&#13;
&#13;
/***/ }),&#13;
/* 35 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Loader = exports.Loader = function () {&#13;
    function Loader($view) {&#13;
        _classCallCheck(this, Loader);&#13;
&#13;
        if (this.constructor === Loader) throw new Error("Cannot create an instance of Loader abstract class");&#13;
&#13;
        this.$view = $view;&#13;
    }&#13;
&#13;
    _createClass(Loader, [{&#13;
        key: "show",&#13;
        value: function show() {&#13;
            throw new Error("Show method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            throw new Error("Hide method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return Loader;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 36 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var SoundEffect = exports.SoundEffect = function () {&#13;
    function SoundEffect(sound, $wrapper) {&#13;
        _classCallCheck(this, SoundEffect);&#13;
&#13;
        this.sound = sound;&#13;
        this.$wrapper = $wrapper;&#13;
        this.audioNode = document.createElement("audio");&#13;
        this.audioNode.src = sound;&#13;
        this.audioNode.style.display = "none";&#13;
        this.$wrapper.append(this.audioNode);&#13;
        this.startCallback = function () {};&#13;
        this.stopCallback = function () {};&#13;
    }&#13;
&#13;
    _createClass(SoundEffect, [{&#13;
        key: "isValid",&#13;
        value: function isValid() {&#13;
            return this.sound != "" &amp;&amp; this.sound != null &amp;&amp; typeof this.sound != "undefined";&#13;
        }&#13;
    }, {&#13;
        key: "playSound",&#13;
        value: function playSound() {&#13;
            this.startCallback();&#13;
            var playPromise = this.audioNode.play();&#13;
            if (playPromise !== undefined) {&#13;
                playPromise.catch(function (error) {&#13;
                    console.log(error);&#13;
                });&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.audioNode.pause();&#13;
            this.audioNode.src = "";&#13;
            this.audioNode.remove();&#13;
            this.audioNode = null;&#13;
            this.$wrapper.remove();&#13;
            this.$wrapper = null;&#13;
        }&#13;
    }, {&#13;
        key: "isBrowserRequiredReloadNode",&#13;
        value: function isBrowserRequiredReloadNode() {&#13;
            var navU = window.navigator.userAgent;&#13;
            return navU.indexOf('Android') &gt; -1 &amp;&amp; navU.indexOf('Mozilla/5.0') &gt; -1 &amp;&amp; navU.indexOf('AppleWebKit') &gt; -1;&#13;
        }&#13;
    }, {&#13;
        key: "_reloadAudioNode",&#13;
        value: function _reloadAudioNode() {&#13;
            this.audioNode.remove();&#13;
            this.audioNode = document.createElement("audio");&#13;
            this.audioNode.src = this.sound;&#13;
            this.audioNode.style.display = "none";&#13;
            this.$wrapper.append(this.audioNode);&#13;
            this.onStopCallback = this.stopCallback;&#13;
        }&#13;
    }, {&#13;
        key: "onStartCallback",&#13;
        set: function set(callback) {&#13;
            this.startCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopCallback",&#13;
        set: function set(callback) {&#13;
            var _this = this;&#13;
&#13;
            this.stopCallback = callback;&#13;
            this.audioNode.onended = function () {&#13;
                callback();&#13;
                if (_this.isBrowserRequiredReloadNode()) _this._reloadAudioNode();&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return SoundEffect;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 37 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.RecordButtonSoundEffect = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _RecordButton2 = __webpack_require__(3);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var RecordButtonSoundEffect = exports.RecordButtonSoundEffect = function (_RecordButton) {&#13;
    _inherits(RecordButtonSoundEffect, _RecordButton);&#13;
&#13;
    function RecordButtonSoundEffect(recordButton, startRecordingSoundEffect, stopRecordingSoundEffect) {&#13;
        _classCallCheck(this, RecordButtonSoundEffect);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (RecordButtonSoundEffect.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect)).call(this, { $view: recordButton.$view, state: recordButton.state }));&#13;
&#13;
        _this.startRecordingSoundEffect = startRecordingSoundEffect;&#13;
        _this.stopRecordingSoundEffect = stopRecordingSoundEffect;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(RecordButtonSoundEffect, [{&#13;
        key: "_startRecording",&#13;
        value: function _startRecording() {&#13;
            if (this.startRecordingSoundEffect.isValid()) {&#13;
                this._recordWithSoundEffect();&#13;
            } else if (this._isKeyboardControllerNavigationActive()) {&#13;
                this._recordWithTTS();&#13;
            } else {&#13;
                _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_startRecording", this).call(this);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_recordWithSoundEffect",&#13;
        value: function _recordWithSoundEffect() {&#13;
            this.startRecordingSoundEffect.onStartCallback = function () {};&#13;
            this.startRecordingSoundEffect.onStopCallback = function () {};&#13;
            _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_startRecording", this).call(this);&#13;
            this._playStartRecordingSoundEffect();&#13;
&#13;
            if (this._isKeyboardControllerNavigationActive()) {&#13;
                this._keyboardController.onStartRecordingWhenSoundEffect();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_playStartRecordingSoundEffect",&#13;
        value: function _playStartRecordingSoundEffect() {&#13;
            var _this2 = this;&#13;
&#13;
            if (this.startRecordingSoundEffect.isBrowserRequiredReloadNode()) setTimeout(function () {&#13;
                return _this2.startRecordingSoundEffect.playSound();&#13;
            }, 1000);else this.startRecordingSoundEffect.playSound();&#13;
        }&#13;
    }, {&#13;
        key: "_recordWithTTS",&#13;
        value: function _recordWithTTS() {&#13;
            var callbackFunction = _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_startRecording", this).bind(this);&#13;
            this._keyboardController.onStartRecording(callbackFunction);&#13;
        }&#13;
    }, {&#13;
        key: "_stopRecording",&#13;
        value: function _stopRecording() {&#13;
            if (this._keyboardController.isCurrentElementDisabled()) return;&#13;
&#13;
            if (this.stopRecordingSoundEffect.isValid()) {&#13;
                this._onStopRecordingWithSoundEffect();&#13;
            } else if (this._isKeyboardControllerNavigationActive()) {&#13;
                this._onStopRecordingWithTTS();&#13;
            } else {&#13;
                _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_stopRecording", this).call(this);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_onStopRecordingWithSoundEffect",&#13;
        value: function _onStopRecordingWithSoundEffect() {&#13;
            var _this3 = this;&#13;
&#13;
            this.stopRecordingSoundEffect.onStartCallback = function () {&#13;
                _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_stopRecording", _this3).call(_this3);&#13;
                _this3.deactivate();&#13;
            };&#13;
            this.stopRecordingSoundEffect.onStopCallback = function () {&#13;
                _this3.activate();&#13;
            };&#13;
            this.stopRecordingSoundEffect.playSound();&#13;
&#13;
            if (this._isKeyboardControllerNavigationActive()) {&#13;
                this._keyboardController.onStopRecordingWhenSoundEffect();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_onStopRecordingWithTTS",&#13;
        value: function _onStopRecordingWithTTS() {&#13;
            _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_stopRecording", this).call(this);&#13;
            this._keyboardController.onStopRecording();&#13;
        }&#13;
    }, {&#13;
        key: "_isKeyboardControllerNavigationActive",&#13;
        value: function _isKeyboardControllerNavigationActive() {&#13;
            return this._keyboardController.keyboardNavigationActive === true;&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordButtonSoundEffect;&#13;
}(_RecordButton2.RecordButton);&#13;
&#13;
/***/ }),&#13;
/* 38 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AddonViewService = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AddonViewService = exports.AddonViewService = function () {&#13;
    function AddonViewService($wrapperView) {&#13;
        _classCallCheck(this, AddonViewService);&#13;
&#13;
        this.$view = $wrapperView;&#13;
    }&#13;
&#13;
    _createClass(AddonViewService, [{&#13;
        key: 'setVisibility',&#13;
        value: function setVisibility(isVisible) {&#13;
            this.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
            this.$view.parent().css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        }&#13;
    }, {&#13;
        key: 'activate',&#13;
        value: function activate() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.DISABLED);&#13;
        }&#13;
    }, {&#13;
        key: 'deactivate',&#13;
        value: function deactivate() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.DISABLED);&#13;
        }&#13;
    }, {&#13;
        key: 'destroy',&#13;
        value: function destroy() {&#13;
            this.$view = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AddonViewService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 39 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioResourcesProvider = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _ResourcesProvider2 = __webpack_require__(40);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioResourcesProvider = exports.AudioResourcesProvider = function (_ResourcesProvider) {&#13;
    _inherits(AudioResourcesProvider, _ResourcesProvider);&#13;
&#13;
    function AudioResourcesProvider() {&#13;
        _classCallCheck(this, AudioResourcesProvider);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioResourcesProvider.__proto__ || Object.getPrototypeOf(AudioResourcesProvider)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(AudioResourcesProvider, [{&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            return {&#13;
                audio: DevicesUtils.isEdge() ? true : {&#13;
                    echoCancellation: false&#13;
                }&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioResourcesProvider;&#13;
}(_ResourcesProvider2.ResourcesProvider);&#13;
&#13;
/***/ }),&#13;
/* 40 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ResourcesProvider = exports.ResourcesProvider = function () {&#13;
    function ResourcesProvider($view) {&#13;
        _classCallCheck(this, ResourcesProvider);&#13;
&#13;
        this.RESOURCES_ERROR_MESSAGE = "Multimedia resources not available";&#13;
&#13;
        if (this.constructor === ResourcesProvider) throw new Error("Cannot create an instance of ResourcesProvider abstract class");&#13;
&#13;
        this.$view = $view;&#13;
        this.stream = null;&#13;
    }&#13;
&#13;
    _createClass(ResourcesProvider, [{&#13;
        key: "getMediaResources",&#13;
        value: function getMediaResources() {&#13;
            var _this = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                navigator.mediaDevices.getUserMedia(_this._getOptions()).then(function (stream) {&#13;
                    _this.stream = stream;&#13;
                    resolve(stream);&#13;
                }).catch(function (error) {&#13;
                    console.error(error);&#13;
                    DOMOperationsUtils.showErrorMessage(_this.$view, [_this.RESOURCES_ERROR_MESSAGE], "0");&#13;
                });&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "getStream",&#13;
        value: function getStream() {&#13;
            return this.stream;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            if (this.stream) {&#13;
                this.stream.stop();&#13;
                this.stream = null;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            throw new Error("GetOptions accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return ResourcesProvider;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 41 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BaseRecorder2 = __webpack_require__(42);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioRecorder = exports.AudioRecorder = function (_BaseRecorder) {&#13;
    _inherits(AudioRecorder, _BaseRecorder);&#13;
&#13;
    function AudioRecorder() {&#13;
        _classCallCheck(this, AudioRecorder);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioRecorder.__proto__ || Object.getPrototypeOf(AudioRecorder)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(AudioRecorder, [{&#13;
        key: '_getOptions',&#13;
        value: function _getOptions() {&#13;
            var isEdge = DevicesUtils.isEdge();&#13;
&#13;
            return {&#13;
                type: 'audio',&#13;
                mimeType: 'audio/wav',&#13;
                numberOfAudioChannels: 1,&#13;
                checkForInactiveTracks: true,&#13;
                bufferSize: 16384,&#13;
                disableLogs: true,&#13;
                recorderType: RecordRTC.StereoAudioRecorder,&#13;
                desiredSampRate: 22050&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioRecorder;&#13;
}(_BaseRecorder2.BaseRecorder);&#13;
&#13;
/***/ }),&#13;
/* 42 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.BaseRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Recorder2 = __webpack_require__(43);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var BaseRecorder = exports.BaseRecorder = function (_Recorder) {&#13;
    _inherits(BaseRecorder, _Recorder);&#13;
&#13;
    function BaseRecorder() {&#13;
        _classCallCheck(this, BaseRecorder);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (BaseRecorder.__proto__ || Object.getPrototypeOf(BaseRecorder)).call(this));&#13;
&#13;
        if (_this.constructor === BaseRecorder) throw new Error("Cannot create an instance of Recorder abstract class");&#13;
&#13;
        _this.recorder = null;&#13;
        _this.eventBus = null;&#13;
        _this.sourceID = '';&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(BaseRecorder, [{&#13;
        key: "startRecording",&#13;
        value: function startRecording(stream) {&#13;
            var _this2 = this;&#13;
&#13;
            this._clearRecorder();&#13;
            var audioContext = AudioContextSingleton.getOrCreate();&#13;
            this.recorder = RecordRTC(stream, this._getOptions());&#13;
            audioContext.resume().then(function () {&#13;
                _this2.recorder.startRecording();&#13;
                _this2._onStartRecordingCallback();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            var self = this;&#13;
            var promise = new Promise(function (resolve) {&#13;
                return self.recorder.stopRecording(function () {&#13;
                    return resolve(self.recorder.getBlob());&#13;
                });&#13;
            });&#13;
            promise.then(function () {&#13;
                return self._onStopRecordingCallback(self);&#13;
            });&#13;
&#13;
            return promise;&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            this.eventBus = eventBus;&#13;
            this.sourceID = sourceID;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.onAvailableRecordingCallback = function (blob) {};&#13;
&#13;
            if (this.recorder) {&#13;
                this.recorder.stopRecording();&#13;
                this._clearRecorder();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_clearRecorder",&#13;
        value: function _clearRecorder() {&#13;
            if (this.recorder) {&#13;
                this.recorder.destroy();&#13;
                this.recorder = null;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_onStartRecordingCallback",&#13;
        value: function _onStartRecordingCallback() {&#13;
            this._sendEventCallback(this, 'start');&#13;
        }&#13;
    }, {&#13;
        key: "_onStopRecordingCallback",&#13;
        value: function _onStopRecordingCallback(self) {&#13;
            self._sendEventCallback(self, 'stop');&#13;
        }&#13;
    }, {&#13;
        key: "_sendEventCallback",&#13;
        value: function _sendEventCallback(self, value) {&#13;
            if (self.eventBus) {&#13;
                var eventData = {&#13;
                    'source': self.sourceID,&#13;
                    'item': 'recorder',&#13;
                    'value': value,&#13;
                    'score': ''&#13;
                };&#13;
                self.eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            throw new Error("GetOptions accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return BaseRecorder;&#13;
}(_Recorder2.Recorder);&#13;
&#13;
/***/ }),&#13;
/* 43 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Recorder = exports.Recorder = function () {&#13;
    function Recorder() {&#13;
        _classCallCheck(this, Recorder);&#13;
&#13;
        if (this.constructor === Recorder) throw new Error("Cannot create an instance of Recorder abstract class");&#13;
    }&#13;
&#13;
    _createClass(Recorder, [{&#13;
        key: "startRecording",&#13;
        value: function startRecording(stream) {&#13;
            throw new Error("StartRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            throw new Error("StopRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            throw new Error("setEventBus method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            throw new Error("Destroy method is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return Recorder;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 44 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioPlayer = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BasePlayer2 = __webpack_require__(45);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioPlayer = exports.AudioPlayer = function (_BasePlayer) {&#13;
    _inherits(AudioPlayer, _BasePlayer);&#13;
&#13;
    function AudioPlayer($view, isMlibro) {&#13;
        _classCallCheck(this, AudioPlayer);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (AudioPlayer.__proto__ || Object.getPrototypeOf(AudioPlayer)).call(this, $view, isMlibro));&#13;
&#13;
        _this.mediaNode.style.display = "hidden";&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(AudioPlayer, [{&#13;
        key: "_createMediaNode",&#13;
        value: function _createMediaNode() {&#13;
            return document.createElement("audio");&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioPlayer;&#13;
}(_BasePlayer2.BasePlayer);&#13;
&#13;
/***/ }),&#13;
/* 45 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.BasePlayer = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Player2 = __webpack_require__(46);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var BasePlayer = exports.BasePlayer = function (_Player) {&#13;
    _inherits(BasePlayer, _Player);&#13;
&#13;
    function BasePlayer($view, isMlibro) {&#13;
        _classCallCheck(this, BasePlayer);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (BasePlayer.__proto__ || Object.getPrototypeOf(BasePlayer)).call(this));&#13;
&#13;
        if (_this.constructor === BasePlayer) throw new Error("Cannot create an instance of BasePlayer abstract class");&#13;
        _this.isMlibro = isMlibro;&#13;
        _this.$view = $view;&#13;
        _this.hasRecording = false;&#13;
        _this.duration = null;&#13;
        _this.mediaNode = _this._createMediaNode();&#13;
        _this.mediaNode.controls = false;&#13;
        _this.$view.append(_this.mediaNode);&#13;
        _this.eventBus = null;&#13;
        _this.sourceID = '';&#13;
        _this.item = '';&#13;
&#13;
        _this._enableEventsHandling();&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(BasePlayer, [{&#13;
        key: "setRecording",&#13;
        value: function setRecording(source) {&#13;
            var _this2 = this;&#13;
&#13;
            this.mediaNode.src = source;&#13;
            this.hasRecording = true;&#13;
            this._getDuration().then(function (duration) {&#13;
                _this2.onDurationChangeCallback(duration);&#13;
                _this2.duration = duration;&#13;
            }).catch(function (e) {&#13;
                _this2.hasRecording = false;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            var _this3 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this3.mediaNode.muted = false;&#13;
                if (_this3.onTimeUpdateCallback) {&#13;
                    _this3._enableTimerEventsHandling();&#13;
                }&#13;
                if (_this3._isNotOnlineResources(_this3.mediaNode.src)) resolve(_this3.mediaNode);&#13;
                _this3.mediaNode.play();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            var _this4 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this4.mediaNode.pause();&#13;
                _this4.mediaNode.currentTime = 0;&#13;
                if (_this4.onTimeUpdateCallback) {&#13;
                    _this4._disableTimerEventsHandling();&#13;
                }&#13;
                resolve();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "_enableTimerEventsHandling",&#13;
        value: function _enableTimerEventsHandling() {&#13;
            this.mediaNode.addEventListener('timeupdate', this.onTimeUpdateCallback);&#13;
            this.mediaNode.addEventListener('ended', this.onTimeUpdateCallback);&#13;
        }&#13;
    }, {&#13;
        key: "_disableTimerEventsHandling",&#13;
        value: function _disableTimerEventsHandling() {&#13;
            this.mediaNode.removeEventListener('timeupdate', this.onTimeUpdateCallback);&#13;
            this.mediaNode.removeEventListener('ended', this.onTimeUpdateCallback);&#13;
        }&#13;
    }, {&#13;
        key: "pausePlaying",&#13;
        value: function pausePlaying() {&#13;
            var _this5 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this5.mediaNode.pause();&#13;
                if (_this5.onTimeUpdateCallback) {&#13;
                    _this5.mediaNode.removeEventListener('timeupdate', _this5.onTimeUpdateCallback);&#13;
                    _this5.mediaNode.removeEventListener('ended', _this5.onTimeUpdateCallback);&#13;
                }&#13;
                resolve();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "setProgress",&#13;
        value: function setProgress(progress) {&#13;
            var _this6 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this6.mediaNode.currentTime = Math.round(_this6.duration * progress);&#13;
                resolve();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this._disableEventsHandling();&#13;
            this.mediaNode.src = "";&#13;
            this.mediaNode.remove();&#13;
            this.hasRecording = false;&#13;
            this.duration = null;&#13;
            this.mediaNode = this._createMediaNode();&#13;
            this.mediaNode.controls = false;&#13;
            this.$view.append(this.mediaNode);&#13;
            this._enableEventsHandling();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this._disableEventsHandling();&#13;
            this.stopPlaying();&#13;
            this.mediaNode.src = "";&#13;
            this.mediaNode.remove();&#13;
            this.hasRecording = null;&#13;
            this.duration = null;&#13;
            this.$view.remove();&#13;
            this.mediaNode = null;&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID, item) {&#13;
            this.eventBus = eventBus;&#13;
            this.sourceID = sourceID;&#13;
            this.item = item;&#13;
        }&#13;
    }, {&#13;
        key: "getCurrentTime",&#13;
        value: function getCurrentTime() {&#13;
            return this.mediaNode.currentTime;&#13;
        }&#13;
    }, {&#13;
        key: "setIsMlibro",&#13;
        value: function setIsMlibro(isMlibro) {&#13;
            this.isMlibro = isMlibro;&#13;
        }&#13;
    }, {&#13;
        key: "_enableEventsHandling",&#13;
        value: function _enableEventsHandling() {&#13;
            var _this7 = this;&#13;
&#13;
            this.mediaNode.onloadstart = function () {&#13;
                return _this7.onStartLoadingCallback();&#13;
            };&#13;
            this.mediaNode.onended = function () {&#13;
                return _this7.onEndPlayingCallback();&#13;
            };&#13;
            this.mediaNode.onplay = function () {&#13;
                return _this7._onPlayCallback();&#13;
            };&#13;
            this.mediaNode.onpause = function () {&#13;
                return _this7._onPausedCallback();&#13;
            };&#13;
&#13;
            if (this._isMobileSafari() || this._isIosMlibro() || this._isIOSWebViewUsingAppleWebKit()) {&#13;
                this.mediaNode.onloadedmetadata = function () {&#13;
                    return _this7.onEndLoadingCallback();&#13;
                };&#13;
            } else {&#13;
                this.mediaNode.oncanplay = function () {&#13;
                    return _this7.onEndLoadingCallback();&#13;
                };&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_disableEventsHandling",&#13;
        value: function _disableEventsHandling() {&#13;
            this.mediaNode.onloadstart = null;&#13;
            this.mediaNode.oncanplay = null;&#13;
            this.mediaNode.onended = null;&#13;
            this.mediaNode.onplay = function () {&#13;
                return null;&#13;
            };&#13;
            this.mediaNode.onpause = function () {&#13;
                return null;&#13;
            };&#13;
            this.mediaNode.onloadedmetadata = function () {};&#13;
        }&#13;
    }, {&#13;
        key: "_getDuration",&#13;
        value: function _getDuration() {&#13;
            var _this8 = this;&#13;
&#13;
            // faster resolution then&#13;
            // this.mediaNode.ondurationchange = () =&gt; this.onDurationChangeCallback(this.mediaNode.duration)&#13;
            return new Promise(function (resolve) {&#13;
                var playerMock = new Audio(_this8.mediaNode.src);&#13;
                playerMock.addEventListener("durationchange", function () {&#13;
                    if (this.duration != Infinity) {&#13;
                        resolve(this.duration);&#13;
                        playerMock.src = "";&#13;
                        playerMock.remove();&#13;
                    }&#13;
                }, false);&#13;
                playerMock.load();&#13;
                playerMock.currentTime = 24 * 60 * 60; // fake big time&#13;
                playerMock.volume = 0;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "_isIOSWebViewUsingAppleWebKit",&#13;
        value: function _isIOSWebViewUsingAppleWebKit() {&#13;
            var userAgent = window.navigator.userAgent.toLowerCase(),&#13;
                safari = /safari/.test(userAgent),&#13;
                ios = /iphone|ipod|ipad/.test(userAgent),&#13;
                appleWebKit = /applewebkit/.test(userAgent);&#13;
            var webView = ios &amp;&amp; !safari;&#13;
&#13;
            return webView &amp;&amp; appleWebKit;&#13;
        }&#13;
    }, {&#13;
        key: "_isMobileSafari",&#13;
        value: function _isMobileSafari() {&#13;
            return window.DevicesUtils.getBrowserVersion().toLowerCase().indexOf("safari") &gt; -1 &amp;&amp; window.MobileUtils.isSafariMobile(navigator.userAgent);&#13;
        }&#13;
    }, {&#13;
        key: "_isIosMlibro",&#13;
        value: function _isIosMlibro() {&#13;
            return this.isMlibro &amp;&amp; window.MobileUtils.isSafariMobile(navigator.userAgent);&#13;
        }&#13;
    }, {&#13;
        key: "_isNotOnlineResources",&#13;
        value: function _isNotOnlineResources(source) {&#13;
            return !(source.startsWith("www.") || source.startsWith("http://") || source.startsWith("https://"));&#13;
        }&#13;
    }, {&#13;
        key: "_onPlayCallback",&#13;
        value: function _onPlayCallback() {&#13;
            this._sendEventCallback('playing');&#13;
        }&#13;
    }, {&#13;
        key: "_onPausedCallback",&#13;
        value: function _onPausedCallback() {&#13;
            this._sendEventCallback('stop');&#13;
        }&#13;
    }, {&#13;
        key: "_sendEventCallback",&#13;
        value: function _sendEventCallback(value) {&#13;
            if (this.eventBus) {&#13;
                var eventData = {&#13;
                    'source': this.sourceID,&#13;
                    'item': this.item,&#13;
                    'value': value,&#13;
                    'score': ''&#13;
                };&#13;
                this.eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_createMediaNode",&#13;
        value: function _createMediaNode() {&#13;
            throw new Error("GetMediaNode accessor is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "_onTimeUpdateEvent",&#13;
        value: function _onTimeUpdateEvent(event) {&#13;
            if (this.onTimeUpdateCallback) {&#13;
                this.onTimeUpdateCallback(event);&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return BasePlayer;&#13;
}(_Player2.Player);&#13;
&#13;
/***/ }),&#13;
/* 46 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Player = exports.Player = function () {&#13;
    function Player() {&#13;
        _classCallCheck(this, Player);&#13;
&#13;
        if (this.constructor === Player) throw new Error("Cannot create an instance of Player abstract class");&#13;
    }&#13;
&#13;
    _createClass(Player, [{&#13;
        key: "setRecording",&#13;
        value: function setRecording(source) {&#13;
            throw new Error("SetRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            throw new Error("StartPlaying method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            throw new Error("StopPlaying method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "pausePlaying",&#13;
        value: function pausePlaying() {&#13;
            throw new Error("pausePlaying method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setProgress",&#13;
        value: function setProgress(progress) {&#13;
            throw new Error("setProgress method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "startStreaming",&#13;
        value: function startStreaming(stream) {&#13;
            throw new Error("StartStreaming method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopStreaming",&#13;
        value: function stopStreaming() {&#13;
            throw new Error("StopStreaming method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "getCurrentTime",&#13;
        value: function getCurrentTime() {&#13;
            throw new Error("getCurrentTime method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            throw new Error("setEventBus method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setIsMlibro",&#13;
        value: function setIsMlibro(isMlibro) {&#13;
            throw new Error("setIsMlibro method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            throw new Error("Reset method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            throw new Error("Destroy method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "onStartLoading",&#13;
        set: function set(callback) {&#13;
            this.onStartLoadingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onEndLoading",&#13;
        set: function set(callback) {&#13;
            this.onEndLoadingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onEndPlaying",&#13;
        set: function set(callback) {&#13;
            this.onEndPlayingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onDurationChange",&#13;
        set: function set(callback) {&#13;
            this.onDurationChangeCallback = function (duration) {&#13;
                return callback(duration);&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onTimeUpdate",&#13;
        set: function set(callback) {&#13;
            this.onTimeUpdateCallback = function (event) {&#13;
                return callback(event);&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return Player;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 47 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.DefaultRecordingPlayButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(1);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var DefaultRecordingPlayButton = exports.DefaultRecordingPlayButton = function (_Button) {&#13;
    _inherits(DefaultRecordingPlayButton, _Button);&#13;
&#13;
    function DefaultRecordingPlayButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state,&#13;
            defaultRecording = _ref.defaultRecording;&#13;
&#13;
        _classCallCheck(this, DefaultRecordingPlayButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (DefaultRecordingPlayButton.__proto__ || Object.getPrototypeOf(DefaultRecordingPlayButton)).call(this, $view));&#13;
&#13;
        _this.state = state;&#13;
        _this.defaultRecording = defaultRecording;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(DefaultRecordingPlayButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(DefaultRecordingPlayButton.prototype.__proto__ || Object.getPrototypeOf(DefaultRecordingPlayButton.prototype), "destroy", this).call(this);&#13;
            this.state = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if ((this.state.isLoaded() || this.state.isLoadedDefaultRecording()) &amp;&amp; this.defaultRecording != "") this._startPlaying();else if (this.state.isPlayingDefaultRecording()) this._stopPlaying();&#13;
        }&#13;
    }, {&#13;
        key: "_startPlaying",&#13;
        value: function _startPlaying() {&#13;
            this.$view.addClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onStartPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_stopPlaying",&#13;
        value: function _stopPlaying() {&#13;
            this.$view.removeClass(_CssClasses.CSS_CLASSES.SELECTED);&#13;
            this.onStopPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "onStartPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStartPlayingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStopPlayingCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return DefaultRecordingPlayButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 48 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.DefaultKeyboardController = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BaseKeyboardController = __webpack_require__(6);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var DefaultKeyboardController = exports.DefaultKeyboardController = function (_BaseKeyboardControll) {&#13;
    _inherits(DefaultKeyboardController, _BaseKeyboardControll);&#13;
&#13;
    function DefaultKeyboardController() {&#13;
        _classCallCheck(this, DefaultKeyboardController);&#13;
&#13;
        return _possibleConstructorReturn(this, (DefaultKeyboardController.__proto__ || Object.getPrototypeOf(DefaultKeyboardController)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(DefaultKeyboardController, [{&#13;
        key: "markDefaultRecordingPlayButton",&#13;
        value: function markDefaultRecordingPlayButton() {&#13;
            this.markCurrentElement(0);&#13;
        }&#13;
    }, {&#13;
        key: "markRecordingButton",&#13;
        value: function markRecordingButton() {&#13;
            this.markCurrentElement(1);&#13;
        }&#13;
    }, {&#13;
        key: "markPlayButton",&#13;
        value: function markPlayButton() {&#13;
            this.markCurrentElement(2);&#13;
        }&#13;
    }, {&#13;
        key: "readElement",&#13;
        value: function readElement(element) {&#13;
            var $element = this.getTarget(element, false);&#13;
&#13;
            if ($element.hasClass(_CssClasses.CSS_CLASSES.DEFAULT_RECORDING_PLAY_BUTTON)) {&#13;
                this._speakDefaultRecordingPlayButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.RECORDING_BUTTON)) {&#13;
                this._speakRecordingButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.PLAY_BUTTON)) {&#13;
                this._speakPlayButtonTTS($element);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_speakDefaultRecordingPlayButtonTTS",&#13;
        value: function _speakDefaultRecordingPlayButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.DefaultRecordingPlayButton);&#13;
&#13;
            if (this._activationState.isInactive()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }]);&#13;
&#13;
    return DefaultKeyboardController;&#13;
}(_BaseKeyboardController.BaseKeyboardController);&#13;
&#13;
/***/ }),&#13;
/* 49 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.ExtendedKeyboardController = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _BaseKeyboardController = __webpack_require__(6);&#13;
&#13;
var _CssClasses = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var ExtendedKeyboardController = exports.ExtendedKeyboardController = function (_BaseKeyboardControll) {&#13;
    _inherits(ExtendedKeyboardController, _BaseKeyboardControll);&#13;
&#13;
    function ExtendedKeyboardController(elements, columnsCount, model, mediaState, activationState, speak, speakAndExecuteCallback) {&#13;
        _classCallCheck(this, ExtendedKeyboardController);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (ExtendedKeyboardController.__proto__ || Object.getPrototypeOf(ExtendedKeyboardController)).call(this, elements, columnsCount, model, mediaState, activationState, speak, speakAndExecuteCallback));&#13;
&#13;
        _this._resetDialogLabels = model.resetDialogLabels;&#13;
        _this._disableRecording = model.disableRecording;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(ExtendedKeyboardController, [{&#13;
        key: "markRecordingButton",&#13;
        value: function markRecordingButton() {&#13;
            this.markCurrentElement(0);&#13;
        }&#13;
    }, {&#13;
        key: "markPlayButton",&#13;
        value: function markPlayButton() {&#13;
            this.markCurrentElement(1);&#13;
        }&#13;
    }, {&#13;
        key: "markResetButton",&#13;
        value: function markResetButton() {&#13;
            this.markCurrentElement(2);&#13;
        }&#13;
    }, {&#13;
        key: "markDownloadButton",&#13;
        value: function markDownloadButton() {&#13;
            this.markCurrentElement(3);&#13;
        }&#13;
    }, {&#13;
        key: "_performFirstEnterEvent",&#13;
        value: function _performFirstEnterEvent() {&#13;
            this.keyboardNavigationActive = true;&#13;
            var $element = this.getTarget(this.keyboardNavigationElements[0], false);&#13;
&#13;
            if (this._isKeyboardNavigationBlocked()) {&#13;
                this._markActiveElement();&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.DIALOG_TEXT)) {&#13;
                this.markDialogTextAndReadResetDialogTTS();&#13;
            } else {&#13;
                this._markAndReadFirstDisplayedElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "markDialogTextAndReadResetDialogTTS",&#13;
        value: function markDialogTextAndReadResetDialogTTS() {&#13;
            this.markCurrentElement(0);&#13;
            this._speakResetDialogTTS();&#13;
        }&#13;
    }, {&#13;
        key: "readElement",&#13;
        value: function readElement(element) {&#13;
            var $element = this.getTarget(element, false);&#13;
&#13;
            if ($element.hasClass(_CssClasses.CSS_CLASSES.RECORDING_BUTTON)) {&#13;
                this._speakRecordingButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.PLAY_BUTTON)) {&#13;
                this._speakPlayButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.RESET_BUTTON)) {&#13;
                this._speakResetButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.DOWNLOAD_BUTTON)) {&#13;
                this._speakDownloadButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.DIALOG_TEXT)) {&#13;
                this._speakDialogTextTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.CONFIRM_BUTTON)) {&#13;
                this._speakConfirmButtonTTS($element);&#13;
            } else if ($element.hasClass(_CssClasses.CSS_CLASSES.DENY_BUTTON)) {&#13;
                this._speakDenyButtonTTS($element);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_speakResetButtonTTS",&#13;
        value: function _speakResetButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.ResetButton);&#13;
&#13;
            if (this._activationState.isInactive()) {&#13;
                this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.Disabled);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_speakDownloadButtonTTS",&#13;
        value: function _speakDownloadButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.DownloadButton);&#13;
&#13;
            if (this._activationState.isInactive()) {&#13;
                this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.Disabled);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_speakResetDialogTTS",&#13;
        value: function _speakResetDialogTTS() {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushResetDialogTextMessageToTextVoiceObject(textVoiceObject);&#13;
            this._pushResetDialogConfirmMessageToTextVoiceObject(textVoiceObject);&#13;
            this._pushResetDialogDenyMessageToTextVoiceObject(textVoiceObject);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_speakDialogTextTTS",&#13;
        value: function _speakDialogTextTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, this.speechTexts.ResetDialog);&#13;
&#13;
            this._pushResetDialogTextMessageToTextVoiceObject(textVoiceObject);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_pushResetDialogTextMessageToTextVoiceObject",&#13;
        value: function _pushResetDialogTextMessageToTextVoiceObject(textVoiceObject) {&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, this._resetDialogLabels.resetDialogText.resetDialogLabel);&#13;
        }&#13;
    }, {&#13;
        key: "_speakConfirmButtonTTS",&#13;
        value: function _speakConfirmButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushResetDialogConfirmMessageToTextVoiceObject(textVoiceObject);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_pushResetDialogConfirmMessageToTextVoiceObject",&#13;
        value: function _pushResetDialogConfirmMessageToTextVoiceObject(textVoiceObject) {&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, this._resetDialogLabels.resetDialogConfirm.resetDialogLabel);&#13;
        }&#13;
    }, {&#13;
        key: "_speakDenyButtonTTS",&#13;
        value: function _speakDenyButtonTTS($element) {&#13;
            var textVoiceObject = [];&#13;
&#13;
            this._pushResetDialogDenyMessageToTextVoiceObject(textVoiceObject);&#13;
&#13;
            if (this._isAddonDisabled()) {&#13;
                this._pushDisabledMessageToTextVoiceObject(textVoiceObject);&#13;
            }&#13;
&#13;
            this._speak(textVoiceObject);&#13;
        }&#13;
    }, {&#13;
        key: "_pushResetDialogDenyMessageToTextVoiceObject",&#13;
        value: function _pushResetDialogDenyMessageToTextVoiceObject(textVoiceObject) {&#13;
            this._pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, this._resetDialogLabels.resetDialogDeny.resetDialogLabel);&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecording",&#13;
        value: function onStopRecording() {&#13;
            _get(ExtendedKeyboardController.prototype.__proto__ || Object.getPrototypeOf(ExtendedKeyboardController.prototype), "onStopRecording", this).call(this);&#13;
&#13;
            if (!this._disableRecording) {&#13;
                this.nextElement();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecordingWhenSoundEffect",&#13;
        value: function onStopRecordingWhenSoundEffect() {&#13;
            _get(ExtendedKeyboardController.prototype.__proto__ || Object.getPrototypeOf(ExtendedKeyboardController.prototype), "onStopRecordingWhenSoundEffect", this).call(this);&#13;
&#13;
            if (!this._disableRecording) {&#13;
                this.nextElement();&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return ExtendedKeyboardController;&#13;
}(_BaseKeyboardController.BaseKeyboardController);&#13;
&#13;
/***/ }),&#13;
/* 50 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MP3ConvertHandler = exports.MP3ConvertHandler = function () {&#13;
    function MP3ConvertHandler(playerController) {&#13;
        _classCallCheck(this, MP3ConvertHandler);&#13;
&#13;
        this.worker = null;&#13;
        this.scriptURL = null;&#13;
        this.isValid = false;&#13;
        this.validationTimoutID = null;&#13;
        this.origin = document.location.origin;&#13;
&#13;
        if (!this.isSupported()) {&#13;
            console.log('Your browser doesn\'t support web workers.');&#13;
            return;&#13;
        }&#13;
        var context = playerController.getContextMetadata();&#13;
        if (context != null &amp;&amp; "rootDirectory" in context) {&#13;
            this.origin = context["rootDirectory"];&#13;
        }&#13;
&#13;
        var scriptBlob = this.createBlobWithScript();&#13;
        this.scriptURL = URL.createObjectURL(scriptBlob);&#13;
        this._validateScript();&#13;
    }&#13;
&#13;
    _createClass(MP3ConvertHandler, [{&#13;
        key: "isSupported",&#13;
        value: function isSupported() {&#13;
            return !!window.Worker;&#13;
        }&#13;
    }, {&#13;
        key: "isWorkerExist",&#13;
        value: function isWorkerExist() {&#13;
            return !!this.worker;&#13;
        }&#13;
    }, {&#13;
        key: "_validateScript",&#13;
        value: function _validateScript() {&#13;
            var _this = this;&#13;
&#13;
            var self = this;&#13;
            return new Promise(function (resolve) {&#13;
                _this.worker = new Worker(_this.scriptURL);&#13;
                _this.worker.onmessage = function (e) {&#13;
                    if (e.data === "WORKER STARTED") {&#13;
                        self.isValid = true;&#13;
                        resolve(true);&#13;
                    } else {&#13;
                        console.log('Error occurred for Web worker in Media Recorder: ' + e.data);&#13;
                        self.isValid = false;&#13;
                        resolve(false);&#13;
                    }&#13;
                };&#13;
                _this.worker.postMessage({&#13;
                    cmd: "validate",&#13;
                    origin: self.origin&#13;
                });&#13;
                _this.validationTimoutID = setTimeout(function () {&#13;
                    if (!self.isValid) {&#13;
                        console.log('Lib for web worker in Media Recorder is unreachable.');&#13;
                        self.isValid = false;&#13;
                        _this.terminateWorkerProcess();&#13;
                        resolve(false);&#13;
                    }&#13;
                }, 5000);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "execute",&#13;
        value: function execute(numberOfChannels, sampleRate, sampleLength, leftChannelData, rightChannelData) {&#13;
            var _this2 = this;&#13;
&#13;
            return new Promise(function (resolve, reject) {&#13;
                if (!_this2.isValid) {&#13;
                    reject("Not valid worker");&#13;
                }&#13;
                if (_this2.isWorkerExist()) {&#13;
                    _this2.terminateWorkerProcess();&#13;
                }&#13;
                _this2.worker = new Worker(_this2.scriptURL);&#13;
                _this2.worker.onmessage = function (e) {&#13;
                    resolve(e.data);&#13;
                };&#13;
                _this2.worker.postMessage({&#13;
                    cmd: "start",&#13;
                    data: {&#13;
                        numberOfChannels: numberOfChannels,&#13;
                        sampleRate: sampleRate,&#13;
                        sampleLength: sampleLength,&#13;
                        leftChannelData: leftChannelData,&#13;
                        rightChannelData: rightChannelData&#13;
                    },&#13;
                    origin: _this2.origin&#13;
                });&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "createBlobWithScript",&#13;
        value: function createBlobWithScript() {&#13;
            var script = "\n            addEventListener(\"message\", function(e) {\n                let data = e.data;\n                if (!data.origin) {\n                    postMessage(\"Unknown origin\");\n                    return;\n                }\n\n                const lameScriptURL = data.origin + \"/media/icplayer/libs/lame.min.js\";\n                try {\n                    importScripts(lameScriptURL);\n                } catch (e) {\n                    postMessage(\"Library lame.min.js is unreachable\");\n                    return;\n                }\n\n                switch (data.cmd) {\n                    case \"validate\":\n                        postMessage(\"WORKER STARTED\");\n                        break;\n                    case \"start\":\n                        postMessage(_encode(\n                            data.data.numberOfChannels,\n                            data.data.sampleRate,\n                            data.data.sampleLength,\n                            data.data.leftChannelData,\n                            data.data.rightChannelData\n                        ));\n                        break;\n                    default:\n                        postMessage(\"Unknown command: \" + data.cmd);\n                };\n            }, false);\n\n            function _encode(channels, sampleRate, sampleLength, leftChannelData, rightChannelData) {\n                let buffer = [];\n                let mp3enc = new lamejs.Mp3Encoder(channels, sampleRate, 96); //third value determinate bitrate\n\n                const maxSamples = 1152;\n                for (let i = 0; i &lt; sampleLength; i += maxSamples) {\n                    let leftChunk = leftChannelData.subarray(i, i + maxSamples);\n                    let rightChunk = rightChannelData.subarray(i, i + maxSamples);\n\n                    let mp3buf = mp3enc.encodeBuffer(leftChunk, rightChunk);\n                    if (mp3buf.length &gt; 0) {\n                        buffer.push(new Int8Array(mp3buf));\n                    }\n                }\n                let d = mp3enc.flush();\n                if (d.length &gt; 0){\n                    buffer.push(new Int8Array(d));\n                }\n\n                return new Blob(buffer, {type: \"audio/mpeg-3\"});\n            }\n        ";&#13;
            return new Blob([script], { type: 'application/javascript' });&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            if (this.isWorkerExist()) {&#13;
                this.terminateWorkerProcess();&#13;
            }&#13;
            if (this.scriptURL) {&#13;
                URL.revokeObjectURL(this.scriptURL);&#13;
                this.scriptURL = null;&#13;
            }&#13;
            if (this.validationTimoutID) {&#13;
                clearTimeout(this.validationTimoutID);&#13;
                this.validationTimoutID = null;&#13;
            }&#13;
            this.isValid = false;&#13;
        }&#13;
    }, {&#13;
        key: "terminateWorkerProcess",&#13;
        value: function terminateWorkerProcess() {&#13;
            this.worker.terminate();&#13;
            this.worker = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return MP3ConvertHandler;&#13;
}();&#13;
&#13;
/***/ })&#13;
/******/ ]);&#13;
</presenter></addon>