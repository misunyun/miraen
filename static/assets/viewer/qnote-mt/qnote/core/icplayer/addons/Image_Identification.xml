<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Identification" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Image" nameLabel="Image_Identification_property_image" type="image"/>
		<property name="SelectionCorrect" nameLabel="Image_Identification_property_selection_correct" type="boolean"/>
		<property name="Is Disabled" nameLabel="Image_Identification_property_is_disabled" type="boolean"/>
		<property name="Is not an activity" nameLabel="Image_Identification_property_is_not_an_activity" type="boolean"/>
		<property name="Block in error checking mode" nameLabel="Image_Identification_property_block_in_error_checking_mode" type="boolean"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="Image_Identification_property_block_wrong_answers" type="boolean"/>
		<property isLocalized="true" name="Alt text" nameLabel="Image_Identification_property_alt_text" type="string"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Image_Identification_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Image_Identification_property_speech_texts" type="staticlist">

            <property name="Selected" nameLabel="Image_Identification_selected" type="staticrow">
                <property name="Selected" nameLabel="Image_Identification_selected" type="string"/>
            </property>

            <property name="Deselected" nameLabel="Image_Identification_deselected" type="staticrow">
                <property name="Deselected" nameLabel="Image_Identification_deselected" type="string"/>
            </property>

            <property name="Correct" nameLabel="Image_Identification_correct" type="staticrow">
                <property name="Correct" nameLabel="Image_Identification_correct" type="string"/>
            </property>

            <property name="Wrong" nameLabel="Image_Identification_wrong" type="staticrow">
                <property name="Wrong" nameLabel="Image_Identification_wrong" type="string"/>
            </property>

        </property>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
	</model>
<css>.image-identification-element-selected,&#13;
.image-identification-element-correct,&#13;
.image-identification-element-incorrect,&#13;
.image-identification-element-mouse-hover,&#13;
.image-identification-element-show-answers,&#13;
.image-identification-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.image-identification-background-image {&#13;
    border: 0 solid white;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background-size: 100%;&#13;
    background-position: 0 0;&#13;
}&#13;
&#13;
.printable-image-identification-element {&#13;
    width: 100%;&#13;
}&#13;
&#13;
.printable-image-identification-empty-div,&#13;
.printable-image-identification-empty-user-answer-div,&#13;
.printable-image-identification-empty-answer-div,&#13;
.printable-image-identification-selected-answer-div,&#13;
.printable-image-identification-selected-user-answer-div {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    position: relative;&#13;
    border: 3px solid #999;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable-image-identification-selected-answer-div::after {&#13;
    color: #999;&#13;
    content: "\2714";&#13;
}&#13;
.printable-image-identification-selected-user-answer-div::after {&#13;
    color: #000000;&#13;
    content: "\2714";&#13;
}&#13;
&#13;
.printable-image-identification-empty-correct-answer-div,&#13;
.printable-image-identification-empty-incorrect-answer-div&#13;
{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    position: relative;&#13;
    border: 3px solid #999;&#13;
    text-align: center;&#13;
}&#13;
.printable-image-identification-selected-correct-answer-div&#13;
{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    position: relative;&#13;
    border: 3px solid #090;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable-image-identification-selected-correct-answer-div::after {&#13;
    color: #090;&#13;
    content: "\2714";&#13;
}&#13;
&#13;
.printable-image-identification-selected-incorrect-answer-div&#13;
{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    position: relative;&#13;
    border: 3px solid #900;&#13;
    text-align: center;&#13;
}&#13;
&#13;
&#13;
.printable-image-identification-selected-incorrect-answer-div::after {&#13;
    color: #900;&#13;
    content: "\2718";&#13;
}&#13;
&#13;
.printable-image-identification-empty-img,&#13;
.printable-image-identification-selected-answer-img,&#13;
.printable-image-identification-empty-answer-img,&#13;
.printable-image-identification-selected-user-answer-img,&#13;
.printable-image-identification-empty-user-answer-img,&#13;
.printable-image-identification-empty-correct-answer-img,&#13;
.printable-image-identification-empty-incorrect-answer-img,&#13;
.printable-image-identification-selected-correct-answer-img,&#13;
.printable-image-identification-selected-incorrect-answer-img {&#13;
    margin-left: 30px;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonImage_Identification_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
    presenter.printableState = null;&#13;
    presenter.printableStateMode = 0;&#13;
    presenter.GSAcounter = 0;&#13;
    presenter.PRINTABLE_STATE_MODE = {&#13;
        EMPTY: 0,&#13;
        SHOW_ANSWERS: 1,&#13;
        SHOW_USER_ANSWERS: 2,&#13;
        CHECK_ANSWERS: 3&#13;
    };&#13;
&#13;
    presenter.lastEvent = null;&#13;
    presenter.isDisabled = false;&#13;
&#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "image-identification-element",&#13;
        SELECTED : "image-identification-element-selected",&#13;
        CORRECT : "image-identification-element-correct",&#13;
        EMPTY : "image-identification-element-empty",&#13;
        INCORRECT : "image-identification-element-incorrect",&#13;
        MOUSE_HOVER : "image-identification-element-mouse-hover",&#13;
        SHOW_ANSWERS : "image-identification-element-show-answers",&#13;
        MOUSE_HOVER_SELECTED: "image-identification-element-selected-mouse-hover",&#13;
        IS_DISABLED: "image-identification-element-disabled"&#13;
    };&#13;
&#13;
    /**&#13;
     * @return {string}&#13;
     */&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.SELECTED + " " + CSS_CLASSES.CORRECT + " " +&#13;
            CSS_CLASSES.EMPTY + " " + CSS_CLASSES.INCORRECT + " " + CSS_CLASSES.MOUSE_HOVER + " " +&#13;
            CSS_CLASSES.SHOW_ANSWERS + " " + CSS_CLASSES.MOUSE_HOVER_SELECTED + " " + CSS_CLASSES.IS_DISABLED;&#13;
    }&#13;
&#13;
    function clickLogic() {&#13;
        if(presenter.isDisabled){&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
        presenter.toggleSelectionState(true);&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        var score = presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.configuration.blockWrongAnswers) {&#13;
            presenter.toggleSelectionState(false);&#13;
            applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.handleMouseActions = function() {&#13;
        var $element = presenter.$view.find('div:first');&#13;
&#13;
        $element.hover(&#13;
            function() {&#13;
                if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
&#13;
                if (presenter.configuration.isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass('image-identification-element-mouse-hover');&#13;
                    if(presenter.configuration.isSelected){&#13;
                        $(this).addClass('image-identification-element-selected-mouse-hover');&#13;
                    }&#13;
                    presenter.isDisabled ? presenter.disable() : presenter.enable();&#13;
                }&#13;
            },&#13;
            function() {&#13;
                if (presenter.configuration.isErrorCheckMode &amp;&amp; (presenter.configuration.isActivity || presenter.configuration.isBlockedInErrorCheckingMode)) return;&#13;
&#13;
                if (presenter.configuration.isHoverEnabled) {&#13;
                    $(this).removeClass(CSS_CLASSESToString());&#13;
                    $(this).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
                    presenter.isDisabled ? presenter.disable() : presenter.enable();&#13;
                }&#13;
            }&#13;
        );&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart') || MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
            connectTouchHandlers($element);&#13;
        }&#13;
&#13;
        connectClickHandlers($element);&#13;
    };&#13;
&#13;
    function connectClickHandlers($element) {&#13;
        $element.on('mousedown', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $element.on ('mouseup', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                clickLogic();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function connectTouchHandlers($element) {&#13;
        $element.on('touchstart', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
&#13;
            if ( presenter.lastEvent.type != e.type ) {&#13;
                clickLogic();&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function setViewDimensions(model) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function loadImage(imageSrc, isPreview) {&#13;
        var image = document.createElement('img');&#13;
        $(image).attr('src', imageSrc);&#13;
        $(image).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
        presenter.$view.html(image);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault || isPreview);&#13;
&#13;
        $(image).load(function () {&#13;
            var elementDimensions = DOMOperationsUtils.getOuterDimensions(this);&#13;
            var elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
            $(this).remove();&#13;
&#13;
            var element = document.createElement('div');&#13;
            var innerElement = document.createElement('div');&#13;
            $(element).addClass(presenter.configuration.isSelected ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
            $(element).css({&#13;
                width:(presenter.$view.width() - elementDistances.horizontal) + 'px',&#13;
                height:(presenter.$view.height() - elementDistances.vertical) + 'px'&#13;
            });&#13;
&#13;
            $(innerElement).addClass('image-identification-background-image');&#13;
            $(innerElement).css({&#13;
                backgroundImage:"url('" + imageSrc + "')",&#13;
                width:$(element).width() + 'px',&#13;
                height:$(element).height() + 'px',&#13;
                color: 'rgba(0,0,0,0.0)'&#13;
            });&#13;
&#13;
            if(presenter.configuration.altText !== undefined) {&#13;
                $(innerElement).html(presenter.configuration.altText);&#13;
            }&#13;
&#13;
            $(element).html(innerElement);&#13;
            presenter.$view.html(element);&#13;
&#13;
            if (!isPreview) {&#13;
                presenter.handleMouseActions();&#13;
            }&#13;
&#13;
            presenter.configuration.isDisabled ? presenter.disable() : presenter.enable();&#13;
&#13;
            presenter.$view.trigger("onLoadImageCallbackEnd", []);&#13;
            presenter.configuration.isImageLoaded = true;&#13;
&#13;
            $(element).on("click", function(e){&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.$view = $(view);&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        setViewDimensions(model);&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(presenter.configuration.imageSrc)) {&#13;
            return;&#13;
        }&#13;
&#13;
        loadImage(presenter.configuration.imageSrc, preview);&#13;
        presenter.setTabindex(presenter.$view, presenter.configuration.isTabindexEnabled);&#13;
&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var newSpeechTexts = setSpeechTexts(model['speechTexts']);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]);&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isSelected: false,&#13;
            imageSrc: model.Image,&#13;
            shouldBeSelected: ModelValidationUtils.validateBoolean(model.SelectionCorrect),&#13;
            isHoverEnabled: true,&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model["Is not an activity"]),&#13;
            isBlockedInErrorCheckingMode: ModelValidationUtils.validateBoolean(model["Block in error checking mode"]),&#13;
            isErrorCheckMode: false,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model.blockWrongAnswers),&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            altText: model["Alt text"],&#13;
            isDisabled: ModelValidationUtils.validateBoolean(model["Is Disabled"]),&#13;
            langTag: model["langAttribute"],&#13;
            speechTexts: newSpeechTexts&#13;
        };&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = '';&#13;
        }&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {&#13;
                Selected: {Selected: 'Selected'},&#13;
                Deselected: {Deselected: 'Deselected'},&#13;
                Correct: {Correct: 'Correct'},&#13;
                Wrong: {Wrong: 'Wrong'}&#13;
            };&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        var newSpeechTexts = {&#13;
            selected:  'selected',&#13;
            deselected: 'deselected',&#13;
            correct: 'correct',&#13;
            wrong: 'wrong'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return newSpeechTexts;&#13;
        }&#13;
&#13;
        newSpeechTexts = {&#13;
            selected:     getSpeechTextProperty(speechTexts['Selected']['Selected'], newSpeechTexts.selected),&#13;
            deselected:   getSpeechTextProperty(speechTexts['Deselected']['Deselected'], newSpeechTexts.deselected),&#13;
            correct:      getSpeechTextProperty(speechTexts['Correct']['Correct'], newSpeechTexts.correct),&#13;
            wrong:        getSpeechTextProperty(speechTexts['Wrong']['Wrong'], newSpeechTexts.wrong)&#13;
        };&#13;
&#13;
        return newSpeechTexts;&#13;
    }&#13;
&#13;
    function applySelectionStyle(selected, selectedClass, unselectedClass) {&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(selected ? selectedClass : unselectedClass);&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.configuration.isErrorCheckMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isSelected': presenter.isSelected,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'markAsEmpty': presenter.markAsEmpty,&#13;
            'removeMark': presenter.removeMark,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'hideAnswers': presenter.hideAnswers,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.isDisabled = true;&#13;
        var $element = presenter.$view.find('div:first');&#13;
        $($element).addClass('image-identification-element-disabled');&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.isDisabled = false;&#13;
        var $element = presenter.$view.find('div:first');&#13;
        $($element).removeClass('image-identification-element-disabled');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.eventBus = playerController.getEventBus();&#13;
        addonID = model.ID;&#13;
&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        var events = ['ShowAnswers', 'HideAnswers', 'GradualShowAnswers', 'GradualHideAnswers'];&#13;
        for (var i = 0; i &lt; events.length; i++) {&#13;
            presenter.eventBus.addEventListener(events[i], this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled ? presenter.disable() : presenter.enable();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        presenter.isDisabled ? presenter.disable() : presenter.enable()&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        if (!presenter.configuration.isActivity) return;&#13;
&#13;
        if (presenter.configuration.isSelected) {&#13;
            applySelectionStyle(presenter.configuration.isSelected === presenter.configuration.shouldBeSelected, CSS_CLASSES.CORRECT, CSS_CLASSES.INCORRECT);&#13;
        } else {&#13;
            applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
&#13;
        presenter.isDisabled ? presenter.disable() : presenter.enable()&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (!presenter.configuration.shouldBeSelected) {&#13;
            return presenter.configuration.isSelected ? 1 : 0;&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (presenter.configuration.shouldBeSelected) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        if (presenter.configuration.shouldBeSelected) {&#13;
            return presenter.configuration.isSelected ? 1 : 0;&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isSelected: presenter.configuration.isSelected,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isDisabled: presenter.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    function loadImageEndCallback() {&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.isDisabled ? presenter.disable() : presenter.enable();&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.configuration.isSelected = state.isSelected;&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
&#13;
        presenter.$view.bind("onLoadImageCallbackEnd", function () {&#13;
            if(state.isDisabled !== undefined){&#13;
                presenter.isDisabled = state.isDisabled;&#13;
            }&#13;
            loadImageEndCallback();&#13;
        });&#13;
&#13;
        if (presenter.configuration.isImageLoaded) {&#13;
            if(state.isDisabled !== undefined){&#13;
                presenter.isDisabled = state.isDisabled;&#13;
            }&#13;
            loadImageEndCallback();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function(isSelected, shouldBeSelected) {&#13;
        var score;&#13;
        if (presenter.configuration.isActivity){&#13;
            score = shouldBeSelected ? '1' : '0';&#13;
        } else {&#13;
            score = 0;&#13;
        }&#13;
&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : '',&#13;
            value : isSelected ? '1' : '0',&#13;
            score : score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerSelectionEvent = function(isSelected, shouldBeSelected) {&#13;
        var eventData = this.createEventData(isSelected, shouldBeSelected);&#13;
&#13;
        if (playerController != null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.select = function (dontSendEvent) {&#13;
        presenter.configuration.isSelected = true;&#13;
        if (!dontSendEvent) {&#13;
            presenter.triggerSelectionEvent(true, presenter.configuration.shouldBeSelected);&#13;
        }&#13;
        applySelectionStyle(true, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.deselect = function (dontSendEvent) {&#13;
        presenter.configuration.isSelected = false;&#13;
        if (!dontSendEvent) {&#13;
            presenter.triggerSelectionEvent(false, presenter.configuration.shouldBeSelected);&#13;
        }&#13;
        applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.toggleSelectionState = function(shouldSendEvent) {&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
&#13;
        if(shouldSendEvent){&#13;
            presenter.triggerSelectionEvent(presenter.configuration.isSelected, presenter.configuration.shouldBeSelected);&#13;
        }&#13;
&#13;
        if (isWCAGOn) {&#13;
            var speechVoices = [];&#13;
            if (presenter.configuration.isSelected) {&#13;
                speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.selected));&#13;
            } else {&#13;
                speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.deselected));&#13;
            }&#13;
            speak(speechVoices);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.CORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.INCORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        presenter.configuration.isHoverEnabled = false;&#13;
        presenter.configuration.isMarked = true;&#13;
&#13;
        applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.removeMark = function() {&#13;
        if (!presenter.configuration.isMarked) return;&#13;
&#13;
        presenter.configuration.isHoverEnabled = true;&#13;
        presenter.configuration.isMarked = false;&#13;
&#13;
        // Selection can be changed only in activity mode.&#13;
        // When module is not in activity mode we want to be able to restore selection after removing mark classes&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
&#13;
        applySelectionStyle(presenter.configuration.isSelected, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        if(presenter.configuration.shouldBeSelected) {&#13;
            return 1;&#13;
        }&#13;
        return 0;&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName === "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        } else if(eventName === "GradualShowAnswers") {&#13;
            presenter.GSAcounter++;&#13;
            if (!presenter.isGradualShowAnswersActive) {&#13;
                presenter.isGradualShowAnswersActive = true;&#13;
            } &#13;
            if(presenter.GSAcounter === 1) presenter.hideStudentAnswersForGSA();&#13;
            if (data.moduleID === presenter.configuration.addonID) {&#13;
                presenter.showAnswers();&#13;
            }&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.hideAnswers();&#13;
            presenter.isGradualShowAnswersActive = false;&#13;
        }&#13;
    };&#13;
&#13;
    function applySelectionStyleShowAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
        $(element).addClass(style);&#13;
    }&#13;
&#13;
    function applySelectionStyleHideAnswers (style){&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(style);&#13;
    }&#13;
&#13;
    presenter.hideStudentAnswersForGSA = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        presenter.$view.find('.image-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("image-identification-element was-selected");&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(!presenter.configuration.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        presenter.$view.find('.image-identification-element-incorrect').removeClass(CSS_CLASSES.INCORRECT).addClass("image-identification-element was-selected");&#13;
        presenter.$view.find('.image-identification-element-correct').removeClass(CSS_CLASSES.CORRECT).addClass("image-identification-element was-selected");&#13;
&#13;
        if(presenter.configuration.shouldBeSelected){&#13;
            applySelectionStyleShowAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
        }else{&#13;
            presenter.$view.find('.image-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("image-identification-element was-selected");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(!presenter.configuration.isActivity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyleHideAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
&#13;
         var elementWasSelected = presenter.$view.find('.was-selected');&#13;
         $(elementWasSelected).addClass(CSS_CLASSES.SELECTED).removeClass("was-selected");&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.GSAcounter = 0;&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        event.preventDefault();&#13;
&#13;
        if (keycode === window.KeyboardControllerKeys.SPACE) {&#13;
            clickLogic();&#13;
        } else if (keycode === window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.readAltText();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setTabindex = function (element, isTabindexEnabled) {&#13;
        var tabindexValue = isTabindexEnabled ? "0" : "-1";&#13;
        element.attr("tabindex", tabindexValue);&#13;
    };&#13;
&#13;
    presenter.readAltText = function() {&#13;
        var speechVoices = [];&#13;
        speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.altText, presenter.configuration.langTag));&#13;
&#13;
        if( (presenter.configuration.isSelected &amp;&amp; !presenter.isShowAnswersActive) || (presenter.isShowAnswersActive &amp;&amp; presenter.configuration.shouldBeSelected)) {&#13;
            speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.selected));&#13;
        }&#13;
&#13;
        if( presenter.$view.find('.' + CSS_CLASSES.CORRECT).size() &gt; 0) {&#13;
            speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.correct));&#13;
        } else if( presenter.$view.find('.' + CSS_CLASSES.INCORRECT).size() &gt; 0) {&#13;
            speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.wrong));&#13;
        }&#13;
        speak(speechVoices);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isEnterable = function() {return false};&#13;
&#13;
    function isPrintableEmptyAnswersStateMode () {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
    }&#13;
    function isPrintableShowAnswersStateMode () {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;&#13;
    }&#13;
    function isPrintableShowUserAnswersStateMode () {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;&#13;
    }&#13;
&#13;
    function chosePrintableStateMode(showAnswers) {&#13;
        if (presenter.printableState) {&#13;
            presenter.printableStateMode = showAnswers ? presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS : presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;&#13;
        }&#13;
        else {&#13;
            presenter.printableStateMode = showAnswers ? presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS : presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
        }        &#13;
    }&#13;
&#13;
    function setViewAndImgClasses(viewClass, imageClass, $img, $checkbox) {&#13;
        const prefix = 'printable-image-identification';&#13;
        const viewClassName = `${prefix}-${viewClass}`;&#13;
        const imageClassName = `${prefix}-${imageClass}`;&#13;
        $checkbox.addClass(viewClassName);&#13;
        $img.addClass(imageClassName);&#13;
    }&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
        presenter.printableState = JSON.parse(state);&#13;
    }&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        chosePrintableStateMode(showAnswers);&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.$view = $("&lt;div&gt;&lt;/div&gt;");&#13;
        presenter.$view.attr("id", presenter.configuration.addonID);&#13;
        presenter.$view.addClass("printable_addon_Image_Identification");&#13;
&#13;
        loadImage(presenter.configuration.imageSrc, true);&#13;
        const $img = presenter.$view.find('.image-identification-element');&#13;
        $img.removeClass('image-identification-element');&#13;
&#13;
        presenter.$view.prepend("&lt;div class='checkbox-identifier'&gt;&lt;/div&gt;")&#13;
        const $checkbox = presenter.$view.find('.checkbox-identifier')&#13;
        $checkbox.removeClass('checkbox-identifier');&#13;
&#13;
        if (isPrintableEmptyAnswersStateMode()) {          &#13;
            setViewAndImgClasses('empty-div', 'empty-img', $img, $checkbox);                               // EMPTY STATE&#13;
        } else if (isPrintableShowAnswersStateMode()) {                                             // SHOW ANSWERS&#13;
            if (presenter.configuration.shouldBeSelected) {&#13;
                setViewAndImgClasses('selected-answer-div', 'selected-answer-img', $img, $checkbox);&#13;
            } else {&#13;
                setViewAndImgClasses('empty-answer-div', 'empty-answer-img', $img, $checkbox);&#13;
            }&#13;
        } else if (isPrintableShowUserAnswersStateMode()) {                                           // SHOW USER ANSWERS&#13;
            if (presenter.printableState.isSelected) {&#13;
                setViewAndImgClasses('selected-user-answer-div', 'selected-user-answer-img', $img, $checkbox);&#13;
            } else {&#13;
                setViewAndImgClasses('empty-user-answer-div', 'empty-user-answer-img', $img, $checkbox);&#13;
            }&#13;
        } else {                                                                                        // CHECK USER ANSWERS&#13;
            if (!presenter.printableState.isSelected &amp;&amp; !presenter.configuration.shouldBeSelected) {&#13;
                setViewAndImgClasses('empty-correct-answer-div', 'empty-correct-answer-img', $img, $checkbox);&#13;
            } else if (!presenter.printableState.isSelected &amp;&amp; presenter.configuration.shouldBeSelected) {&#13;
                setViewAndImgClasses('empty-incorrect-answer-div', 'empty-incorrect-answer-img', $img, $checkbox);&#13;
            } else if (presenter.printableState.isSelected &amp;&amp; presenter.configuration.shouldBeSelected) {&#13;
                setViewAndImgClasses('selected-correct-answer-div', 'selected-correct-answer-img', $img, $checkbox);&#13;
            } else {&#13;
                setViewAndImgClasses('selected-incorrect-answer-div', 'selected-incorrect-answer-img', $img, $checkbox);&#13;
            }&#13;
        }&#13;
&#13;
        return presenter.$view[0].outerHTML;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>