<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="IWB_Toolbar" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Floating Images" name="floatingImages" nameLabel="IWB_Toolbar_property_floating_images" type="list">
            <property name="Image" nameLabel="IWB_Toolbar_property_image" type="image"/>
        </property>
        <property displayName="Width When Opened" name="widthWhenOpened" nameLabel="IWB_Toolbar_property_width_when_opened" type="string"/>
        <property name="Fixed Position" nameLabel="IWB_Toolbar_property_fixed_position" type="boolean"/>

        <property displayName="Show for pen" name="forPen" nameLabel="IWB_Toolbar_property_for_pen" type="{---, Color panel, Thickness panel}"/>
        <property displayName="Show for marker" name="forMarker" nameLabel="IWB_Toolbar_property_for_marker" type="{---, Color panel, Thickness panel}"/>
        <property displayName="Keep state and position" name="keepStateAndPosition" nameLabel="IWB_Toolbar_property_keep_state_and_position" type="boolean"/>
        <property name="Closed panel drawing" nameLabel="IWB_Toolbar_property_closed_panel_drawing" type="boolean"/>
        <property name="hasCustomButton" nameLabel="IWB_Toolbar_property_has_custom_button" type="boolean"/>
        <property isDefault="true" name="onCustomButtonSelected" nameLabel="IWB_Toolbar_property_on_custom_button_selected" type="event"/>
        <property name="onCustomButtonDeselected" nameLabel="IWB_Toolbar_property_on_custom_button_deselected" type="event"/>
        <property name="enableUndoRedo" nameLabel="IWB_Toolbar_property_enable_undo_redo" type="boolean"/>
        <property name="disableModuleZoom" nameLabel="IWB_Toolbar_property_disable_module_zoom" type="boolean"/>
        <property name="defaultZoom" nameLabel="IWB_Toolbar_property_default_zoom" type="string"/>
        <property displayName="Expansion direction" name="expansionDirection" nameLabel="IWB_Toolbar_expansion_direction" type="{right, left, up, down}"/>
    </model>
<css>.iwb-toolbar-panel {&#13;
    padding: 5px 25px;&#13;
    cursor: move;&#13;
    border-radius: 3px;&#13;
    min-width: 30px;&#13;
    min-height: 30px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.6);&#13;
    background-color: rgba(255, 255, 255, 0.8);&#13;
    background-image: url('resources/wb_panel_move_icon.svg'), url('resources/wb_panel_move_icon.svg');&#13;
    background-position: left center, right center;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.right {&#13;
    width: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.left {&#13;
    display: flex;&#13;
    flex-direction: row-reverse;&#13;
    flex-wrap: wrap;&#13;
    width: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up {&#13;
    display: flex;&#13;
    flex-direction: column-reverse;&#13;
    flex-wrap: wrap;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.down {&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
    flex-wrap: wrap;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.running {&#13;
    z-index: 1001;&#13;
    position: fixed;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button-separator {&#13;
    width: 1px;&#13;
    float: left;&#13;
    height: 30px;&#13;
    background-color: rgba(150, 150, 150, 0.6);&#13;
    margin-left: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .button-separator,&#13;
.iwb-toolbar-panel.down .button-separator {&#13;
    width: 30px;&#13;
    float: inherit;&#13;
    height: 1px;&#13;
    margin-top: 5px;&#13;
    margin-left: 0px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clicked {&#13;
    background-color: #7A7A7A;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clicked-lighter, .iwb-toolbar-panel .button-drawing-details.clicked-lighter, .iwb-toolbar-panel .button-floating-image.clicked-lighter {&#13;
    background-color: #CACACA;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button, .iwb-toolbar-panel .button-drawing-details, .iwb-toolbar-panel .button-floating-image {&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    float: left;&#13;
    text-align: center;&#13;
    border-radius: 3px;&#13;
    font-size: 16px;&#13;
    line-height: 30px;&#13;
    margin-left: 5px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .button,&#13;
.iwb-toolbar-panel.up .button-drawing-details,&#13;
.iwb-toolbar-panel.up .button-floating-image,&#13;
.iwb-toolbar-panel.down .button,&#13;
.iwb-toolbar-panel.down .button-drawing-details,&#13;
.iwb-toolbar-panel.down .button-floating-image {&#13;
    float: inherit;&#13;
    margin-top: 5px;&#13;
    margin-left: 0px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.left .button.first,&#13;
.iwb-toolbar-panel.right .button.first {&#13;
    margin-left: 0px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .button.first,&#13;
.iwb-toolbar-panel.down .button.first{&#13;
    margin-top: 0px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hidden,&#13;
.iwb-toolbar-panel .button-separator.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hovered {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.iwb-toolbar-mask {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.iwb-toolbar-mask.pen-mask {&#13;
    z-index: 99;&#13;
}&#13;
&#13;
.iwb_tmp_canvas {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.iwb-toolbar-mask.marker-mask {&#13;
    z-index: 100;&#13;
}&#13;
&#13;
.iwb-toolbar-mask canvas {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.iwb-toolbar-selection {&#13;
    border: 1px dotted #0000ff;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.right .bottom-panel .container {&#13;
    float: right;&#13;
    margin-top: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.left .bottom-panel .container {&#13;
    display: flex;&#13;
    flex-direction: row-reverse;&#13;
    float: right;&#13;
    margin-top: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .bottom-panel .container {&#13;
    display: flex;&#13;
    flex-direction: column-reverse;&#13;
    float: right;&#13;
    margin-left: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.down .bottom-panel .container {&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
    float: right;&#13;
    margin-left: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.right .bottom-panel-floating-image {&#13;
    margin-right: 77px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.left .bottom-panel-floating-image {&#13;
    margin-left: 77px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .bottom-panel-floating-image {&#13;
    margin-top: 77px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.down .bottom-panel-floating-image {&#13;
    margin-bottom: 77px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .bottom-panel {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.left .bottom-panel {&#13;
    margin-right: auto;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .bottom-panel {&#13;
    margin-bottom: auto;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.down .bottom-panel {&#13;
    margin-top: auto;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close, .iwb-toolbar-panel .button.open {&#13;
    font-size: 10px;&#13;
    line-height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.open {&#13;
    display: block;&#13;
    background-image: url('resources/wb-panel_open.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close {&#13;
    background-image: url('resources/wb-panel_close.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom {&#13;
    background-image: url('resources/wb_panel_zoom_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom.clicked {&#13;
    background-image: url('resources/wb_panel_zoom_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen {&#13;
    background-image: url('resources/wb_panel_pen_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen.clicked {&#13;
    background-image: url('resources/wb_panel_pen_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker {&#13;
    background-image: url('resources/wb_panel_marker_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker.clicked {&#13;
    background-image: url('resources/wb_panel_marker_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area {&#13;
    background-image: url('resources/wb_panel_blind_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area.clicked {&#13;
    background-image: url('resources/wb_panel_blind_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area {&#13;
    background-image: url('resources/wb_panel_focus_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area.clicked {&#13;
    background-image: url('resources/wb_panel_focus_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser {&#13;
    background-image: url('resources/wb_panel_erase_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser.clicked {&#13;
    background-image: url('resources/wb_panel_erase_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset {&#13;
    background-image: url('resources/wb_panel_reset_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset.clicked {&#13;
    background-image: url('resources/wb_panel_reset_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset-one {&#13;
    background-image: url('resources/undo-one.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset-one.clicked {&#13;
    background-image: url('resources/undo-one.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.redo-one {&#13;
    background-image: url('resources/redo-one.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.redo-one.clicked {&#13;
    background-image: url('resources/redo-one.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default {&#13;
    background-image: url('resources/wb_panel_cursor_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default.clicked {&#13;
    background-image: url('resources/wb_panel_cursor_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock {&#13;
    background-image: url('resources/wb_panel_clock_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock.clicked {&#13;
    background-image: url('resources/wb_panel_clock_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch {&#13;
    background-image: url('resources/wb_panel_stopwatch_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch.clicked {&#13;
    background-image: url('resources/wb_panel_stopwatch_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note {&#13;
    background-image: url('resources/wb_panel_note_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note.clicked {&#13;
    background-image: url('resources/wb_panel_note_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.custom-script {&#13;
    background-image: url('resources/wb_panel_custom_script_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.custom-script.clicked {&#13;
    background-image: url('resources/wb_panel_custom_script_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image {&#13;
    background-image: url('resources/wb_panel_rullers_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image.clicked {&#13;
    background-image: url('resources/wb_panel_rullers_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.color {&#13;
    background-image: url('resources/wb_panel_color_black_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness.clicked {&#13;
    background-image: url('resources/wb_panel_size1_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness {&#13;
    background-image: url('resources/wb_panel_size1_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-black {&#13;
    background-image: url('resources/wb_panel_color_black_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-blue {&#13;
    background-image: url('resources/wb_panel_color_blue_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-green {&#13;
    background-image: url('resources/wb_panel_color_green_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-orange {&#13;
    background-image: url('resources/wb_panel_color_orange_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-red {&#13;
    background-image: url('resources/wb_panel_color_red_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-violet {&#13;
    background-image: url('resources/wb_panel_color_violet_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-white {&#13;
    background-image: url('resources/wb_panel_color_white_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .color-yellow {&#13;
    background-image: url('resources/wb_panel_color_yellow_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-1 {&#13;
    background-image: url('resources/wb_panel_size1_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-1.clicked {&#13;
    background-image: url('resources/wb_panel_size1_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-2 {&#13;
    background-image: url('resources/wb_panel_size2_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-2.clicked {&#13;
    background-image: url('resources/wb_panel_size2_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-3 {&#13;
    background-image: url('resources/wb_panel_size3_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-3.clicked {&#13;
    background-image: url('resources/wb_panel_size3_icon-active.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-4 {&#13;
    background-image: url('resources/wb_panel_size4_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-panel .thickness-4.clicked {&#13;
    background-image: url('resources/wb_panel_size4_icon-active.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-1 {&#13;
    background-image: url('resources/wb_panel_ruller1_icon.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-2 {&#13;
    background-image: url('resources/wb_panel_ruller2_icon.svg');&#13;
}&#13;
&#13;
.button-floating-image.button-floating-image-3 {&#13;
    background-image: url('resources/wb_panel_ruller3_icon.svg');&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #start{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
    background-image: url('resources/start.png');&#13;
    background-size: 20px;&#13;
    background-position: 6px center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #stop{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    margin-right: 10px;&#13;
    background-image: url('resources/stop.png');&#13;
    background-size: 20px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons #clear{&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    float: left;&#13;
    background-image: url('resources/reset.png');&#13;
    border-radius: 5px;&#13;
    background-size: 20px;&#13;
    background-position: center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
    border-radius: 20px;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons .button-clicked{&#13;
    background-color: #51BB59;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch {&#13;
    top: 0px;&#13;
    width: 180px;&#13;
    height: auto;&#13;
    position: absolute;&#13;
    background: #A6E9B9;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header {&#13;
    height: 20px;&#13;
    text-align: center;&#13;
    background: url('resources/wb_panel_stopwatch_icon.svg') no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 2px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header .stopwatch-close{&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-header h4{&#13;
    float: left;&#13;
    margin-left: 50px;&#13;
    color: #008000;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons {&#13;
    padding: 5px;&#13;
    margin-left: 30px;&#13;
    font-size: 0.8em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    text-align: center;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.iwb-toolbar-stopwatch .stopwatch-buttons .stopwatch-button{&#13;
    padding: 5px;&#13;
    font-size: 1em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.iwb-toolbar-clock {&#13;
    top: 0px;&#13;
    width: 100px;&#13;
    height: auto;&#13;
    position: absolute;&#13;
    background-color: #9ECDFF;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-clock .clock-header {&#13;
    height: 20px;&#13;
    background-image: url('resources/wb_panel_clock_icon.svg');&#13;
    background-repeat: no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 2px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
}&#13;
.iwb-toolbar-clock .clock-header .clock-close{&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-clock .clock-body {&#13;
    padding: 5px;&#13;
    font-size: 16px;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    white-space: pre;&#13;
    text-align: center;&#13;
    color: #006ED3;&#13;
}&#13;
&#13;
.iwb-toolbar-note {&#13;
    top: 0px;&#13;
    width: 185px;&#13;
    min-height: 120px;&#13;
    max-height: 350px;&#13;
    position: absolute;&#13;
    background-color: rgba(255, 255, 155, 0.9);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow-y: auto;&#13;
    overflow-x: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-header {&#13;
    height: 20px;&#13;
    line-height: 20px;&#13;
    background: url('resources/wb_panel_note_icon.svg') no-repeat;&#13;
    background-size: 15px;&#13;
    background-position: 3px;&#13;
    cursor: move;&#13;
    background-color: rgba(255, 204, 0, 0.5);&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-body {&#13;
    padding: 5px;&#13;
    font-size: 0.8em;&#13;
    word-wrap: break-word;&#13;
    overflow-wrap: break-word;&#13;
    white-space: pre;&#13;
}&#13;
&#13;
.iwb-toolbar-note textarea {&#13;
    width: 160px;&#13;
    margin: auto;&#13;
    box-sizing: border-box;&#13;
    min-height: 70px;&#13;
    display: block;&#13;
    resize: vertical;&#13;
}&#13;
&#13;
.iwb-toolbar-note .save {&#13;
    float: right;&#13;
    right: 3px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-date {&#13;
    font-style: italic;&#13;
    font-size: 12px;&#13;
    width: 80%;&#13;
    position: relative;&#13;
    left: 23px;&#13;
    float: left;&#13;
    color: #D58A00;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-close {&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    position: relative;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.iwb-toolbar-note .note-close.hovered {&#13;
    color: #696969;&#13;
}&#13;
&#13;
.iwb-toolbar-custom-script {&#13;
    top: 0px;&#13;
    width: 185px;&#13;
    min-height: 120px;&#13;
    max-height: 350px;&#13;
    position: absolute;&#13;
    background-color: rgba(255, 255, 155, 0.9);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    overflow-y: auto;&#13;
    overflow-x: hidden;&#13;
}&#13;
&#13;
.iwb-toolbar-custom-script .custom-script-close.hovered {&#13;
    color: #696969;&#13;
}&#13;
&#13;
.iwb-toolbar-floating-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button .tooltip {&#13;
    display: none;&#13;
    opacity: 1;&#13;
    position: absolute;&#13;
    font-size: 8px;&#13;
    line-height: 8px;&#13;
    min-width: 30px;&#13;
    padding: 3px;&#13;
    border-radius: 2px;&#13;
    background-color: rgba(255, 255, 255, 0.5);&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.6);&#13;
}&#13;
&#13;
.iwb-toolbar-panel.right .button .tooltip,&#13;
.iwb-toolbar-panel.left .button .tooltip{&#13;
    top: -20px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .button .tooltip,&#13;
.iwb-toolbar-panel.down .button .tooltip{&#13;
    left: -30px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.default .tooltip span:after {&#13;
    content: 'Default Mode';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.close .tooltip span:after {&#13;
    content: 'Close';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.open .tooltip span:after {&#13;
    content: 'Open';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.zoom .tooltip span:after {&#13;
    content: 'Zoom';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.pen .tooltip span:after {&#13;
    content: 'Pen';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.marker .tooltip span:after {&#13;
    content: 'Marker';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.eraser .tooltip span:after {&#13;
    content: 'Eraser';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.clock .tooltip span:after {&#13;
    content: 'Add Clock';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stopwatch .tooltip span:after {&#13;
    content: 'Add Stopwatch';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.note .tooltip span:after {&#13;
    content: 'Add Note';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.custom-script .tooltip span:after {&#13;
    content: 'Run custom script';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.hide-area .tooltip span:after {&#13;
    content: 'Hide Area';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.stand-area .tooltip span:after {&#13;
    content: 'Stand Area';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset .tooltip span:after {&#13;
    content: 'Undo All';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.reset-one .tooltip span:after {&#13;
    content: 'Undo';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.redo-one .tooltip span:after {&#13;
    content: 'Redo';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.floating-image .tooltip span:after {&#13;
    content: 'Rulers';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.color .tooltip span:after {&#13;
    content: 'Color';&#13;
}&#13;
&#13;
.iwb-toolbar-panel .button.thickness .tooltip span:after {&#13;
    content: 'Thickness';&#13;
}&#13;
&#13;
#iwb_tmp_canvas {&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
canvas {&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.confirmation-remove-note &gt; span:after {&#13;
     content: 'Are you sure to remove this note?';&#13;
}&#13;
&#13;
.confirmation-remove-note .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-note .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-note .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-note .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-note .button {&#13;
    padding: 10px;&#13;
    border-radius: 5px;&#13;
    border: none;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
    background: #FFF;&#13;
    color: #000;&#13;
}&#13;
&#13;
.confirmation-remove-note .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-note {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 170px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: #63BAFF;&#13;
    color: #FFF;&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 14px;&#13;
    z-index: 1002;&#13;
    padding: 30px 50px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.confirmation-remove-clock &gt; span:after {&#13;
    content: 'Are you sure to remove this clock?';&#13;
}&#13;
&#13;
.confirmation-remove-clock .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-clock .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-clock .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-clock .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-clock .button {&#13;
    padding: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid #696969;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.confirmation-remove-clock .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-clock {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 200px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: rgba(245, 245, 245, 0.7);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 0.7em;&#13;
    z-index: 1002;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch &gt; span:after {&#13;
    content: 'Are you sure to remove this stopwatch?';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .yes-button &gt; span:after {&#13;
    content: 'Yes';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .no-button &gt; span:after {&#13;
    content: 'No';&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .no-button {&#13;
    float: right;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .yes-button {&#13;
    float: left;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .button {&#13;
    padding: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid #696969;&#13;
    width: 50px;&#13;
    text-align: center;&#13;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch .ui-helper-clearfix {&#13;
    margin-top: 10px;&#13;
}&#13;
&#13;
.confirmation-remove-stopwatch {&#13;
    min-height: 50px;&#13;
    padding: 10px;&#13;
    display: none;&#13;
    width: 200px;&#13;
    left: 50%;&#13;
    margin-left: -100px;&#13;
    position: absolute;&#13;
    background-color: rgba(245, 245, 245, 0.7);&#13;
    border-radius: 4px;&#13;
    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);&#13;
    font-size: 0.7em;&#13;
    z-index: 1002;&#13;
}&#13;
&#13;
.ui-helper-clearfix:before, .ui-helper-clearfix:after {&#13;
    content: "";&#13;
    display: table;&#13;
    height: 10px;&#13;
}&#13;
&#13;
.iwb-toolbar-panel.up .ui-helper-clearfix:before,&#13;
.iwb-toolbar-panel.down .ui-helper-clearfix:before,&#13;
.iwb-toolbar-panel.up .ui-helper-clearfix:after,&#13;
.iwb-toolbar-panel.down .ui-helper-clearfix:after {&#13;
    height: 0px;&#13;
    width: 10px;&#13;
}&#13;
&#13;
#iwb_tmp_canvas {&#13;
    position: absolute;&#13;
    left: 0px; right: 0;&#13;
    bottom: 0; top: 0;&#13;
    cursor: crosshair;&#13;
}&#13;
&#13;
.closed-hide {&#13;
    display: none !important;&#13;
}&#13;
&#13;
.ic_page_panel.iwb-zoom-in {&#13;
    cursor: zoom-in;&#13;
    cursor: -moz-zoom-in;&#13;
    cursor: -webkit-zoom-in;&#13;
}&#13;
&#13;
.ic_page_panel.iwb-zoom-out {&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="confirmation-remove-note"&gt;&#13;
    &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
    &lt;div class="ui-helper-clearfix"&gt;&#13;
        &lt;div class="yes-button button"&gt;&#13;
            &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="no-button button"&gt;&#13;
            &lt;span&gt;&lt;/span&gt; &lt;!-- text goes here --&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="iwb-toolbar-panel"&gt;&#13;
    &lt;div class="button first open" data-name="open"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button first close hidden" data-name="close"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button default hidden" data-name="default"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button zoom hidden" data-name="zoom"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button pen hidden" data-name="pen"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button marker hidden" data-name="marker"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button eraser hidden" data-name="eraser"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button hide-area hidden" data-name="hide-area"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button stand-area hidden" data-name="stand-area"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button color hidden" data-name="color"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button thickness hidden" data-name="thickness"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden" &gt;&lt;/div&gt;&#13;
    &lt;div class="button reset-one hidden" data-name="reset-one"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button redo-one hidden" data-name="redo-one"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button reset hidden" data-name="reset"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden" &gt;&lt;/div&gt;&#13;
    &lt;div class="button note hidden" data-name="note"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button floating-image hidden" data-name="floating-image"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button clock hidden" data-name="clock"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button stopwatch hidden" data-name="stopwatch"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="button custom-script hidden" data-name="custom-script"&gt;&lt;div class="tooltip"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-color"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details color-blue" color="blue"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-green" color="green"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-yellow" color="yellow"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-orange" color="orange"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-red" color="red"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-violet" color="violet"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-black" color="black"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-white" color="white"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-thickness"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details thickness-1" thickness="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-2" thickness="2"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-3" thickness="3"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-4" thickness="4"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-floating-image"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-1" index="0"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-2" index="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-floating-image button-floating-image-3" index="2"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="iwb-toolbar-panel"&gt;&#13;
    &lt;div class="button first open"&gt;&lt;/div&gt;&#13;
    &lt;div class="button first close hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button default hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button zoom hidden"&gt; &lt;/div&gt;&#13;
    &lt;div class="button pen hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button marker hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button note hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button clock hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button stopwatch hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button custom-script hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button hide-area hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button stand-area hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button eraser hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button remove hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button-separator hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button color hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="button thickness hidden"&gt;&lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-color"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details color-blue" color="blue"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-green" color="green"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-yellow" color="yellow"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-orange" color="orange"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-red" color="red"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-violet" color="violet"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-black" color="black"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details color-white" color="white"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="bottom-panel ui-helper-clearfix bottom-panel-thickness"&gt;&#13;
        &lt;div class="container"&gt;&#13;
            &lt;div class="button-drawing-details thickness-1" thickness="1"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-2" thickness="2"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-3" thickness="3"&gt;&lt;/div&gt;&#13;
            &lt;div class="button-drawing-details thickness-4" thickness="4"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonIWB_Toolbar_create() {&#13;
&#13;
    /*&#13;
     * KNOWN ISSUES:&#13;
     *       Drawing with zoom:&#13;
     *          Because zoom option (provided with zoom.js library) is based on CSS properties 'zoom' and&#13;
     *          '-moz-transform' drawing in such mode is not possible. IWB Toolbar panel is hidden when user activates&#13;
     *          zoom option and it's displayed again after zooming out.&#13;
     *&#13;
     *       Preventing modules and addons click handlers execution in zoom mode:&#13;
     *          Each module and addon can register unlimited number of click handlers to its internal elements. When&#13;
     *          zoom mode is activated, IWB Toolbar needs to prevent execution of those handlers. For instance,&#13;
     *          TextAudio binds a handler to span elements. Those handlers needs to be removed for as long as zoom&#13;
      *         mode is active and reinstated when zoom mode is deactivated.&#13;
      *&#13;
      *      Incomplete erasing on Android:&#13;
      *      Issue occurs sometimes without known reason. The helpful solution was workaround redrawing canvas.&#13;
     */&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.noteObjects = [];&#13;
&#13;
    presenter._kinetic = {};&#13;
    presenter._kinetic.images = [];&#13;
    presenter._kinetic.rotateObj = [];&#13;
    presenter._kinetic.moveObj = [];&#13;
    presenter._kinetic.rotateIcon = [];&#13;
    presenter._kinetic.moveIcon = [];&#13;
    presenter._kinetic.imageObj = [];&#13;
    presenter._hoveredButtons = [];&#13;
    presenter._iwb_buttons = [];&#13;
    presenter._setState = {};&#13;
    presenter._setState.images = [];&#13;
&#13;
    presenter.stateStack = null;&#13;
&#13;
    presenter._stopwatchTimer = null;&#13;
    presenter._stopwatch = null;&#13;
&#13;
    presenter._clockwatch = null;&#13;
    presenter._clockwatchTimer = null;&#13;
&#13;
    presenter.buttonClicked = false;&#13;
    presenter.isZoomActive = false;&#13;
    presenter.areZoomEventHandlersAttached = false;&#13;
&#13;
    var DEFAULT_COLOR = '#0fa9f0';&#13;
    presenter.activeButton = '';&#13;
    presenter.activeFunction;&#13;
    presenter.isRecklicked = false;&#13;
    const CUSTOM_BUTTON_NAME = 'custom-script';&#13;
    presenter.customButtonActive = false;&#13;
    presenter.isCommandSourceToDeselectCustomButton = false;&#13;
&#13;
    presenter.points = [];&#13;
    presenter.mouse = {x: 0, y: 0};&#13;
&#13;
    presenter.trueClosedPanelSize = {};&#13;
&#13;
    presenter.data = {&#13;
        defaultPenWidth: 1,&#13;
        penColor: DEFAULT_COLOR,&#13;
        markerColor: '#ffff99',&#13;
        markerThickness: 10,&#13;
        eraserThickness: 20&#13;
    };&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.areas = [];&#13;
    presenter.clocks = [];&#13;
    presenter.stopwatches = [];&#13;
    presenter.currentLineColor = DEFAULT_COLOR;&#13;
    presenter.currentLineWidth = presenter.data.defaultPenWidth;&#13;
    presenter.isMouseDown = false;&#13;
    presenter.lastMousePosition = {};&#13;
    presenter.floatingImageGroups = {};&#13;
    presenter.currentFloatingImageIndex = 0;&#13;
    presenter.textAudioEvents = [];&#13;
&#13;
    presenter.penUsed = false;&#13;
    presenter.markerUsed = false;&#13;
&#13;
    presenter.zoomConfiguration = {&#13;
        initialWindowHeight: 0,&#13;
        initialNotScaledOffset: 0,&#13;
        playerInitialLeftOffset: 0,&#13;
        viewLeftOffset: 0&#13;
    };&#13;
&#13;
    function getCorrectObject(val) {&#13;
        return {&#13;
            isValid: true,&#13;
            value: val&#13;
        };&#13;
    }&#13;
&#13;
    function getErrorObject(ec) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: ec&#13;
        };&#13;
    }&#13;
&#13;
    function addZero(val) {&#13;
        return (val &gt; 9 ? '' : '0') + val;&#13;
    }&#13;
&#13;
    function getPoint(x, y) {&#13;
        return {&#13;
            x: x,&#13;
            y: y&#13;
        };&#13;
    }&#13;
&#13;
    presenter.DEFAULT_FLOATING_IMAGE = {&#13;
        0: 'it_ruler.png',&#13;
        1: 'it_setsquare.png',&#13;
        2: 'it_protractor.png'&#13;
    };&#13;
&#13;
    presenter.FLOATING_IMAGE_MODE = {&#13;
        ROTATE: 1,&#13;
        MOVE: 2&#13;
    };&#13;
&#13;
    presenter.DRAW_MODE = {&#13;
        MARKER: 1,&#13;
        PEN: 2,&#13;
        ERASER: 3,&#13;
        STAND_AREA: 4,&#13;
        HIDE_AREA: 5,&#13;
        NONE : 6&#13;
    };&#13;
&#13;
    presenter.drawMode = presenter.DRAW_MODE.NONE;&#13;
    presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.MOVE;&#13;
&#13;
    presenter.DRAWING_DATA = {&#13;
        'color' : {&#13;
            'black': '#000',&#13;
            'white': '#fff',&#13;
            'yellow':'#FFFF66',&#13;
            'red': '#cf304b',&#13;
            'orange': '#FF9900',&#13;
            'blue': '#0fa9f0',&#13;
            'violet': '#990099',&#13;
            'green': '#05fa98'&#13;
        },&#13;
        'thickness' : {&#13;
            'pen' : {&#13;
                '1': 1,&#13;
                '2': 3,&#13;
                '3': 5,&#13;
                '4': 7&#13;
            },&#13;
            'marker' : {&#13;
                '1': 10,&#13;
                '2': 15,&#13;
                '3': 20,&#13;
                '4': 25&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getCurrentGroup() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex];&#13;
    }&#13;
&#13;
    function getCurrentImage() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[0];&#13;
    }&#13;
&#13;
    function getCurrentMoveIcon() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[1];&#13;
    }&#13;
&#13;
    function getCurrentRotateIcon() {&#13;
        return presenter.floatingImageGroups[presenter.currentFloatingImageIndex].children[2];&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ResizeWindow', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        if (eventName == 'PageLoaded' &amp;&amp; eventData.source == 'header') {&#13;
            presenter.headerLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.loadWindowSize();&#13;
        }&#13;
&#13;
        if (eventName == "ResizeWindow") {&#13;
            var newPlayerLeftOffset = $("#_icplayer").offset().left;&#13;
            var viewLeftOffset = presenter.zoomConfiguration.viewLeftOffset;&#13;
            var playerInitialLeftOffset = presenter.zoomConfiguration.playerInitialLeftOffset;&#13;
            var newViewLeftOffset = newPlayerLeftOffset - playerInitialLeftOffset + viewLeftOffset;&#13;
            presenter.$panel.offset({left: newViewLeftOffset});&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadWindowSize = function(){&#13;
        presenter.zoomConfiguration.initialWindowHeight = window.iframeSize.windowInnerHeight;&#13;
        presenter.zoomConfiguration.initialNotScaledOffset = window.iframeSize.notScaledOffset;&#13;
&#13;
        // you must repeat the data reading when they are not loaded correctly&#13;
        if (presenter.zoomConfiguration.initialWindowHeight === 0 || isNaN(presenter.zoomConfiguration.initialNotScaledOffset))&#13;
            setTimeout(function (e) {&#13;
                presenter.loadWindowSize();&#13;
            }, 200);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E01': 'Width can NOT be negative.',&#13;
        'E02': 'Height can NOT be negative.',&#13;
    };&#13;
&#13;
    presenter.closePanel = function IWB_Toolbar_closePanel(doAnimation) {&#13;
        if (!presenter.$panel.hasClass('animationInProgress')) {&#13;
            window.savedPanel.isOpen = false;&#13;
&#13;
            presenter.$bottomPanels.addClass('closed-hide');&#13;
            presenter.$buttonsExceptOpen.addClass('hidden');&#13;
            presenter.$panel.children('.button-separator').hide();&#13;
&#13;
            var config = {};&#13;
            var openedPanelPosition = {&#13;
                left: presenter.$panel.position().left,&#13;
                top: presenter.$panel.position().top&#13;
            };&#13;
            let positionToSave = {};&#13;
            $.extend(true, positionToSave, openedPanelPosition);&#13;
&#13;
            var newLeft = openedPanelPosition.left + presenter.config.widthWhenOpened - presenter.trueClosedPanelSize.width;&#13;
            var newTop = openedPanelPosition.top + presenter.config.widthWhenOpened - presenter.trueClosedPanelSize.height;&#13;
            if (presenter.config.expansionDirection == "right" || presenter.config.expansionDirection == "left") {&#13;
                config.width = presenter.trueClosedPanelSize.width + 'px';&#13;
                if (presenter.config.expansionDirection == "left") {&#13;
                    config.left = newLeft + 'px';&#13;
                    positionToSave.left = newLeft;&#13;
                }&#13;
            } else {&#13;
                config.height = presenter.trueClosedPanelSize.height + 'px';&#13;
                if (presenter.config.expansionDirection == "up") {&#13;
                    config.top = newTop + 'px';&#13;
                    positionToSave.top = newTop;&#13;
                }&#13;
            }&#13;
            window.savedPanel.position = {top: positionToSave.top, left: positionToSave.left};&#13;
&#13;
            if (doAnimation) {&#13;
                presenter.$panel.addClass('animationInProgress');&#13;
                presenter.$panel.animate(config, 1000, presenter._closePanelShow);&#13;
            } else {&#13;
                presenter._closePanelShow();&#13;
                config.hasOwnProperty("width") &amp;&amp; presenter.$panel.css("width", config.width);&#13;
                config.hasOwnProperty("height") &amp;&amp; presenter.$panel.css("height", config.height);&#13;
                config.hasOwnProperty("left") &amp;&amp; presenter.$panel.css("left", config.left);&#13;
                config.hasOwnProperty("top") &amp;&amp; presenter.$panel.css("top", config.top);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter._openPanelShow = function IWB_Toolbar_openPanelShow() {&#13;
        presenter.$buttonsExceptOpen.removeClass('hidden');&#13;
        presenter.$panel.children('.button.open').hide();&#13;
        presenter.$panel.children('.button-separator').show();&#13;
        presenter.$panel.removeClass('animationInProgress');&#13;
        presenter.$panel.addClass('opened');&#13;
        presenter.$bottomPanels.removeClass('closed-hide');&#13;
        presenter.toogleMasks();&#13;
    };&#13;
&#13;
    presenter._closePanelShow = function IWB_Toolbar_closePanelShow() {&#13;
        presenter.$panel.children('.button.open').show();&#13;
        presenter.$panel.removeClass('animationInProgress');&#13;
        presenter.$panel.removeClass('opened');&#13;
    };&#13;
&#13;
    presenter.openPanel = function IWB_Toolbar_openPanel(doAnimation) {&#13;
        window.savedPanel.isOpen = true;&#13;
&#13;
        var config = {};&#13;
        var closedPanelPosition = {&#13;
            left: presenter.$panel.position().left,&#13;
            top: presenter.$panel.position().top&#13;
        };&#13;
&#13;
        var newLeft = closedPanelPosition.left + presenter.trueClosedPanelSize.width - presenter.config.widthWhenOpened;&#13;
        var newTop = closedPanelPosition.top + presenter.trueClosedPanelSize.height - presenter.config.widthWhenOpened;&#13;
        if (presenter.config.expansionDirection == "right" || presenter.config.expansionDirection == "left") {&#13;
            config.width = presenter.config.widthWhenOpened + "px";&#13;
            if (presenter.config.expansionDirection == "left") {&#13;
                config.left = newLeft + "px";&#13;
            }&#13;
        } else {&#13;
            config.height = presenter.config.widthWhenOpened + "px";&#13;
            if (presenter.config.expansionDirection == "up") {&#13;
                config.top = newTop + "px";&#13;
            }&#13;
        }&#13;
&#13;
        if (doAnimation) {&#13;
            presenter.$panel.addClass('animationInProgress');&#13;
            presenter.$panel.animate(config, 1000, presenter._openPanelShow);&#13;
        } else {&#13;
            presenter._openPanelShow();&#13;
            config.hasOwnProperty("width") &amp;&amp; presenter.$panel.css("width", config.width);&#13;
            config.hasOwnProperty("height") &amp;&amp; presenter.$panel.css("height", config.height);&#13;
            config.hasOwnProperty("left") &amp;&amp; presenter.$panel.css("left", config.left);&#13;
            config.hasOwnProperty("top") &amp;&amp; presenter.$panel.css("top", config.top);&#13;
        }&#13;
    };&#13;
&#13;
    function setOverflowWorkAround(turnOn) {&#13;
        if (!MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) { return false; }&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
&#13;
            presenter.$pagePanel.find('.iwb-toolbar-mask').parents("*").each(function() {&#13;
                var overflow = null;&#13;
                if (turnOn) {&#13;
                    $(this).attr("data-overflow", $(this).css("overflow"));&#13;
                    $(this).css("overflow", "visible");&#13;
                } else {&#13;
                    overflow = $(this).attr("data-overflow");&#13;
                    if (overflow !== "") {&#13;
                        $(this).css("overflow", overflow);&#13;
                    }&#13;
                    $(this).removeAttr("data-overflow");&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.IWBDraw = function(canvas, ctx, mousePosition) {&#13;
        var grad = ctx.createLinearGradient(0, 0, canvas[0].width, 0);&#13;
        grad.addColorStop(0, presenter.currentLineColor);&#13;
        grad.addColorStop(1, presenter.currentLineColor);&#13;
&#13;
        if (presenter.drawMode == presenter.DRAW_MODE.ERASER){&#13;
            ctx.lineWidth = presenter.currentEraserThickness;&#13;
        }else{&#13;
            ctx.lineWidth = presenter.currentLineWidth;&#13;
        }&#13;
        ctx.strokeStyle = grad;&#13;
        ctx.lineCap = 'round';&#13;
        ctx.lineJoin = 'round';&#13;
&#13;
        ctx.beginPath();&#13;
        ctx.moveTo(presenter.lastMousePosition.x, presenter.lastMousePosition.y);&#13;
        ctx.lineTo(mousePosition.x, mousePosition.y);&#13;
        ctx.stroke();&#13;
    };&#13;
&#13;
    function getCursorPosition(e) {&#13;
        var canvas;&#13;
&#13;
        if(e.target.id == "iwb_tmp_canvas") {&#13;
            canvas = presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas')[0];&#13;
        } else {&#13;
            canvas = presenter.canvas[0];&#13;
        }&#13;
&#13;
        var rect = canvas.getBoundingClientRect();&#13;
        var canvasOffsetLeft = $(canvas).offset().left;&#13;
&#13;
        if(presenter.standHideAreaClicked){&#13;
            canvasOffsetLeft = 0;&#13;
        }&#13;
&#13;
        if (e.clientX) {&#13;
            return getPoint(&#13;
                parseInt(e.clientX - rect.left, 10),&#13;
                parseInt(e.clientY - rect.top, 10)&#13;
            );&#13;
        }&#13;
&#13;
        var t = event.targetTouches[0] || event.touches[0] || event.changedTouches[0];&#13;
        return getPoint(&#13;
            parseInt(t.pageX - canvasOffsetLeft, 10),&#13;
            parseInt(t.pageY - $(canvas).offset().top, 10)&#13;
        );&#13;
    }&#13;
&#13;
    function changeDrawingType(button) {&#13;
        var activeButton = presenter.$pagePanel.find('.clicked');&#13;
&#13;
        if ($(button).parent().parent().hasClass('bottom-panel-thickness')) { // is changing thickness&#13;
            var thickness = $(button).attr('thickness'),&#13;
                drawingType = activeButton.hasClass('pen') ? 'pen' : 'marker';&#13;
            presenter.data.defaultPenWidth = 1;&#13;
            presenter.changeThickness(presenter.DRAWING_DATA['thickness'][drawingType][thickness], button);&#13;
            presenter.buttonThickness = button;&#13;
        } else {&#13;
            var color = $(button).attr('color');&#13;
            presenter.changeColor(presenter.DRAWING_DATA['color'][color], button);&#13;
            presenter.buttonColor = button;&#13;
        }&#13;
    }&#13;
&#13;
    function openBottomPanel(button) {&#13;
        presenter.$pagePanel.find('.bottom-panel').hide();&#13;
&#13;
        var panel;&#13;
        if ($(button).hasClass('color')) {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-color');&#13;
        } else if ($(button).hasClass('thickness')) {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-thickness');&#13;
        } else {&#13;
            panel = presenter.$pagePanel.find('.bottom-panel-floating-image');&#13;
        }&#13;
&#13;
        if(panel.hasClass('bottom-panel-floating-image')){&#13;
            if(panel.attr('isHidden') == '0'){&#13;
                panel.hide();&#13;
                panel.attr('isHidden', '1');&#13;
                return;&#13;
            }&#13;
            if (panel.is(':visible')) {&#13;
                panel.hide();&#13;
                panel.attr('isHidden', '1');&#13;
            } else {&#13;
                panel.show();&#13;
                panel.attr('isHidden', '0');&#13;
            }&#13;
        }else{&#13;
            if (panel.is(':visible')) {&#13;
                panel.hide();&#13;
            } else {&#13;
                panel.show();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function applyDoubleTapHandler($element, callback) {&#13;
        var lastEvent = null,&#13;
            tapsCounter = 0;&#13;
&#13;
        $element.on('touchstart', function(e) {&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
&#13;
        $element.on('touchend', function(e) {&#13;
            if (lastEvent.type == 'touchstart') {&#13;
                tapsCounter++;&#13;
&#13;
                if (tapsCounter == 2) {&#13;
                    callback();&#13;
                    tapsCounter = 0;&#13;
                }&#13;
            }&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
&#13;
        $element.on('touchmove', function(e) {&#13;
            lastEvent = e.evt || e;&#13;
        });&#13;
    }&#13;
    &#13;
    function getTouchStartOrMouseDownEventName() {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            return 'touchstart';&#13;
        }else{&#13;
            return 'mousedown';&#13;
        }&#13;
    }&#13;
&#13;
    presenter.onMobilePaint = function(e) {&#13;
        var iwb_tmp_canvas;&#13;
        iwb_tmp_canvas = presenter.iwb_tmp_canvas;&#13;
&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
&#13;
        var x = e.targetTouches[0].pageX - $(iwb_tmp_canvas).offset().left;&#13;
        var y = e.targetTouches[0].pageY - $(iwb_tmp_canvas).offset().top;&#13;
&#13;
        presenter.mouse.x = x;&#13;
        presenter.mouse.y = y;&#13;
        presenter.onPaint(e);&#13;
    };&#13;
&#13;
    presenter.onPaint = function(e) {&#13;
        var iwb_tmp_canvas, tmp_ctx;&#13;
        iwb_tmp_canvas = presenter.iwb_tmp_canvas;&#13;
        tmp_ctx = presenter.tmp_ctx;&#13;
        tmp_ctx.globalAlpha = 0.4;&#13;
&#13;
        tmp_ctx.lineWidth = presenter.currentMarkerThickness;&#13;
        tmp_ctx.lineJoin = 'round';&#13;
        tmp_ctx.lineCap = 'round';&#13;
        tmp_ctx.strokeStyle = presenter.currentLineColor;&#13;
        tmp_ctx.fillStyle = presenter.currentLineColor;&#13;
&#13;
        presenter.points.push({x: presenter.mouse.x, y: presenter.mouse.y});&#13;
&#13;
        if (presenter.points.length &lt; 3) {&#13;
            var b = presenter.points[0];&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);&#13;
            tmp_ctx.fill();&#13;
            tmp_ctx.closePath();&#13;
        } else {&#13;
            tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
&#13;
            tmp_ctx.beginPath();&#13;
            tmp_ctx.moveTo(presenter.points[0].x, presenter.points[0].y);&#13;
&#13;
            for (var i = 1; i &lt; presenter.points.length - 2; i++) {&#13;
                var c = (presenter.points[i].x + presenter.points[i + 1].x) / 2;&#13;
                var d = (presenter.points[i].y + presenter.points[i + 1].y) / 2;&#13;
&#13;
                tmp_ctx.quadraticCurveTo(presenter.points[i].x, presenter.points[i].y, c, d);&#13;
            }&#13;
&#13;
            tmp_ctx.quadraticCurveTo(&#13;
                presenter.points[i].x,&#13;
                presenter.points[i].y,&#13;
                presenter.points[i + 1].x,&#13;
                presenter.points[i + 1].y&#13;
            );&#13;
            tmp_ctx.stroke();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onTouchStartCallback = function (e) {&#13;
        e.preventDefault();&#13;
        e.stopPropagation();&#13;
&#13;
        setOverflowWorkAround(true);&#13;
&#13;
            presenter.onMobilePaint(e);&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchmove', presenter.onMobilePaint);&#13;
&#13;
    };&#13;
&#13;
    function saveMarkerDataUrl() {&#13;
        presenter.markerDataUrl = presenter.markerCanvas[0].toDataURL('image/png');&#13;
    };&#13;
&#13;
    presenter.onTouchEndEventCallback = function (e) {&#13;
        e.stopPropagation();&#13;
&#13;
        setOverflowWorkAround(false);&#13;
&#13;
        presenter.markerUsed = true;&#13;
&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchmove', presenter.onMobilePaint, false);&#13;
        presenter.markerCtx.drawImage(presenter.iwb_tmp_canvas, 0, 0);&#13;
        presenter.tmp_ctx.clearRect(0, 0, presenter.iwb_tmp_canvas.width, presenter.iwb_tmp_canvas.height);&#13;
&#13;
        presenter.points = [];&#13;
        saveMarkerDataUrl();&#13;
    };&#13;
&#13;
    presenter.markerMouseDownHandler = function IWB_Toolbar_markerMouseDownHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.isMouseDown = true;&#13;
        setOverflowWorkAround(true);&#13;
&#13;
        presenter.iwb_tmp_canvas.addEventListener('mousemove', presenter.onPaint, false);&#13;
&#13;
        var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
        var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
        presenter.points.push({x: x, y: y});&#13;
    };&#13;
&#13;
    presenter.markerMouseMoveHandler = function IWB_Toolbar_mouseMoveHandler(e) {&#13;
        if (presenter.isMouseDown) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.drawMode == presenter.DRAW_MODE.MARKER) {&#13;
                var x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                var y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                presenter.mouse.x = x;&#13;
                presenter.mouse.y = y;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markerMouseUpHandler = function IWB_Toolbar_mouseUpHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
&#13;
        if (presenter.isMouseDown) {&#13;
            presenter.markerUsed = true;&#13;
        }&#13;
&#13;
        presenter.isMouseDown = false;&#13;
        setOverflowWorkAround(false);&#13;
&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.onPaint, false);&#13;
        presenter.markerCtx.drawImage(presenter.iwb_tmp_canvas, 0, 0);&#13;
        presenter.tmp_ctx.clearRect(0, 0, presenter.iwb_tmp_canvas.width, presenter.iwb_tmp_canvas.height);&#13;
&#13;
        presenter.points = [];&#13;
        saveMarkerDataUrl();&#13;
&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.markerDrawingLogic = function IWB_Toolbar_markerDrawingLogic() {&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        }else{&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.markerMouseMoveHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.markerMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.markerMouseUpHandler, false);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.addEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        } else {&#13;
            // MOUSE&#13;
            presenter.iwb_tmp_canvas.addEventListener('mousemove', presenter.markerMouseMoveHandler, false);&#13;
            $(presenter.iwb_tmp_canvas).on('mouseleave', presenter.markerMouseUpHandler);&#13;
            presenter.iwb_tmp_canvas.addEventListener('mousedown', presenter.markerMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.addEventListener('mouseup', presenter.markerMouseUpHandler, false);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.penMouseDownHandler = function IWB_Toolbar_penMouseDownHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.lastMousePosition = getCursorPosition(e);&#13;
        presenter.isMouseDown = true;&#13;
        setOverflowWorkAround(true);&#13;
    };&#13;
&#13;
    presenter.penMouseMoveHandler = function IWB_Toolbar_penMouseMoveHandler(e) {&#13;
        if (presenter.isMouseDown) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.drawMode == presenter.DRAW_MODE.MARKER) {&#13;
                presenter.IWBDraw(presenter.markerCanvas, presenter.markerCtx, getCursorPosition(e));&#13;
            } else if (presenter.drawMode == presenter.DRAW_MODE.PEN) {&#13;
                presenter.IWBDraw(presenter.canvas, presenter.ctx, getCursorPosition(e));&#13;
            } else if (presenter.drawMode == presenter.DRAW_MODE.ERASER) {&#13;
                presenter.IWBDraw(presenter.markerCanvas, presenter.markerCtx, getCursorPosition(e));&#13;
                presenter.IWBDraw(presenter.canvas, presenter.ctx, getCursorPosition(e));&#13;
&#13;
                var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
                if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
                    $('canvas').css('opacity', '0.99');&#13;
&#13;
                    setTimeout(function() {&#13;
                        $('canvas').css('opacity', '1');&#13;
                    }, 5);&#13;
                }&#13;
            }&#13;
            presenter.lastMousePosition = getCursorPosition(e);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.penMouseUpHandler = function IWB_Toolbar_penMouseUpHandler(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        if (presenter.isMouseDown) {&#13;
            presenter.penUsed = true;&#13;
        }&#13;
        presenter.isMouseDown = false;&#13;
        setOverflowWorkAround(false);&#13;
        presenter.penDataURL = presenter.canvas[0].toDataURL('image/png');&#13;
        if (presenter.drawMode == presenter.DRAW_MODE.ERASER &amp;&amp; presenter.markerUsed) {&#13;
            saveMarkerDataUrl();&#13;
        }&#13;
&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.drawingLogic = function IWB_Toolbar_drawingLogic() {&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        }else{&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.penMouseMoveHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.penMouseDownHandler, false);&#13;
            presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.penMouseUpHandler, false);&#13;
        }&#13;
&#13;
        $(presenter.canvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
        $(presenter.markerCanvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.canvas).on('touchstart', function(e) {&#13;
                presenter.penMouseDownHandler(e);&#13;
            });&#13;
            $(presenter.markerCanvas).on('touchstart', function(e) {&#13;
                presenter.penMouseDownHandler(e);&#13;
            });&#13;
        }else{&#13;
            $(presenter.canvas).on('mousedown', presenter.penMouseDownHandler);&#13;
&#13;
            $(presenter.markerCanvas).on('mousedown', presenter.penMouseDownHandler);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.markerCanvas).on('touchmove', function(e) {&#13;
                presenter.penMouseMoveHandler(e);&#13;
            });&#13;
&#13;
            $(presenter.canvas).on('touchmove', function(e) {&#13;
                presenter.penMouseMoveHandler(e);&#13;
            });&#13;
        }else{&#13;
            $(presenter.markerCanvas).on('mousemove', presenter.penMouseMoveHandler);&#13;
&#13;
            $(presenter.canvas).on('mousemove', presenter.penMouseMoveHandler);&#13;
        }&#13;
&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            $(presenter.canvas).on('touchend', function(e) {&#13;
                presenter.penMouseUpHandler(e);&#13;
            });&#13;
&#13;
            $(presenter.markerCanvas).on('touchend', function(e) {&#13;
                presenter.penMouseUpHandler(e);&#13;
            });&#13;
        }else{&#13;
            $(presenter.canvas).on('mouseup', presenter.penMouseUpHandler);&#13;
            $(presenter.markerCanvas).on('mouseup', presenter.penMouseUpHandler);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeEnableUndoRedo(model);&#13;
        upgradedModel = presenter.upgradeDefaultZoom(upgradedModel);&#13;
        upgradedModel = presenter.upgradeExpansionDirection(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeEnableUndoRedo = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel['enableUndoRedo']) {&#13;
            upgradedModel['enableUndoRedo'] = 'false';&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeExpansionDirection = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["expansionDirection"]) {&#13;
            upgradedModel["expansionDirection"] = "right";&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeDefaultZoom = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel['disableModuleZoom']) {&#13;
            upgradedModel['disableModuleZoom'] = 'false';&#13;
        }&#13;
&#13;
        if (!upgradedModel['defaultZoom']) {&#13;
            upgradedModel['defaultZoom'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setBasicConfiguration = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$panel = $(view).find('.iwb-toolbar-panel');&#13;
        presenter.$panel.attr('id', model['ID'] + '-panel');&#13;
        presenter.$defaultThicknessButton = presenter.$panel.find('.thickness-1');&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-blue');&#13;
        presenter.isInFrame = window.parent.location != window.location;&#13;
        presenter.$buttonsExceptOpen = presenter.$panel.children('.button:not(.open)');&#13;
        presenter.buttonWidth = presenter.$buttonsExceptOpen.width();&#13;
&#13;
        var display = $(view).css('display');&#13;
        if (display &amp;&amp; display.length &gt; 0 &amp;&amp; display != "block") {&#13;
            presenter.$panel.css('display', display);&#13;
        }&#13;
&#13;
        presenter.$view.parent().append(presenter.$panel);&#13;
&#13;
        presenter.$view.disableSelection();&#13;
        presenter.$removeConfirmationBox = presenter.$view.find('.confirmation-remove-note');&#13;
        presenter.$removeConfirmationBox.attr('id', 'confirmationBox-' + model['ID']);&#13;
&#13;
        presenter.$pagePanel = presenter.$view.parent().parent('.ic_page_panel');&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBox);&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBoxClock);&#13;
        presenter.$pagePanel.find('.ic_page').append(presenter.$removeConfirmationBoxStopwatch);&#13;
        presenter.changeCursor('default');&#13;
&#13;
&#13;
        presenter.$removeConfirmationBoxClock = presenter.$view.find('.confirmation-remove-clock');&#13;
        presenter.$removeConfirmationBoxStopwatch = presenter.$view.find('.confirmation-remove-stopwatch');&#13;
        presenter.$removeConfirmationBoxClock.attr('id', 'confirmationBox-' + model['ID']);&#13;
        presenter.$removeConfirmationBoxStopwatch.attr('id', 'confirmationBox-' + model['ID']);&#13;
&#13;
        presenter.$bottomPanels = $('.bottom-panel-color, .bottom-panel-thickness, .bottom-panel-floating-image');&#13;
&#13;
        presenter.config = validateModel(model);&#13;
&#13;
        presenter.$panel.addClass(presenter.model['expansionDirection']);&#13;
        presenter.stateStack = new StateStack(presenter);&#13;
    };&#13;
&#13;
    presenter.SHOW_PANEL = {&#13;
        '---': 'NONE',&#13;
        'Color panel': 'COLOR',&#13;
        'Thickness panel': 'THICKNESS',&#13;
        DEFAULT: '---'&#13;
    };&#13;
&#13;
    function validateModel(model) {&#13;
        var validated,&#13;
            widthWhenOpened,&#13;
            widthWhenClosed;&#13;
        var hasCustomButton = model["hasCustomButton"] == 'True';&#13;
        var enableUndoRedo = ModelValidationUtils.validateBoolean(model["enableUndoRedo"]);&#13;
        var disableModuleZoom = ModelValidationUtils.validateBoolean(model["disableModuleZoom"]);&#13;
&#13;
        if (!hasCustomButton) {&#13;
            presenter.$panel.children('.button.custom-script').hide();&#13;
        }&#13;
&#13;
        if (model['widthWhenOpened']) {&#13;
            validated = ModelValidationUtils.validatePositiveInteger(model['widthWhenOpened']);&#13;
        } else {&#13;
            var baseWidth = 538;&#13;
            if (enableUndoRedo) baseWidth = 610;&#13;
            var width = baseWidth + hasCustomButton * 36;&#13;
            validated = getCorrectObject(width);&#13;
        }&#13;
&#13;
        if (!validated.isValid) {&#13;
            return getErrorObject('E01');&#13;
        }&#13;
&#13;
        widthWhenOpened = validated.value;&#13;
&#13;
        if (model['Width']) {&#13;
            validated = ModelValidationUtils.validatePositiveInteger(model['Width']);&#13;
        } else {&#13;
            validated = getCorrectObject(30);&#13;
        }&#13;
&#13;
        if (!validated.isValid) {&#13;
            return getErrorObject('E01');&#13;
        }&#13;
&#13;
        widthWhenClosed = validated.value;&#13;
&#13;
        var defaultZoom = 2;&#13;
        if (model['defaultZoom']) {&#13;
            var validated = ModelValidationUtils.validatePositiveInteger(model['defaultZoom']);&#13;
            if (validated.isValid) defaultZoom = validated.value;&#13;
        }&#13;
&#13;
        return {&#13;
            'addonID': model.ID,&#13;
            'isValid': true,&#13;
&#13;
            'widthWhenClosed': widthWhenClosed,&#13;
            'widthWhenOpened': widthWhenOpened,&#13;
            'panelPosition': model['Fixed Position'] == 'True' ? 'absolute' : 'fixed',&#13;
&#13;
            'showForPen': ModelValidationUtils.validateOption(presenter.SHOW_PANEL, model.forPen),&#13;
            'showForMarker': ModelValidationUtils.validateOption(presenter.SHOW_PANEL, model.forMarker),&#13;
            'closedPanelDrawing': ModelValidationUtils.validateBoolean(model["Closed panel drawing"]),&#13;
&#13;
            'hasCustomButton': hasCustomButton,&#13;
            'onCustomButtonSelected': model['hasCustomButton'] ? model['onCustomButtonSelected'] : null,&#13;
            'onCustomButtonDeselected': model['hasCustomButton'] ? model['onCustomButtonDeselected'] : null,&#13;
            'enableUndoRedo': enableUndoRedo,&#13;
            'disableModuleZoom': disableModuleZoom,&#13;
            'defaultZoom': defaultZoom,&#13;
            'expansionDirection': model['expansionDirection']&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setImagePosition = function IWB_Toolbar_setImagePosition() {&#13;
        var topPosition = parseInt(/*$(window).scrollTop() + */(getCurrentImage().height() / 2)+ presenter.$panel.offset().top, 10);&#13;
        var leftPosition = parseInt((getCurrentImage().width() / 2) + presenter.$panel.position().left, 10);&#13;
&#13;
        presenter.floatingImageLayer.draw();&#13;
        getCurrentImage().setAbsolutePosition(getPoint(leftPosition, topPosition));&#13;
        getCurrentMoveIcon().setAbsolutePosition(getPoint(leftPosition - 10, topPosition - 20));&#13;
        getCurrentRotateIcon().setAbsolutePosition(getPoint(leftPosition - 10, topPosition - 20));&#13;
        presenter.floatingImageLayer.draw();&#13;
    };&#13;
&#13;
    presenter.preventClickActionTextAudio = function IWB_Toolbar_preventClickActionTextAudio(event) {&#13;
        if (!presenter.isZoomActive) return;&#13;
&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.disableTextAudioEventHandlers = function () {&#13;
        presenter.textAudioEvents = [];&#13;
&#13;
        // Removes (temporally) event handlers from both words and custom controls.&#13;
        presenter.modules.find('.wrapper-addon-textaudio .textaudio-text span, .wrapper-addon-textaudio .textaudio-player div').each(function (_, element) {&#13;
            // This jQuery API is no longer available in version 1.8+ versions!&#13;
            var events = jQuery(element).data('events'),&#13;
                handlers = [];&#13;
&#13;
            if (!events || !events['click']) {&#13;
                return true; // jQuery.each() continue statement&#13;
            }&#13;
&#13;
            $.each(events['click'], function (_, event) {&#13;
                handlers.push(event.handler);&#13;
            });&#13;
&#13;
            presenter.textAudioEvents.push({&#13;
                element: element,&#13;
                handlers: handlers&#13;
            });&#13;
&#13;
            $(element).unbind('click');&#13;
            $(element).on('click', preventClickActionTextAudio);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.restoreTextAudioEventHandlers = function () {&#13;
        $.each(presenter.textAudioEvents, function (_, textAudioEvent) {&#13;
            var $element = $(textAudioEvent.element);&#13;
&#13;
            $element.unbind('click');&#13;
&#13;
            $.each(textAudioEvent.handlers, function (_, handler) {&#13;
                $element.on('click', handler);&#13;
            });&#13;
        });&#13;
&#13;
        presenter.textAudioEvents = [];&#13;
    };&#13;
&#13;
    presenter.penLineColor = presenter.data.penColor;&#13;
    presenter.penLineWidth = 1;&#13;
&#13;
    presenter.markerLineColor = presenter.data.markerColor;&#13;
    presenter.markerLineWidth = presenter.data.markerThickness;&#13;
&#13;
    presenter.penClickHandler = function IWB_Toolbar_penClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-blue');&#13;
&#13;
        presenter.changeColor(presenter.penLineColor);&#13;
        presenter.changeThickness(presenter.penLineWidth);&#13;
        if(presenter.penColorBackground){&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.penColorBackground);&#13;
        }&#13;
        if(presenter.penThicknessBackground){&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.penThicknessBackground);&#13;
        }&#13;
&#13;
        presenter.toogleMasks();&#13;
&#13;
        presenter.ctx.globalCompositeOperation = 'source-over';&#13;
        presenter.drawMode = presenter.DRAW_MODE.PEN;&#13;
&#13;
        presenter.drawingLogic();&#13;
&#13;
        presenter.toggleBottomPanels();&#13;
    };&#13;
&#13;
    presenter.markerClickHandler = function IWB_Toolbar_markerClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').show();&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-yellow');&#13;
        presenter.changeColor(presenter.markerLineColor);&#13;
        presenter.changeThickness(presenter.markerLineWidth);&#13;
        if(presenter.markerColorBackground){&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.markerColorBackground);&#13;
        }&#13;
        if(presenter.markerThicknessBackground){&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.markerThicknessBackground);&#13;
        }&#13;
        presenter.toogleMasks();&#13;
&#13;
        presenter.markerCtx.globalCompositeOperation = 'source-over';&#13;
        presenter.drawMode = presenter.DRAW_MODE.MARKER;&#13;
&#13;
        presenter.markerDrawingLogic();&#13;
&#13;
        presenter.toggleBottomPanels();&#13;
        presenter.markerClicked = true;&#13;
    };&#13;
&#13;
    presenter.markerCloseHandler = function IWB_Toolbar_markerCloseHandler() {&#13;
        presenter.markerLineColor = presenter.currentLineColor;&#13;
        presenter.markerLineWidth = presenter.currentLineWidth;&#13;
        presenter.markerColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.markerThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
    };&#13;
&#13;
    presenter.getTheWidestAndHighest = function IWB_Toolbar_getTheWidestAndHighest(elem) {&#13;
        var width = $(elem).outerWidth(),&#13;
            height = $(elem).outerHeight();&#13;
&#13;
        elem.find("*").each(function () {&#13;
            if($(this).outerWidth() &gt; width){&#13;
                width = $(this).outerWidth();&#13;
            }&#13;
&#13;
            if($(this).outerHeight() &gt; height){&#13;
                height = $(this).outerHeight();&#13;
            }&#13;
        });&#13;
&#13;
        return {&#13;
            height: height,&#13;
            width: width&#13;
        };&#13;
    };&#13;
&#13;
    presenter.preventClickAction_zoomClickHandler = function IWB_Toolbar_preventClickAction_zoomClickHandler(event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.zoomClickHandler = function IWB_Toolbar_zoomClickHandler(button){&#13;
        var lastEvent = null;&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
&#13;
        presenter.isZoomActive = !presenter.isZoomActive;&#13;
        presenter.$bottomPanels.hide();&#13;
&#13;
        if (!presenter.isZoomActive) {&#13;
            presenter.changeCursor('default');&#13;
        } else {&#13;
            presenter.changeCursor('zoom-in');&#13;
        }&#13;
        presenter.modules = presenter.$pagePanel.find('.ic_page &gt; *:not(.iwb-toolbar-panel,.iwb-toolbar-note,.iwb-toolbar-clock,.iwb-toolbar-stopwatch,.confirmation-remove-note,.iwb-toolbar-mask)');&#13;
&#13;
        if(presenter.isZoomActive){&#13;
            var pageElement = $('.ic_page');&#13;
            var defaultCoverElement = $('&lt;div class="iwb-zoom-cover iwb-default-zoom-cover"&gt;&lt;/div&gt;'),&#13;
               defMaxDimensions = presenter.getTheWidestAndHighest(pageElement);&#13;
               defaultCoverElement.css({&#13;
                  position: "absolute",&#13;
                  left: 0,&#13;
                  top: 0,&#13;
                  width: defMaxDimensions.width,&#13;
                  height: defMaxDimensions.height,&#13;
                  display: pageElement.css('display'),&#13;
                  visibility: pageElement.css('visibility')&#13;
               });&#13;
           $('.ic_page').append(defaultCoverElement);&#13;
&#13;
            if (!presenter.config.disableModuleZoom) {&#13;
                presenter.modules.each(function () {&#13;
                   var coverElement = $('&lt;div class="iwb-zoom-cover"&gt;&lt;/div&gt;'),&#13;
                       maxDimensions = presenter.getTheWidestAndHighest($(this));&#13;
                   coverElement.css({&#13;
                      position: "absolute",&#13;
                      left: $(this).position().left,&#13;
                      top: $(this).position().top,&#13;
                      width: maxDimensions.width,&#13;
                      height: maxDimensions.height,&#13;
                      display: $(this).css('display'),&#13;
                      visibility: $(this).css('visibility')&#13;
                   });&#13;
&#13;
                   $('.ic_page').append(coverElement);&#13;
                });&#13;
            }&#13;
&#13;
            var iwbCoverElements = $(".iwb-zoom-cover");&#13;
&#13;
            iwbCoverElements.on('click mousedown mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
            });&#13;
&#13;
            presenter.modules.find('a').on('click', presenter.preventClickAction_zoomClickHandler);&#13;
&#13;
            iwbCoverElements.on('mousedown', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                lastEvent = e;&#13;
                presenter.isMouseDown= true;&#13;
                presenter.mouse.x = e.clientX;&#13;
                presenter.mouse.y = e.clientY;&#13;
            });&#13;
&#13;
            iwbCoverElements.on('mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.isMouseDown = false;&#13;
&#13;
                if ((lastEvent.type == 'mousedown'|| lastEvent.type == 'mousemove') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-panel') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('addon_IWB_Toolbar') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-note') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-clock') &amp;&amp;&#13;
                    !$(e.currentTarget).hasClass('iwb-toolbar-stopwatch') &amp;&amp;&#13;
                    (!$(e.currentTarget).hasClass('iwb-default-zoom-cover') ||&#13;
                    (Math.abs(presenter.mouse.x - e.clientX) &lt; 20 &amp;&amp;&#13;
                    Math.abs(presenter.mouse.y - e.clientY) &lt; 20))) { // click&#13;
                        presenter.zoomSelectedModule(e);&#13;
                }&#13;
                lastEvent = e;&#13;
            });&#13;
&#13;
            iwbCoverElements.on('mousemove', function(e) {&#13;
                if (presenter.isMouseDown) {&#13;
                    e.stopPropagation();&#13;
                    e.preventDefault();&#13;
                    var currentScrollX = $(window).scrollLeft(),&#13;
                        currentScrollY = $(window).scrollTop(),&#13;
                        differenceX = lastEvent.clientX - e.clientX,&#13;
                        differenceY = lastEvent.clientY - e.clientY;&#13;
&#13;
                    $(window).scrollLeft(currentScrollX + differenceX);&#13;
                    $(window).scrollTop(currentScrollY + differenceY);&#13;
                }&#13;
&#13;
                lastEvent = e;&#13;
            });&#13;
        }else{&#13;
            $(".iwb-zoom-cover").remove();&#13;
        }&#13;
&#13;
        presenter.$pagePanel.disableSelection();&#13;
&#13;
        if (presenter.isZoomActive) {&#13;
            presenter.disableTextAudioEventHandlers();&#13;
        } else {&#13;
            presenter.restoreTextAudioEventHandlers();&#13;
        }&#13;
&#13;
        if (presenter.areZoomEventHandlersAttached) {&#13;
            // We cannot attach multiple times the same event handlers&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.areZoomEventHandlersAttached = true;&#13;
    };&#13;
&#13;
    presenter.zoomCloseHandler = function IWB_Toolbar_zoomCloseHandler() {&#13;
        $(".iwb-zoom-cover").remove();&#13;
    };&#13;
&#13;
    presenter.eraserClickHandler = function IWB_Toolbar_eraserClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
&#13;
        if (presenter.ctx) {&#13;
            presenter.ctx.globalCompositeOperation = 'destination-out';&#13;
        }&#13;
        if (presenter.markerCtx) {&#13;
            presenter.markerCtx.globalCompositeOperation = 'destination-out';&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'auto');&#13;
        presenter.$markerMask.css('pointer-events', 'auto');&#13;
&#13;
        presenter.changeColor('rgba(0, 0, 0, 1)');&#13;
        presenter.changeThickness(presenter.data.eraserThickness);&#13;
        presenter.drawMode = presenter.DRAW_MODE.ERASER;&#13;
        presenter.drawingLogic();&#13;
        presenter.toogleMasks();&#13;
    };&#13;
&#13;
    presenter.eraserUnClickHandler = function IWB_Toolbar_eraserUnClickHandler(button) {&#13;
        presenter.panelView(button);&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
    };&#13;
&#13;
    presenter.hideAreaClickHandler = function IWB_Toolbar_hideAreaClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.toogleMasks();&#13;
        presenter.drawAreaLogic(true);&#13;
&#13;
        presenter.drawMode = presenter.DRAW_MODE.HIDE_AREA;&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-black');&#13;
        presenter.changeColor('#000');&#13;
    };&#13;
&#13;
    presenter.standAreaClickHandler = function IWB_Toolbar_standAreaClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.iwb_tmp_canvas').hide();&#13;
        presenter.toogleMasks();&#13;
        presenter.drawAreaLogic(false);&#13;
&#13;
        presenter.drawMode = presenter.DRAW_MODE.STAND_AREA;&#13;
        presenter.$defaultColorButton = presenter.$panel.find('.color-black');&#13;
        presenter.changeColor('#000');&#13;
    };&#13;
&#13;
    presenter.resetClickHandler = function IWB_Toolbar_resetClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.selectingCtx.clearRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        presenter.ctx.clearRect(0, 0, presenter.$penMask.width(), presenter.$penMask.height());&#13;
        presenter.markerCtx.clearRect(0, 0, presenter.$markerMask.width(), presenter.$markerMask.height());&#13;
&#13;
        presenter.areas = [];&#13;
        presenter.drawMode = presenter.DRAW_MODE.NONE;&#13;
&#13;
        $(".iwb-zoom-cover").remove();&#13;
&#13;
        presenter._reset(true, false, false, false, false, false);&#13;
&#13;
        if (presenter.isCustomButtonActive()) {&#13;
            var customScriptButton = presenter.$panel.find('.' + CUSTOM_BUTTON_NAME)[0];&#13;
            presenter.customScriptClickHandler(customScriptButton);&#13;
        }&#13;
&#13;
        presenter.penDataURL = null;&#13;
        presenter.markerDataUrl = null;&#13;
&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.resetOneClickHandler = function IWB_Toolbar_resetOneClickHandler(button) {&#13;
        presenter.restoreLastState();&#13;
    };&#13;
&#13;
    presenter.redoOneClickHandler = function IWB_Toolbar_redoOneClickHandler(button) {&#13;
        presenter.redoStateFromArray();&#13;
    };&#13;
&#13;
    presenter.noteClickHandler = function IWB_Toolbar_noteClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
&#13;
        var note = presenter.createNote();&#13;
        presenter.noteObjects.push(note);&#13;
&#13;
        var $noteView = note.getView();&#13;
        presenter.$pagePanel.find('.ic_page').append($noteView);&#13;
&#13;
        presenter.$pagePanel.find('.iwb-toolbar-note').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
        presenter.$pagePanel.find('.note').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.note').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.note').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.note').removeClass('clicked');&#13;
        });&#13;
&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.customScriptCreateEventData = function() {&#13;
        return {&#13;
            source : presenter.config.addonID,&#13;
            value : presenter.isCustomButtonActive() ? '1' : '0',&#13;
        };&#13;
    };&#13;
&#13;
    presenter.customScriptSendEventData = function () {&#13;
        var eventData = presenter.customScriptCreateEventData();&#13;
        if (presenter.playerController !== null) {&#13;
            presenter.playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.customScriptClickHandler = function IWB_Toolbar_customScriptClickHandler(button) {&#13;
        if (presenter.config.hasCustomButton) {&#13;
            presenter.isZoomActive = false;&#13;
            presenter.restoreTextAudioEventHandlers();&#13;
&#13;
            presenter.panelView(button);&#13;
            if (!presenter.isCommandSourceToDeselectCustomButton) {&#13;
                presenter.runCustomScript();&#13;
                presenter.customScriptSendEventData();&#13;
            }&#13;
            presenter.isCommandSourceToDeselectCustomButton = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.floatingImageClickHandler = function IWB_Toolbar_floatingImageClickHandler(button) {&#13;
        if (isJQueryObject(button) &amp;&amp; !isFloatingImageBtnVisible()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        $.when.apply($, presenter.allImagesLoadedPromises).then(function() {&#13;
            var display = presenter.$pagePanel.find('.floating-image-mask').css('display');&#13;
            if (display === 'none') {&#13;
                presenter.$floatingImageMask.show();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').show();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '1');&#13;
            } else {&#13;
                presenter.$floatingImageMask.hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').hide();&#13;
                presenter.$pagePanel.find('.floating-image').removeClass('clicked');&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '0');&#13;
            }&#13;
            presenter.setImagePosition();&#13;
        });&#13;
    };&#13;
&#13;
    function isJQueryObject(element) {&#13;
        return !!element[0];&#13;
    }&#13;
&#13;
    function isFloatingImageBtnVisible() {&#13;
        return $('.floating-image').css('display') !== 'none';&#13;
    }&#13;
&#13;
    presenter.clockClickHandler = function IWB_Toolbar_clockClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.clock').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.clock').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.clock').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.clock').removeClass('clicked');&#13;
        });&#13;
        presenter.createClock();&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.stopwatchClickHandler = function IWB_Toolbar_stopwatchClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$pagePanel.find('.stopwatch').on('mousedown', function() {&#13;
            presenter.$pagePanel.find('.stopwatch').addClass('clicked');&#13;
        });&#13;
        presenter.$pagePanel.find('.stopwatch').on('mouseup', function() {&#13;
            presenter.$pagePanel.find('.stopwatch').removeClass('clicked');&#13;
        });&#13;
        presenter.createStopwatch();&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.closeClickHandler = function IWB_Toolbar_closeClickHandler(button) {&#13;
        if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
            presenter.closePenColor = presenter.currentLineColor;&#13;
            presenter.closePenThickness = presenter.currentLineWidth;&#13;
&#13;
            presenter.isCloseColor = true;&#13;
        }else if(presenter.shouldSaveColor == 'marker'){&#13;
            presenter.closePenColor = presenter.currentLineColor;&#13;
            presenter.closePenThickness = presenter.currentMarkerThickness;&#13;
&#13;
            presenter.isCloseColor = true;&#13;
        }&#13;
        else{&#13;
            presenter.isCloseColor = false;&#13;
        }&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        presenter.$panel.find('.clicked').removeClass('clicked');&#13;
        presenter.closePanel(true);&#13;
        presenter.isPanelOpened = false;&#13;
        if(presenter.activeButton != 'open'){&#13;
            presenter.activeFunction = presenter.activeButton;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.openClickHandler = function IWB_Toolbar_openClickHandler(button){&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
        if (!presenter.isPanelOpened) {&#13;
            presenter.openPanel(true);&#13;
        }&#13;
&#13;
        if (presenter.customButtonActive) {&#13;
            var button = presenter.$pagePanel.find('.' + CUSTOM_BUTTON_NAME);&#13;
            button.addClass('clicked');&#13;
        }&#13;
&#13;
        if(presenter.activeFunction){&#13;
            if(['clock', 'stopwatch', 'note', 'reset', 'reset-one', 'redo-one'].indexOf(presenter.activeFunction) == -1){&#13;
                if(!presenter.recklick){&#13;
                    presenter.functionButton = presenter.$pagePanel.find('.'+presenter.activeFunction);&#13;
                    presenter.buttonsLogic[presenter.activeFunction].onOpen(presenter.functionButton);&#13;
                }&#13;
                presenter.isRecklicked = false;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isPanelOpened = true;&#13;
&#13;
        if(presenter.isSavedState){&#13;
            if(presenter.isCloseColor){&#13;
                presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
            }&#13;
            presenter.isSavedState = false;&#13;
        }else{&#13;
            if(presenter.isCloseColor){&#13;
                presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
            }else{&#13;
                presenter.changeColor('#000', presenter.$bottomPanels.find('.color-black'));&#13;
                presenter.changeThickness(1, presenter.$bottomPanels.find('.thickness-1'));&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.panelView = function IWB_Toolbar_panelView (button) {&#13;
        var shouldClosePanels = shouldClosePanelsOnReset(button);&#13;
&#13;
        presenter._reset(shouldClosePanels, false, shouldHideDrawingMasks(button), shouldHideSelectingMasks(button), shouldHideFloatingImage(button), false);&#13;
        if (!$(button).hasClass('open') &amp;&amp; !$(button).hasClass('close')) {&#13;
            if ($(button).hasClass('clicked')) {&#13;
                $(button).removeClass('clicked');&#13;
            } else {&#13;
                presenter.$panel.find('.clicked').not('.custom-script').removeClass('clicked');&#13;
                $(button).addClass('clicked');&#13;
            }&#13;
        }&#13;
        if (presenter.isSupportCSSPointerEvents()) {&#13;
            if (!$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker') &amp;&amp; !$(button).hasClass('eraser')){&#13;
                if(!presenter.config.closedPanelDrawing) {&#13;
                    presenter.$penMask.css('pointer-events', 'none');&#13;
                    presenter.$markerMask.css('pointer-events', 'none');&#13;
                }&#13;
            }else{&#13;
                presenter.$penMask.css('pointer-events', 'auto');&#13;
                presenter.$markerMask.css('pointer-events', 'auto');&#13;
            }&#13;
        }&#13;
        changeCurrentFloatingImage(presenter.currentFloatingImageIndex);&#13;
    };&#13;
&#13;
    presenter.colorClickHandler = function IWB_Toolbar_colorClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        if (presenter.areDrawingButtonsActive()) {&#13;
            presenter.$panel.find('.button.clicked-lighter').removeClass('clicked-lighter');&#13;
            $(button).toggleClass('clicked-lighter');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.thicknessClickHandler = function IWB_Toolbar_thicknessClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        if (presenter.areDrawingButtonsActive()) {&#13;
            presenter.$panel.find('.button.clicked-lighter').removeClass('clicked-lighter');&#13;
            $(button).toggleClass('clicked-lighter');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.defaultClickHandler = function IWB_Toolbar_defaultClickHandler(button) {&#13;
        presenter.isZoomActive = false;&#13;
        presenter.restoreTextAudioEventHandlers();&#13;
&#13;
        presenter.panelView(button);&#13;
    };&#13;
&#13;
    presenter.penUnclickHandler = function IWB_Toolbar_penUnclickHandler (button) {&#13;
        presenter._reset(true, false, 1, true, true, false);&#13;
        if ($(button).hasClass('clicked')) {&#13;
            $(button).removeClass('clicked');&#13;
        } else {&#13;
            presenter.$panel.find('.clicked').removeClass('clicked');&#13;
            $(button).addClass('clicked');&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
&#13;
        presenter.penLineColor = presenter.currentLineColor;&#13;
        presenter.penLineWidth = presenter.currentLineWidth;&#13;
        presenter.colorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.penThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
&#13;
        presenter.penClicked = false;&#13;
    };&#13;
&#13;
    presenter.markerUnclickHandler = function IWB_Toolbar_markerUnclickHandler(button) {&#13;
        presenter._reset(true, false, 1, true, true, false);&#13;
        if ($(button).hasClass('clicked')) {&#13;
            $(button).removeClass('clicked');&#13;
        } else {&#13;
            presenter.$panel.find('.clicked').removeClass('clicked');&#13;
            $(button).addClass('clicked');&#13;
        }&#13;
&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
&#13;
        presenter.markerLineColor = presenter.currentLineColor;&#13;
        presenter.markerLineWidth = presenter.currentLineWidth;&#13;
        presenter.markerColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.markerThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
        presenter.markerClicked = false;&#13;
    };&#13;
&#13;
    presenter.penCloseHandler = function IWB_Toolbar_penCloseHandler() {&#13;
        presenter.penLineColor = presenter.currentLineColor;&#13;
        presenter.penLineWidth = presenter.currentLineWidth;&#13;
        presenter.penColorBackground = presenter.$panel.find('.button.color').css('background-image');&#13;
        presenter.penThicknessBackground = presenter.$panel.find('.button.thickness').css('background-image');&#13;
    };&#13;
&#13;
    presenter.buttonsLogic = {&#13;
        'pen' : {&#13;
            'onOpen': presenter.penClickHandler,&#13;
            'onClose': presenter.penCloseHandler,&#13;
            'onReclicked': presenter.penUnclickHandler&#13;
        },&#13;
        'marker' : {&#13;
            'onOpen': presenter.markerClickHandler,&#13;
            'onClose': presenter.markerCloseHandler,&#13;
            'onReclicked': presenter.markerUnclickHandler&#13;
        },&#13;
        'default' : {&#13;
            'onOpen': presenter.defaultClickHandler,&#13;
            'onReclicked': presenter.defaultClickHandler&#13;
        },&#13;
        'color' : {&#13;
            'onOpen': presenter.colorClickHandler,&#13;
            'onReclicked': presenter.colorClickHandler&#13;
        },&#13;
        'thickness' : {&#13;
            'onOpen': presenter.thicknessClickHandler,&#13;
            'onReclicked': presenter.thicknessClickHandler&#13;
        },&#13;
        'zoom' : {&#13;
            'onOpen': presenter.zoomClickHandler,&#13;
            'onReclicked': presenter.zoomClickHandler,&#13;
            'onClose': presenter.zoomCloseHandler&#13;
        },&#13;
        'eraser' : {&#13;
            'onOpen': presenter.eraserClickHandler,&#13;
            'onReclicked': presenter.eraserUnClickHandler&#13;
        },&#13;
        'hide-area' : {&#13;
            'onOpen': presenter.hideAreaClickHandler,&#13;
            'onReclicked': presenter.hideAreaClickHandler&#13;
        },&#13;
        'stand-area' : {&#13;
            'onOpen': presenter.standAreaClickHandler,&#13;
            'onClose': '',&#13;
            'onReclicked': presenter.standAreaClickHandler&#13;
        },&#13;
        'reset' : {&#13;
            'onOpen': presenter.resetClickHandler,&#13;
            'onReclicked': presenter.resetClickHandler&#13;
        },&#13;
        'reset-one' : {&#13;
            'onOpen': presenter.resetOneClickHandler,&#13;
            'onClose': '',&#13;
            'onReclicked': presenter.resetOneClickHandler&#13;
        },&#13;
        'redo-one' : {&#13;
            'onOpen': presenter.redoOneClickHandler,&#13;
            'onReclicked': presenter.redoOneClickHandler&#13;
        },&#13;
        'note' : {&#13;
            'onOpen': presenter.noteClickHandler,&#13;
            'onReclicked': presenter.noteClickHandler&#13;
        },&#13;
        'custom-script' : {&#13;
            'onOpen': presenter.customScriptClickHandler,&#13;
            'onReclicked': presenter.customScriptClickHandler&#13;
        },&#13;
        'floating-image' : {&#13;
            'onOpen': presenter.floatingImageClickHandler,&#13;
            'onReclicked': presenter.floatingImageClickHandler&#13;
        },&#13;
        'clock' : {&#13;
            'onOpen': presenter.clockClickHandler,&#13;
            'onReclicked': presenter.clockClickHandler&#13;
        },&#13;
        'stopwatch' : {&#13;
            'onOpen': presenter.stopwatchClickHandler,&#13;
            'onReclicked': presenter.stopwatchClickHandler&#13;
        },&#13;
        'close' : {&#13;
            'onOpen': presenter.closeClickHandler&#13;
        },&#13;
        'open' : {&#13;
            'onOpen': presenter.openClickHandler&#13;
        }&#13;
    };&#13;
&#13;
    function isReclickable(button) {&#13;
        var $button = $(button);&#13;
        return !$button.hasClass('open')&#13;
        &amp;&amp; !$button.hasClass('close')&#13;
        &amp;&amp; !$button.hasClass('reset')&#13;
        &amp;&amp; !$button.hasClass('reset-one')&#13;
        &amp;&amp; !$button.hasClass('redo-one');&#13;
    }&#13;
&#13;
    function clickHandlers (button) {&#13;
        presenter._iwb_buttons.push($(button));&#13;
        var buttonName = $(button).data("name"),&#13;
            sameButton = presenter.$pagePanel.find('.clicked').data("name") == $(button).data("name");&#13;
&#13;
        if (buttonName == CUSTOM_BUTTON_NAME) {&#13;
            if (!presenter.customButtonActive) {&#13;
                presenter.customButtonActive = true;&#13;
                presenter.buttonsLogic[$(button).attr("data-name")].onOpen(button);&#13;
            } else {&#13;
                presenter.customButtonActive = false;&#13;
                presenter.buttonsLogic[$(button).attr("data-name")].onReclicked(button);&#13;
            }&#13;
            return;&#13;
        }&#13;
&#13;
        if(presenter.activeButton != '' &amp;&amp; presenter.buttonsLogic[presenter.activeButton].onClose){&#13;
            presenter.buttonsLogic[presenter.activeButton].onClose(button);&#13;
        }&#13;
&#13;
        if(presenter.activeButton == 'open' &amp;&amp; presenter.buttonClicked &amp;&amp; !presenter.recklick &amp;&amp; sameButton){&#13;
            presenter.activeButton = buttonName;&#13;
        }&#13;
&#13;
        if(buttonName == presenter.activeButton){&#13;
            if(!presenter.isRecklicked){&#13;
                if(presenter.buttonsLogic[presenter.activeButton].onReclicked){&#13;
                    presenter.buttonsLogic[presenter.activeButton].onReclicked(button);&#13;
                }&#13;
                presenter.isRecklicked = true;&#13;
                if(isReclickable(button)) presenter.recklick = true;&#13;
            }else{&#13;
                presenter.buttonsLogic[$(button).attr("data-name")].onOpen(button);&#13;
                presenter.isRecklicked = false;&#13;
                if(isReclickable(button)) presenter.recklick = false;&#13;
            }&#13;
        }else{&#13;
            presenter.buttonsLogic[$(button).attr("data-name")].onOpen(button);&#13;
            presenter.isRecklicked = false;&#13;
            if(isReclickable(button)) presenter.recklick = false;&#13;
        }&#13;
&#13;
        if(!$(button).hasClass('color') &amp;&amp; !$(button).hasClass('thickness')){&#13;
            presenter.activeButton = $(button).attr("data-name");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.deselectCustomButton = function () {&#13;
        if (presenter.config.hasCustomButton &amp;&amp; presenter.customButtonActive) {&#13;
            if (isPanelOpened()) {&#13;
                presenter.isCommandSourceToDeselectCustomButton = true;&#13;
                var button = presenter.$pagePanel.find('.button.custom-script.clicked')[0];&#13;
                clickHandlers(button);&#13;
            } else {&#13;
                presenter.customButtonActive = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.addEventHandlers = function IWB_Toolbar_addEventHandlers() {&#13;
        presenter.$pagePanel.find('.iwb-toolbar-mask').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.iwb-toolbar-note').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$panel.click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            if($(this).hasClass('yes-button') || $(this).hasClass('no-button')){&#13;
                return;&#13;
            }&#13;
&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if(presenter.isSavedState){&#13;
                presenter.buttonClicked = true;&#13;
            }&#13;
            clickHandlers(this);&#13;
            if (isDependingOnDrawing(this) &amp;&amp; presenter.areDrawingButtonsActive() || isFloatingImageButton(this)) {&#13;
                openBottomPanel(this);&#13;
            }&#13;
            if ($(this).hasClass('reset') || $(this).hasClass('reset-one') || $(this).hasClass('redo-one')) {&#13;
                $(this).removeClass('clicked');&#13;
            }&#13;
&#13;
            if(!$(this).hasClass('open') &amp;&amp; !$(this).hasClass('note') &amp;&amp; !$(this).hasClass('stopwatch') &amp;&amp; !$(this).hasClass('clock') &amp;&amp; !$(this).hasClass('close')){&#13;
                presenter.buttonClicked = true;&#13;
            }&#13;
&#13;
            if($(this).hasClass('reset') || $(this).hasClass('reset-one') || $(this).hasClass('redo-one') || $(this).hasClass('default') || $(this).hasClass('note') || $(this).hasClass('stopwatch') || $(this).hasClass('clock')){&#13;
                presenter.buttonClicked = false;&#13;
            }&#13;
&#13;
            var btnName = $(this).data("name");&#13;
&#13;
            if(btnName != 'open' &amp;&amp; btnName != 'close' &amp;&amp; btnName != 'color' &amp;&amp; btnName != 'thickness'){&#13;
                presenter.shouldSaveColor = btnName;&#13;
            }&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button-drawing-details').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            changeBottomButtonState(this);&#13;
&#13;
            changeDrawingType(this);&#13;
        });&#13;
&#13;
        presenter.$pagePanel.find('.button-floating-image').on(getTouchStartOrMouseDownEventName(), function(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            changeBottomButtonState(this);&#13;
&#13;
            changeCurrentFloatingImage(parseInt($(this).attr('index'), 10));&#13;
            presenter.setImagePosition();&#13;
        });&#13;
    };&#13;
&#13;
    function applyOnDblClickHandler() {&#13;
        if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.MOVE) {&#13;
            presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.ROTATE;&#13;
            getCurrentMoveIcon().visible(false);&#13;
            getCurrentRotateIcon().visible(true);&#13;
            getCurrentGroup().draggable(false);&#13;
            presenter.floatingImageLayer.draw();&#13;
        } else {&#13;
            presenter.floatingImageMode = presenter.FLOATING_IMAGE_MODE.MOVE;&#13;
            getCurrentMoveIcon().visible(true);&#13;
            getCurrentRotateIcon().visible(false);&#13;
            getCurrentGroup().draggable(true);&#13;
            presenter.floatingImageLayer.draw();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isLeft = function(center, startPos, currentPos) {&#13;
        return ((startPos.x - center.x)*(currentPos.y - center.y) - (startPos.y - center.y)*(currentPos.x - center.x)) &gt;= 0;&#13;
    };&#13;
&#13;
    function Vector(imageCenterPosition, mousePosition) {&#13;
        this.x = imageCenterPosition.x - mousePosition.x;&#13;
        this.y = imageCenterPosition.y - mousePosition.y;&#13;
        this.length = Math.sqrt(this.x * this.x + this.y * this.y);&#13;
    }&#13;
&#13;
    presenter._calculateVectorsAngle = function (v1, v2) {&#13;
        var angleArg = (v1.x * v2.x + v1.y * v2.y) / (v1.length * v2.length);&#13;
    &#13;
        if (v1.length === 0 || v2.length === 0 || v1.length === v2.length || -1 &gt; angleArg || angleArg &gt;= 1) {&#13;
            /*&#13;
            Comments to loop conditions:&#13;
            - can not be divided by zero  [v1.length === 0 || v2.length === 0]&#13;
            - arccos(1) = 0  [v1.length === v2.length]&#13;
            - range of value: -1 &lt;= cos(x) &lt; 1  [-1 &gt; angleArg || angleArg &gt;= 1]&#13;
            */&#13;
            return {isCorrect: false};&#13;
        }&#13;
        &#13;
        return {isCorrect: true, angleValue: Math.acos(angleArg)};&#13;
    };&#13;
&#13;
    function changeCurrentFloatingImage(index) {&#13;
        $.when.apply($, presenter.allImagesLoadedPromises).then(function() {&#13;
            presenter.$panel.find('.button-floating-image-' + (index + 1)).addClass('clicked-lighter');&#13;
            getCurrentGroup().visible(false);&#13;
            presenter.currentFloatingImageIndex = index;&#13;
            getCurrentGroup().visible(true);&#13;
            presenter.floatingImageLayer.draw();&#13;
&#13;
            var isMouseDown = false,&#13;
                startingVector = null;&#13;
&#13;
            function rotateActionStartHandler() {&#13;
                if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE) {&#13;
                    isMouseDown = true;&#13;
                    var imageCenter = {&#13;
                        x: (getCurrentImage().getAbsolutePosition().x),&#13;
                        y: (getCurrentImage().getAbsolutePosition().y)&#13;
                    };&#13;
&#13;
                    startingVector = new Vector(imageCenter, presenter.floatingImageStage.getPointerPosition());&#13;
                }&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.off('mousedown touchstart mouseup touchend touchmove mousemove');&#13;
            presenter.$floatingImageMask.on('mousedown', rotateActionStartHandler);&#13;
            presenter.$floatingImageMask.on('touchstart', rotateActionStartHandler);&#13;
&#13;
            function rotateActionEndHandler() {&#13;
                if (presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE) {&#13;
                    isMouseDown = false;&#13;
                }&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.on('mouseup', rotateActionEndHandler);&#13;
            presenter.$floatingImageMask.on('touchend', rotateActionEndHandler);&#13;
&#13;
            var previousPosition = null;&#13;
&#13;
            function rotateActionMoveHandler() {&#13;
                var currentPosition = presenter.floatingImageStage.getPointerPosition();&#13;
&#13;
                if (isMouseDown &amp;&amp; presenter.floatingImageMode == presenter.FLOATING_IMAGE_MODE.ROTATE &amp;&amp; previousPosition) {&#13;
                    var imageCenter = {&#13;
                        x: (getCurrentImage().getAbsolutePosition().x),&#13;
                        y: (getCurrentImage().getAbsolutePosition().y)&#13;
                    };&#13;
&#13;
                    var currentVector = new Vector(imageCenter, presenter.floatingImageStage.getPointerPosition());&#13;
                    var angle = presenter._calculateVectorsAngle(startingVector, currentVector);&#13;
                    var isLeft = presenter.isLeft(imageCenter, previousPosition, currentPosition);&#13;
                    &#13;
                    if (angle.isCorrect == false){&#13;
                        getCurrentImage();&#13;
                        presenter.floatingImageLayer.draw();&#13;
                    } else {&#13;
                        getCurrentImage().rotate(isLeft ? angle.angleValue : -angle.angleValue);&#13;
                        presenter.floatingImageLayer.draw();&#13;
                    }&#13;
                }&#13;
&#13;
                previousPosition = currentPosition;&#13;
            }&#13;
&#13;
            presenter.$floatingImageMask.on('mousemove', rotateActionMoveHandler);&#13;
            presenter.$floatingImageMask.on('touchmove', rotateActionMoveHandler);&#13;
        });&#13;
    }&#13;
&#13;
    presenter.addFloatingImages = function IWB_Toolbar_addFloatingImages (model) {&#13;
        var $mask = $('&lt;div class="iwb-toolbar-mask floating-image-mask"&gt;&lt;/div&gt;');&#13;
        presenter.$pagePanel.find('.ic_page').append($mask);&#13;
        $mask.hide();&#13;
&#13;
        var stage = new Kinetic.Stage({&#13;
            container: $mask[0],&#13;
            visible: true,&#13;
            width: $mask.width(),&#13;
            height: $mask.height()&#13;
        });&#13;
&#13;
        var layer = new Kinetic.Layer();&#13;
&#13;
        presenter.$floatingImageMask = $mask;&#13;
        presenter.floatingImageLayer = layer;&#13;
        presenter.floatingImageStage = stage;&#13;
        presenter.allImagesLoadedPromises = [];&#13;
&#13;
        for (var index = 0; index &lt; 3; index++) {&#13;
            presenter.loadDeferredFloatingImage(index, model, layer, stage);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadDeferredFloatingImage = function(index, model, layer, stage) {&#13;
        var imageObj = new Image();&#13;
        var deferredImage = new $.Deferred();&#13;
        presenter._kinetic.imageObj.push(imageObj);&#13;
        $(imageObj).load(function() {&#13;
            var group = new Kinetic.Group({&#13;
                draggable: true,&#13;
                visible: index == presenter.currentFloatingImageIndex&#13;
            });&#13;
&#13;
            var image = new Kinetic.Image({&#13;
                x: imageObj.width / 2,&#13;
                y: $(window).scrollTop() + (imageObj.height / 2)+ presenter.$panel.offset().top,&#13;
                image: imageObj,&#13;
                width: imageObj.width,&#13;
                height: imageObj.height,&#13;
                offset: { x: imageObj.width / 2, y: imageObj.height / 2 }&#13;
            });&#13;
&#13;
            group.on('dblclick', function() {&#13;
                applyOnDblClickHandler();&#13;
            });&#13;
&#13;
            presenter._kinetic.images.push(image);&#13;
&#13;
            applyDoubleTapHandler(group, applyOnDblClickHandler);&#13;
&#13;
            var imageMoveObj = new Image();&#13;
            $(imageMoveObj).load(function() {&#13;
                var moveIcon = new Kinetic.Image({&#13;
                    x: (imageObj.width / 2) - 16, // -16, czyli połowa szerokości obrazka&#13;
                    y: (imageObj.height / 2) - 16 + presenter.$panel.offset().top, // -16, czyli połowa wysokości obrazka&#13;
                    image: imageMoveObj,&#13;
                    opacity: 0.4&#13;
                });&#13;
&#13;
                presenter._kinetic.moveIcon.push(moveIcon);&#13;
                var imageRotateObj = new Image();&#13;
                $(imageRotateObj).load(function() {&#13;
                    var rotateIcon = new Kinetic.Image({&#13;
                        x: (imageObj.width / 2) - 16, // -16, czyli połowa szerokości obrazka&#13;
                        y: (imageObj.height / 2) - 16 + presenter.$panel.offset().top, // -16, czyli połowa wysokości obrazka&#13;
                        image: imageRotateObj,&#13;
                        visible: false,&#13;
                        opacity: 0.4&#13;
                    });&#13;
&#13;
                    group.add(image);&#13;
                    group.add(moveIcon);&#13;
                    group.add(rotateIcon);&#13;
                    layer.add(group);&#13;
                    stage.add(layer);&#13;
                    presenter.floatingImageGroups[index] = group;&#13;
                    presenter._kinetic.rotateIcon.push(rotateIcon);&#13;
&#13;
                    deferredImage.resolve();&#13;
                });&#13;
                imageRotateObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/it_rotate.png');&#13;
                presenter._kinetic.rotateObj.push(imageRotateObj);&#13;
&#13;
            });&#13;
            imageMoveObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/it_move.png');&#13;
&#13;
            presenter._kinetic.moveObj.push(imageMoveObj);&#13;
        });&#13;
&#13;
&#13;
        presenter.allImagesLoadedPromises.push(deferredImage.promise());&#13;
        if (model['floatingImages'] &amp;&amp; model['floatingImages'][index] &amp;&amp; model['floatingImages'][index]['Image'].length &gt; 0) {&#13;
            imageObj.src = model['floatingImages'][index]['Image'];&#13;
        } else {&#13;
            imageObj.src = DOMOperationsUtils.getResourceFullPath(presenter.playerController, 'addons/resources/' + presenter.DEFAULT_FLOATING_IMAGE[index]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getZoomHeightScale = function () {&#13;
        var initialSize = presenter.zoomConfiguration.initialWindowHeight - presenter.zoomConfiguration.initialNotScaledOffset;&#13;
        var newSize = window.iframeSize.windowInnerHeight - presenter.zoomConfiguration.initialNotScaledOffset;&#13;
&#13;
        var zoomHeightScale = newSize / initialSize;&#13;
&#13;
        zoomHeightScale = zoomHeightScale === 0 || isNaN(zoomHeightScale) || !isFinite(zoomHeightScale) ? 1 : zoomHeightScale;&#13;
&#13;
        return zoomHeightScale&#13;
    };&#13;
&#13;
    presenter.isOnScreen = function (element, windowElement) {&#13;
        var zoomHeightScale = presenter.getZoomHeightScale();&#13;
        var topWindow = $(windowElement.parent.document);&#13;
        var coords = {&#13;
            top: topWindow.scrollTop(),&#13;
            left: topWindow.scrollLeft(),&#13;
            right: topWindow.scrollLeft() + topWindow.width(),&#13;
            bottom: topWindow.scrollTop() + topWindow.height()&#13;
        };&#13;
&#13;
        var bounds = element.offset();&#13;
        bounds.right = bounds.left + element.outerWidth();&#13;
        bounds.bottom = bounds.top + element.outerHeight();&#13;
&#13;
        bounds.bottom /= zoomHeightScale;&#13;
&#13;
        return !(coords.right &lt; bounds.left || coords.left &gt; bounds.right || coords.bottom &lt; bounds.top || coords.top &gt; bounds.bottom);&#13;
    };&#13;
&#13;
    function addScrollHandler() {&#13;
        if (!presenter.playerController || presenter.playerController.isPlayerInCrossDomain()) return;&#13;
        var $defaultScrollElement = $(window.parent.document);&#13;
        var $mCourserScrollElement = $defaultScrollElement.find('#lesson-view &gt; div &gt; div');&#13;
        var $mAuthorMobileScrollElement = $(window);&#13;
        var $mCourserMobileScrollElement = $("#content-view");&#13;
        var scrollElements = [$defaultScrollElement, $mCourserScrollElement, $mAuthorMobileScrollElement, $mCourserMobileScrollElement];&#13;
        try {&#13;
            for (var i = 0; i &lt; scrollElements.length; i++) {&#13;
                scrollElements[i].scroll(IWB_Toolbar_scrollHandler);&#13;
            }&#13;
        } catch(e) {}&#13;
    }&#13;
&#13;
    var difference = 0,&#13;
        lastScrollTop = 0,&#13;
        panelTop = 0;&#13;
    function IWB_Toolbar_scrollHandler() {&#13;
        if (presenter.isOnScreen(presenter.$view.parent(), window)) {&#13;
            var containerHeight = presenter.$pagePanel.outerHeight(true),&#13;
                scrollTop = $(this).scrollTop(),&#13;
                baseHeightScale = presenter.playerController.getScaleInformation().scaleY,&#13;
                min = presenter.$pagePanel.offset().top / baseHeightScale,&#13;
                headerHeight = $('.ic_header').outerHeight(true) - 20,&#13;
                max = (containerHeight + headerHeight) / baseHeightScale,&#13;
                zoomHeightScale = presenter.getZoomHeightScale();&#13;
            difference = scrollTop - lastScrollTop;&#13;
            panelTop = parseInt(presenter.$panel.css('top'), 10) + difference * zoomHeightScale / baseHeightScale;&#13;
            lastScrollTop = scrollTop;&#13;
&#13;
            if (panelTop &amp;&amp; (panelTop) &gt; min &amp;&amp; (panelTop) &lt; max) {&#13;
                presenter.$panel.css({&#13;
                    'top': (panelTop) + 'px'&#13;
                });&#13;
            } else if (panelTop &amp;&amp; (panelTop) &gt;= max) {&#13;
                presenter.$panel.css({&#13;
                    'top': (containerHeight - presenter.$panel.outerHeight(true) + min) + 'px'&#13;
                });&#13;
            } else if (panelTop &amp;&amp; (panelTop) &lt;= min) {&#13;
                presenter.$panel.css({&#13;
                    'top': min + 'px'&#13;
                });&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function drawSketch() {&#13;
        var sketch = presenter.$view.parent().find('.selecting');&#13;
        var canvas = sketch.find('canvas');&#13;
        canvas.width = sketch.width;&#13;
        canvas.height = sketch.height;&#13;
&#13;
        var iwb_tmp_canvas = document.createElement('canvas');&#13;
        var tmp_ctx = iwb_tmp_canvas.getContext('2d');&#13;
        iwb_tmp_canvas.id = 'iwb_tmp_canvas';&#13;
        iwb_tmp_canvas.width = canvas.width();&#13;
        iwb_tmp_canvas.height = canvas.height();&#13;
&#13;
        var $tmpCanvas = $('#iwb_tmp_canvas');&#13;
&#13;
        if ($.contains(document, $tmpCanvas[0])) {&#13;
            $tmpCanvas.remove();&#13;
        }&#13;
&#13;
        presenter.$view.parent().find('.selecting').append(iwb_tmp_canvas);&#13;
&#13;
        var mouse = getPoint(0, 0);&#13;
        var start_mouse = getPoint(0, 0);&#13;
&#13;
        /* Mouse Capturing Work */&#13;
        if( /Android|X11|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {&#13;
            iwb_tmp_canvas.addEventListener('touchmove', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('touchstart', function(e) {&#13;
                iwb_tmp_canvas.addEventListener('touchmove', onPaint, false);&#13;
&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                start_mouse.x = mouse.x;&#13;
                start_mouse.y = mouse.y;&#13;
&#13;
                onPaint();&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('touchend', function(e) {&#13;
                iwb_tmp_canvas.removeEventListener('touchmove', onPaint, false);&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                // Writing down to real canvas now&#13;
                // ctx.drawImage(iwb_tmp_canvas, 0, 0);&#13;
                // Clearing tmp canvas&#13;
                tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
            }, false);&#13;
        }else{&#13;
            iwb_tmp_canvas.addEventListener('mousemove', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ?  e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('mousedown', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                iwb_tmp_canvas.addEventListener('mousemove', onPaint, false);&#13;
&#13;
                mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;&#13;
                mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;&#13;
&#13;
                start_mouse.x = mouse.x;&#13;
                start_mouse.y = mouse.y;&#13;
                onPaint();&#13;
            }, false);&#13;
&#13;
            iwb_tmp_canvas.addEventListener('mouseup', function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                iwb_tmp_canvas.removeEventListener('mousemove', onPaint, false);&#13;
                // Writing down to real canvas now&#13;
                // ctx.drawImage(iwb_tmp_canvas, 0, 0);&#13;
                // Clearing tmp canvas&#13;
                tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
            }, false);&#13;
        }&#13;
&#13;
        /* Drawing on Paint App */&#13;
        tmp_ctx.lineWidth = 1;&#13;
        tmp_ctx.lineJoin = 'round';&#13;
        tmp_ctx.lineCap = 'round';&#13;
        tmp_ctx.strokeStyle = 'black';&#13;
        tmp_ctx.fillStyle = 'black';&#13;
&#13;
        var onPaint = function() {&#13;
            // Tmp canvas is always cleared up before drawing.&#13;
            tmp_ctx.clearRect(0, 0, iwb_tmp_canvas.width, iwb_tmp_canvas.height);&#13;
&#13;
            var x = Math.min(mouse.x, start_mouse.x);&#13;
            var y = Math.min(mouse.y, start_mouse.y);&#13;
            var width = Math.abs(mouse.x - start_mouse.x);&#13;
            var height = Math.abs(mouse.y - start_mouse.y);&#13;
            tmp_ctx.strokeRect(x, y, width, height);&#13;
        };&#13;
    }&#13;
&#13;
    presenter.drawAreaLogic = function IWB_Toolbar_drawAreaLogic(isHide) {&#13;
        drawSketch();&#13;
&#13;
        presenter.drawAreaLogic_touchEndCallback = function (event) {&#13;
            var pos = getCursorPosition(event.originalEvent);&#13;
&#13;
            presenter.stopSelection = getPoint(pos.x, pos.y);&#13;
&#13;
            drawArea(isHide);&#13;
            presenter.areas.push({&#13;
                isHide: isHide,&#13;
                width: presenter.startSelection.x - presenter.stopSelection.x,&#13;
                height: presenter.startSelection.y - presenter.stopSelection.y,&#13;
                x: presenter.stopSelection.x,&#13;
                y: presenter.stopSelection.y,&#13;
                color: presenter.currentLineColor&#13;
            });&#13;
            presenter.standHideAreaClicked = false;&#13;
        };&#13;
&#13;
        presenter.drawAreaLogic_mouseUpCallback = function (event) {&#13;
            event.stopPropagation();&#13;
            event.preventDefault();&#13;
&#13;
            var pos = getCursorPosition(event);&#13;
&#13;
            presenter.stopSelection = getPoint(pos.x, pos.y);&#13;
&#13;
            drawArea(isHide);&#13;
            presenter.areas.push({&#13;
                isHide: isHide,&#13;
                width: presenter.startSelection.x - presenter.stopSelection.x,&#13;
                height: presenter.startSelection.y - presenter.stopSelection.y,&#13;
                x: presenter.stopSelection.x,&#13;
                y: presenter.stopSelection.y,&#13;
                color: presenter.currentLineColor&#13;
            });&#13;
            presenter.standHideAreaClicked = false;&#13;
&#13;
            presenter.pushStateToStack();&#13;
        };&#13;
&#13;
        if( /Android|X11|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('touchstart', presenter.drawAreaLogic_touchStartCallback);&#13;
&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('touchend', presenter.drawAreaLogic_touchEndCallback);&#13;
        }else{&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('mousedown', presenter.drawAreaLogic_mouseDownCallback);&#13;
&#13;
            presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas').on('mouseup', presenter.drawAreaLogic_mouseUpCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawAreaLogic_touchStartCallback = function (event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
        presenter.standHideAreaClicked = true;&#13;
        var pos = getCursorPosition(event.originalEvent);&#13;
        presenter.startSelection = getPoint(pos.x, pos.y);&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.drawAreaLogic_mouseDownCallback = function (event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
&#13;
        presenter.standHideAreaClicked = true;&#13;
        var pos = getCursorPosition(event);&#13;
        presenter.startSelection = getPoint(pos.x, pos.y);&#13;
    };&#13;
&#13;
    function drawHideArea(context, x, y, width, height, color) {&#13;
        context.beginPath();&#13;
        context.rect(x, y, width, height);&#13;
        context.fillStyle = color;&#13;
        context.fill();&#13;
        context.lineWidth = 1;&#13;
        context.strokeStyle = color;&#13;
        context.stroke();&#13;
    }&#13;
&#13;
    function drawStandArea(context, x, y, width, height, color) {&#13;
        context.clearRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        context.fillStyle = color;&#13;
        context.fillRect(0, 0, presenter.$selectingMask.width(), presenter.$selectingMask.height());&#13;
        context.globalCompositeOperation = 'destination-out';&#13;
        context.fillStyle = 'white';&#13;
        context.beginPath();&#13;
        context.rect(x, y, width, height);&#13;
        context.fill();&#13;
    }&#13;
&#13;
    function drawArea(isHide) {&#13;
        var context = presenter.selectingCtx,&#13;
            width = presenter.startSelection.x - presenter.stopSelection.x,&#13;
            height = presenter.startSelection.y - presenter.stopSelection.y;&#13;
&#13;
        context.globalCompositeOperation = 'source-over';&#13;
&#13;
        if (isHide) {&#13;
            drawHideArea(context, presenter.stopSelection.x, presenter.stopSelection.y, width, height, presenter.currentLineColor);&#13;
        } else {&#13;
            drawStandArea(context, presenter.stopSelection.x, presenter.stopSelection.y, width, height, presenter.currentLineColor);&#13;
        }&#13;
    }&#13;
&#13;
    function drawSavedAreas() {&#13;
        $.each(presenter.areas, function() {&#13;
            presenter.selectingCtx.globalCompositeOperation = 'source-over';&#13;
            if (this.isHide) {&#13;
                drawHideArea(presenter.selectingCtx, this.x, this.y, this.width, this.height, this.color);&#13;
            } else {&#13;
                drawStandArea(presenter.selectingCtx, this.x, this.y, this.width, this.height, this.color);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function closeStopwatch() {&#13;
        presenter._stopwatch.stopwatch.remove();&#13;
        presenter.$panel.find('.stopwatch.clicked').removeClass('clicked');&#13;
        presenter.stopwatchAdded = false;&#13;
        clearTimeout(presenter._stopwatchTimer);&#13;
        presenter._stopwatchTimer = null;&#13;
    }&#13;
&#13;
    presenter.createStopwatch = function IWB_Toolbar_createStopwatch(savedStopwatch, hours, minutes, seconds, stopClicked, startClicked) {&#13;
        if(!presenter.stopwatchAdded){&#13;
            var stopwatch = $('&lt;div class="iwb-toolbar-stopwatch"&gt;&lt;/div&gt;'),&#13;
                time = $('&lt;h4 class="stopwatch-time"&gt;&lt;time&gt;00:00:00&lt;/time&gt;&lt;/h4&gt;'),&#13;
                header = $('&lt;div class="stopwatch-header"&gt;&lt;/div&gt;'),&#13;
                buttons = $('&lt;div class="stopwatch-buttons"&gt;&lt;/div&gt;'),&#13;
                startButton = $('&lt;div id="start"&gt;&lt;/div&gt;'),&#13;
                stopButton = $('&lt;div id="stop"&gt;&lt;/div&gt;'),&#13;
                clearButton = $('&lt;div id="clear"&gt;&lt;/div&gt;'),&#13;
                closeButton = $('&lt;div class="stopwatch-close"&gt;&amp;times;&lt;/div&gt;');&#13;
&#13;
            closeButton.on('click', function(e) {&#13;
                e.stopPropagation();&#13;
                closeStopwatch();&#13;
                presenter.pushStateToStack();&#13;
            });&#13;
&#13;
            header.append(time);&#13;
            header.append(closeButton);&#13;
            buttons.append(startButton);&#13;
            buttons.append(stopButton);&#13;
            buttons.append(clearButton);&#13;
            stopwatch.append(header);&#13;
            stopwatch.append(buttons);&#13;
&#13;
            var ic_page_height = presenter.$view.parent().height(),&#13;
                panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
                window_scroll = $(window).scrollTop(),&#13;
                panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
                panel_differance = ic_page_height-panel_top-window_scroll,&#13;
                top=0;&#13;
&#13;
            var offsetTopelement,&#13;
                scrollTop;&#13;
            if (presenter.config.panelPosition == 'fixed') {&#13;
                offsetTopelement = presenter.$pagePanel.offset().top;&#13;
                scrollTop = $(window).scrollTop();&#13;
            } else {&#13;
                offsetTopelement = '';&#13;
                scrollTop = '';&#13;
            }&#13;
&#13;
            if (panel_differance &lt; panel_outerHeight) {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120&#13;
            } else {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement&#13;
            }&#13;
&#13;
            if (!presenter.stopwatchAdded) {&#13;
                stopwatch.draggable({&#13;
                    containment: 'parent',&#13;
                    opacity: 0.35,&#13;
                    create: function(event, _) {&#13;
                        $(event.target).css({&#13;
                            'top' : savedStopwatch ? savedStopwatch.top : top,&#13;
                            'left' : savedStopwatch ? savedStopwatch.left : presenter.$panel.css('left'),&#13;
                            'position' : 'absolute'&#13;
                        });&#13;
                    },&#13;
&#13;
                    stop: function NoteStopFunction() {&#13;
                        $.ui.ddmanager.current = null;&#13;
                        presenter.pushStateToStack();&#13;
                    }&#13;
                });&#13;
&#13;
                presenter.$pagePanel.find('.ic_page').append(stopwatch);&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').click(function(e) {&#13;
                    e.stopPropagation();&#13;
                });&#13;
            }&#13;
&#13;
            var h1 = document.getElementsByClassName('stopwatch-time')[0];&#13;
            var start = document.getElementById('start');&#13;
            var stop = document.getElementById('stop');&#13;
            var clear = document.getElementById('clear');&#13;
            presenter.stopButtonClicked = stopClicked;&#13;
            presenter.startButtonClicked = startClicked;&#13;
&#13;
            if (seconds) {&#13;
                presenter.seconds = seconds; presenter.minutes = minutes; presenter.hours = hours;&#13;
                h1.textContent = (presenter.hours ? (presenter.hours &gt; 9 ? presenter.hours : "0" + presenter.hours) : "00") + ":" + (presenter.minutes ? (presenter.minutes &gt; 9 ? presenter.minutes : "0" + presenter.minutes) : "00") + ":" + (presenter.seconds &gt; 9 ? presenter.seconds : "0" + presenter.seconds);&#13;
&#13;
                if (!presenter.stopButtonClicked) {&#13;
                    timer();&#13;
                    presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').addClass('button-clicked');&#13;
                }&#13;
            } else {&#13;
                presenter.seconds = 0; presenter.minutes = 0; presenter.hours = 0;&#13;
            }&#13;
&#13;
            function add() {&#13;
                presenter.seconds++;&#13;
                if (presenter.seconds &gt;= 60) {&#13;
                    presenter.seconds = 0;&#13;
                    presenter.minutes++;&#13;
                    if (presenter.minutes &gt;= 60) {&#13;
                        presenter.minutes = 0;&#13;
                        presenter.hours++;&#13;
                    }&#13;
                }&#13;
&#13;
                h1.textContent = (presenter.hours ? addZero(presenter.hours) : "00") + ":" + (presenter.minutes ? addZero(presenter.minutes) : "00") + ":" + addZero(presenter.seconds);&#13;
&#13;
                timer();&#13;
            }&#13;
            function timer() {&#13;
                presenter._stopwatchTimer = setTimeout(add, 1000);&#13;
            }&#13;
&#13;
            function clearClickedButtons (){&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').removeClass('button-clicked');&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#stop').removeClass('button-clicked');&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#clear').removeClass('button-clicked');&#13;
            }&#13;
&#13;
            $(start).on('click', function(){&#13;
                if (!presenter.startButtonClicked) {&#13;
                    clearClickedButtons();&#13;
                    presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#start').addClass('button-clicked');&#13;
                    timer();&#13;
                    presenter.stopButtonClicked = false;&#13;
                    presenter.startButtonClicked = true;&#13;
                }&#13;
            });&#13;
&#13;
            $(stop).on('click', function() {&#13;
                clearClickedButtons();&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#stop').addClass('button-clicked');&#13;
                clearTimeout(presenter._stopwatchTimer);&#13;
                presenter.stopButtonClicked = true;&#13;
                presenter.startButtonClicked = false;&#13;
                presenter.pushStateToStack();&#13;
            });&#13;
&#13;
            $(clear).on('click', function() {&#13;
                clearClickedButtons();&#13;
                presenter.$pagePanel.find('.iwb-toolbar-stopwatch').find('#clear').addClass('button-clicked');&#13;
                h1.textContent = "00:00:00";&#13;
                presenter.seconds = 0; presenter.minutes = 0; presenter.hours = 0;&#13;
                presenter.stopButtonClicked = false;&#13;
                presenter.pushStateToStack();&#13;
            });&#13;
&#13;
            presenter._stopwatch = {&#13;
                stopwatch: stopwatch,&#13;
                closeButton: closeButton,&#13;
                start: start,&#13;
                stop: stop,&#13;
                clear: clear&#13;
            };&#13;
        }&#13;
&#13;
        presenter.stopwatchAdded = true;&#13;
    };&#13;
&#13;
    function closeClock() {&#13;
        presenter._clockwatch.clock.remove();&#13;
        presenter.$panel.find('.clock.clicked').removeClass('clicked');&#13;
        presenter.clockAdded = false;&#13;
    }&#13;
&#13;
    presenter.createClock = function IWB_Toolbar_createClock(savedClock) {&#13;
        if (!presenter.clockAdded) {&#13;
            var clock = $('&lt;div class="iwb-toolbar-clock"&gt;&lt;/div&gt;'),&#13;
                header = $('&lt;div class="clock-header"&gt;&lt;/div&gt;'),&#13;
                closeButton = $('&lt;div class="clock-close"&gt;&amp;times;&lt;/div&gt;'),&#13;
                clockBody = $('&lt;div class="clock-body"&gt;&lt;/div&gt;');&#13;
&#13;
            closeButton.on('click', function(e) {&#13;
                e.stopPropagation();&#13;
                closeClock();&#13;
                presenter.pushStateToStack();&#13;
            });&#13;
&#13;
            header.append(closeButton);&#13;
            clock.append(header);&#13;
            clock.append(clockBody);&#13;
&#13;
            var ic_page_height = presenter.$view.parent().height(),&#13;
                panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
                window_scroll = $(window).scrollTop(),&#13;
                panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
                panel_differance = ic_page_height-panel_top-window_scroll,&#13;
                top=0;&#13;
&#13;
            var offsetTopelement,&#13;
                scrollTop;&#13;
            if (presenter.config.panelPosition == 'fixed') {&#13;
                offsetTopelement = presenter.$pagePanel.offset().top;&#13;
                scrollTop = $(window).scrollTop();&#13;
            } else {&#13;
                offsetTopelement = '';&#13;
                scrollTop = '';&#13;
            }&#13;
&#13;
            if (panel_differance &lt; panel_outerHeight) {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120&#13;
            } else {&#13;
                top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement&#13;
            }&#13;
&#13;
            clock.draggable({&#13;
                containment: 'parent',&#13;
                opacity: 0.35,&#13;
                create: function(event, _) {&#13;
                    $(event.target).css({&#13;
                        'top' : savedClock ? savedClock.top : top,&#13;
                        'left' : savedClock ? savedClock.left : presenter.$panel.css('left'),&#13;
                        'position' : 'absolute'&#13;
                    });&#13;
                },&#13;
                stop: function NoteStopFunction() {&#13;
                    $.ui.ddmanager.current = null;&#13;
                    presenter.pushStateToStack();&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$pagePanel.find('.ic_page').append(clock);&#13;
            presenter.$pagePanel.find('.iwb-toolbar-clock').click(function(e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            function getTime() {&#13;
                var date = new Date();&#13;
                return addZero(date.getHours()) + ':' + addZero(date.getMinutes()) + ':' + addZero(date.getSeconds());&#13;
            }&#13;
&#13;
            presenter.$pagePanel.find('.iwb-toolbar-clock').find('.clock-body').html(getTime());&#13;
&#13;
            presenter._clockwatchTimer = setInterval(function() {&#13;
                presenter.$pagePanel.find('.iwb-toolbar-clock').find('.clock-body').html(getTime());&#13;
            }, 1000);&#13;
&#13;
            presenter._clockwatch = {&#13;
                clock: clock,&#13;
                closeButton: closeButton&#13;
            };&#13;
        }&#13;
        presenter.clockAdded = true;&#13;
    };&#13;
&#13;
    presenter.Note = function () {&#13;
        this.$note = null;&#13;
        this.$header = null;&#13;
        this.$date = null;&#13;
        this.$closeButton = null;&#13;
        this.$noteBody = null;&#13;
        this.$textarea = null;&#13;
        this.$buttonSave = null;&#13;
        this.currentValue = '';&#13;
    };&#13;
&#13;
&#13;
    presenter.Note._internals = {};&#13;
&#13;
    presenter.Note._internals.getCurrentDate = function () {&#13;
        var day = new Date().getDate(),&#13;
            month = new Date().getMonth() + 1,&#13;
            year = new Date().getFullYear(),&#13;
            hours = new Date().getHours(),&#13;
            minutes = new Date().getMinutes();&#13;
&#13;
        var time = addZero(hours) + ':' + addZero(minutes);&#13;
        return day + '/' + month + '/' + year + ', ' + time;&#13;
    };&#13;
&#13;
    presenter.Note._internals.createView = function () {&#13;
        this.$note = $('&lt;div class="iwb-toolbar-note"&gt;&lt;/div&gt;');&#13;
        this.$header = $('&lt;div class="note-header"&gt;&lt;/div&gt;');&#13;
        this.$date = $('&lt;div class="note-date"&gt;&lt;/div&gt;');&#13;
        this.$closeButton = $('&lt;div class="note-close"&gt;&amp;times;&lt;/div&gt;');&#13;
        this.$noteBody = $('&lt;div class="note-body"&gt;&lt;/div&gt;');&#13;
&#13;
        this.$header.append(this.$date);&#13;
        this.$header.append(this.$closeButton);&#13;
        this.$note.append(this.$header);&#13;
        this.$note.append(this.$noteBody);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.init = function (savedNote) {&#13;
        presenter.Note._internals.createView.call(this);&#13;
&#13;
        this.connectHandlers();&#13;
        this.connectDraggable(savedNote);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.setDate = function (date) {&#13;
        this.$date.html(date);&#13;
    };&#13;
&#13;
    presenter.Note.prototype.setBody = function (body) {&#13;
        this.$noteBody.html(body);&#13;
        this.$textarea = this.$noteBody.find('textarea');&#13;
        this.$buttonSave = this.$noteBody.find('.save');&#13;
    };&#13;
&#13;
    presenter.Note.prototype.getView = function () {&#13;
        return this.$note;&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectNoteEditHandler = function () {&#13;
        this.$note.on('dblclick', function () {&#13;
            this.noteEditHandler();&#13;
            this.$note.off('dblclick');&#13;
        }.bind(this));&#13;
&#13;
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {&#13;
            window.EventsUtils.DoubleTap.on(this.$note, function () {&#13;
                this.noteEditHandler();&#13;
                window.EventsUtils.DoubleTap.off(this.$note);&#13;
            }.bind(this));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Note.prototype.saveButtonHandler = function() {&#13;
        var value = this.$textarea.val();&#13;
        this.$noteBody.html(value);&#13;
        this.$textarea.remove();&#13;
        this.connectNoteEditHandler();&#13;
        presenter.pushStateToStack();&#13;
    };&#13;
&#13;
    presenter.Note.prototype.noteEditHandler = function () {&#13;
        this.$textarea = $('&lt;textarea&gt;&lt;/textarea&gt;');&#13;
        this.$buttonSave = $('&lt;button class="save"&gt;Save&lt;/button&gt;');&#13;
&#13;
        this.currentValue = this.$noteBody.html();&#13;
&#13;
        if(MobileUtils.isEventSupported('touchstart')) {&#13;
            this.$buttonSave.on('touchstart', function() {&#13;
                this.saveButtonHandler();&#13;
            }.bind(this));&#13;
        } else {&#13;
            this.$buttonSave.on('click', function() {&#13;
                this.saveButtonHandler();&#13;
            }.bind(this));&#13;
        }&#13;
&#13;
        this.$textarea.on('click', function (){&#13;
            var val = this.$textarea.val();&#13;
            this.$textarea.focus().val("").val(val);&#13;
        }.bind(this));&#13;
&#13;
        this.$textarea.val(this.currentValue);&#13;
&#13;
        this.$noteBody.html(this.$textarea);&#13;
        this.$noteBody.append(this.$buttonSave);&#13;
        this.$textarea.focus();&#13;
    };&#13;
&#13;
    presenter.Note.prototype.closeButtonHandler = function(event) {&#13;
        var confirmation = presenter.$removeConfirmationBox;&#13;
        var window_scroll = presenter.playerController.iframeScroll() &gt; 0 ? presenter.playerController.iframeScroll() : $(window).scrollTop();&#13;
&#13;
        confirmation.css('top', window_scroll + 10 + 'px');&#13;
        confirmation.show();&#13;
        confirmation.find('.no-button').on(getTouchStartOrMouseDownEventName(),function(e) {&#13;
            e.stopPropagation();&#13;
            confirmation.hide();&#13;
        });&#13;
        confirmation.find('.yes-button').on(getTouchStartOrMouseDownEventName(), {"note": event.data.note}, function(e) {&#13;
            e.stopPropagation();&#13;
            var note = e.data.note;&#13;
&#13;
            presenter.noteObjects = presenter.noteObjects.filter(function (note) {&#13;
                return note != this;&#13;
            }, note);&#13;
            note.destroy();&#13;
            confirmation.hide();&#13;
            presenter.pushStateToStack();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectHandlers = function () {&#13;
        if(MobileUtils.isEventSupported('touchstart')) {&#13;
            this.$closeButton.on('touchstart', {"note": this}, function(event) {&#13;
                event.stopPropagation();&#13;
                this.closeButtonHandler(event);&#13;
            }.bind(this));&#13;
        } else {&#13;
            this.$closeButton.on('click', {"note": this}, function(event) {&#13;
                event.stopPropagation();&#13;
                this.closeButtonHandler(event);&#13;
            }.bind(this));&#13;
        }&#13;
&#13;
        this.connectNoteEditHandler();&#13;
    };&#13;
&#13;
    presenter.Note.prototype.connectDraggable = function (savedNote) {&#13;
        var ic_page_height = presenter.$view.parent().height(),&#13;
            panel_top = parseInt(presenter.$panel.css('top'), 10),&#13;
            window_scroll = presenter.playerController.iframeScroll() &gt; 0 ? presenter.playerController.iframeScroll() : $(window).scrollTop(),&#13;
            panel_outerHeight = presenter.$panel.outerHeight(true),&#13;
            panel_differance = ic_page_height-panel_top-window_scroll,&#13;
            top=0;&#13;
&#13;
        var offsetTopelement,&#13;
            scrollTop;&#13;
        if (presenter.config.panelPosition == 'fixed') {&#13;
            offsetTopelement = presenter.$pagePanel.offset().top;&#13;
            scrollTop = window_scroll;&#13;
        } else {&#13;
            offsetTopelement = '';&#13;
            scrollTop = '';&#13;
        }&#13;
&#13;
        if (panel_differance &lt; panel_outerHeight) {&#13;
            top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - presenter.$pagePanel.offset().top - 120;&#13;
        } else {&#13;
            top = parseInt(presenter.$panel.css('top'), 10) + presenter.$panel.outerHeight(true) + scrollTop - offsetTopelement;&#13;
        }&#13;
&#13;
        this.$note.draggable({&#13;
            containment: 'parent',&#13;
            opacity: 0.35,&#13;
            create: function(event, _) {&#13;
                $(event.target).css({&#13;
                    'top' : savedNote ? savedNote.top : top,&#13;
                    'left' : savedNote ? savedNote.left : presenter.$panel.css('left'),&#13;
                    'position' : 'absolute'&#13;
                });&#13;
            },&#13;
&#13;
            stop: function NoteStopFunction() {&#13;
                $.ui.ddmanager.current = null;&#13;
                presenter.pushStateToStack();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Note.prototype.destroy = function () {&#13;
        if(this.$note) {&#13;
            var $note = this.$note.draggable("destroy");&#13;
            $note.off();&#13;
            this.$note.off();&#13;
            this.$header.off();&#13;
            this.$date.off();&#13;
            this.$closeButton.off();&#13;
            this.$noteBody.off();&#13;
            if (this.$textarea !== null) {&#13;
                this.$textarea.off();&#13;
            }&#13;
&#13;
            if (this.$buttonSave !== null) {&#13;
                this.$buttonSave.off();&#13;
            }&#13;
&#13;
            window.EventsUtils.DoubleTap.off(this.$note);&#13;
&#13;
            this.$note.remove();&#13;
            this.$note = null;&#13;
            this.$header = null;&#13;
            this.$date = null;&#13;
            this.$closeButton = null;&#13;
            this.$noteBody = null;&#13;
            this.$textarea = null;&#13;
            this.$buttonSave = null;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.Note.prototype.getState = function () {&#13;
        return {&#13;
            'top': this.$note.css('top'),&#13;
            'left': this.$note.css('left'),&#13;
            'date': this.$date.html(),&#13;
            'body': this.$noteBody.html()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Note.createNote = function (savedNote) {&#13;
        var note = new presenter.Note();&#13;
        note.init(savedNote);&#13;
        &#13;
        if (savedNote) {&#13;
            note.setDate(savedNote.date);&#13;
            note.setBody(savedNote.body);&#13;
        }&#13;
        &#13;
        return note;&#13;
    };&#13;
&#13;
    presenter.createNote = function IWB_Toolbar_createNote(savedNote) {&#13;
        return presenter.Note.createNote(savedNote);&#13;
    };&#13;
&#13;
&#13;
    presenter.executeUserEventCode = function (eventCode) {&#13;
        presenter.playerController.getCommands().executeEventCode(eventCode);&#13;
    };&#13;
&#13;
    presenter.runCustomScript = function IWB_Toolbar_runCustomScript() {&#13;
        var eventCode = presenter.isCustomButtonActive() ? presenter.config.onCustomButtonSelected : presenter.config.onCustomButtonDeselected;&#13;
        presenter.executeUserEventCode(eventCode);&#13;
    };&#13;
&#13;
&#13;
    presenter.zoomSelectedModule = function IWB_Toolbar_zoomSelectedModule(event) {&#13;
        var selectedModule = event.currentTarget;&#13;
        if (presenter.$pagePanel.find('.zoomed').length &gt; 0) {&#13;
            presenter.$panel.show();&#13;
            zoom.out();&#13;
            $(selectedModule).parent().find('.zoomed').removeClass('zoomed');&#13;
            presenter.changeCursor('zoom-in');&#13;
        } else {&#13;
            presenter.$panel.hide();&#13;
            var topWindowHeight = 0;&#13;
            var iframeTopOffset = 0;&#13;
            if (window.iframeSize) {&#13;
                topWindowHeight = window.iframeSize.windowInnerHeight;&#13;
                iframeTopOffset = window.iframeSize.offsetTop - window.iframeSize.frameOffset;&#13;
            }&#13;
            if ($(selectedModule).hasClass('iwb-default-zoom-cover')) {&#13;
                var y = event.clientY;&#13;
                var minY = (presenter.zoomConfiguration.initialWindowHeight/2 - window.iframeSize.frameOffset) / presenter.config.defaultZoom;&#13;
                var pageHeight = $('.ic_page').height();&#13;
                if ($('.ic_header').length &gt; 0) pageHeight += $('.ic_header').height();&#13;
                if ($('.ic_footer').length &gt; 0) pageHeight += $('.ic_footer').height();&#13;
                var maxY = pageHeight - (presenter.zoomConfiguration.initialWindowHeight/2 / presenter.config.defaultZoom);&#13;
                if (y &lt; minY) y = minY;&#13;
                if (y &gt; maxY) y = maxY;&#13;
&#13;
                zoom.to({&#13;
                    x: event.clientX,&#13;
                    y: y,&#13;
                    scale: presenter.config.defaultZoom,&#13;
                    topWindowHeight: topWindowHeight,&#13;
                    iframeTopOffset: iframeTopOffset&#13;
                });&#13;
            } else {&#13;
                zoom.to({&#13;
                    element: selectedModule,&#13;
                    topWindowHeight: topWindowHeight,&#13;
                    iframeTopOffset: iframeTopOffset&#13;
                });&#13;
            }&#13;
            $(selectedModule).addClass('zoomed');&#13;
            presenter.changeCursor('zoom-out');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCursor = function(type) {&#13;
        presenter.$pagePanel.removeClass('iwb-zoom-in iwb-zoom-out');&#13;
&#13;
        switch (type) {&#13;
            case 'zoom-in':&#13;
                presenter.$pagePanel.addClass('iwb-zoom-in');&#13;
                break;&#13;
            case 'zoom-out':&#13;
                presenter.$pagePanel.addClass('iwb-zoom-out');&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    function isDependingOnDrawing(button) {&#13;
        return $(button).hasClass('color') || $(button).hasClass('thickness');&#13;
    }&#13;
&#13;
    presenter.isDrawingActive = function IWB_Toolbar_isDrawingActive() {&#13;
        return presenter.$pagePanel.find('.button.pen.clicked, .button.marker.clicked').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.isAreaDrawingActive = function IWB_Toolbar_isAreaDrawingActive() {&#13;
        return presenter.$pagePanel.find('.button.hide-area.clicked, .button.stand-area.clicked').length &gt; 0&#13;
            || presenter.drawMode == presenter.DRAW_MODE.HIDE_AREA;&#13;
    };&#13;
&#13;
    presenter.areDrawingButtonsActive = function () {&#13;
        return presenter.isDrawingActive() || presenter.isAreaDrawingActive();&#13;
    };&#13;
&#13;
    function isFloatingImageButton(button) {&#13;
        return $(button).hasClass('floating-image');&#13;
    }&#13;
&#13;
    function shouldHideDrawingMasks(button) {&#13;
        return !$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker') &amp;&amp; !$(button).hasClass('eraser');&#13;
    }&#13;
&#13;
    function shouldHideSelectingMasks(button) {&#13;
        return !$(button).hasClass('stand-area') &amp;&amp; !$(button).hasClass('hide-area');&#13;
    }&#13;
&#13;
    function shouldHideFloatingImage(button) {&#13;
        return !$(button).hasClass('reset') &amp;&amp; !$(button).hasClass('floating-image');&#13;
    }&#13;
&#13;
    function shouldClosePanelsOnReset(button) {&#13;
        return !$(button).hasClass('pen') &amp;&amp; !$(button).hasClass('marker');&#13;
    }&#13;
&#13;
    function changeBottomButtonState(button) {&#13;
        presenter.$panel.find('.container .clicked-lighter').removeClass('clicked-lighter');&#13;
        $(button).toggleClass('clicked-lighter');&#13;
    }&#13;
&#13;
    presenter.isSupportCSSPointerEvents = function IWB_Toolbar_isSupportCSSPointerEvents() {&#13;
        var myNav = navigator.userAgent.toLowerCase();&#13;
        var version = (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;&#13;
        return !(version == 9 || version == 10);&#13;
    };&#13;
&#13;
    presenter.toogleMasks = function IWB_Toolbar_toggleMasks() {&#13;
        if (!presenter.isSupportCSSPointerEvents()) {&#13;
            presenter.$penMask.hide();&#13;
            presenter.$markerMask.hide();&#13;
        }&#13;
&#13;
        presenter.$selectingMask.hide();&#13;
        if (presenter.isDrawingActive() || presenter.$pagePanel.find('.eraser').hasClass('clicked')) {&#13;
            presenter.$penMask.show();&#13;
            presenter.$markerMask.show();&#13;
        }&#13;
&#13;
        if (presenter.isAreaDrawingActive()) {&#13;
            presenter.$selectingMask.show();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toggleBottomPanels = function IWB_Toolbar_toggleBottomPanels() {&#13;
        var $thicknessPanel = presenter.$pagePanel.find('.bottom-panel-thickness');&#13;
        var $colorPanel = presenter.$pagePanel.find('.bottom-panel-color');&#13;
&#13;
        $thicknessPanel.hide();&#13;
        $colorPanel.hide();&#13;
&#13;
        function showPanel($panel) {&#13;
            if ($panel === 'COLOR') {&#13;
                $colorPanel.show();&#13;
            } else if ($panel === 'THICKNESS') {&#13;
                $thicknessPanel.show();&#13;
            } else {&#13;
                // NONE&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.$pagePanel.find('.pen').hasClass('clicked')) {&#13;
            showPanel(presenter.config.showForPen);&#13;
        }&#13;
&#13;
        if (presenter.$pagePanel.find('.marker').hasClass('clicked')) {&#13;
            showPanel(presenter.config.showForMarker);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createCanvases = function () {&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$markerMask = mask;&#13;
                presenter.$markerMask.addClass('marker-mask');&#13;
                return presenter.$markerMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.markerCtx = ctx;&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.markerCanvas = canvas;&#13;
            }&#13;
        );&#13;
&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$penMask = mask;&#13;
                presenter.$penMask.addClass('pen-mask');&#13;
                return presenter.$penMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.ctx = ctx;&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.canvas = canvas;&#13;
            }&#13;
        );&#13;
&#13;
        presenter.createCanvas(&#13;
            function(mask) {&#13;
                presenter.$selectingMask = mask;&#13;
                presenter.$selectingMask.addClass('selecting');&#13;
                return presenter.$selectingMask;&#13;
            },&#13;
            function(ctx) {&#13;
                presenter.selectingCtx = ctx&#13;
            },&#13;
            function(canvas) {&#13;
                presenter.selectingCanvas = canvas;&#13;
            }&#13;
        );&#13;
    };&#13;
&#13;
    presenter.createCanvas = function (setMask, setContext, setCanvas) {&#13;
        var $mask = $('&lt;div class="iwb-toolbar-mask"&gt;&lt;/div&gt;');&#13;
        $mask = setMask($mask);&#13;
        $mask.hide();&#13;
&#13;
        var icPage = presenter.$pagePanel.find('.ic_page');&#13;
        icPage.css('position', 'relative');&#13;
        icPage.append($mask);&#13;
&#13;
        var canvas = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
        setCanvas(canvas);&#13;
        setContext(canvas[0].getContext("2d"));&#13;
&#13;
        $mask.append(canvas);&#13;
        canvas[0].width = $mask.width();&#13;
        canvas[0].height = $mask.height();&#13;
    };&#13;
&#13;
    presenter.applyHovered = function (elements) {&#13;
        $.each(elements, function(_, btn) {&#13;
            presenter._hoveredButtons.push($(btn));&#13;
            $(btn).hover(function() {&#13;
                $(this).addClass('hovered');&#13;
                $(this).find('.tooltip').show();&#13;
            }, function() {&#13;
                $(this).removeClass('hovered');&#13;
                $(this).find('.tooltip').hide();&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.model = model;&#13;
        presenter.isKeepStateAndPosition = ModelValidationUtils.validateBoolean(model['keepStateAndPosition']);&#13;
&#13;
        $(view).find('.iwb-toolbar-panel').width(model['Width'] - 50 + 'px');&#13;
        $(view).find('.iwb-toolbar-panel').addClass(presenter.model['expansionDirection']);&#13;
&#13;
        var moduleClasses = $(view).attr('class');&#13;
&#13;
        if (moduleClasses.indexOf('addon_IWB_Toolbar') &lt; 0){&#13;
            var moduleCustomClass =  moduleClasses.replace('ice_module', '');&#13;
            $(view).find('.iwb-toolbar-panel').addClass(moduleCustomClass);&#13;
            $(view).removeClass(moduleCustomClass);&#13;
        }else{&#13;
            $(view).find('.iwb-toolbar-panel').addClass('addon_IWB_Toolbar');&#13;
            $(view).removeClass('addon_IWB_Toolbar');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        Kinetic.pixelRatio = 1;&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.model = model;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isKeepStateAndPosition = ModelValidationUtils.validateBoolean(model['keepStateAndPosition']);&#13;
&#13;
        presenter.headerLoadedDeferred = new $.Deferred();&#13;
        presenter.headerLoaded = presenter.headerLoadedDeferred.promise();&#13;
&#13;
&#13;
        presenter.setBasicConfiguration(view, model);&#13;
&#13;
        if (!presenter.config.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view, presenter.ERROR_CODES, presenter.config.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.config.enableUndoRedo) {&#13;
            presenter.$pagePanel.find('.reset-one').css('display', 'none');&#13;
            presenter.$pagePanel.find('.redo-one').css('display', 'none');&#13;
        }&#13;
&#13;
        presenter.addFloatingImages(model);&#13;
&#13;
        presenter.createCanvases();&#13;
&#13;
        presenter.iwb_tmp_canvas = document.createElement('canvas');&#13;
        presenter.tmp_ctx = presenter.iwb_tmp_canvas.getContext('2d');&#13;
        $(presenter.iwb_tmp_canvas).addClass('iwb_tmp_canvas');&#13;
&#13;
        presenter.$panel.draggable({&#13;
            containment: 'parent',&#13;
            opacity: 0.35,&#13;
            create: function (event, _) {&#13;
                $(event.target).addClass('running');&#13;
                $(event.target).css('position', presenter.config.panelPosition);&#13;
                if (window.savedPanel &amp;&amp; window.savedPanel.position) {&#13;
                    if (presenter.isKeepStateAndPosition) {&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            $(event.target).css('top', window.savedPanel.position.top + presenter.$pagePanel.offset().top + 'px');&#13;
                            $(event.target).css('left', window.savedPanel.position.left + presenter.$pagePanel.offset().left + 'px');&#13;
                        } else {&#13;
                            $(event.target).css('top', window.savedPanel.position.top + 'px');&#13;
                            $(event.target).css('left', window.savedPanel.position.left + 'px');&#13;
                        }&#13;
                    } else {&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            $(event.target).css('top', (parseInt(model['Top'], 10)) + presenter.$pagePanel.offset().top + 'px');&#13;
                            $(event.target).css('left', (parseInt(model['Left'], 10)) + presenter.$pagePanel.offset().left + 'px');&#13;
&#13;
                        } else {&#13;
                            $(event.target).css('top', (parseInt(model['Top'], 10)) + 'px');&#13;
                            $(event.target).css('left', (parseInt(model['Left'], 10)) + 'px');&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    var offsetTopPrev,&#13;
                        offsetLeftPrev;&#13;
                    if (presenter.config.panelPosition == 'fixed') {&#13;
                        offsetTopPrev = presenter.$pagePanel.offset().top;&#13;
                        offsetLeftPrev = presenter.$pagePanel.offset().left;&#13;
                    } else {&#13;
                        offsetTopPrev = $(presenter.$panel).position().top;&#13;
                        offsetLeftPrev = $(presenter.$panel).position().left;&#13;
                    }&#13;
                    $(event.target).css('top', (offsetTopPrev + parseInt(model['Top'], 10)) + 'px');&#13;
                    $(event.target).css('left', (offsetLeftPrev + parseInt(model['Left'], 10)) + 'px');&#13;
                    presenter.headerLoaded.then(function () {&#13;
                        var offsetTop,&#13;
                            offsetLeft;&#13;
                        if (presenter.config.panelPosition == 'fixed') {&#13;
                            offsetTop = presenter.$pagePanel.offset().top;&#13;
                            offsetLeft = presenter.$pagePanel.offset().left;&#13;
                        } else {&#13;
                            offsetTop = '';&#13;
                            offsetLeft = '';&#13;
                        }&#13;
                        $(event.target).css('top', (offsetTop + parseInt(model['Top'], 10)) + 'px');&#13;
                        $(event.target).css('left', (offsetLeft + parseInt(model['Left'], 10)) + 'px');&#13;
                    });&#13;
                }&#13;
            },&#13;
            stop: function (event, ui) {&#13;
                var top = ui.position.top;&#13;
                var left = ui.position.left;&#13;
&#13;
                if (presenter.config.panelPosition == 'fixed') {&#13;
                    window.savedPanel.position = { top: top - presenter.$pagePanel.offset().top, left: left - presenter.$pagePanel.offset().left};&#13;
                } else {&#13;
                    window.savedPanel.position = { top: top, left: left};&#13;
                }&#13;
&#13;
                $.ui.ddmanager.current = null;&#13;
&#13;
                presenter.zoomConfiguration.viewLeftOffset = presenter.$panel.offset().left;&#13;
            }&#13;
        });&#13;
&#13;
&#13;
        presenter.applyHovered([presenter.$panel.find('.button')]);&#13;
&#13;
        var newWidthWhenClosed = presenter.config.widthWhenClosed - 50;&#13;
        presenter.trueClosedPanelSize = {&#13;
            width: newWidthWhenClosed &lt; 0 ? presenter.$panel.width() : newWidthWhenClosed,&#13;
            height: presenter.$panel.height()&#13;
        }&#13;
        if (presenter.config.expansionDirection == "left" || presenter.config.expansionDirection == "right") {&#13;
            presenter.$panel.width(presenter.trueClosedPanelSize.width + 'px');&#13;
        } else {&#13;
            presenter.$panel.css("min-width", presenter.trueClosedPanelSize.width + 'px');&#13;
        }&#13;
&#13;
        window.savedPanel = window.savedPanel || {};&#13;
&#13;
        if (window.savedPanel &amp;&amp; window.savedPanel.isOpen &amp;&amp; presenter.isKeepStateAndPosition) {&#13;
            presenter.openPanel(false);&#13;
        } else {&#13;
            window.savedPanel.widthWhenOpened = presenter.config.widthWhenOpened;&#13;
        }&#13;
&#13;
        presenter.addEventHandlers();&#13;
&#13;
&#13;
        if ((presenter.isInFrame || MobileUtils.isMobileUserAgent(navigator.userAgent)) &amp;&amp; presenter.config.panelPosition == 'fixed') {&#13;
            addScrollHandler();&#13;
        }&#13;
&#13;
        $(view).hide();&#13;
        presenter.setVisibility(presenter.isVisible, false, view);&#13;
&#13;
        var width = presenter.$pagePanel.find('.marker-mask').find('canvas')[0].width;&#13;
        var height = presenter.$pagePanel.find('.marker-mask').find('canvas')[0].height;&#13;
        presenter.iwb_tmp_canvas.width = width;&#13;
        presenter.iwb_tmp_canvas.height = height;&#13;
        presenter.$pagePanel.find('.marker-mask').append(presenter.iwb_tmp_canvas);&#13;
&#13;
        /**&#13;
         * We're adding addon class to its panel as a way of ensuring custom class styling applies.&#13;
         * Normally addon has custom class set by Player, but in our case the view is hidden and visible part&#13;
         * (panel) is not a child of it.&#13;
         */&#13;
        presenter.$panel.addClass(document.getElementById(model["ID"]).className);&#13;
&#13;
        zoom.init();&#13;
        if(presenter.isKeepStateAndPosition){&#13;
           if(window.savedPanel.tools){&#13;
               presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
               presenter.customButtonActive = window.savedPanel.tools.customButtonActive;&#13;
               presenter.closePenColor = window.savedPanel.tools.stateColor;&#13;
               presenter.closePenThickness = window.savedPanel.tools.stateThickness;&#13;
               presenter.buttonColor = presenter.$bottomPanels.find('[color*='+window.savedPanel.tools.buttonColor+']')[0];&#13;
               presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+window.savedPanel.tools.buttonThickness+']')[0];&#13;
               presenter.isCloseColor = window.savedPanel.tools.isCloseColor;&#13;
               presenter.shouldSaveColor = window.savedPanel.tools.shouldSaveColor;&#13;
                   if(presenter.activeFunction){&#13;
                       if(presenter.activeFunction != 'clock'&#13;
                       &amp;&amp; presenter.activeFunction != 'stopwatch'&#13;
                       &amp;&amp; presenter.activeFunction != 'note'&#13;
                       &amp;&amp; presenter.activeFunction != 'reset'&#13;
                       &amp;&amp; presenter.activeFunction != 'open'&#13;
                       &amp;&amp; presenter.activeFunction != 'reset-one'&#13;
                       &amp;&amp; presenter.activeFunction != 'redo-one'){&#13;
                           if(!presenter.recklick){&#13;
                               presenter.functionButton = presenter.$pagePanel.find('.'+ presenter.activeFunction);&#13;
                               if(window.savedPanel.isOpen){&#13;
                                   presenter.buttonsLogic[presenter.activeFunction].onOpen(presenter.functionButton);&#13;
                                   presenter.functionButton.addClass('clicked');&#13;
                               }&#13;
                           }&#13;
                           presenter.isRecklicked = false;&#13;
                       }&#13;
                   }&#13;
                   if (presenter.customButtonActive) {&#13;
                        var button = presenter.$pagePanel.find('.' + CUSTOM_BUTTON_NAME);&#13;
                        if(window.savedPanel.isOpen) {&#13;
                            button.addClass('clicked');&#13;
                        }&#13;
                   }&#13;
               if(presenter.isCloseColor){&#13;
                   presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
                   presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
               }&#13;
           }&#13;
        }&#13;
&#13;
        presenter._view = view;&#13;
&#13;
        presenter.updateZoomConfiguration();&#13;
    };&#13;
&#13;
    presenter.onDestroy = function () {&#13;
        var isOpenPanel = window.savedPanel.isOpen;&#13;
        if (isOpenPanel) {&#13;
            presenter.closePanel(false);&#13;
            window.savedPanel.isOpen = true;&#13;
        }&#13;
        clearCanvases();&#13;
&#13;
        presenter.points = [];&#13;
        presenter.points = null;&#13;
        presenter.mouse = null;&#13;
&#13;
        /***&#13;
         * **********************************************&#13;
         * addEventHandlers&#13;
         * **********************************************&#13;
         */&#13;
        presenter.$pagePanel.find('.iwb-toolbar-mask').off();&#13;
        presenter.$pagePanel.find('.note').off();&#13;
&#13;
        //noteObjects&#13;
        if(presenter.noteObjects) {&#13;
            presenter.noteObjects.forEach(function (note) {&#13;
                note.destroy();&#13;
                note = null;&#13;
            });&#13;
        }&#13;
        presenter.noteObjects = [];&#13;
        presenter.noteObjects = null;&#13;
&#13;
        presenter.Note.prototype.getView = null;&#13;
        presenter.Note.createNote = null;&#13;
        presenter.Note = null;&#13;
        presenter.createNote = null;&#13;
&#13;
        //stopwatch&#13;
        if (presenter._stopwatch !== null) {&#13;
            presenter._stopwatch.stopwatch.off();&#13;
            presenter._stopwatch.stopwatch.draggable('destroy');&#13;
            presenter._stopwatch.closeButton.off();&#13;
            $(presenter._stopwatch.start).off();&#13;
            $(presenter._stopwatch.stop).off();&#13;
            $(presenter._stopwatch.clear).off();&#13;
&#13;
            if (presenter._stopwatchTimer !== null) {&#13;
                clearTimeout(presenter._stopwatchTimer);&#13;
            }&#13;
&#13;
            presenter._stopwatch.stopwatch = null;&#13;
            presenter._stopwatch.closeButton = null;&#13;
            presenter._stopwatch.start = null;&#13;
            presenter._stopwatch.stop = null;&#13;
            presenter._stopwatch.clear = null;&#13;
            presenter._stopwatchTimer = null;&#13;
            presenter._stopwatch = null;&#13;
        }&#13;
&#13;
        //clock&#13;
        if (presenter._clockwatch !== null) {&#13;
&#13;
            if (presenter._clockwatchTimer !== null) {&#13;
                clearInterval(presenter._clockwatchTimer);&#13;
            }&#13;
&#13;
            presenter._clockwatch.clock.off();&#13;
            presenter._clockwatch.clock.draggable('destroy');&#13;
            presenter._clockwatch.closeButton.off();&#13;
&#13;
            presenter._clockwatchTimer = null;&#13;
            presenter._clockwatch.clock = null;&#13;
            presenter._clockwatch.closeButton = null;&#13;
            presenter._clockwatch = null;&#13;
        }&#13;
&#13;
        presenter.$pagePanel.find('.button').off();&#13;
        presenter.$defaultColorButton.off();&#13;
        presenter._iwb_buttons.forEach(function ($btn) {&#13;
           $btn.off();&#13;
        });&#13;
&#13;
        presenter.$pagePanel.off();&#13;
        presenter.$panel.off();&#13;
&#13;
&#13;
        presenter._iwb_buttons.length = 0;&#13;
        presenter._iwb_buttons = null;&#13;
&#13;
        presenter.buttonClicked = null;&#13;
        presenter.isSavedState = null;&#13;
        presenter.buttonsLogic = null;&#13;
        presenter.recklick = null;&#13;
&#13;
        //penClickHandler&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.penMouseMoveHandler, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.penMouseDownHandler, false);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.penMouseUpHandler, false);&#13;
&#13;
        $(presenter.canvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
        $(presenter.markerCanvas).off('mousedown mousemove mouseup touchstart touchmove touchend');&#13;
&#13;
        presenter.isZoomActive = null;&#13;
        presenter.$defaultColorButton = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.drawMode = null;&#13;
&#13;
        //changeThickness&#13;
        presenter.currentLineWidth = null;&#13;
        presenter.currentMarkerThickness = null;&#13;
        presenter.currentEraserThickness = null;&#13;
&#13;
&#13;
        //penCloseHandler&#13;
        presenter.penLineColor = null;&#13;
        presenter.penLineWidth = null;&#13;
        presenter.penColorBackground = null;&#13;
        presenter.penThicknessBackground = null;&#13;
&#13;
        //penUnclickHandler&#13;
        presenter.colorBackground = null;&#13;
        presenter.penClicked = null;&#13;
&#13;
        //markerClicked&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchstart', presenter.onTouchStartCallback);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('touchend', presenter.onTouchEndEventCallback);&#13;
        // MOUSE&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousemove', presenter.markerMouseMoveHandler);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mousedown', presenter.markerMouseDownHandler);&#13;
        presenter.iwb_tmp_canvas.removeEventListener('mouseup', presenter.markerMouseUpHandler);&#13;
        $(presenter.iwb_tmp_canvas).off();&#13;
        &#13;
        presenter.markerColorBackground = null;&#13;
        presenter.markerThicknessBackground = null;&#13;
        presenter.markerCtx = null;&#13;
        presenter.markerClicked = null;&#13;
        presenter.iwb_tmp_canvas = null;&#13;
&#13;
        //markerCloseHandler&#13;
        presenter.markerLineColor = null;&#13;
        presenter.markerLineWidth = null;&#13;
&#13;
        //markerUnclickHandler&#13;
        //pass&#13;
&#13;
        //defaultClickHandler&#13;
        //pass&#13;
&#13;
        //thicknessClickHandler&#13;
        //pass&#13;
&#13;
        //zoomClickHandler&#13;
        $(".iwb-zoom-cover").off();&#13;
        if (presenter.modules !== undefined) {&#13;
            presenter.modules.find('a').unbind('click', presenter.preventClickAction_zoomClickHandler);&#13;
            presenter.modules.length = 0;&#13;
            presenter.modules = null;&#13;
        }&#13;
&#13;
        //textAudioEvents&#13;
        presenter.textAudioEvents.forEach(function (element) {&#13;
            $(element).unbind('click', preventClickActionTextAudio);&#13;
        });&#13;
        presenter.areZoomEventHandlersAttached = null;&#13;
        presenter.isMouseDown = null;&#13;
&#13;
        //eraserClickHandler&#13;
        presenter.ctx = null;&#13;
        presenter.drawMode = null;&#13;
&#13;
        //eraserUnClickHandler&#13;
        presenter.$penMask = null;&#13;
&#13;
        //hideAreaClickHandler&#13;
        var $hideAreaCanvas = presenter.$view.parent().find('.selecting').find('#iwb_tmp_canvas');&#13;
        $hideAreaCanvas.off();&#13;
&#13;
        //standAreaClickHandler&#13;
        //pass&#13;
&#13;
        //resetClickHandler&#13;
        presenter.selectingCtx = null;&#13;
        presenter.areas = [];&#13;
        presenter.areas = null;&#13;
&#13;
        //noteClickHandler&#13;
        //pass&#13;
&#13;
        //customScriptClickHandler&#13;
        //pass&#13;
&#13;
        //floatingImageClickHandler&#13;
        //pass&#13;
&#13;
        //clockClickHandler&#13;
        //pass&#13;
&#13;
        //stopwatchClickHandler&#13;
        //pass&#13;
&#13;
        //closeClickHandler&#13;
        presenter.closePenColor = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.closePenThickness = null;&#13;
        presenter.currentLineWidth = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.shouldSaveColor = null;&#13;
        presenter.closePenColor = null;&#13;
        presenter.currentLineColor = null;&#13;
        presenter.closePenThickness = null;&#13;
        presenter.currentMarkerThickness = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.isCloseColor = null;&#13;
        presenter.isPanelOpened = null;&#13;
        presenter.activeFunction = null;&#13;
        presenter.activeButton = null;&#13;
        presenter.customButtonActive = null;&#13;
&#13;
        //openClickHandler&#13;
        presenter.isRecklicked = null;&#13;
&#13;
        /***&#13;
         * *******************************************************************&#13;
         * setBasicConfiguration&#13;
         * *******************************************************************&#13;
         */&#13;
        presenter.$removeConfirmationBox.off();&#13;
        presenter.$removeConfirmationBoxClock.off();&#13;
        presenter.$removeConfirmationBoxStopwatch.off();&#13;
        presenter.$panel.draggable("destroy");&#13;
        presenter.$view.off();&#13;
        presenter.$defaultThicknessButton.off();&#13;
        presenter.$buttonsExceptOpen.off();&#13;
        presenter.$removeConfirmationBox.off();&#13;
        presenter.$removeConfirmationBoxClock.off();&#13;
        presenter.$removeConfirmationBoxStopwatch.off();&#13;
        presenter.$bottomPanels.off();&#13;
&#13;
        presenter.$removeConfirmationBox.remove();&#13;
        presenter.$removeConfirmationBoxClock.remove();&#13;
        presenter.$removeConfirmationBoxStopwatch.remove();&#13;
        presenter.$panel.remove();&#13;
&#13;
        presenter.headerLoadedDeferred = null;&#13;
        presenter.headerLoaded = null;&#13;
&#13;
        presenter.$view = null;&#13;
        presenter.$panel = null;&#13;
        presenter.$defaultThicknessButton = null;&#13;
        presenter.isInFrame = null;&#13;
        presenter.$buttonsExceptOpen = null;&#13;
        presenter.buttonWidth = null;&#13;
&#13;
        presenter.$removeConfirmationBox = null;&#13;
&#13;
        presenter._view = null;&#13;
        presenter.model = null;&#13;
        presenter.isVisible = null;&#13;
        presenter.isKeepStateAndPosition = null;&#13;
&#13;
        presenter.$pagePanel = null;&#13;
        presenter.$removeConfirmationBoxClock = null;&#13;
        presenter.$removeConfirmationBoxStopwatch = null;&#13;
        presenter.$bottomPanels = null;&#13;
&#13;
        presenter.config = null;&#13;
&#13;
        presenter.iwb_tmp_canvas = null;&#13;
        presenter.tmp_ctx = null;&#13;
&#13;
        presenter.$markerMask = null;&#13;
        presenter.markerCanvas = null;&#13;
        presenter.markerCtx = null;&#13;
        presenter.$penMask = null;&#13;
        presenter.ctx = null;&#13;
        presenter.canvas = null;&#13;
        presenter.$selectingMask = null;&#13;
        presenter.selectingCtx = null;&#13;
        presenter.selectingCanvas = null;&#13;
&#13;
        /***&#13;
         * *****************************************&#13;
         * presenter.addFloatingImages - kinetic.js&#13;
         * *****************************************&#13;
         */&#13;
        presenter.$floatingImageMask.off();&#13;
&#13;
        if(presenter.floatingImageLayer) {&#13;
            presenter.floatingImageLayer.destroy();&#13;
        }&#13;
        if(presenter.floatingImageStage) {&#13;
            presenter.floatingImageStage.destroy();&#13;
        }&#13;
        &#13;
        for(var i = 0; i &lt; 3; i++) {&#13;
            if(presenter._kinetic.images[i]) {&#13;
                presenter._kinetic.images[i].destroy();&#13;
            }&#13;
        &#13;
            //imageRotateObj&#13;
            if(presenter._kinetic.rotateObj[i]) {&#13;
                $(presenter._kinetic.rotateObj[i]).off();&#13;
                presenter._kinetic.rotateObj[i].src = '';&#13;
            }&#13;
        &#13;
            //imageMoveObj&#13;
            if(presenter._kinetic.moveObj[i]) {&#13;
                $(presenter._kinetic.moveObj[i]).off();&#13;
                presenter._kinetic.moveObj[i].src = '';&#13;
            }&#13;
        &#13;
        &#13;
            //imageObj&#13;
            if(presenter._kinetic.imageObj[i]) {&#13;
                $(presenter._kinetic.imageObj[i]).off();&#13;
                presenter._kinetic.imageObj[i].src = '';&#13;
            }&#13;
&#13;
            if(presenter._kinetic.rotateIcon[i]) {&#13;
                presenter._kinetic.rotateIcon[i].destroy();&#13;
            }&#13;
            if(presenter._kinetic.moveIcon[i]) {&#13;
                presenter._kinetic.moveIcon[i].destroy();&#13;
            }&#13;
            if(presenter.floatingImageGroups[i]) {&#13;
                presenter.floatingImageGroups[i].destroy();&#13;
            }&#13;
        }&#13;
&#13;
        presenter._kinetic.images = [];&#13;
        presenter._kinetic.rotateObj = [];&#13;
        presenter._kinetic.moveObj = [];&#13;
        presenter._kinetic.rotateIcon = [];&#13;
        presenter._kinetic.moveIcon = [];&#13;
&#13;
        presenter._kinetic.groups = null;&#13;
        presenter._kinetic.images = null;&#13;
        presenter._kinetic.rotateObj = null;&#13;
        presenter._kinetic.moveObj = null;&#13;
        presenter._kinetic.rotateIcon = null;&#13;
        presenter._kinetic.moveIcon = null;&#13;
&#13;
        presenter._kinetic.imageObj = [];&#13;
        presenter._kinetic.imageObj.length = 0;&#13;
        presenter._kinetic.imageObj = null;&#13;
&#13;
        presenter._kinetic = null;&#13;
&#13;
        presenter.floatingImageLayer = null;&#13;
        presenter.floatingImageStage = null;&#13;
        presenter.allImagesLoadedPromises = [];&#13;
        presenter.allImagesLoadedPromises.length = 0;&#13;
        presenter.allImagesLoadedPromises = null;&#13;
&#13;
        /***&#13;
         * ***********************************************&#13;
         *  applyHovered&#13;
         * ***********************************************&#13;
         */&#13;
        presenter._hoveredButtons.forEach(function ($btn) {&#13;
            $btn.off();&#13;
        });&#13;
        presenter._hoveredButtons.length = [];&#13;
        presenter._hoveredButtons = null;&#13;
&#13;
        /***&#13;
         * **************************************************&#13;
         * addScrollHandler&#13;
         * **************************************************&#13;
         */&#13;
         if (presenter.playerController &amp;&amp; !presenter.playerController.isPlayerInCrossDomain()) {&#13;
             $(window.parent.document).unbind('scroll', IWB_Toolbar_scrollHandler);&#13;
             $(window.parent.document).find('#lesson-view &gt; div &gt; div').unbind('scroll', IWB_Toolbar_scrollHandler);&#13;
             $(window).unbind('scroll', IWB_Toolbar_scrollHandler);&#13;
             $("#content-view").unbind('scroll', IWB_Toolbar_scrollHandler);&#13;
         }&#13;
&#13;
        /***&#13;
         * ************************************************ &#13;
         * zoom&#13;
         * ************************************************ &#13;
         */&#13;
        if(zoom) {&#13;
            zoom.destroy();&#13;
        }&#13;
&#13;
        /***&#13;
         *************************************************&#13;
         * setState&#13;
         *************************************************&#13;
        */&#13;
        presenter._setState.images.forEach(function (image) {&#13;
            $(image).off();&#13;
            image.src = '';&#13;
        });&#13;
        presenter._setState.images.length = 0;&#13;
        presenter._setState.images = null;&#13;
&#13;
        presenter._setState = null;&#13;
&#13;
&#13;
&#13;
        /***&#13;
         * ***********************************************&#13;
         * functions&#13;
         * ***********************************************&#13;
         */&#13;
        presenter.setBasicConfiguration = null;&#13;
        presenter.changeCursor = null;&#13;
        presenter.createCanvases = null;&#13;
        presenter.createCanvas = null;&#13;
        presenter.addFloatingImages = null;&#13;
        presenter.loadDeferredFloatingImage = null;&#13;
        presenter.applyHovered = null;&#13;
        presenter.setVisibility = null;&#13;
        presenter.openPanel = null;&#13;
        presenter._openPanelShow = null;&#13;
        presenter._closePanelShow = null;&#13;
        presenter.toogleMasks = null;&#13;
        presenter.isSupportCSSPointerEvents = null;&#13;
        presenter.panelView = null;&#13;
        presenter.markerDrawingLogic = null;&#13;
        applyOnDblClickHandler = null;&#13;
        applyDoubleTapHandler = null;&#13;
&#13;
        //buttonsLogic clearing&#13;
        presenter.addEventHandlers = null;&#13;
        presenter.penClickHandler = null;&#13;
        presenter.penCloseHandler = null;&#13;
        presenter.penUnclickHandler = null;&#13;
        presenter.markerClickHandler = null;&#13;
        presenter.markerCloseHandler = null;&#13;
        presenter.markerUnclickHandler = null;&#13;
        presenter.defaultClickHandler = null;&#13;
        presenter.colorClickHandler = null;&#13;
        presenter.thicknessClickHandler = null;&#13;
        presenter.zoomClickHandler = null;&#13;
        presenter.zoomCloseHandler = null;&#13;
        presenter.eraserClickHandler = null;&#13;
        presenter.eraserUnClickHandler = null;&#13;
        presenter.hideAreaClickHandler = null;&#13;
        presenter.standAreaClickHandler = null;&#13;
        presenter.resetClickHandler = null;&#13;
        presenter.resetOneClickHandler = null;&#13;
        presenter.redoOneClickHandler = null;&#13;
        presenter.noteClickHandler = null;&#13;
        presenter.customScriptClickHandler = null;&#13;
        presenter.floatingImageClickHandler = null;&#13;
        presenter.clockClickHandler = null;&#13;
        presenter.stopwatchClickHandler = null;&#13;
        presenter.closeClickHandler = null;&#13;
        presenter.openClickHandler = null;&#13;
        presenter.areDrawingButtonsActive = null;&#13;
        presenter.isDrawingActive = null;&#13;
        presenter.isAreaDrawingActive = null;&#13;
        presenter.getTheWidestAndHighest = null;&#13;
        presenter.preventClickAction_zoomClickHandler = null;&#13;
        presenter.zoomSelectedModule = null;&#13;
        presenter.drawAreaLogic = null;&#13;
        presenter.setImagePosition = null;&#13;
        presenter.createClock = null;&#13;
        presenter.createStopwatch = null;&#13;
        presenter.closePanel = null;&#13;
&#13;
        //markerDrawingLogicFunctions&#13;
        presenter.onTouchStartCallback = null;&#13;
        presenter.onTouchEndEventCallback = null;&#13;
        presenter.markerMouseMoveHandler = null;&#13;
        presenter.markerMouseDownHandler = null;&#13;
        presenter.markerMouseUpHandler = null;&#13;
&#13;
        //penDrawingLogicFunctions&#13;
        presenter.penMouseMoveHandler = null;&#13;
        presenter.penMouseDownHandler = null;&#13;
        presenter.penMouseUpHandler = null;&#13;
&#13;
        //hideArea&#13;
        presenter.drawAreaLogic_touchStartCallback = null;&#13;
        presenter.drawAreaLogic_touchEndCallback = null;&#13;
        presenter.drawAreaLogic_mouseDownCallback = null;&#13;
        presenter.drawAreaLogic_mouseUpCallback = null;&#13;
&#13;
        presenter.drawAreaLogic = null;&#13;
&#13;
        presenter.disableTextAudioEventHandlers = null;&#13;
        presenter.restoreTextAudioEventHandlers = null;&#13;
        presenter.changeColor = null;&#13;
        presenter.changeThickness = null;&#13;
        presenter.drawingLogic = null;&#13;
        presenter.toggleBottomPanels = null;&#13;
        presenter.reset = null;&#13;
        presenter._reset = null;&#13;
    };&#13;
&#13;
    presenter._reset = function IWB_Toolbar_private_reset(closePanel, shouldClearCanvas, shouldHideDrawingMasks, shouldHideSelectingMasks, shouldHideFloatingImage, shouldClearSelectingMask) {&#13;
        presenter.$panel.find('.clicked-lighter').removeClass('clicked-lighter');&#13;
        presenter.$panel.find('.hovered').removeClass('hovered');&#13;
        presenter.$pagePanel.find('.zoomed').removeClass('zoomed');&#13;
        presenter.$pagePanel.enableSelection();&#13;
        presenter.changeCursor('default');&#13;
&#13;
        if (closePanel) {&#13;
            presenter.$pagePanel.find('.bottom-panel-color').hide();&#13;
            presenter.$pagePanel.find('.bottom-panel-thickness').hide();&#13;
        }&#13;
&#13;
        if (shouldClearCanvas) {&#13;
            presenter.changeColor('#0fa9f0');&#13;
            clearCanvases();&#13;
        }&#13;
&#13;
        if (shouldHideDrawingMasks &amp;&amp; !presenter.isSupportCSSPointerEvents()) {&#13;
            if (presenter.$penMask) {&#13;
                presenter.$penMask.hide();&#13;
            }&#13;
            if (presenter.$markerMask) {&#13;
                presenter.$markerMask.hide();&#13;
            }&#13;
        }&#13;
&#13;
        if (shouldHideSelectingMasks) {&#13;
            if (presenter.$selectingMask) {&#13;
                presenter.$selectingMask.hide();&#13;
            }&#13;
        }&#13;
&#13;
        if(shouldHideFloatingImage){&#13;
            if (presenter.$floatingImageMask) {&#13;
                presenter.$floatingImageMask.hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').hide();&#13;
                presenter.$pagePanel.find('.bottom-panel-floating-image').attr('isHidden', '1');&#13;
            }&#13;
        }&#13;
&#13;
        if (shouldClearSelectingMask) {&#13;
            clearSelectingCanvas();&#13;
        }&#13;
&#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    presenter.changeColor = function IWB_Toolbar_changeColor(color, button) {&#13;
        if (button) {&#13;
            presenter.$panel.find('.button.color').css('background-image', $(button).css('background-image'));&#13;
        } else {&#13;
            presenter.$panel.find('.button.color').css('background-image', presenter.$defaultColorButton.css('background-image'));&#13;
        }&#13;
        presenter.currentLineColor = color;&#13;
    };&#13;
&#13;
    presenter.changeThickness = function IWB_Toolbar_changeThickness(size, button) {&#13;
        if (button) {&#13;
            presenter.$panel.find('.button.thickness').css('background-image', $(button).css('background-image'));&#13;
        } else {&#13;
            presenter.$panel.find('.button.thickness').css('background-image', presenter.$defaultThicknessButton.css('background-image'));&#13;
        }&#13;
        presenter.currentLineWidth = presenter.data.defaultPenWidth === 1 ? size : presenter.data.defaultPenWidth;&#13;
&#13;
        presenter.currentMarkerThickness = presenter.data.markerThickness === 10 ? size : presenter.data.markerThickness;&#13;
        presenter.currentEraserThickness = presenter.data.eraserThickness === 20 ? size : presenter.data.eraserThickness;&#13;
    };&#13;
&#13;
    function clearCanvases() {&#13;
        if (presenter.canvas) {&#13;
            presenter.penUsed = false;&#13;
            presenter.canvas.off('mousemove mousedown mouseup');&#13;
            presenter.ctx.clearRect(0, 0, presenter.canvas[0].width, presenter.canvas[0].height);&#13;
        }&#13;
&#13;
        if (presenter.markerCanvas) {&#13;
            presenter.markerUsed = false;&#13;
            presenter.markerCanvas.off('mousemove mousedown mouseup');&#13;
            presenter.markerCtx.clearRect(0, 0, presenter.markerCanvas[0].width, presenter.markerCanvas[0].height);&#13;
        }&#13;
    }&#13;
&#13;
    function clearSelectingCanvas() {&#13;
        if (presenter.selectingCanvas) {&#13;
            presenter.selectingCanvas.off('mousemove mousedown mouseup');&#13;
            presenter.selectingCtx.clearRect(0, 0, presenter.selectingCanvas[0].width, presenter.selectingCanvas[0].height);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$panel.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.isCustomButtonActive = function() {&#13;
        return presenter.customButtonActive;&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'deselectCustomButton': presenter.deselectCustomButton,&#13;
            'open' : presenter.open,&#13;
            'hide' : presenter.hide,&#13;
            'show' : presenter.show,&#13;
            'setPenColor' : presenter.setPenColor,&#13;
            'setMarkerColor' : presenter.setMarkerColor,&#13;
            'setDefaultPenThickness' : presenter.setDefaultPenThickness,&#13;
            'setMarkerThickness': presenter.setMarkerThickness,&#13;
            'setEraserThickness': presenter.setEraserThickness&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function IWB_Toolbar_reset() {&#13;
        if (presenter.customButtonActive) {&#13;
            presenter.deselectCustomButton();&#13;
        }&#13;
        presenter.$pagePanel.find('.clicked').removeClass('clicked');&#13;
        presenter._reset(true, true, true, true, true, true);&#13;
        presenter.penLineWidth = 1;&#13;
        presenter.data.defaultPenWidth = 1;&#13;
        presenter.markerLineWidth = 10;&#13;
        presenter.data.eraserThickness = 20;&#13;
        presenter.penDataURL = null;&#13;
        presenter.markerDataUrl = null;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() { return 0; };&#13;
    presenter.getMaxScore = function() { return 0; };&#13;
    presenter.getScore = function() { return 0; };&#13;
&#13;
    function getSavedClocks() {&#13;
        var clocks = [];&#13;
        $.each(presenter.$pagePanel.find('.iwb-toolbar-clock'), function() {&#13;
            clocks.push({&#13;
                'top': $(this).css('top'),&#13;
                'left': $(this).css('left')&#13;
            });&#13;
        });&#13;
        return clocks;&#13;
    }&#13;
&#13;
    function getSavedStopwatches() {&#13;
        var stopwatches = [];&#13;
        $.each(presenter.$pagePanel.find('.iwb-toolbar-stopwatch'), function() {&#13;
            stopwatches.push({&#13;
                'top': $(this).css('top'),&#13;
                'left': $(this).css('left')&#13;
            });&#13;
        });&#13;
        return stopwatches;&#13;
    }&#13;
&#13;
    function isPanelOpened() {&#13;
        return presenter.$panel.hasClass('opened');&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        zoom.out();&#13;
        var notes = presenter.noteObjects.map(function (note) {&#13;
            return note.getState();&#13;
        });&#13;
&#13;
        var clocks = getSavedClocks(),&#13;
           stopwatches = getSavedStopwatches(),&#13;
           position = presenter.$panel.position(),&#13;
           openedPanel = isPanelOpened(),&#13;
           drawings = {&#13;
               'pen' : (presenter.penUsed &amp;&amp; presenter.canvas) ? presenter.penDataURL : null,&#13;
               'marker' : (presenter.markerUsed &amp;&amp; presenter.markerCanvas) ? presenter.markerDataUrl : null&#13;
           };&#13;
&#13;
        var stateColor;&#13;
        var stateThickness;&#13;
        if(openedPanel){&#13;
           if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
               presenter.closePenColor = presenter.currentLineColor;&#13;
               presenter.closePenThickness = presenter.currentLineWidth;&#13;
&#13;
               presenter.isCloseColor = true;&#13;
           }else if(presenter.shouldSaveColor == 'marker'){&#13;
               presenter.closePenColor = presenter.currentLineColor;&#13;
               presenter.closePenThickness = presenter.currentMarkerThickness;&#13;
&#13;
               presenter.isCloseColor = true;&#13;
           }&#13;
           else{&#13;
               presenter.isCloseColor = false;&#13;
           }&#13;
           if(presenter.activeButton != 'open'){&#13;
               presenter.activeFunction = presenter.activeButton;&#13;
           }&#13;
        }&#13;
&#13;
        if(presenter.shouldSaveColor == 'pen' || presenter.shouldSaveColor == 'stand-area' || presenter.shouldSaveColor == 'hide-area'){&#13;
           stateColor = presenter.closePenColor;&#13;
           stateThickness = presenter.closePenThickness;&#13;
        }else if(presenter.shouldSaveColor == 'marker'){&#13;
           stateColor = presenter.closePenColor;&#13;
           stateThickness = presenter.closePenThickness;&#13;
        }else{&#13;
           stateColor = '';&#13;
           stateThickness = '';&#13;
        }&#13;
&#13;
        if(presenter.isKeepStateAndPosition){&#13;
           if(window.savedPanel.tools){&#13;
               if(!presenter.activeFunction || presenter.activeFunction == 'open' || presenter.activeFunction == 'close'){&#13;
                   presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
               }&#13;
           }&#13;
        }&#13;
&#13;
        var isSelectingVisible = presenter.$selectingMask.is(':visible');&#13;
&#13;
        window.savedPanel.tools = {&#13;
           'activeFunction': presenter.activeFunction,&#13;
           'customButtonActive': presenter.customButtonActive,&#13;
           'stateColor': stateColor,&#13;
           'stateThickness': stateThickness,&#13;
           'isCloseColor': presenter.isCloseColor,&#13;
           'buttonColor': $(presenter.buttonColor).attr("color"),&#13;
           'buttonThickness': $(presenter.buttonThickness).attr("thickness"),&#13;
           'shouldSaveColor': presenter.shouldSaveColor&#13;
        };&#13;
&#13;
        var state = {&#13;
           'areas' : presenter.areas,&#13;
           'notes' : notes,&#13;
           'clocks' : clocks,&#13;
           'stopwatches' : stopwatches,&#13;
           'drawings' : drawings,&#13;
           'seconds' : presenter.seconds,&#13;
           'minutes' : presenter.minutes,&#13;
           'hours' : presenter.hours,&#13;
           'stopClicked' : presenter.stopButtonClicked,&#13;
           'startClicked' : presenter.startButtonClicked,&#13;
           'isVisible' : presenter.isVisible,&#13;
           'position' : position,&#13;
           'openedPanel' : openedPanel,&#13;
           'activeFunction': presenter.activeFunction,&#13;
           'customButtonActive': presenter.customButtonActive,&#13;
           'stateColor': stateColor,&#13;
           'stateThickness': stateThickness,&#13;
           'isCloseColor': presenter.isCloseColor,&#13;
           'buttonColor': $(presenter.buttonColor).attr("color"),&#13;
           'buttonThickness': $(presenter.buttonThickness).attr("thickness"),&#13;
           'shouldSaveColor': presenter.shouldSaveColor,&#13;
           'isSelectingVisible': isSelectingVisible&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    /**&#13;
     * We are omitting state properties as follows:&#13;
     * - hours&#13;
     * - minutes&#13;
     * - seconds&#13;
     * - stopClicked&#13;
     * - startClicked&#13;
     *&#13;
     * Because they are used when creating stopwatches and we assume here that no stopwatches should be created&#13;
     * (hence empty array of them).&#13;
     */&#13;
    presenter.upgradeStateForStopwatchesAndClocks = function(parsedState) {&#13;
        if (parsedState.stopwatches == undefined) {&#13;
            parsedState.stopwatches = [];&#13;
        }&#13;
        if (parsedState.clocks == undefined) {&#13;
            parsedState.clocks = [];&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.isVisible == undefined) {&#13;
            parsedState.isVisible = true;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForSavingTools = function (parsedState){&#13;
        if(parsedState.activeFunction == undefined){&#13;
            parsedState.activeFunction = '';&#13;
        }&#13;
        if(presenter.customButtonActive == undefined){&#13;
            parsedState.customButtonActive = '';&#13;
        }&#13;
        if(parsedState.buttonColor == undefined){&#13;
            parsedState.buttonColor = '';&#13;
        }&#13;
        if(parsedState.buttonThickness == undefined){&#13;
            parsedState.buttonThickness = '';&#13;
        }&#13;
        if(parsedState.isCloseColor == undefined){&#13;
            parsedState.isCloseColor = false;&#13;
        }&#13;
        if(parsedState.shouldSaveColor == undefined){&#13;
            parsedState.shouldSaveColor = '';&#13;
        }&#13;
        if(parsedState.stateColor == undefined){&#13;
            parsedState.stateColor = '#000';&#13;
        }&#13;
        if(parsedState.stateThickness == undefined){&#13;
            parsedState.stateThickness = 1;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateForSelectingMaskVisibility = function (parsedState) {&#13;
            if (parsedState.isSelectingVisible == undefined) {&#13;
                parsedState.isSelectingVisible = false;&#13;
            }&#13;
&#13;
            return parsedState;&#13;
        };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        var upgradedState = presenter.upgradeStateForStopwatchesAndClocks(parsedState);&#13;
        upgradedState = presenter.upgradeStateForVisibility(upgradedState);&#13;
        upgradedState = presenter.upgradeStateForSavingTools(upgradedState);&#13;
        upgradedState = presenter.upgradeStateForSelectingMaskVisibility(upgradedState);&#13;
&#13;
        return  upgradedState;&#13;
    };&#13;
&#13;
    presenter.shouldRestoreStateAndPosition = function (model, state) {&#13;
        var keepStateAndPosition = model['keepStateAndPosition'];&#13;
&#13;
        if (keepStateAndPosition == undefined || state.position == undefined) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return keepStateAndPosition == 'False';&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
           return;&#13;
        }&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        var upgradedState = presenter.upgradeState(parsedState);&#13;
        presenter.areas = parsedState.areas;&#13;
        presenter.stopwatches = parsedState.stopwatches;&#13;
        presenter.clocks = parsedState.clocks;&#13;
        if (presenter.shouldRestoreStateAndPosition(presenter.model, upgradedState)) {&#13;
           if (upgradedState.openedPanel) {&#13;
               if(presenter.isKeepStateAndPosition){&#13;
                   presenter.openPanel(false);&#13;
               }&#13;
           }&#13;
           presenter.position = upgradedState.position;&#13;
        &#13;
           var visibility = presenter.$panel.css('visibility');&#13;
           var width = presenter.$panel.css('width');&#13;
           var position = presenter.$panel.css('position');&#13;
        &#13;
           presenter.$panel.attr('style', 'position: ' + position + '; top: ' + presenter.position.top + 'px; left: ' + presenter.position.left + 'px; visibility: ' + visibility + '; width: ' + width + ';');&#13;
        }&#13;
&#13;
&#13;
        var image1 = new Image();&#13;
        var image2 = new Image();&#13;
        presenter._setState.images.push(image1);&#13;
        presenter._setState.images.push(image2);&#13;
&#13;
        if (upgradedState.drawings.pen) {&#13;
            presenter.penUsed = true;&#13;
        }&#13;
        if (upgradedState.drawings.marker) {&#13;
            presenter.markerUsed = true;&#13;
        }&#13;
&#13;
        presenter.penDataURL = upgradedState.drawings.pen;&#13;
        presenter.markerDataUrl = upgradedState.drawings.marker;&#13;
        setDrawingState(new Image(), presenter.ctx, upgradedState.drawings.pen);&#13;
        setDrawingState(new Image(), presenter.markerCtx, upgradedState.drawings.marker);&#13;
        &#13;
        $.each(parsedState.notes, function(_, noteData) {&#13;
            var note = presenter.createNote(noteData);&#13;
            presenter.noteObjects.push(note);&#13;
            presenter.$pagePanel.find('.ic_page').append(note.getView());&#13;
        });&#13;
&#13;
        $.each(presenter.clocks, function() {&#13;
           presenter.createClock(this);&#13;
        });&#13;
&#13;
        $.each(presenter.stopwatches, function() {&#13;
           presenter.createStopwatch(this, upgradedState.hours, upgradedState.minutes, upgradedState.seconds, upgradedState.stopClicked, upgradedState.startClicked);&#13;
        });&#13;
        &#13;
        drawSavedAreas();&#13;
        presenter.isVisible = upgradedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible, false, presenter.$view);&#13;
        &#13;
        if (presenter.isSupportCSSPointerEvents()) {&#13;
           presenter.$penMask.show();&#13;
           presenter.$markerMask.show();&#13;
           if(presenter.isKeepStateAndPosition){&#13;
               if(window.savedPanel.tools != undefined){&#13;
                   if(window.savedPanel.tools.activeFunction == 'pen' || window.savedPanel.tools.activeFunction == 'marker'){&#13;
                       if(window.savedPanel.isOpen){&#13;
                           presenter.$penMask.css('pointer-events', 'auto');&#13;
                           presenter.$markerMask.css('pointer-events', 'auto');&#13;
                       }else{&#13;
                           presenter.$penMask.css('pointer-events', 'none');&#13;
                           presenter.$markerMask.css('pointer-events', 'none');&#13;
                       }&#13;
                   }else{&#13;
                       presenter.$penMask.css('pointer-events', 'none');&#13;
                       presenter.$markerMask.css('pointer-events', 'none');&#13;
                   }&#13;
               }else{&#13;
                   presenter.$penMask.css('pointer-events', 'none');&#13;
                   presenter.$markerMask.css('pointer-events', 'none');&#13;
               }&#13;
           }else{&#13;
               presenter.$penMask.css('pointer-events', 'none');&#13;
               presenter.$markerMask.css('pointer-events', 'none');&#13;
           }&#13;
        }&#13;
        &#13;
        if(presenter.isKeepStateAndPosition &amp;&amp; (window.savedPanel.tools != undefined)){&#13;
           presenter.customButtonActive = window.savedPanel.tools.customButtonActive;&#13;
           presenter.activeFunction = window.savedPanel.tools.activeFunction;&#13;
           presenter.closePenColor = window.savedPanel.tools.stateColor;&#13;
           presenter.closePenThickness = window.savedPanel.tools.stateThickness;&#13;
           presenter.buttonColor = presenter.$bottomPanels.find('[color*='+window.savedPanel.tools.buttonColor+']')[0];&#13;
           presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+window.savedPanel.tools.buttonThickness+']')[0];&#13;
           presenter.isCloseColor = window.savedPanel.tools.isCloseColor;&#13;
           presenter.shouldSaveColor = window.savedPanel.tools.shouldSaveColor;&#13;
        }else{&#13;
           presenter.customButtonActive = upgradedState.customButtonActive;&#13;
           presenter.activeFunction = upgradedState.activeFunction;&#13;
           presenter.closePenColor = upgradedState.stateColor;&#13;
           presenter.closePenThickness = upgradedState.stateThickness;&#13;
           presenter.buttonColor = presenter.$bottomPanels.find('[color*='+upgradedState.buttonColor+']')[0];&#13;
           presenter.buttonThickness = presenter.$bottomPanels.find('[thickness*='+upgradedState.buttonThickness+']')[0];&#13;
           presenter.isCloseColor = upgradedState.isCloseColor;&#13;
           presenter.shouldSaveColor = upgradedState.shouldSaveColor;&#13;
        }&#13;
        if(presenter.activeFunction){&#13;
           presenter.activeButton = presenter.activeFunction;&#13;
        }&#13;
&#13;
        presenter.isSavedState = true;&#13;
&#13;
        if(!presenter.isKeepStateAndPosition){&#13;
           if(presenter.isCloseColor){&#13;
               presenter.changeColor(presenter.closePenColor, presenter.buttonColor);&#13;
               presenter.changeThickness(presenter.closePenThickness, presenter.buttonThickness);&#13;
           }&#13;
        }&#13;
&#13;
        if(upgradedState.isSelectingVisible) {&#13;
            presenter.$selectingMask.show();&#13;
        } else {&#13;
            presenter.$selectingMask.hide();&#13;
        }&#13;
        &#13;
        setOverflowWorkAround(true);&#13;
        setOverflowWorkAround(false);&#13;
    };&#13;
&#13;
    presenter.updateZoomConfiguration = function () {&#13;
        presenter.zoomConfiguration.playerInitialLeftOffset = $("#_icplayer").offset().left;&#13;
        presenter.zoomConfiguration.viewLeftOffset = presenter.$panel.offset().left;&#13;
    };&#13;
&#13;
    function setDrawingState(image, ctx, data) {&#13;
        if (data) {&#13;
            $(image).load(function() {&#13;
                ctx.drawImage(image, 0, 0);&#13;
            });&#13;
            image.src = data;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPenColor = function(color) {&#13;
        color = color[0];&#13;
        presenter.data.penColor = color;&#13;
        if (presenter.$pagePanel.find('.clicked').hasClass('pen')) {&#13;
            presenter.currentLineColor = color;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setMarkerColor = function(color) {&#13;
        color = color[0];&#13;
        presenter.data.markerColor = color;&#13;
        if (presenter.$pagePanel.find('.clicked').hasClass('marker')) {&#13;
            presenter.currentLineColor = color;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setDefaultPenThickness = function(lineWidth) {&#13;
        presenter.data.defaultPenWidth = parseInt(lineWidth, 10);&#13;
        presenter.changeThickness(presenter.data.defaultPenWidth);&#13;
    };&#13;
&#13;
    presenter.setMarkerThickness = function (thickness){&#13;
        presenter.data.markerThickness = parseInt(thickness, 10);&#13;
        presenter.changeThickness(presenter.data.markerThickness);&#13;
    };&#13;
&#13;
    presenter.setEraserThickness = function (thickness){&#13;
        presenter.data.eraserThickness = parseInt(thickness, 10);&#13;
        presenter.changeThickness(presenter.data.eraserThickness);&#13;
    };&#13;
&#13;
    presenter.destroyDraggableItems = function() {&#13;
        for (var i = 0; i &lt; presenter.noteObjects.length; i++) {&#13;
            presenter.noteObjects[i].destroy();&#13;
        }&#13;
        presenter.noteObjects = [];&#13;
&#13;
        if (presenter.stopwatchAdded) {&#13;
            closeStopwatch();&#13;
        }&#13;
&#13;
        if (presenter.clockAdded) {&#13;
            closeClock();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.resetDrawingMode = function() {&#13;
        presenter.drawMode = presenter.DRAW_MODE.NONE;&#13;
        presenter.ctx.globalCompositeOperation = 'source-over';&#13;
        presenter.markerCtx.globalCompositeOperation = 'source-over';&#13;
        presenter.$penMask.css('pointer-events', 'none');&#13;
        presenter.$markerMask.css('pointer-events', 'none');&#13;
    }&#13;
&#13;
    presenter.restoreLastState = function() {&#13;
        presenter.stateStack.restoreLastState();&#13;
    }&#13;
&#13;
    presenter.pushStateToStack = function() {&#13;
        this.stateStack.pushStateToStack();&#13;
    }&#13;
&#13;
    presenter.redoStateFromArray = function() {&#13;
        presenter.stateStack.redoStateFromArray();&#13;
    }&#13;
&#13;
    // Method added to aid in testing&#13;
    presenter.getStateStack = function() {&#13;
        if (presenter.stateStack == null) {&#13;
            presenter.stateStack = new StateStack(presenter);&#13;
        }&#13;
        return presenter.stateStack;&#13;
    }&#13;
&#13;
    function StateStack(iwbPresenter) {&#13;
        this.iwbPresenter = iwbPresenter;&#13;
        this.currentState = "";&#13;
        this.prevStateStack = [];&#13;
        this.nextStateStack = [];&#13;
        this.stateStackOverflow = false;&#13;
        if (iwbPresenter.playerController) {&#13;
            var pageIndex = iwbPresenter.playerController.getCurrentPageIndex();&#13;
            if (window.savedPanel &amp;&amp; window.savedPanel.histories &amp;&amp; window.savedPanel.histories[pageIndex]) {&#13;
                this.setState(window.savedPanel.histories[pageIndex]);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    StateStack.prototype.getState = function() {&#13;
        var state = {&#13;
            currentState: this.currentState,&#13;
            prevStateStack: this.prevStateStack,&#13;
            nextStateStack: this.nextStateStack,&#13;
            stateStackOverflow: this.stateStackOverflow&#13;
        };&#13;
        return JSON.stringify(state);&#13;
    }&#13;
&#13;
    StateStack.prototype.setState = function(state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        this.currentState = parsedState.currentState;&#13;
        this.prevStateStack = parsedState.prevStateStack;&#13;
        this.nextStateStack = parsedState.nextStateStack;&#13;
        this.stateStackOverflow = parsedState.stateStackOverflow;&#13;
    }&#13;
&#13;
    StateStack.prototype.compareStates = function(state1, state2) {&#13;
        if (state1.length == 0 || state2.length == 0) {&#13;
            return state1.length == state2.length;&#13;
        }&#13;
        var json1 = JSON.parse(state1);&#13;
        var json2 = JSON.parse(state2);&#13;
        var newJson1 = {};&#13;
        var newJson2 = {};&#13;
        var compareFields = ["areas", "clocks", "drawings", "notes", "stopwatches"];&#13;
        for(var i = 0; i &lt; compareFields.length; i++) {&#13;
            var fieldName = compareFields[i];&#13;
            newJson1[fieldName] = json1[fieldName];&#13;
            newJson2[fieldName] = json2[fieldName] ;&#13;
        }&#13;
        var result = JSON.stringify(newJson1) == JSON.stringify(newJson2);&#13;
        return result;&#13;
    }&#13;
&#13;
    StateStack.prototype.pushStateToStack = function() {&#13;
        if (!this.iwbPresenter.config.enableUndoRedo) return;&#13;
        var newState = this.iwbPresenter.getState();&#13;
        if (!this.compareStates(newState, this.currentState)) {&#13;
            if (this.nextStateStack.length &gt; 0) {&#13;
                this.nextStateStack = [];&#13;
            }&#13;
            if (this.currentState.length &gt; 0) {&#13;
                this.prevStateStack.push(this.currentState);&#13;
                this.currentState = newState;&#13;
                if (this.prevStateStack.length &gt; 5) {&#13;
                    this.stateStackOverflow = true;&#13;
                    this.prevStateStack.splice(0, this.prevStateStack.length - 5);&#13;
                }&#13;
            } else {&#13;
                this.currentState = newState;&#13;
            }&#13;
            this.updateGlobalHistory();&#13;
        }&#13;
    }&#13;
&#13;
    StateStack.prototype.restoreLastState = function() {&#13;
        if (!this.iwbPresenter.config.enableUndoRedo) return;&#13;
        this.iwbPresenter.resetDrawingMode();&#13;
        if (this.prevStateStack.length &gt; 0) {&#13;
            this.iwbPresenter.reset();&#13;
            this.iwbPresenter.destroyDraggableItems();&#13;
            this.nextStateStack.push(this.currentState);&#13;
            this.currentState = this.prevStateStack.pop();&#13;
            this.iwbPresenter.setState(this.currentState);&#13;
            this.updateGlobalHistory();&#13;
        } else if (!this.stateStackOverflow &amp;&amp; this.currentState.length &gt; 0) {&#13;
            this.iwbPresenter.reset();&#13;
            this.iwbPresenter.destroyDraggableItems();&#13;
            this.nextStateStack.push(this.currentState);&#13;
            this.currentState = "";&#13;
            this.updateGlobalHistory();&#13;
        }&#13;
    }&#13;
&#13;
    StateStack.prototype.redoStateFromArray = function() {&#13;
        if (!this.iwbPresenter.config.enableUndoRedo) return;&#13;
        this.iwbPresenter.resetDrawingMode();&#13;
        if (this.nextStateStack.length &gt; 0) {&#13;
            this.iwbPresenter.reset();&#13;
            this.iwbPresenter.destroyDraggableItems();&#13;
            this.prevStateStack.push(this.currentState);&#13;
            this.currentState = this.nextStateStack.pop();&#13;
            this.iwbPresenter.setState(this.currentState);&#13;
            this.updateGlobalHistory();&#13;
        }&#13;
    }&#13;
&#13;
    StateStack.prototype.updateGlobalHistory = function() {&#13;
        if (!window.savedPanel.histories) {&#13;
            window.savedPanel.histories = {};&#13;
        };&#13;
        if (presenter.playerController) {&#13;
            var pageIndex = this.iwbPresenter.playerController.getCurrentPageIndex();&#13;
            window.savedPanel.histories[pageIndex] = this.getState();&#13;
        }&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonIWB_Toolbar_create.__supported_player_options__ = {&#13;
    interfaceVersion: 2&#13;
};&#13;
</presenter></addon>