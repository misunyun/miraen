<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Paragraph_Keyboard" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Default font family" nameLabel="Paragraph_Keyboard_property_default_font_family" type="string"/>
		<property name="Default font size" nameLabel="Paragraph_Keyboard_property_default_font_size" type="string"/>
		<property name="Hide toolbar" nameLabel="Paragraph_Keyboard_property_hide_toolbar" type="boolean"/>
		<property name="Editable placeholder" nameLabel="Paragraph_Keyboard_property_editable_placeholder" type="boolean"/>
		<property name="Custom toolbar" nameLabel="Paragraph_Keyboard_property_custom_toolbar" type="string"/>
		<property name="Custom CSS" nameLabel="Paragraph_Keyboard_property_custom_css" type="file"/>
		<property name="Placeholder Text" nameLabel="Paragraph_Keyboard_property_placeholder_text" type="html"/>
		<property displayName="Keyboard Layout Type" name="layoutType" nameLabel="Paragraph_Keyboard_property_layout_type" type="{French (Special Characters), German (Special Characters), Spanish (Special Characters), Custom}"/>
		<property displayName="Custom Keyboard Layout" name="keyboardLayout" nameLabel="Paragraph_Keyboard_property_keyboard_layout" type="text"/>
		<property displayName="Keyboard position" name="keyboardPosition" nameLabel="Paragraph_Keyboard_property_keyboard_position" type="{Bottom, Top, Left, Right, Custom}"/>
		<property name="Manual grading" nameLabel="Paragraph_Keyboard_property_manual_grading" type="boolean"/>
		<property name="Show Answers" nameLabel="Paragraph_Keyboard_property_show_answers" type="html"/>
		<property name="Title" nameLabel="Paragraph_Keyboard_property_title" type="string"/>
		<property name="Weight" nameLabel="Paragraph_Keyboard_property_weight" type="string"/>
		<property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
	</model>
<css>div.paragraph-keyboard-wrapper {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
    position: relative;&#13;
}&#13;
&#13;
div.paragraph-keyboard-wrapper.disabled {&#13;
	pointer-events: none;&#13;
  	cursor: default;&#13;
	opacity: 0.5;&#13;
}&#13;
&#13;
div.paragraph-wrapper {&#13;
    position: absolute;&#13;
    border: solid 1px #9E9E9E;&#13;
	border-radius: 2px;&#13;
    overflow-y: hidden;&#13;
    overflow-x: auto;&#13;
}&#13;
&#13;
div.paragraph-wrapper textarea {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
&#13;
div.paragraph-lock {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
	background: #e8eef3;&#13;
	position: absolute;&#13;
	top: 1px;&#13;
}&#13;
&#13;
.paragraph-keyboard {&#13;
    position: absolute;&#13;
    display: inline-block;&#13;
    background: #eeeeee;&#13;
    border: solid 1px #dddddd;&#13;
    padding: 2px;&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.paragraph-keyboard-letter {&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    color: #1c94c4;&#13;
    border: solid 1px #ccc;&#13;
    background: #f6f6f6;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
    margin: 2px;&#13;
}&#13;
&#13;
.paragraph-keyboard-empty {&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    margin: 3px;&#13;
}&#13;
&#13;
.paragraph-keyboard-letter.clicked {&#13;
    background: #fdf5ce;&#13;
    color: #c77405;&#13;
    border-color: #fbcb09;&#13;
}&#13;
&#13;
.keyRow {&#13;
    width: auto;&#13;
    float: left;&#13;
}&#13;
&#13;
.keyboard-clear {&#13;
    clear: both;&#13;
    width: auto;&#13;
}&#13;
&#13;
.paragraph-keyboard-shift {&#13;
    padding: 2px;&#13;
    color: #1c94c4;&#13;
    border: solid 1px #ccc;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
    min-width: 2em;&#13;
    width: auto;&#13;
    float: left;&#13;
    text-align: center;&#13;
    padding: 2px;&#13;
    margin: 3px;&#13;
    background: url("resources/ic_keyboard_capslock_24px.svg") no-repeat center center #f6f6f6;&#13;
}&#13;
&#13;
.paragraph-keyboard-shift.clicked {&#13;
    background-color: #fdf5ce;&#13;
    border-color: #fbcb09;&#13;
}&#13;
</css><view>&lt;div class="paragraph-keyboard-wrapper"&gt;&#13;
	&lt;div class="paragraph-wrapper"&gt;&#13;
		&lt;form&gt;&#13;
			&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
		&lt;/form&gt;&#13;
	&lt;/div&gt;&#13;
	&lt;div class="paragraph-keyboard"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="paragraph-keyboard-wrapper"&gt;&#13;
	&lt;div class="paragraph-wrapper"&gt;&#13;
		&lt;form&gt;&#13;
			&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
		&lt;/form&gt;&#13;
	&lt;/div&gt;&#13;
	&lt;div class="paragraph-keyboard"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonParagraph_Keyboard_create() {&#13;
    var presenter = function () {};&#13;
    var eventBus;&#13;
&#13;
    presenter.placeholder = null;&#13;
    presenter.editor = null;&#13;
    presenter.window = null;&#13;
    presenter.isVisibleValue = null;&#13;
    presenter.view = null;&#13;
    presenter.configuration = null;&#13;
    presenter.$view = null;&#13;
    presenter.jQueryTinyMCEHTML = null;&#13;
    presenter.$tinyMCEToolbar = null;&#13;
    presenter.$TinyMCEBody = null;&#13;
    presenter.cachedAnswer = [];&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.eKeyboardButtons = [];&#13;
    presenter.isEditorLoaded = false;&#13;
    var checkHeightCounter = 0;&#13;
&#13;
    presenter.DEFAULTS = {&#13;
        TOOLBAR: 'bold italic underline numlist bullist alignleft aligncenter alignright alignjustify',&#13;
        FONT_FAMILY: 'Verdana,Arial,Helvetica,sans-serif',&#13;
        FONT_SIZE: '11px',&#13;
        BUTTON_WIDTH: 37,&#13;
        FORMAT_WIDTH: 85,&#13;
        STYLE_SELECT_NAME: "styleselect",&#13;
    };&#13;
&#13;
    presenter.ALLOWED_TOOLBAR_BUTTONS = 'customBold customUnderline customItalic newdocument bold italic underline strikethrough alignleft aligncenter '+&#13;
        'alignright alignjustify styleselect formatselect fontselect fontsizeselect '+&#13;
        'bullist numlist outdent indent blockquote undo redo '+&#13;
        'removeformat subscript superscript forecolor backcolor |'.split(' ');&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'defaultLayoutError' : 'Custom Keyboard Layout should be a JavaScript object with at least "default" property ' +&#13;
            'which should be an array of strings with space-seperated chars.',&#13;
        'weightError' : 'Weight must be a positive number between 0 and 100'&#13;
    };&#13;
&#13;
    presenter.LAYOUT_TO_LANGUAGE_MAPPING = {&#13;
        'french (special characters)' : "{ \&#13;
            'default': ['\u00e0 \u00e2 \u00e7 \u00e8 \u00e9 \u00ea \u00ee \u00ef \u00f4 \u00f9 \u0153 \u00e6 \u00eb {shift}'], \&#13;
            'shift': ['\u00c0 \u00c2 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00ce \u00cf \u00d4 \u00d9 \u00c6 \u0152 {shift}'] \&#13;
        }",&#13;
        'german (special characters)' : "{ \&#13;
            'default': ['\u00e4 \u00f6 \u00fc \u00df {shift}'], \&#13;
            'shift': ['\u00c4 \u00d6 \u00dc {empty} {shift}'] \&#13;
        }",&#13;
        'spanish (special characters)' : "{ \&#13;
            'default': ['\u00e1 \u00e9 \u00ed \u00f3 \u00fa \u00f1 \u00e7 \u00fc \u00a1 \u00bf \u00ba \u00aa {shift}'], \&#13;
            'shift': ['\u00c1 \u00c9 \u00cd \u00d3 \u00da \u00d1 \u00c7 \u00dc {empty} {empty} {empty} {empty} {shift}'] \&#13;
        }"&#13;
    };&#13;
&#13;
    presenter.validateType = function AddonParagraph_Keyboard_validateType(rawType) {&#13;
        if (!rawType || rawType.length == 0) {&#13;
            return 'french (special characters)';&#13;
        }&#13;
&#13;
        return rawType.toLowerCase();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonParagraph_Keyboard_setVisibility(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (isVisible) {&#13;
            presenter.$view.find(".paragraph-keyboard-wrapper").show();&#13;
        } else {&#13;
            presenter.$view.find(".paragraph-keyboard-wrapper").hide();&#13;
        }&#13;
&#13;
        presenter.isVisibleValue = isVisible;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonParagraph_Keyboard_createPreview(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
        presenter.setVisibility(true);&#13;
        var clickhandler = $("&lt;div&gt;&lt;/div&gt;").css({"background":"transparent", 'width': '100%', 'height': '100%', 'position':'absolute', 'top':0, 'left':0});&#13;
        presenter.$view.append(clickhandler);&#13;
    };&#13;
&#13;
    presenter.setEventBus = function (wrappedEventBus) {&#13;
        eventBus = wrappedEventBus;&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
        eventBus.addEventListener('GradualShowAnswers', this);&#13;
        eventBus.addEventListener('GradualHideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        switch (eventName) {&#13;
            case "GradualShowAnswers":&#13;
                presenter.gradualShowAnswers(eventData);&#13;
                break;&#13;
&#13;
            case "ShowAnswers":&#13;
                presenter.showAnswers();&#13;
                break;&#13;
&#13;
            case "HideAnswers":&#13;
            case "GradualHideAnswers":&#13;
                presenter.hideAnswers();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        return 1;&#13;
    }&#13;
&#13;
    presenter.enableEdit = function () {&#13;
        const paragraphKeyboard = presenter.$view.find(".paragraph-keyboard-wrapper");&#13;
&#13;
        if(paragraphKeyboard.hasClass('disabled')) {&#13;
            paragraphKeyboard.removeClass('disabled');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.disableEdit = function () {&#13;
        const paragraphKeyboard = presenter.$view.find(".paragraph-keyboard-wrapper");&#13;
&#13;
        if(!paragraphKeyboard.hasClass('disabled')) {&#13;
            paragraphKeyboard.addClass('disabled');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.isShowAnswersActive) return;&#13;
&#13;
        const elements = presenter.getParagraphs();&#13;
&#13;
        presenter.disableEdit();&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        for (let [key, value] of Object.entries(elements)) {&#13;
            if (+key &gt; -1) {&#13;
                presenter.cachedAnswer.push(value.innerHTML);&#13;
                if (+key === 0) {&#13;
                    value.innerHTML = presenter.configuration.modelAnswer;&#13;
                } else {&#13;
                    value.innerHTML = '';&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        const elements = presenter.getParagraphs();&#13;
&#13;
        presenter.enableEdit();&#13;
        presenter.isShowAnswersActive = false;&#13;
&#13;
        if (presenter.cachedAnswer.length) {&#13;
            for (let [key, value] of Object.entries(elements)) {&#13;
                if (+key &gt; -1) {&#13;
                    value.innerHTML = presenter.cachedAnswer[+key];&#13;
                }&#13;
            }&#13;
            presenter.cachedAnswer = [];&#13;
        }&#13;
    }&#13;
&#13;
    presenter.gradualShowAnswers = function (data) {&#13;
        presenter.disableEdit();&#13;
        if (data.moduleID !== presenter.configuration.ID) return;&#13;
        presenter.showAnswers();&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getParagraphs = function () {&#13;
        const paragraph = presenter.$view.find(".paragraph-wrapper"),&#13;
            iframe = paragraph.find("iframe"),&#13;
            body = $(iframe).contents().find("#tinymce");&#13;
&#13;
        return body.find("p");&#13;
    }&#13;
&#13;
    presenter.run = function AddonParagraph_Keyboard_run(view, model) {&#13;
        presenter.initializeEditor(view, model, false);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.isLocked = false;&#13;
    };&#13;
&#13;
    presenter.validateToolbar = function AddonParagraph_validateToolbar(controls, width) {&#13;
        if (!controls) {&#13;
            controls = presenter.DEFAULTS.TOOLBAR;&#13;
        }&#13;
&#13;
        controls = controls.split(" ");&#13;
        if (controls.indexOf("|") != -1) {&#13;
            return presenter.parseToolbarWithGroups(controls, width);&#13;
        } else {&#13;
            return presenter.parseToolbarWithoutGroups(controls, width);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithGroups = function (controls, toolbarWidth) {&#13;
        var controlGroups = controls.join(" ").split("|");&#13;
        return controlGroups.filter(function (group) {&#13;
            return group.trim().length &gt; 0;&#13;
        }).map(function (group) {&#13;
            return presenter.parseToolbarWithoutGroups(group.trim().split(" "), toolbarWidth);&#13;
        }).join(" | ");&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithoutGroups = function (controls, toolbarWidth) {&#13;
        var filteredControls = controls.filter(function(param){&#13;
            return presenter.ALLOWED_TOOLBAR_BUTTONS.indexOf(param) != -1;&#13;
        });&#13;
&#13;
        var result = "";&#13;
        var bufor = 0;&#13;
        var widthToAdd = 0;&#13;
        for(var i = 0; i &lt; filteredControls.length; i++) {&#13;
            if (filteredControls[i] !== presenter.DEFAULTS.STYLE_SELECT_NAME) {&#13;
                widthToAdd = presenter.DEFAULTS.BUTTON_WIDTH;&#13;
            } else {&#13;
                widthToAdd = presenter.DEFAULTS.FORMAT_WIDTH;&#13;
            }&#13;
&#13;
            if (bufor + widthToAdd &lt; toolbarWidth) {&#13;
                bufor += widthToAdd;&#13;
                result += filteredControls[i].trim() + " ";&#13;
            } else {&#13;
                bufor = widthToAdd;&#13;
                result += "| " + filteredControls[i].trim() + " ";&#13;
            }&#13;
        }&#13;
&#13;
        return result.trim();&#13;
    };&#13;
&#13;
    function pasteHtmlAtCaret(html, wnd, ownerDocument) {&#13;
        var sel, range;&#13;
        if (wnd.getSelection) {&#13;
            // IE9 and non-IE&#13;
            sel = wnd.getSelection();&#13;
            if (sel.getRangeAt &amp;&amp; sel.rangeCount) {&#13;
                range = sel.getRangeAt(0);&#13;
                range.deleteContents();&#13;
&#13;
                // Range.createContextualFragment() would be useful here but is&#13;
                // only relatively recently standardized and is not supported in&#13;
                // some browsers (IE9, for one)&#13;
                var el = document.createElement("div");&#13;
                el.innerHTML = html;&#13;
                var frag = document.createDocumentFragment(), node, lastNode;&#13;
&#13;
                // fix for IE&#13;
                if (ownerDocument) {&#13;
                    frag = ownerDocument.createDocumentFragment()&#13;
                }&#13;
&#13;
                while ( (node = el.firstChild) ) {&#13;
                    lastNode = frag.appendChild(node);&#13;
                }&#13;
                range.insertNode(frag);&#13;
&#13;
                // Preserve the selection&#13;
                if (lastNode) {&#13;
                    range = range.cloneRange();&#13;
                    range.setStartAfter(lastNode);&#13;
                    range.collapse(true);&#13;
                    sel.removeAllRanges();&#13;
                    sel.addRange(range);&#13;
                }&#13;
            }&#13;
        } else if (document.selection &amp;&amp; document.selection.type != "Control") {&#13;
            // IE &lt; 9&#13;
            document.selection.createRange().pasteHTML(html);&#13;
        }&#13;
    }&#13;
&#13;
     function transposeLayout(layout){&#13;
        var newLayout = {};&#13;
        $.each(layout, function(name,keyset){&#13;
            var ar = [];&#13;
            for (var i=0; i &lt; keyset.length; i++) {&#13;
                var row = keyset[i].split(' ');&#13;
                for (var j=0; j &lt; row.length; j++) {&#13;
                    if (!ar[j]) ar[j] = [];&#13;
                    ar[j][i] = row[j];&#13;
                }&#13;
            }&#13;
            for (var k=0; k &lt; ar.length; k++) {&#13;
                ar[k] = ar[k].join(' ');&#13;
            }&#13;
            newLayout[name] = ar;&#13;
        });&#13;
        return newLayout;&#13;
    }&#13;
&#13;
    /**&#13;
     * Parses model and set settings to default values if either of them is empty&#13;
     *&#13;
     * @param model&#13;
     * @returns {{fontFamily: *, fontSize: *}}&#13;
     */&#13;
    presenter.parseModel = function AddonParagraph_Keyboard_parseModel(model) {&#13;
        var fontFamily = model['Default font family'],&#13;
            fontSize = model['Default font size'],&#13;
            isToolbarHidden = ModelValidationUtils.validateBoolean(model['Hide toolbar']),&#13;
            isPlaceholderEditable = ModelValidationUtils.validateBoolean(model['Editable placeholder']),&#13;
            toolbar = presenter.validateToolbar(model['Custom toolbar'], model["Width"]),&#13;
            height = model.Height,&#13;
            hasDefaultFontFamily = false,&#13;
            hasDefaultFontSize = false,&#13;
            keyboardPosition = model['keyboardPosition'] ? model['keyboardPosition'].toLowerCase() : 'bottom',&#13;
            layoutType = presenter.validateType(model['layoutType']),&#13;
            keyboardLayout = model['keyboardLayout'],&#13;
            title = model["Title"],&#13;
            manualGrading = ModelValidationUtils.validateBoolean(model["Manual grading"]),&#13;
            weight = model['Weight'],&#13;
            modelAnswer = model['Show Answers'];&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontFamily)) {&#13;
            fontFamily = presenter.DEFAULTS.FONT_FAMILY;&#13;
            hasDefaultFontFamily = true;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontSize)) {&#13;
            fontSize = presenter.DEFAULTS.FONT_SIZE;&#13;
            hasDefaultFontSize = true;&#13;
        }&#13;
&#13;
        if (presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType] != undefined) {&#13;
            keyboardLayout = presenter.LAYOUT_TO_LANGUAGE_MAPPING[layoutType];&#13;
        }&#13;
&#13;
        height -= !isToolbarHidden ? 37 : 2;&#13;
&#13;
        if (keyboardLayout.length &gt; 0) {&#13;
            try {&#13;
                eval('keyboardLayout = ' + keyboardLayout);&#13;
            } catch(e) {&#13;
                presenter.ERROR_CODES['evaluationError'] = 'Custom keyboard layout parsing error: ' + e.message;&#13;
                return {error: 'evaluationError'};&#13;
            }&#13;
        }&#13;
&#13;
        if (typeof keyboardLayout['default'] !== 'object' || keyboardLayout['default'].length &lt; 1) {&#13;
            return {error: 'defaultLayoutError'};&#13;
        }&#13;
&#13;
        if (!ModelValidationUtils.isStringEmpty(weight) &amp;&amp; !ModelValidationUtils.validateIntegerInRange(weight, 100, 0).isValid ) {&#13;
            return {error: 'weightError'}&#13;
        }&#13;
&#13;
        var supportedPositions = ['top', 'bottom', 'custom', 'left', 'right'];&#13;
&#13;
        if (keyboardPosition == 'left' || keyboardPosition == 'right') {&#13;
            keyboardLayout = transposeLayout(keyboardLayout);&#13;
        } else if (supportedPositions.indexOf(keyboardPosition) == -1) {&#13;
            keyboardPosition = 'bottom';&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model["ID"],&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isValid: true,&#13;
&#13;
            fontFamily: fontFamily,&#13;
            fontSize: fontSize,&#13;
            isToolbarHidden: isToolbarHidden,&#13;
            toolbar: toolbar,&#13;
            textAreaHeight: height,&#13;
            paragraphHeight: model.Height,&#13;
            width: model['Width'],&#13;
            hasDefaultFontFamily: hasDefaultFontFamily,&#13;
            hasDefaultFontSize: hasDefaultFontSize,&#13;
            content_css: model['Custom CSS'],&#13;
            isPlaceholderSet: !ModelValidationUtils.isStringEmpty(model["Placeholder Text"]),&#13;
            placeholderText: model["Placeholder Text"],&#13;
            isPlaceholderEditable: isPlaceholderEditable,&#13;
            pluginName: presenter.makePluginName(model["ID"]),&#13;
            keyboardLayout: keyboardLayout,&#13;
            keyboardPosition: keyboardPosition,&#13;
            error: false,&#13;
            manualGrading: manualGrading,&#13;
            title: title,&#13;
            weight: weight,&#13;
            modelAnswer: modelAnswer&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setWrapperID = function AddonParagraph_Keyboard_setWrapperID() {&#13;
        var $paragraphWrapper = presenter.$view.find('.paragraph-wrapper');&#13;
        $paragraphWrapper.attr('id', presenter.configuration.ID + '-wrapper');&#13;
    };&#13;
&#13;
    presenter.upgradeAttribute = function (model, attrName, defaultValue) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model[attrName] == undefined) {&#13;
            upgradedModel[attrName] = defaultValue;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.getPlugins = function AddonParagraph_Keyboard_getPlugins() {&#13;
        var plugins = [];&#13;
        if (presenter.configuration.toolbar.indexOf('forecolor') &gt; -1 ||&#13;
            presenter.configuration.toolbar.indexOf('backcolor') &gt; -1 ) {&#13;
            plugins.push("textcolor");&#13;
        }&#13;
&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            plugins.push(presenter.configuration.pluginName);&#13;
        }&#13;
&#13;
        return plugins.join(" ");&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeTitle(model);&#13;
        upgradedModel = presenter.upgradeManualGrading(upgradedModel);&#13;
        upgradedModel = presenter.upgradeWeight(upgradedModel);&#13;
        upgradedModel = presenter.upgradeModelAnswer(upgradedModel);&#13;
        upgradedModel = presenter.upgradePlaceholderText(upgradedModel);&#13;
        upgradedModel = presenter.upgradeEditablePlaceholder(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeManualGrading = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Manual grading", false);&#13;
    };&#13;
&#13;
    presenter.upgradeTitle = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Title", "");&#13;
    };&#13;
&#13;
    presenter.upgradePlaceholderText = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Placeholder Text", "");&#13;
    };&#13;
&#13;
    presenter.upgradeEditablePlaceholder = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Editable placeholder", "");&#13;
    };&#13;
&#13;
    presenter.upgradeWeight = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Weight", "");&#13;
    };&#13;
&#13;
    presenter.upgradeModelAnswer = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Show Answers", "");&#13;
    };&#13;
&#13;
    presenter.initializeEditor = function AddonParagraph_Keyboard_initializeEditor(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.parseModel(upgradedModel);&#13;
&#13;
        if (presenter.configuration.error) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.error);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$view.on('click', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        });&#13;
&#13;
        presenter.setWrapperID();&#13;
&#13;
        presenter.placeholder = new presenter.placeholderElement();&#13;
        presenter.configuration.plugins = presenter.getPlugins();&#13;
        presenter.addPlugins();&#13;
&#13;
        presenter.buildKeyboard();&#13;
&#13;
        presenter.calculateAndSetSizeForAddon();&#13;
&#13;
        tinymce.init(presenter.getTinyMceInitConfiguration()).then(function (editors) {&#13;
            presenter.editor = editors[0];&#13;
            presenter.onInit();&#13;
            presenter.isEditorLoaded = true;&#13;
            presenter.setStyles();&#13;
        });&#13;
    };&#13;
&#13;
    /**&#13;
     * Calculate and set in configuration new size for addon.&#13;
     * For now the height is set to addon height minus 37 which is TinyMCE toolbar height.&#13;
     * It was not possible to get that value in easy and dynamic way, and it didn't make sense&#13;
     * for prototype purpose. Also, the set of controls is static, and it could be moved to&#13;
     * configuration.&#13;
     */&#13;
    presenter.calculateAndSetSizeForAddon = function AddonParagraph_Keyboard_calculateAndSetAddonSize() {&#13;
        var $keyboard = presenter.$view.find('.paragraph-keyboard'),&#13;
            $paragraph = presenter.$view.find('.paragraph-wrapper'),&#13;
            keyboardPosition = presenter.configuration.keyboardPosition;&#13;
&#13;
        if (keyboardPosition != 'custom') {&#13;
&#13;
            var width, height, offset = {};&#13;
&#13;
            width = parseInt($keyboard.width(), 10);&#13;
            height = parseInt($keyboard.height(), 10);&#13;
            offset.bottom = parseInt($keyboard.css('padding-bottom'), 10);&#13;
            offset.bottom += parseInt($keyboard.css('border-bottom-width'), 10);&#13;
            offset.top = parseInt($keyboard.css('padding-top'), 10);&#13;
            offset.top += parseInt($keyboard.css('border-top-width'), 10);&#13;
&#13;
            offset.left = parseInt($keyboard.css('padding-left'), 10);&#13;
            offset.left += parseInt($keyboard.css('border-left-width'), 10);&#13;
            offset.right = parseInt($keyboard.css('padding-right'), 10);&#13;
            offset.right += parseInt($keyboard.css('border-right-width'), 10);&#13;
&#13;
            switch (keyboardPosition) {&#13;
                case 'top':&#13;
                    presenter.configuration.paragraphHeight -= height + 2 * offset.bottom + offset.top + 1;&#13;
                    $paragraph.css('top', (height + offset.top + offset.bottom) + 'px');&#13;
                    $paragraph.width('100%');&#13;
                    break;&#13;
                case 'bottom':&#13;
                    presenter.configuration.paragraphHeight -= height + offset.bottom + 2 * offset.top - 1;&#13;
                    offset.additional = presenter.configuration.isToolbarHidden ? 1 : 0;&#13;
                    $keyboard.css('top', (presenter.configuration.paragraphHeight + offset.top - offset.additional) + 'px');&#13;
                    $paragraph.width('100%');&#13;
                    break;&#13;
                case 'left':&#13;
                    presenter.configuration.width -= width + offset.right + 1;&#13;
                    $paragraph.width(presenter.configuration.width + 'px');&#13;
                    $paragraph.css('left', (width + offset.left + offset.right) + 'px');&#13;
                    $paragraph.height('100%');&#13;
                    break;&#13;
                case 'right':&#13;
                    presenter.configuration.width -= width + offset.left + offset.right + 2;&#13;
                    $paragraph.width(presenter.configuration.width + 'px');&#13;
                    $keyboard.css('left', (presenter.configuration.width + offset.left - 1) + 'px');&#13;
                    $paragraph.height('100%');&#13;
                    break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTinyMceInitConfiguration = function AddonParagraph_Keyboard_getTinyMceConfiguration() {&#13;
        return {&#13;
            plugins: presenter.configuration.plugins,&#13;
            selector : presenter.getTinyMCESelector(),&#13;
            width: presenter.configuration.width,&#13;
            height: presenter.configuration.paragraphHeight,&#13;
            statusbar: false,&#13;
            menubar: false,&#13;
            toolbar: presenter.configuration.toolbar,&#13;
            content_css: presenter.configuration.content_css,&#13;
            setup: presenter.setup,&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setup = function AddonParagraph_Keyboard_setup(editor) {&#13;
        if (presenter.editor == null) {&#13;
            presenter.editor = editor;&#13;
        }&#13;
&#13;
        editor.on("NodeChange", presenter.setStyles);&#13;
        editor.on("keyup", presenter.onTinymceChange);&#13;
    };&#13;
&#13;
    presenter.sendOnBlurEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': '',&#13;
            'value': 'blur',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    // On the mCourser, each addon is called twice on the first page.&#13;
    // Removing the addon before loading the library causes a problem with second loading.&#13;
    // You must separate each method of destroy, or improve the mechanism of loading lessons.&#13;
    presenter.destroy = function AddonParagraph_Keyboard_destroy(event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        try {&#13;
            presenter.$view.off();&#13;
        } catch (e) {&#13;
        }&#13;
        try {&#13;
            presenter.jQueryTinyMCEHTML.off();&#13;
        } catch (e) {&#13;
        }&#13;
        try {&#13;
            presenter.$tinyMCEToolbar.off();&#13;
        } catch (e) {&#13;
        }&#13;
        try {&#13;
            presenter.$TinyMCEBody.off();&#13;
        } catch (e) {&#13;
        }&#13;
        try {&#13;
            presenter.editor.destroy();&#13;
        } catch (e) {&#13;
        }&#13;
        try {&#13;
            tinymce.remove();&#13;
        } catch (e) {&#13;
        }&#13;
&#13;
        tinymce.AddOnManager.PluginManager.items.length = 0;&#13;
&#13;
        presenter.placeholder = null;&#13;
        presenter.$tinyMCEToolbar = null;&#13;
        presenter.jQueryTinyMCEHTML = null;&#13;
        presenter.$TinyMCEBody = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
        presenter.editor = null;&#13;
        presenter.tinyMceContainer = null;&#13;
        presenter.window = null;&#13;
        presenter.isVisibleValue = null;&#13;
        presenter.ERROR_CODES = null;&#13;
        presenter.DEFAULTS = null;&#13;
        presenter.LAYOUT_TO_LANGUAGE_MAPPING = null;&#13;
&#13;
        presenter.setWrapperID = null;&#13;
        presenter.findIframeAndSetStyles = null;&#13;
        presenter.getSpecifyToolbar = null;&#13;
        presenter.addStylesToButton = null;&#13;
        presenter.getButton = null;&#13;
        presenter.onBlur = null;&#13;
        presenter.onFocus = null;&#13;
        presenter.onInit = null;&#13;
        presenter.setIframeHeight = null;&#13;
        presenter.destroy = null;&#13;
        presenter.setStyles = null;&#13;
        transposeLayout = null;&#13;
        pasteHtmlAtCaret = null;&#13;
&#13;
        presenter.switchKeyboard = null;&#13;
        presenter.clickKeyboard = null;&#13;
        presenter.onMouseDownKeyboard = null;&#13;
        presenter.buildKeyboard = null;&#13;
        presenter.eKeyboardButtons.forEach(function ($button) {&#13;
            $button.off();&#13;
        });&#13;
        presenter.eKeyboardButtons.length = 0;&#13;
        presenter.eKeyboardButtons = null;&#13;
    };&#13;
&#13;
    presenter.getTinyMCESelector = function AddonParagraph_Keyboard_getTinyMCESelector() {&#13;
        return '#' + presenter.configuration.ID + '-wrapper .paragraph_field';&#13;
    };&#13;
&#13;
    presenter.setStyles = function AddonParagraph_Keyboard_setStyles() {&#13;
        if (presenter.editor == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var hasDefaultFontFamily = presenter.configuration.hasDefaultFontFamily,&#13;
            hasDefaultFontSize = presenter.configuration.hasDefaultFontSize,&#13;
            hasContentCss = !ModelValidationUtils.isStringEmpty(presenter.configuration.content_css);&#13;
&#13;
        if (!hasDefaultFontFamily || !hasDefaultFontSize || !hasContentCss) {&#13;
            var elements = [presenter.editor.dom.$('p'), presenter.editor.dom.$('ol'), presenter.editor.dom.$('ul'), presenter.editor.dom.$("placeholder")];&#13;
&#13;
            for (var i = 0; i &lt; elements.length; i++) {&#13;
                if (!hasDefaultFontFamily || !hasContentCss) {&#13;
                    elements[i].css('font-family', presenter.configuration.fontFamily);&#13;
                }&#13;
&#13;
                if (!hasDefaultFontSize || !hasContentCss) {&#13;
                    elements[i].css('font-size', presenter.configuration.fontSize);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setIframeHeight = function AddonParagraph_Keyboard_setIframeHeight() {&#13;
        var $editor = presenter.$view.find('#' + presenter.editor.id + '_ifr'),&#13;
            editorHeight = presenter.configuration.paragraphHeight;&#13;
&#13;
        if (!presenter.configuration.isToolbarHidden) {&#13;
            editorHeight -=  presenter.$view.find('.mce-toolbar').height();&#13;
        }&#13;
&#13;
        $editor.height(editorHeight);&#13;
    };&#13;
&#13;
&#13;
    presenter.caret = function AddonParagraph_Keyboard_caret() {&#13;
        var caretData;&#13;
        if (arguments.length) {&#13;
            caretData = arguments[0];&#13;
            presenter.window.getSelection().collapse(caretData.start.node, caretData.start.offset);&#13;
            if (caretData.range) {&#13;
                caretData.range.deleteContents();&#13;
            }&#13;
        } else {&#13;
            var selection = presenter.window.getSelection(),&#13;
                start = {&#13;
                    offset: selection.anchorOffset,&#13;
                    node: selection.anchorNode&#13;
                },&#13;
                range = false;&#13;
&#13;
            if (selection.rangeCount &gt; 0) {&#13;
                range = selection.getRangeAt(0);&#13;
            }&#13;
&#13;
            caretData = {&#13;
                start : start,&#13;
                range: range&#13;
            };&#13;
            return caretData;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clickKeyboard = function AddonParagraph_Keyboard_clickKeyboard(e){&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        var $this = $(this),&#13;
            text = $this.text();&#13;
        const wasEditablePlaceholderSet = isEditablePlaceholderSet();&#13;
&#13;
        presenter.window.focus();&#13;
        $(presenter.editor.contentDocument).find('body').focus();&#13;
&#13;
        if (wasEditablePlaceholderSet) {&#13;
            setCaretOnEndOfEditorLastElement();&#13;
        }&#13;
&#13;
        if (presenter.lastCaret) {&#13;
            // in IE 11 we have to set caret's position manually, because by default it is set at the beginning&#13;
            presenter.caret(presenter.lastCaret);&#13;
            pasteHtmlAtCaret(text, presenter.window, presenter.ownerDocument);&#13;
            presenter.lastCaret = presenter.caret();&#13;
        } else {&#13;
            pasteHtmlAtCaret(text, presenter.window, presenter.ownerDocument);&#13;
        }&#13;
&#13;
        $this.addClass('clicked');&#13;
        window.setTimeout(function(){&#13;
            $this.removeClass('clicked');&#13;
        }, 200);&#13;
    };&#13;
&#13;
    function isEditablePlaceholderSet() {&#13;
        return (presenter.placeholder.isSet&#13;
            &amp;&amp; presenter.configuration.isPlaceholderEditable&#13;
            &amp;&amp; presenter.configuration.isPlaceholderSet&#13;
            &amp;&amp; !!$(presenter.getText()).text()&#13;
        );&#13;
    }&#13;
&#13;
    function setCaretOnEndOfEditorLastElement() {&#13;
        var selection = presenter.window.getSelection();&#13;
        if (selection.getRangeAt &amp;&amp; selection.rangeCount) {&#13;
            var range = selection.getRangeAt(0);&#13;
            range.setStartAfter(range.endContainer);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.switchKeyboard = function AddonParagraph_Keyboard_switchKeyboard(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        presenter.$view.find('.keySetLayer:visible').hide();&#13;
        presenter.currentKeyboard = (presenter.currentKeyboard == 'default' ? 'shift' : 'default');&#13;
        presenter.$view.find('.keyset-' + presenter.currentKeyboard).show();&#13;
        presenter.$view.find('.paragraph-keyboard-shift:visible').addClass('clicked');&#13;
&#13;
        window.setTimeout(function(){&#13;
            presenter.$view.find('.paragraph-keyboard-shift.clicked').removeClass('clicked');&#13;
        }, 200);&#13;
&#13;
        presenter.window.focus();&#13;
        $(presenter.editor.contentDocument).find('body').focus();&#13;
&#13;
        if (presenter.lastCaret) {&#13;
            presenter.caret(presenter.lastCaret);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.buildKeyboard = function AddonParagraph_Keyboard_buildKeyboard(){&#13;
        var keyboard = presenter.$view.find('.paragraph-keyboard'),&#13;
            row, currentSet, keys, key, keyRow, $button, t, keySetLayer;&#13;
        $.each(presenter.configuration.keyboardLayout, function(set, keySet) {&#13;
            keySetLayer = $('&lt;div&gt;').addClass('keySetLayer');&#13;
            keySetLayer.addClass('keyset-' + set);&#13;
&#13;
            for ( row = 0; row &lt; keySet.length; row++ ){&#13;
                currentSet = $.trim(keySet[row]).replace(/\{(\.?)[\s+]?:[\s+]?(\.?)\}/g,'{$1:$2}');&#13;
                keys = currentSet.split(/\s+/);&#13;
&#13;
                if (!keys) {&#13;
                    continue;&#13;
                }&#13;
&#13;
                keyRow = $('&lt;div&gt;').addClass('keyRow');&#13;
                for ( key = 0; key &lt; keys.length; key++ ) {&#13;
                    // ignore empty keys&#13;
                    if (keys[key].length === 0) {&#13;
                        continue;&#13;
                    }&#13;
&#13;
                    t = keys[key];&#13;
&#13;
                    if (t == '{empty}') {&#13;
                        keyRow.append($('&lt;div&gt;').addClass('paragraph-keyboard-empty').html('&amp;nbsp;'));&#13;
                    } else if (t == '{shift}') {&#13;
                        $button = $('&lt;div&gt;').addClass('paragraph-keyboard-shift').html('&amp;nbsp;');&#13;
                        $button.on('click', presenter.switchKeyboard);&#13;
                        keyRow.append($button);&#13;
                    } else {&#13;
                        $button = $('&lt;div&gt;').addClass('paragraph-keyboard-letter').text(t);&#13;
                        $button.on('click', presenter.clickKeyboard);&#13;
                        $button.on('mousedown', presenter.onMouseDownKeyboard);&#13;
                        keyRow.append($button);&#13;
                    }&#13;
&#13;
                    presenter.eKeyboardButtons.push($button);&#13;
&#13;
                }&#13;
                keySetLayer.append(keyRow);&#13;
                keySetLayer.append($('&lt;div&gt;').addClass('keyboard-clear'));&#13;
            }&#13;
            if (set != 'default') {&#13;
                keySetLayer.hide();&#13;
            } else {&#13;
                presenter.currentKeyboard = 'default';&#13;
            }&#13;
            keyboard.append(keySetLayer);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onMouseDownKeyboard = function () {&#13;
        presenter.placeholder.shouldBeSet = false;&#13;
    };&#13;
&#13;
    presenter.onInit = function AddonParagraph_Keyboard_onInit() {&#13;
        presenter.window = presenter.editor.contentWindow;&#13;
&#13;
        if (presenter.configuration.isToolbarHidden) {&#13;
            presenter.$view.find('.mce-container.mce-panel.mce-first').remove();&#13;
            presenter.$view.find('.mce-edit-area').css('border-top-width', '0');&#13;
        }&#13;
&#13;
        presenter.jQueryTinyMCEHTML = $(presenter.editor.dom.select('html'));&#13;
        presenter.jQueryTinyMCEHTML.click(function () {&#13;
            presenter.window.focus();&#13;
            $(presenter.editor.contentDocument).find('body').focus();&#13;
        });&#13;
&#13;
        var stylesheetFullPath = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "addons/resources/style.css");&#13;
        presenter.editor.dom.loadCSS(stylesheetFullPath);&#13;
&#13;
        presenter.setStyles();&#13;
&#13;
        if (presenter.configuration.state !== undefined) {&#13;
        	presenter.editor.setContent(presenter.configuration.state, {format : 'raw'});&#13;
        }&#13;
&#13;
        setTimeout(function () {&#13;
            if (presenter.setIframeHeight)&#13;
                presenter.setIframeHeight();&#13;
        }, 0);&#13;
&#13;
        presenter.$tinyMCEToolbar = presenter.$view.find('.mce-toolbar');&#13;
        presenter.lastHeight = presenter.$tinyMCEToolbar.css('height');&#13;
        presenter.$tinyMCEToolbar.on('resize', function () {&#13;
            presenter.setIframeHeight();&#13;
        });&#13;
&#13;
        checkForChanges();&#13;
&#13;
        presenter.$view.find('.mce-container.mce-panel.mce-tinymce').css('border',0);&#13;
&#13;
        var el = presenter.editor.dom.select('body')[0];&#13;
        presenter.$TinyMCEBody = $(el);&#13;
        if (typeof el.ownerDocument.parentWindow !== 'undefined') {&#13;
            presenter.window = el.ownerDocument.parentWindow;&#13;
            presenter.ownerDocument = el.ownerDocument;&#13;
            presenter.lastCaret = presenter.caret();&#13;
            presenter.$TinyMCEBody.on('mouseup keyup', function(e){&#13;
                presenter.lastCaret = presenter.caret();&#13;
            });&#13;
        } else {&#13;
            presenter.ownerDocument = false;&#13;
        }&#13;
&#13;
        presenter.editor.on('blur', function () {&#13;
            presenter.sendOnBlurEvent();&#13;
        });&#13;
&#13;
        if (presenter.configuration.isPlaceholderEditable &amp;&amp; presenter.state == null) {&#13;
            presenter.setText(presenter.configuration.placeholderText);&#13;
        }&#13;
    };&#13;
&#13;
    function checkForChanges(){&#13;
        if (presenter.$tinyMCEToolbar &amp;&amp; presenter.$tinyMCEToolbar.css('height') != presenter.lastHeight){&#13;
            presenter.lastHeight = presenter.$tinyMCEToolbar.css('height');&#13;
            presenter.setIframeHeight();&#13;
            return;&#13;
        }&#13;
&#13;
        checkHeightCounter += 1;&#13;
        if(checkHeightCounter == 3) return;&#13;
&#13;
        setTimeout(checkForChanges, 500);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function AddonParagraph_Keyboard_playerController(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.getState = function AddonParagraph_Keyboard_getState() {&#13;
        var tinymceState = '';&#13;
        if (presenter.editor != null &amp;&amp; presenter.editor.hasOwnProperty("id")) {&#13;
            try {&#13;
                if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
                tinymceState = presenter.editor.getContent({format : 'raw'});&#13;
            } catch (err) {&#13;
                return  presenter.state;&#13;
            }&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'tinymceState' : tinymceState,&#13;
            'isVisible' : presenter.isVisibleValue,&#13;
            'isLocked' : presenter.isLocked&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonParagraph_Keyboard_setState(state) {&#13;
        var parsedState = JSON.parse(state),&#13;
            tinymceState = parsedState.tinymceState;&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        if (tinymceState !== undefined&#13;
            &amp;&amp; tinymceState !== ""&#13;
            &amp;&amp; !isPlaceholderClassInHTML(tinymceState)) {&#13;
            if (presenter.editor != null &amp;&amp; presenter.editor.initialized) {&#13;
                presenter.editor.setContent(tinymceState, {format: 'raw'});&#13;
                presenter.state = state;&#13;
            } else {&#13;
                presenter.configuration.state = tinymceState;&#13;
                presenter.state = state;&#13;
            }&#13;
        }&#13;
&#13;
        if (parsedState.isLocked) {&#13;
            presenter.lock();&#13;
        } else {&#13;
            presenter.unlock();&#13;
        }&#13;
    };&#13;
&#13;
    function isPlaceholderClassInHTML (html) {&#13;
        return html.indexOf("class=\"placeholder\"") !== -1;&#13;
    }&#13;
&#13;
    presenter.executeCommand = function AddonParagraph_Keyboard_executeCommand(name, params) {&#13;
        if (!presenter.configuration.isValid) { return; }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isVisible': presenter.isVisible,&#13;
            'lock': presenter.lock,&#13;
            'unlock': presenter.unlock,&#13;
            'getText': presenter.getText,&#13;
            'setText': presenter.setText,&#13;
            'isAttempted': presenter.isAttempted&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function AddonParagraph_Keyboard_reset() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.placeholder.removePlaceholder();&#13;
        if (presenter.configuration.isPlaceholderEditable) {&#13;
            presenter.setText(presenter.configuration.placeholderText);&#13;
        } else {&#13;
            presenter.editor.setContent('');&#13;
            presenter.setStyles();&#13;
        }&#13;
        presenter.placeholder.addPlaceholder();&#13;
        if (presenter.isLocked) {&#13;
            presenter.unlock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function AddonParagraph_Keyboard_show() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonParagraph_Keyboard_hide() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.isVisible = function AddonParagraph_Keyboard_isVisible() {&#13;
        return presenter.isVisibleValue;&#13;
    };&#13;
&#13;
    presenter.lock = function AddonParagraph_Keyboard_lock() {&#13;
        if (!presenter.isLocked) {&#13;
            var mask = $('&lt;div&gt;').addClass('paragraph-lock');&#13;
            presenter.$view.find('.paragraph-keyboard').hide();&#13;
            presenter.$view.find('#' + presenter.configuration.ID + '-wrapper').append(mask);&#13;
            presenter.isLocked = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.unlock = function AddonParagraph_Keyboard_unlock() {&#13;
        if (presenter.isLocked) {&#13;
            presenter.$view.find('.paragraph-keyboard').show();&#13;
            presenter.$view.find('.paragraph-lock').remove();&#13;
            presenter.isLocked = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getText = function AddonParagraph_Keyboard_getText() {&#13;
        return presenter.editor.getContent({format : 'raw'});&#13;
    };&#13;
&#13;
    presenter.setText = function AddonParagraph_Keyboard_setText(text) {&#13;
        presenter.editor.setContent(text);&#13;
    }&#13;
&#13;
    presenter.isAttempted = function AddonParagraph_Keyboard_isAttempted() {&#13;
        if (!presenter.isEditorLoaded) {&#13;
            if (presenter.state) {&#13;
                var parser = new DOMParser();&#13;
                var stateNode = parser.parseFromString(JSON.parse(presenter.state).tinymceState, "text/html");&#13;
                return $(stateNode).text() != '';&#13;
            } else {&#13;
                return false;&#13;
            }&#13;
        }&#13;
        const editorContent = presenter.getText();&#13;
        if (presenter.configuration.isPlaceholderSet&#13;
            &amp;&amp; !presenter.configuration.isPlaceholderEditable) {&#13;
            return !isPlaceholderClassInHTML(editorContent);&#13;
        }&#13;
        const textToCompare = presenter.configuration.isPlaceholderSet ? presenter.configuration.placeholderText : "";&#13;
        return $(editorContent).text() != textToCompare;&#13;
    }&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        var model = presenter.upgradeModel(model);&#13;
        const configuration = presenter.parseModel(model);&#13;
        const modelAnswer = configuration.modelAnswer;&#13;
&#13;
        var $wrapper = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $wrapper.addClass('printable_addon_Paragraph');&#13;
        $wrapper.css("left", "0px");&#13;
        $wrapper.css("right", "0px");&#13;
        $wrapper.css("height", configuration.paragraphHeight + "px");&#13;
        $wrapper.css("padding", "10px 10px 10px 0px");&#13;
        var $paragraph = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $paragraph.css("left", "0px");&#13;
        $paragraph.css("right", "0px");&#13;
        $paragraph.css("height", "100%");&#13;
        $paragraph.css("border", "1px solid");&#13;
&#13;
        let innerText = "";&#13;
        if (showAnswers) {&#13;
            innerText = modelAnswer;&#13;
        }&#13;
        if (presenter.printableState) {&#13;
            innerText = presenter.printableState;&#13;
        }&#13;
        $paragraph.html(innerText);&#13;
&#13;
        $wrapper.append($paragraph);&#13;
        return $wrapper[0].outerHTML;&#13;
    };&#13;
&#13;
    presenter.getOpenEndedContent = function () {&#13;
        return presenter.getText();&#13;
    };&#13;
&#13;
    presenter.addPlugins = function AddonParagraph_Keyboard_addPlugins() {&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.addPlaceholderPlugin();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.makePluginName = function AddonParagraph_Keyboard_makePluginName(addonID) {&#13;
        var name = 'placeholder';&#13;
        addonID.replace(/[a-z0-9]+/gi, function(x) {&#13;
            name += "_" + x;&#13;
        });&#13;
&#13;
        return name;&#13;
    };&#13;
&#13;
    presenter.onFocus = function AddonParagraph_Keyboard_onFocus() {&#13;
        if (presenter.placeholder.isSet) {&#13;
            presenter.placeholder.removePlaceholder();&#13;
            presenter.placeholder.shouldBeSet = (presenter.placeholder.getEditorContent() == "");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onBlur = function AddonParagraph_Keyboard_onBlur() {&#13;
        if (presenter.placeholder.shouldBeSet) {&#13;
            presenter.placeholder.addPlaceholder();&#13;
        } else {&#13;
            presenter.placeholder.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addPlaceholderPlugin = function AddonParagraph_Keyboard_addPlaceholderPlugin() {&#13;
        tinymce.PluginManager.add(presenter.configuration.pluginName, function(editor) {&#13;
            editor.on('init', function () {&#13;
                presenter.placeholder.init(editor.id);&#13;
                editor.on('blur', presenter.onBlur);&#13;
                editor.on('focus', presenter.onFocus);&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.placeholderElement = function AddonParagraph_Keyboard_placeholderElement() {&#13;
        this.isSet = true;&#13;
        this.shouldBeSet = false;&#13;
        this.keyboardChange = false;&#13;
        this.placeholderText = presenter.configuration.isPlaceholderEditable ? "" : presenter.configuration.placeholderText;&#13;
        this.contentAreaContainer = null;&#13;
        this.el = null;&#13;
        this.attrs = {style: {position: 'absolute', top:'5px', left:0, color: '#888', padding: '1%', width:'98%', overflow: 'hidden'} };&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.init = function AddonParagraph_Keyboard_placeholderElement_init() {&#13;
        this.contentAreaContainer = presenter.editor.getBody();&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
&#13;
        tinymce.DOM.setStyle(this.contentAreaContainer, 'position', 'relative');&#13;
        tinymce.DOM.addClass(this.el, "placeholder");&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.addPlaceholder = function AddonParagraph_Keyboard_addPlaceholder() {&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
        presenter.editor.dom.addClass(this.el, "placeholder");&#13;
        this.isSet = true;&#13;
        presenter.setStyles();&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.setPlaceholderAfterEditorChange = function AddonParagraph_Keyboard_setPlaceholderAfterEditorChange() {&#13;
        if (this.getEditorContent() == "") {&#13;
            this.shouldBeSet = true;&#13;
        } else {&#13;
            this.shouldBeSet = false;&#13;
            this.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.removePlaceholder = function AddonParagraph_Keyboard_removePlaceholder() {&#13;
        this.isSet = false;&#13;
        presenter.editor.dom.remove(this.el);&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.getEditorContent = function AddonParagraph_Keyboard_getEditorContent() {&#13;
        return presenter.editor.getContent();&#13;
    };&#13;
&#13;
    presenter.onTinymceChange = function AddonParagraph_Keyboard_onTinymceChange(editor, event) {&#13;
        this.keyboardChange = true;&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.placeholder.setPlaceholderAfterEditorChange();&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>