<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Scoreboard" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
      <property displayName="Broadcast" isLocalized="false" name="Broadcast" nameLabel="Scoreboard_broadcast" type="string"/>
      <property displayName="isDraggable" isLocalized="false" name="isDraggable" nameLabel="Scoreboard_is_draggable" type="boolean"/>
      <property displayName="VariableStorageLocation" name="VariableStorageLocation" nameLabel="Scoreboard_location_of_variable_storage_module" type="{header, footer}"/>
      <property displayName="VariableStorageLocationName" isLocalized="false" name="VariableStorageLocationName" nameLabel="Scoreboard_variable_storage_location_name" type="string"/>
      <property displayName="maximumTeamsCount" isLocalized="false" name="maximumTeamsCount" nameLabel="Scoreboard_maximum_teams_count" type="string"/>
      <property displayName="initialTeamsCount" isLocalized="false" name="initialTeamsCount" nameLabel="Scoreboard_initial_teams_count" type="string"/>
      <property isDefault="true" name="defaultTeamsList" nameLabel="Scoreboard_default_teams_list" type="list">
        <property name="teamName" nameLabel="Scoreboard_property_name" type="string"/>
        <property name="teamColor" nameLabel="Scoreboard_property_color" type="string"/>
      </property>
    </model>
<css>.addon_Scoreboard {&#13;
    position: relative;&#13;
    overflow-y: auto;&#13;
    overflow-x: hidden;&#13;
}&#13;
&#13;
.scoreboard-container {&#13;
    display: inline-block;&#13;
    background-color: rgba(255, 255, 255, 1);&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.scoreboard-header {&#13;
    height: 20px;&#13;
    line-height: 20px;&#13;
    position: relative;&#13;
    background-color: rgba(128, 207, 238, 0.973);&#13;
}&#13;
&#13;
.ui-draggable .scoreboard-header {&#13;
    cursor: move;&#13;
}&#13;
&#13;
.scoreboard-header .scoreboard-close {&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.scoreboard-close::before {&#13;
    content: "x";&#13;
}&#13;
&#13;
.scoreboard-footer {&#13;
    height: 20px;&#13;
    width: 100%;&#13;
    color:rgba(0, 0, 0, 0.5);&#13;
    cursor: move;&#13;
    position: relative;&#13;
    overflow: hidden;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.scoreboard-body {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.scoreboard-footer .scoreboard-add-new-team {&#13;
    width: 40%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.scoreboard-add-new-team::before {&#13;
    content: "+";&#13;
}&#13;
&#13;
.scoreboard-footer .scoreboard-reset {&#13;
    width: 40%;&#13;
    right: 5px;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.scoreboard-reset::before {&#13;
    content: "\21B6";&#13;
}&#13;
&#13;
.scoreboard-team {&#13;
    padding: 2px;&#13;
    margin: 3px;&#13;
    width: 100px;&#13;
    height: 100%;&#13;
    display: inline-block;&#13;
    text-align: center;&#13;
    border-radius: 4px;&#13;
    color: rgba(255, 255, 255, 1);&#13;
}&#13;
&#13;
.scoreboard-team-header {&#13;
    height: 15px;&#13;
    line-height: 15px;&#13;
}&#13;
&#13;
.scoreboard-team-header .scoreboard-team-remove {&#13;
    width: 10%;&#13;
    right: 5px;&#13;
    float: right;&#13;
    cursor: pointer;&#13;
    text-align: right;&#13;
}&#13;
&#13;
.scoreboard-team-remove::before {&#13;
    content: "x";&#13;
}&#13;
&#13;
.scoreboard-save-button {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.scoreboard-team-body {&#13;
    height: 70px;&#13;
}&#13;
&#13;
.scoreboard-team-body .scoreboard-team-name-container {&#13;
    vertical-align: top;&#13;
}&#13;
&#13;
.scoreboard-team-body .scoreboard-team-name-container .scoreboard-team-name-input {&#13;
    width: 90px;&#13;
    background: transparent;&#13;
    color: white;&#13;
    border: none;&#13;
}&#13;
&#13;
.scoreboard-team-body .scoreboard-team-points-container {&#13;
    margin-top: 15px;&#13;
}&#13;
&#13;
.scoreboard-team-footer {&#13;
    height: 25px;&#13;
    width: 100%;&#13;
    line-height: 25px;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.scoreboard-team-footer .scoreboard-team-score-decrement {&#13;
    width: 50%;&#13;
    height: 100%;&#13;
    cursor: pointer;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.scoreboard-team-score-decrement::before {&#13;
    content: "-";&#13;
}&#13;
&#13;
.scoreboard-team-footer .scoreboard-team-score-increment {&#13;
    width: 50%;&#13;
    height: 100%;&#13;
    cursor: pointer;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.scoreboard-team-score-increment::before {&#13;
    content: "+";&#13;
}&#13;
</css><view/><preview/><presenter>function AddonScoreboard_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.teamsObjects = [];&#13;
    presenter.scoreboard = null;&#13;
&#13;
    presenter.state = {&#13;
        isVisible: false,&#13;
        teamsObjects: [],&#13;
        savedScoreboard: null,&#13;
    }&#13;
    presenter.playerController = null;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        C01: 'Configuration cannot be empty',&#13;
        I01: 'Initial number of teams is greater than maximum number of teams!',&#13;
        I02: 'Initial number of teams must be positiv integer!',&#13;
        I03: 'Initial team name cannot be empty',&#13;
        I04: 'Team color must be in RGB format (hexadecimal) and start with #',&#13;
        I05: 'Maximum number of teams must be positiv integer!',&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    function deleteCommands() {&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.initView(view, model);&#13;
        &#13;
    };&#13;
&#13;
    presenter.validateMaximumTeamsCount = function (number) {&#13;
        var validatedNumber = ModelValidationUtils.validateInteger(number)&#13;
        if (!validatedNumber.isValid || validatedNumber.value &lt; 1) {&#13;
            return ModelValidationUtils.getErrorObject('I05');&#13;
        }&#13;
&#13;
        return validatedNumber;&#13;
    };&#13;
&#13;
    presenter.validateInitialTeamsCount = function (number, maxTeamsCount) {&#13;
        var validatedNumber = ModelValidationUtils.validateInteger(number)&#13;
        if (!validatedNumber.isValid || validatedNumber.value &lt; 1) {&#13;
            return ModelValidationUtils.getErrorObject('I02');&#13;
        }&#13;
&#13;
        if (validatedNumber.value &gt; maxTeamsCount) {&#13;
            return ModelValidationUtils.getErrorObject('I01');&#13;
        }&#13;
        return validatedNumber;&#13;
    };&#13;
&#13;
    presenter.validateInitialTeams = function (initialTeams, maxTeamsCount) {&#13;
        var validatedInitialTeams = [], i;&#13;
        var regExp = new RegExp("#[0-9a-fA-F]+");&#13;
        &#13;
        if (initialTeams.length &gt; maxTeamsCount) {&#13;
            return ModelValidationUtils.getErrorObject('I01');&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; maxTeamsCount; i++) {&#13;
            var initialTeam = initialTeams[i];&#13;
&#13;
            if(!initialTeam) {&#13;
                initialTeam = {}&#13;
                initialTeam.teamName = "X";&#13;
                initialTeam.teamColor = "#000";&#13;
            }&#13;
&#13;
            if(ModelValidationUtils.isStringEmpty(initialTeam.teamName)) {&#13;
                return ModelValidationUtils.getErrorObject('I03');&#13;
            }&#13;
&#13;
            var teamColor = initialTeam.teamColor;&#13;
            var colorMatch;&#13;
            if (!teamColor) {&#13;
                teamColor = "#000";&#13;
            } else {&#13;
                if (teamColor.length &lt; 4 || teamColor.length &gt; 7) {&#13;
                    return ModelValidationUtils.getErrorObject('I04');&#13;
                }&#13;
                colorMatch = teamColor.match(regExp);&#13;
                if (!colorMatch || colorMatch === null || colorMatch.length &lt; 1) {&#13;
                    return ModelValidationUtils.getErrorObject('I04');&#13;
                }&#13;
                if (colorMatch[0].length &lt; teamColor.length) {&#13;
                    return ModelValidationUtils.getErrorObject('I04');&#13;
                }&#13;
            }&#13;
            var initialTeamObject = {&#13;
                'teamId': i,&#13;
                'teamName': initialTeam.teamName,&#13;
                'teamPoints': 0,&#13;
                'teamColor': initialTeam.teamColor,&#13;
            }&#13;
&#13;
            validatedInitialTeams.push(initialTeamObject)&#13;
        };&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            validatedInitialTeams: validatedInitialTeams&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var isOnePageScoreboard = !model['Broadcast'];&#13;
&#13;
        if (model['Broadcast'] !== "" &amp;&amp; (ModelValidationUtils.isStringEmpty(model['VariableStorageLocation']) ||&#13;
            ModelValidationUtils.isStringEmpty(model['VariableStorageLocationName']))) {&#13;
            return ModelValidationUtils.getErrorObject('C01');&#13;
        }&#13;
&#13;
        var validatedMaximumTeamsCount = presenter.validateMaximumTeamsCount(model['maximumTeamsCount']);&#13;
        if (!validatedMaximumTeamsCount.isValid) {&#13;
            return validatedMaximumTeamsCount;&#13;
        }&#13;
&#13;
        var validatedInitialTeamsCount = presenter.validateInitialTeamsCount(model['initialTeamsCount'], validatedMaximumTeamsCount.value);&#13;
        if (!validatedInitialTeamsCount.isValid) {&#13;
            return validatedInitialTeamsCount;&#13;
        }&#13;
&#13;
        var validatedInitialTeams = presenter.validateInitialTeams(model['defaultTeamsList'], validatedMaximumTeamsCount.value);&#13;
        if (!validatedInitialTeams.isValid) {&#13;
            return validatedInitialTeams;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            ID: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            broadcast: model['Broadcast'],&#13;
            isDraggable: ModelValidationUtils.validateBoolean(model['isDraggable']),&#13;
            variableStorageLocation: model['VariableStorageLocation'],&#13;
            variableStorageLocationName: model['VariableStorageLocationName'],&#13;
            isOnePageScoreboard: isOnePageScoreboard,&#13;
            defaultTeamsList: validatedInitialTeams.validatedInitialTeams,&#13;
            maximumTeamsCount: validatedMaximumTeamsCount.value,&#13;
            initialTeamsCount: validatedInitialTeamsCount.value&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initView = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
        presenter.scoreboard = presenter.createScoreboard(presenter.$view);&#13;
        for (var i = 0; i &lt; presenter.configuration.initialTeamsCount; i++) {&#13;
            presenter.scoreboard = presenter.addTeam(presenter.configuration.defaultTeamsList[i], presenter.scoreboard);&#13;
        }&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    }&#13;
&#13;
// Creating scoreboard&#13;
    presenter.Scoreboard = function scoreboardCreate () {&#13;
        this.$scoreboard = null;&#13;
        this.$scoreboardBody = null;&#13;
        this.$scoreboardHeader = null;&#13;
        this.$closeButton = null;&#13;
        this.$scoreboardFooter = null;&#13;
        this.$addNewTeamButton = null;&#13;
        this.$resetButton = null;&#13;
    };&#13;
&#13;
    presenter.Scoreboard._internals = {};&#13;
&#13;
    presenter.Scoreboard._internals.createView = function scoreboardCreateView (savedScoreboard) {&#13;
        this.$scoreboard = savedScoreboard;&#13;
        this.$scoreboardBody = $('&lt;div class="scoreboard-body"&gt;&lt;/div&gt;');&#13;
        this.$scoreboardHeader = $('&lt;div class="scoreboard-header"&gt;&lt;/div&gt;');&#13;
        this.$closeButton = $('&lt;div class="scoreboard-close"&gt;&lt;/div&gt;');&#13;
        this.$scoreboardFooter = $('&lt;div class="scoreboard-footer"&gt;&lt;/div&gt;');&#13;
        this.$resetButton = $('&lt;div class="scoreboard-reset"&gt;&lt;/div&gt;');&#13;
        this.$addNewTeamButton = $('&lt;div class="scoreboard-add-new-team"&gt;&lt;/div&gt;');&#13;
&#13;
        this.$scoreboardHeader.append(this.$closeButton);&#13;
&#13;
        this.$scoreboardFooter.append(this.$resetButton);&#13;
        this.$scoreboardFooter.append(this.$addNewTeamButton);&#13;
        &#13;
        this.$scoreboard.append(this.$scoreboardHeader);&#13;
        this.$scoreboard.append(this.$scoreboardBody);&#13;
        this.$scoreboard.append(this.$scoreboardFooter);&#13;
&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.init = function scoreboardInit (savedScoreboard) {&#13;
        presenter.Scoreboard._internals.createView.call(this, savedScoreboard);&#13;
&#13;
        this.connectHandlers();&#13;
        if (presenter.configuration.isDraggable) {&#13;
            this.connectDraggable(savedScoreboard);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.setBody = function scoreboardSetBody (body) {&#13;
        this.$scoreboardBody.append(body);&#13;
    };&#13;
&#13;
    presenter.Scoreboard.createScoreboard = function creatingScoreboard (savedScoreboard) {&#13;
        var scoreboard = new presenter.Scoreboard(savedScoreboard);&#13;
        scoreboard.init(savedScoreboard);&#13;
        &#13;
        return scoreboard;&#13;
    };&#13;
&#13;
    presenter.createScoreboard = function scoreboardCreateScoreboard (savedScoreboard) {&#13;
        return presenter.Scoreboard.createScoreboard(savedScoreboard);&#13;
    }&#13;
&#13;
    presenter.Scoreboard.prototype.getState = function scoreboardGetState () {&#13;
        return {&#13;
            'top': this.$scoreboard.css('top'),&#13;
            'left': this.$scoreboard.css('left'),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.getView = function scoreboardGetView () {&#13;
        return this.$scoreboard;&#13;
    };&#13;
&#13;
    // Scoreboard buttons&#13;
    presenter.Scoreboard.prototype.closeButtonHandler = function scoreboardCloseButtonHandler (event) {&#13;
        presenter.closeScoreBoard();&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.resetButtonHandler = function scoreboardResetButtonHandler (event) {&#13;
        presenter.resetTeamsPoints();&#13;
    };&#13;
&#13;
    function getLowestAvaibleTeamId() {&#13;
        var freeIds = [];&#13;
        var workingIds = []&#13;
        presenter.teamsObjects.forEach(function (team) {&#13;
            workingIds.push(team.getTeamId().teamId);&#13;
        });&#13;
        for (var i = 0; i &lt; presenter.configuration.defaultTeamsList.length; i++) {&#13;
            if (!workingIds.includes(i)) {&#13;
                freeIds.push(i);&#13;
            }      &#13;
        }&#13;
        return Math.min(...freeIds);&#13;
    }&#13;
&#13;
    presenter.Scoreboard.prototype.addTeamButtonHandler = function scoreboardResetButtonHandler (event) {&#13;
        if (presenter.state.teamsObjects.length &lt; presenter.configuration.maximumTeamsCount) {&#13;
            var availableLowestId = getLowestAvaibleTeamId();&#13;
            var defaultTeamData = presenter.configuration.defaultTeamsList[availableLowestId]&#13;
            presenter.addTeam(defaultTeamData, this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.connectHandlers = function scoreboardConnectHandlers () {&#13;
        if (MobileUtils.isEventSupported('touchstart')) {&#13;
            this.$closeButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.closeButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$resetButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.resetButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$addNewTeamButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.addTeamButtonHandler(event);&#13;
            }.bind(this));&#13;
        } else {&#13;
            this.$closeButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.closeButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$resetButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.resetButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$addNewTeamButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.addTeamButtonHandler(event);&#13;
            }.bind(this));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.connectDraggable = function scoreboardConnectDraggable (savedScoreboard) {&#13;
        this.$scoreboard.draggable({&#13;
            containment: 'parent',&#13;
            opacity: 0.35,&#13;
            create: function(event, _) {&#13;
                $(event.target).css({&#13;
                    'top' : savedScoreboard ? savedScoreboard.top : '10px',&#13;
                    'left' : savedScoreboard ? savedScoreboard.left : '10px',&#13;
                    'position' : 'absolute'&#13;
                });&#13;
            },&#13;
&#13;
            stop: function ScoreboardStopFunction() {&#13;
                $.ui.ddmanager.current = null;&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.moveScoreboard = function scoreboardMoveScoreboard (savedScoreboardPosition) {&#13;
        var ic_page_height = this.$scoreboard.parent().height();&#13;
        this.$scoreboard.css({&#13;
            'top' : parseInt(savedScoreboardPosition.top, 10) &lt; ic_page_height ? savedScoreboardPosition.top : '10px',&#13;
            'left' : savedScoreboardPosition.left,&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Scoreboard.prototype.destroy = function scoreboardDestroy () {&#13;
        if(this.$scoreboard) {&#13;
            var $scoreboard = this.$scoreboard.draggable("destroy");&#13;
            $scoreboard.off();&#13;
            this.$scoreboard.off();&#13;
            this.$scoreboardBody.off();&#13;
            this.$scoreboardHeader.off();&#13;
            this.$closeButton.off();&#13;
            this.$scoreboardFooter.off();&#13;
            this.$resetButton.off();&#13;
            this.$addNewTeamButton.off();&#13;
            this.$scoreboard = null;&#13;
            this.$scoreboardBody = null;&#13;
            this.$scoreboardHeader = null;&#13;
            this.$closeButton = null;&#13;
            this.$scoreboardFooter = null;&#13;
            this.$resetButton = null;&#13;
            this.$addNewTeamButton = null;&#13;
        }&#13;
    };&#13;
&#13;
// Creating Team&#13;
    presenter.Team = function TeamCreate (savedTeams) {&#13;
        this.teamId = savedTeams.teamId;&#13;
        this.teamPoints = savedTeams.teamPoints;&#13;
        this.teamName = savedTeams.teamName;&#13;
        this.teamColor = savedTeams.teamColor;&#13;
        this.$team = null;&#13;
        this.$teamHeader = null;&#13;
        this.$teamBody = null;&#13;
        this.$teamFooter = null;&#13;
        this.$teamPointsIncrementButton = null;&#13;
        this.$teamPointsDecrementButton = null;&#13;
        this.$teamNameContainer = null;&#13;
        this.$teamPointsConatiner = null;&#13;
        this.$teamNameInput = null;&#13;
        this.$teamRemoveButton = null;&#13;
    };&#13;
&#13;
    presenter.Team._internals = {};&#13;
&#13;
    presenter.Team._internals.createView = function TeamCreateView (savedTeam) {&#13;
        this.$team = $('&lt;div class="scoreboard-team"&gt;&lt;/div&gt;');&#13;
        this.$teamHeader = $('&lt;div class="scoreboard-team-header"&gt;&lt;/div&gt;');&#13;
        this.$teamBody = $('&lt;div class="scoreboard-team-body"&gt;&lt;/div&gt;');&#13;
        this.$teamFooter = $('&lt;div class="scoreboard-team-footer"&gt;&lt;/div&gt;');&#13;
        this.$teamRemoveButton = $('&lt;div class="scoreboard-team-remove"&gt;&lt;/div&gt;');&#13;
        this.$teamNameContainer = $(&#13;
            `&lt;div class="scoreboard-team-name-container"&gt;&#13;
                ${this.teamName}&#13;
            &lt;/div&gt;`&#13;
        );&#13;
        this.$teamPointsConatiner = $(&#13;
            `&lt;div class="scoreboard-team-points-container"&gt;&#13;
                &lt;h1&gt;${this.teamPoints}&lt;/h1&gt;&#13;
            &lt;/div&gt;`&#13;
        );&#13;
        this.$teamPointsDecrementButton = $(&#13;
        '&lt;div class="scoreboard-team-score-decrement"&gt;&lt;/div&gt;'&#13;
        );&#13;
        this.$teamPointsIncrementButton = $(&#13;
        '&lt;div class="scoreboard-team-score-increment"&gt;&lt;/div&gt;'&#13;
        );&#13;
        this.$teamHeader.append(this.$teamRemoveButton);&#13;
&#13;
        this.$teamBody.append(this.$teamNameContainer);&#13;
        this.$teamBody.append(this.$teamPointsConatiner);&#13;
        &#13;
        this.$teamFooter.append(this.$teamPointsDecrementButton);&#13;
        this.$teamFooter.append(this.$teamPointsIncrementButton);&#13;
&#13;
        this.$team.css("background-color", savedTeam.teamColor);&#13;
&#13;
        this.$team.append(this.$teamHeader);&#13;
        this.$team.append(this.$teamBody);&#13;
        this.$team.append(this.$teamFooter);&#13;
    };&#13;
&#13;
    presenter.Team.prototype.init = function teamInit (savedTeam) {&#13;
        presenter.Team._internals.createView.call(this, savedTeam);&#13;
&#13;
        this.connectHandlers();&#13;
    };&#13;
&#13;
    presenter.Team.createTeam = function teamCreateTeam (savedTeam) {&#13;
        var team = new presenter.Team(savedTeam);&#13;
        team.init(savedTeam);&#13;
        &#13;
        return team;&#13;
    };&#13;
&#13;
    // Scoreboard buttons&#13;
    presenter.Team.prototype.resetPoints = function teamResetPoints () {&#13;
        this.teamPoints = 0;&#13;
        this.$teamPointsConatiner.html(`&lt;h1&gt;${this.teamPoints}&lt;/h1&gt;`)&#13;
    };&#13;
&#13;
    presenter.Team.prototype.removeTeamHandler = function teamRemoveTeamHandler (event) {&#13;
        var team = event.data.scoreboard;&#13;
        team.destroy();&#13;
    };&#13;
&#13;
    presenter.Team.prototype.incrementPointsButtonHandler = function teamIncrementPointsButtonHandler (event) {&#13;
        this.teamPoints += 1;&#13;
        this.$teamPointsConatiner.html(`&lt;h1&gt;${this.teamPoints}&lt;/h1&gt;`)&#13;
        presenter.updateTeamState(this.getTeamData());&#13;
    };&#13;
&#13;
    presenter.Team.prototype.decrementPointsButtonHandler = function teamDecrementPointsButtonHandler (event) {&#13;
        this.teamPoints -= 1;&#13;
        this.$teamPointsConatiner.html(`&lt;h1&gt;${this.teamPoints}&lt;/h1&gt;`)&#13;
        presenter.updateTeamState(this.getTeamData());&#13;
    };&#13;
&#13;
    presenter.Team.prototype.connectHandlers = function teamConnectHandlers () {&#13;
        if(MobileUtils.isEventSupported('touchstart')) {&#13;
            this.$teamRemoveButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.removeTeamHandler(event);&#13;
            }.bind(this));&#13;
            this.$teamPointsIncrementButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.incrementPointsButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$teamPointsDecrementButton.on('touchstart', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.decrementPointsButtonHandler(event);&#13;
            }.bind(this));&#13;
        } else {&#13;
            this.$teamRemoveButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.removeTeamHandler(event);&#13;
            }.bind(this));&#13;
            this.$teamPointsIncrementButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.incrementPointsButtonHandler(event);&#13;
            }.bind(this));&#13;
            this.$teamPointsDecrementButton.on('click', {"scoreboard": this}, function (event) {&#13;
                event.stopPropagation();&#13;
                this.decrementPointsButtonHandler(event);&#13;
            }.bind(this));&#13;
        }&#13;
        &#13;
        this.connectTeamNameEditHandler();&#13;
    };&#13;
&#13;
    presenter.Team.prototype.connectTeamNameEditHandler = function teamConnectTeamNameEditHandler () {&#13;
        this.$teamNameContainer.on('dblclick', function () {&#13;
            this.teamNameEditHandler();&#13;
            this.$teamNameContainer.off('dblclick');&#13;
        }.bind(this));&#13;
&#13;
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {&#13;
            window.EventsUtils.DoubleTap.on(this.$teamNameContainer, function () {&#13;
                this.teamNameEditHandler();&#13;
                window.EventsUtils.DoubleTap.off(this.$teamNameContainer);&#13;
            }.bind(this));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Team.prototype.teamNameEditHandler = function teamNameEditHandler () {&#13;
        this.currentValue = this.teamName;&#13;
&#13;
        this.$teamNameInput = $('&lt;input class="team-name-input"&gt;&lt;/input&gt;');&#13;
        this.$teamNameInput.val(this.currentValue);&#13;
        &#13;
        this.$teamNameContainer.html(this.$teamNameInput);&#13;
        this.$teamNameInput.focus();&#13;
&#13;
        this.$teamNameInput.keypress(function (e) {&#13;
            if (e.which == 13) {&#13;
                this.saveNewTeamName();&#13;
                return false;&#13;
            }&#13;
        }.bind(this));&#13;
        this.$teamNameInput.focusout(function (e) {&#13;
            this.saveNewTeamName();&#13;
            return false;&#13;
        }.bind(this));&#13;
    };&#13;
&#13;
    presenter.Team.prototype.saveNewTeamName = function teamSaveNewTeamName () {&#13;
        var value = this.$teamNameInput.val();&#13;
        this.teamName = value;&#13;
        this.$teamNameContainer.html(value);&#13;
        this.$teamNameInput.remove();&#13;
        this.connectTeamNameEditHandler();&#13;
        presenter.updateTeamState(this.getTeamData());&#13;
    };&#13;
&#13;
    presenter.Team.prototype.getView = function teamGetView () {&#13;
        return this.$team;&#13;
    };&#13;
&#13;
    presenter.Team.prototype.getTeamData = function teamGetView () {&#13;
        return {&#13;
            'teamId': this.teamId,&#13;
            'teamName': this.teamName,&#13;
            'teamPoints': this.teamPoints,&#13;
            'teamColor': this.teamColor,&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Team.prototype.getTeamId = function teamGetTeamId () {&#13;
        return {&#13;
            'teamId': this.teamId,&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Team.prototype.destroy = function teamDestroy () {&#13;
        if(this.$team) {&#13;
            presenter.removeTeam(this.teamId);&#13;
            var $team = this.$team.draggable("destroy");&#13;
            $team.off();&#13;
            this.$team.off();&#13;
            this.$teamHeader.off();&#13;
            this.$teamBody.off();&#13;
            this.$teamFooter.off();&#13;
            this.$teamRemoveButton.off();&#13;
            this.$teamNameContainer.off();&#13;
            this.$teamPointsConatiner.off();&#13;
            this.$teamPointsDecrementButton.off();&#13;
            this.$teamPointsIncrementButton.off();&#13;
            if (this.$teamNameInput !== null) {&#13;
                this.$teamNameInput.off();&#13;
            }&#13;
&#13;
            if (this.$teamRemoveButton !== null) {&#13;
                this.$teamRemoveButton.off();&#13;
            }&#13;
&#13;
            window.EventsUtils.DoubleTap.off(this.$teamNameContainer);&#13;
            this.$team.remove();&#13;
            this.$team = null;&#13;
            this.teamPoints = 0;&#13;
            this.teamName = '';&#13;
            this.teamColor = ''&#13;
            this.$teamHeader = null;&#13;
            this.$teamBody = null;&#13;
            this.$teamFooter = null;&#13;
            this.$teamPointsIncrementButton = null;&#13;
            this.$teamPointsDecrementButton = null;&#13;
            this.$teamNameContainer = null;&#13;
            this.$teamPointsConatiner = null;&#13;
            this.$teamNameInput = null;&#13;
            this.$teamRemoveButton = null;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createTeam = function Scoreboard_createTeam (savedTeam) {&#13;
        return presenter.Team.createTeam(savedTeam)&#13;
    };&#13;
&#13;
    presenter.resetTeamsPoints = function Scoreboard_resetTeamPoints () {&#13;
        presenter.teamsObjects.forEach(function (team) {&#13;
            team.resetPoints();&#13;
        });&#13;
        presenter.state.teamsObjects.forEach(function (team) {&#13;
            team.teamPoints = 0;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.removeTeam = function Scoreboard_removeTeam (teamId) {&#13;
        presenter.teamsObjects = presenter.teamsObjects.filter((team) =&gt; {&#13;
            return teamId !== team.getTeamId().teamId;&#13;
        });&#13;
        presenter.state.teamsObjects = presenter.state.teamsObjects.filter((team) =&gt; {&#13;
            return teamId !== team.teamId;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addTeam = function Scoreboard_addTeam (teamData, scoreboard) {&#13;
        var team = presenter.createTeam(teamData);&#13;
        presenter.teamsObjects.push(team);&#13;
        presenter.state.teamsObjects.push(team.getTeamData());&#13;
        var $teamView = team.getView();&#13;
        scoreboard.setBody($teamView);&#13;
        return scoreboard;&#13;
    };&#13;
    &#13;
    presenter.removeAllTeams = function Scoreboard_removeAllTeams () {&#13;
        presenter.teamsObjects.forEach(function (team) {&#13;
            team.destroy();&#13;
            team = null;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.removeScoreboard = function Scoreboard_removeScoreboard () {&#13;
        presenter.scoreboard.destroy();&#13;
        presenter.scoreboard = null;&#13;
&#13;
    }&#13;
&#13;
    presenter.updateTeamState = function Scoreboard_updateTeamState (updatedTeamData) {&#13;
        presenter.state.teamsObjects = presenter.state.teamsObjects.map(teamData =&gt;&#13;
            teamData.teamId === updatedTeamData.teamId ? { &#13;
                ...teamData,&#13;
                'teamName': updatedTeamData.teamName,&#13;
                'teamPoints': updatedTeamData.teamPoints,&#13;
            } : teamData&#13;
        );&#13;
    };&#13;
&#13;
    presenter.restoreAllScoreboardData = function Scoreboard_restoreAllScoreboardData (savedScoreboard) {&#13;
        presenter.removeAllTeams();&#13;
        presenter.scoreboard.moveScoreboard(savedScoreboard.scoreboard);&#13;
        savedScoreboard.teamsObjects.forEach(function (teamData) {&#13;
            presenter.addTeam(teamData, presenter.scoreboard);&#13;
        });&#13;
        presenter.state.isVisible = savedScoreboard.isVisible;&#13;
        presenter.setVisibility(presenter.state.isVisible);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.closeScoreBoard = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.ID,&#13;
            'value': "HideScoreboard",&#13;
        };&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function Scoreboard_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function Scoreboard_onEventReceived (eventName, eventData) {&#13;
        if (presenter.configuration.isOnePageScoreboard) {&#13;
            return;&#13;
        }&#13;
        if (eventName == "PageLoaded" &amp;&amp; eventData.source == presenter.configuration.variableStorageLocationName) {&#13;
            var store = null;&#13;
            if (presenter.configuration.variableStorageLocation == "header") {&#13;
                store = presenter.playerController.getHeaderModule(presenter.configuration.broadcast);&#13;
            } else {&#13;
                store = presenter.playerController.getFooterModule(presenter.configuration.broadcast);&#13;
            }&#13;
&#13;
            if (store == null) {&#13;
                return;&#13;
            }&#13;
&#13;
            if (store.getVariable("savedScoreboard")) {&#13;
                presenter.restoreAllScoreboardData(store.getVariable("savedScoreboard"));&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function Scoreboard_getState () {&#13;
        presenter.state.scoreboard = presenter.scoreboard.getState();&#13;
        if (!presenter.configuration.isOnePageScoreboard) {&#13;
            var store = null;&#13;
            if (presenter.configuration.variableStorageLocation == "header") {&#13;
                store = presenter.playerController.getHeaderModule(presenter.configuration.broadcast);&#13;
            } else {&#13;
                store = presenter.playerController.getFooterModule(presenter.configuration.broadcast);&#13;
            }&#13;
&#13;
            if (store == null) {&#13;
                return;&#13;
            }&#13;
&#13;
            store.setVariable("savedScoreboard", presenter.state);&#13;
        } else {&#13;
            return JSON.stringify({&#13;
                savedScoreboard: presenter.state&#13;
            })&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setState = function Scoreboard_setState (state) {&#13;
        if (presenter.configuration.isOnePageScoreboard) {&#13;
            var parsedState = JSON.parse(state);&#13;
            presenter.restoreAllScoreboardData(parsedState.savedScoreboard);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.reset = function Scoreboard_reset () {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.destroy = function Scoreboard_destroy () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        if(presenter.teamsObjects) {&#13;
            presenter.removeAllTeams();&#13;
        }&#13;
        presenter.playerController = null;&#13;
        presenter.removeScoreboard();&#13;
        presenter.configuration = null;&#13;
        presenter.state = null;&#13;
        presenter.playerController = null;&#13;
        presenter.eventBus = null;&#13;
        presenter.ERROR_CODES = null;&#13;
        presenter.$view.unbind();&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
        presenter.teamsObjects = [];&#13;
        presenter.teamsObjects = null;&#13;
        presenter.createScoreboard = null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>