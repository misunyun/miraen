<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Basic_Math_Gaps" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Decimal Separator" name="decimalSeparator" nameLabel="Basic_Math_Gaps_property_decimal_separator" type="string"/>
        <property displayName="Gaps Definition" name="gapsDefinition" nameLabel="Basic_Math_Gaps_property_gaps_definition" type="text"/>
        <property displayName="Is Equation" name="isEquation" nameLabel="Basic_Math_Gaps_property_is_equation" type="boolean"/>
        <property displayName="Use numeric keyboard" name="useNumericKeyboard" nameLabel="Basic_Math_Gaps_use_numeric_keyboard" type="boolean"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Basic_Math_Gaps_property_is_not_activity" type="boolean"/>
        <property displayName="Is Disabled" name="isDisabled" nameLabel="Basic_Math_Gaps_property_is_disabled" type="boolean"/>
        <property displayName="Gap width" name="gapWidth" nameLabel="Basic_Math_Gaps_property_gap_width" type="string"/>
        <property displayName="Gap Type" name="gapType" nameLabel="Basic_Math_Gaps_property_gap_type" type="{Editable, Draggable}"/>
        <property displayName="User action events" name="userActionEvents" nameLabel="Basic_Math_Gaps_property_user_action_events" type="boolean"/>
        <property displayName="Gap Signs" name="Signs" nameLabel="Basic_Math_Gaps_property_gap_signs" type="list">
            <property displayName="Addition" name="Addition" nameLabel="Basic_Math_Gaps_property_gap_signs_addition" type="string"/>
            <property displayName="Subtraction" name="Subtraction" nameLabel="Basic_Math_Gaps_property_gap_signs_subtraction" type="string"/>
            <property displayName="Division" name="Division" nameLabel="Basic_Math_Gaps_property_gap_signs_division" type="string"/>
            <property displayName="Multiplication" name="Multiplication" nameLabel="Basic_Math_Gaps_property_gap_signs_multiplication" type="string"/>
        </property>
    </model>
<css>&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container {&#13;
    padding: 10px 0px;&#13;
    border: 1px solid transparent;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .element {&#13;
    width: 30px;&#13;
    text-align: center;&#13;
    margin: 0 2px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .element,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .fraction-container,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container &gt; .draggable-gap {&#13;
    float: left;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.hasFractions &gt; input,&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.hasFractions &gt; .element {&#13;
    margin-top: 15px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .element {&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container {&#13;
    display: inline-block;&#13;
    text-align: center;&#13;
    padding: 0 5px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container .numerator {&#13;
    padding: 0 5px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .fraction-container .denominator {&#13;
    border-top: 1px solid #000;&#13;
    display: block;&#13;
    padding: 2px 5px 0px 5px;&#13;
    margin-top: 2px;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .hidden-addition {&#13;
    width: 0px;&#13;
    height: 0px;&#13;
    visibility: hidden;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .correct {&#13;
    border-color: #00bb00;&#13;
    background-color: #bbffbb;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container .wrong {&#13;
    border-color: #ff1111;&#13;
    background-color: #ffbbbb;&#13;
}&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.wrong {&#13;
    border: 1px solid #ff1111;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .basic-math-gaps-container.correct {&#13;
    border: 1px solid #00bb00;&#13;
}&#13;
&#13;
.basic-math-gaps-wrapper .draggable-gap {&#13;
    height: 20px;&#13;
    text-align: center;&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="basic-math-gaps-wrapper"&gt;&#13;
    &lt;div class="basic-math-gaps-container clearfix"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="basic-math-gaps-wrapper"&gt;&#13;
    &lt;div class="basic-math-gaps-container clearfix"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonBasic_Math_Gaps_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.eventBus = null;&#13;
    presenter.playerController = null;&#13;
    presenter.gapsContainer = null;&#13;
    presenter.widgetsFactory = null;&#13;
    presenter.lastDraggedItem = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        this.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setEventBus = function(wrappedEventBus) {&#13;
        presenter.eventBus = wrappedEventBus;&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {&#13;
            'isError' : true,&#13;
            'errorCode' : errorCode&#13;
        };&#13;
    };&#13;
&#13;
    presenter.errorCodes = {&#13;
        'E01' : 'Left side is not equal to Right side.',&#13;
        'E02' : 'A space can NOT be a decimal separator.',&#13;
        'E03' : 'Gaps Definition can NOT be blank',&#13;
        'E04' : 'Gap width must be positive integer',&#13;
        'E05' : 'Sign must be other than =, [, ]',&#13;
        'E06' : 'Equation needs \'=\' sign to be a equation'&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
&#13;
        presenter.setOnEventListeners();&#13;
    };&#13;
&#13;
    presenter.setOnEventListeners = function () {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('ItemSelected', this);&#13;
        presenter.eventBus.addEventListener('ItemConsumed', this);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var nModel = presenter.upgradeGapType(model);&#13;
        nModel = presenter.upgradeNumericKeyboard(nModel);&#13;
        return presenter.upgradeUserActionEvents(nModel);&#13;
    };&#13;
&#13;
    presenter.upgradeGapType = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.gapType == undefined) {&#13;
            upgradedModel["gapType"] = "Editable";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeNumericKeyboard = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.useNumericKeyboard === undefined) {&#13;
            upgradedModel["useNumericKeyboard"] = "False";&#13;
            }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeUserActionEvents = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model['userActionEvents'] === undefined) {&#13;
            upgradedModel['userActionEvents'] = 'False';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function deleteCommands() {&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.disable;&#13;
        delete presenter.enable;&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        presenter.$view = $(view);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(presenter.$view.find('.basic-math-gaps-container'), presenter.errorCodes, presenter.configuration.errorCode);&#13;
&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.gapsContainer = new presenter.GapsContainerObject();&#13;
        presenter.widgetsFactory = new presenter.ObjectFactory();&#13;
        presenter.valueChangeObserver = new presenter.ValueChangeObserver();&#13;
&#13;
        if (isPreview) {&#13;
            presenter.eventBus = function () {};&#13;
        }&#13;
&#13;
        presenter.createGaps();&#13;
        if (!isPreview) {&#13;
            presenter.addFocusOutEventListener();&#13;
            presenter._addSendEventHandler();&#13;
        }&#13;
&#13;
        presenter.$view.find('input').click(function(e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.setWrapperCss();&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
    }&#13;
&#13;
    presenter.createGaps = function () {&#13;
        presenter.widgetsFactory.produce(&#13;
            presenter.ObjectFactory.PRODUCTION_TYPE.GAP_CONTAINER,&#13;
            presenter.configuration.gapsDefinition&#13;
        );&#13;
&#13;
        presenter.lastDraggedItem = {};&#13;
    };&#13;
&#13;
    presenter.setWrapperCss = function () {&#13;
        presenter.$view.find('.basic-math-gaps-wrapper :input').each(function(){&#13;
            if (presenter.configuration.gapWidth != '') {&#13;
                $(this).css("width", presenter.configuration.gapWidth);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addFocusOutEventListener = function () {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter._addFocusOutEventListener();&#13;
    };&#13;
&#13;
    presenter._addSendEventHandler = function () {&#13;
        var inputs = presenter.$view.find('input');&#13;
        inputs.on("BMG:send_event", function () {&#13;
            var item = presenter.$view.find('input').index( this),&#13;
                value = $(this).val().trim(),&#13;
                score = (($(this).val().trim() == presenter.configuration.gapsValues[item]) || (presenter.reconvertSign(presenter.configuration.Signs, $(this).val().trim()) == presenter.configuration.gapsValues[item]));&#13;
&#13;
            if (presenter.configuration.isEquation&#13;
                &amp;&amp; filterInputs(function(element) { return $(element).val().length &gt; 0; }).length != presenter.$view.find('input').length ) {&#13;
                return;&#13;
            }&#13;
&#13;
            presenter.sendEvent(item, value, score);&#13;
        });&#13;
    };&#13;
&#13;
    presenter._addFocusOutEventListener = function () {&#13;
        var inputs = presenter.$view.find('input');&#13;
&#13;
        if (!presenter.configuration.userActionsEventsEnabled) {&#13;
            inputs.focusout(function () {&#13;
                $(this).trigger("BMG:send_event");&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    function escapeRegexSpecialCharacters(value) {&#13;
        return (value + '').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;'); // escape regex special characters&#13;
    }&#13;
&#13;
    function convertDecimalSeparator(value, from, to) {&#13;
        if (from == '.') {&#13;
            return value;&#13;
        }&#13;
        var escaped = escapeRegexSpecialCharacters(from);&#13;
        return value.replace(new RegExp(escaped, 'g'), to);&#13;
    }&#13;
&#13;
    function getValueOfSingleElement(element, isGap, shouldParse) {&#13;
        var getGapValuePattern = /\[(.+)\]/,&#13;
            isDigitPattern = /\d+/;&#13;
&#13;
        element = isGap ? getGapValuePattern.exec(element)[1] : element.replace(/[\[\]']+/g, '');&#13;
&#13;
        if (isDigitPattern.test(element) &amp;&amp; shouldParse) {&#13;
            return parseInt(element, 10);&#13;
        } else {&#13;
            return element;&#13;
        }&#13;
    }&#13;
&#13;
    // this is for situation when user pass for example: 1 1/2,&#13;
    // which from math point of view is an addition but the addition sign should NOT be displayed&#13;
    function checkIsHiddenAddition(list, index) {&#13;
        var isDigitPattern = /\d+/;&#13;
        if ( index &gt;= list.length ) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if ( isDigitPattern.test(list[index]) &amp;&amp; isDigitPattern.test(list[index + 1]) ) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.convertSign = function (signs, value) {&#13;
        if (typeof (signs) == "undefined") {&#13;
            signs = {Addition: "", Subtraction: "", Division: "", Multiplication: ""};&#13;
        }&#13;
&#13;
        if (value === "*" &amp;&amp; signs['Multiplication'] !== "") {&#13;
            return signs['Multiplication'];&#13;
        }&#13;
        else if (value === "/" &amp;&amp; signs['Division'] !== "") {&#13;
            return signs['Division'];&#13;
        }&#13;
        else if (value === "+" &amp;&amp; signs['Addition'] !== "") {&#13;
            return signs['Addition'];&#13;
        }&#13;
        else if (value === "-" &amp;&amp; signs['Subtraction'] !== "") {&#13;
            return signs['Subtraction'];&#13;
        }&#13;
        else {&#13;
            return value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reconvertSign = function (signs, value) {&#13;
        if (typeof (signs) == "undefined") {&#13;
            return value;&#13;
        }&#13;
&#13;
        switch(value) {&#13;
            case signs['Multiplication']:&#13;
                return "*";&#13;
            case signs['Division']:&#13;
                return "/";&#13;
            case signs['Addition']:&#13;
                return "+";&#13;
            case signs['Subtraction']:&#13;
                return "-";&#13;
            default:&#13;
                return value;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeEmptyStringsFromArray = function (stringArray) {&#13;
        var resultArray = [];&#13;
&#13;
        var arrayLen = stringArray.length;&#13;
        for(var i = 0; i &lt; arrayLen; i++) {&#13;
            if (!ModelValidationUtils.isStringEmpty(stringArray[i])) {&#13;
                resultArray.push(stringArray[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return resultArray;&#13;
    };&#13;
&#13;
    presenter.validateGapsDefinition = function(model, isEquation, separator, signs) {&#13;
        if (model['gapsDefinition'].length === 0) {&#13;
            return presenter.getErrorObject('E03');&#13;
        }&#13;
&#13;
        var validatedGapsDefinition = [],&#13;
            isGapPattern = /^\[.+\]$/,&#13;
            splittedGapsBySpace = model['gapsDefinition'].split(' '),&#13;
            isFractionPattern = /\d+\]*\/\[*\d+/,&#13;
            leftSide = '',&#13;
            rightSide = '',&#13;
            isLeft = true,&#13;
            gapsValues = [];&#13;
&#13;
&#13;
        splittedGapsBySpace = presenter.removeEmptyStringsFromArray(splittedGapsBySpace);&#13;
&#13;
        $.each(splittedGapsBySpace, function(i) {&#13;
            var valueBeforeConvert = splittedGapsBySpace[i],&#13;
                value = presenter.convertSign(signs, valueBeforeConvert),&#13;
                isGap = isGapPattern.test(value),&#13;
                isFraction = isFractionPattern.test(value);&#13;
&#13;
            var gapType = isGap ? presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP :&#13;
                presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP;&#13;
&#13;
            var singleElement = {&#13;
                gapType: gapType,&#13;
                originalForm: value,&#13;
                beforeConvert: getValueOfSingleElement(valueBeforeConvert, isGap, false),&#13;
                isGap: isGap,&#13;
                isFraction: isFraction,&#13;
                parsed: getValueOfSingleElement(value, isGap, true),&#13;
                notParsed: getValueOfSingleElement(value, isGap, false),&#13;
                isHiddenAdditionAfter: checkIsHiddenAddition(splittedGapsBySpace, i)&#13;
            };&#13;
&#13;
            if (isFraction) {&#13;
                var numerator = value.split('/')[0],&#13;
                    denominator = value.split('/')[1],&#13;
                    isNumeratorGap = isGapPattern.test(numerator),&#13;
                    isDenominatorGap = isGapPattern.test(denominator);&#13;
&#13;
                if (!isGap) {&#13;
                    isNumeratorGap = isGapPattern.test(numerator);&#13;
                    isDenominatorGap = isGapPattern.test(denominator);&#13;
                } else {&#13;
                    isNumeratorGap = true;&#13;
                    isDenominatorGap = true;&#13;
                    numerator += ']';&#13;
                    denominator = '[' + denominator;&#13;
                }&#13;
&#13;
                singleElement.fraction = {&#13;
                    numerator: {&#13;
                        isGap: isNumeratorGap,&#13;
                        originalForm: numerator,&#13;
                        parsed: getValueOfSingleElement(numerator, isNumeratorGap, true),&#13;
                        notParsed: getValueOfSingleElement(numerator, isNumeratorGap, false)&#13;
                    },&#13;
                    denominator: {&#13;
                        isGap: isDenominatorGap,&#13;
                        originalForm: denominator,&#13;
                        parsed: getValueOfSingleElement(denominator, isDenominatorGap, true),&#13;
                        notParsed: getValueOfSingleElement(denominator, isDenominatorGap, false)&#13;
                    }&#13;
                };&#13;
&#13;
                singleElement.gapType = presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP;&#13;
&#13;
                if(isNumeratorGap) {&#13;
                    gapsValues.push(singleElement.fraction.numerator.notParsed);&#13;
                }&#13;
&#13;
                if(isDenominatorGap) {&#13;
                    gapsValues.push(singleElement.fraction.denominator.notParsed);&#13;
                }&#13;
&#13;
            } else if(singleElement.isGap) {&#13;
                gapsValues.push(singleElement.notParsed);&#13;
            }&#13;
&#13;
            validatedGapsDefinition.push(singleElement);&#13;
&#13;
            if (singleElement.notParsed == '=') {&#13;
                isLeft = false;&#13;
                return true; // continue in jQuery.each&#13;
            }&#13;
&#13;
            if (isLeft) {&#13;
                leftSide += singleElement.beforeConvert;&#13;
                if (singleElement.isHiddenAdditionAfter) {&#13;
                    leftSide += '+';&#13;
                }&#13;
            } else {&#13;
                rightSide += singleElement.beforeConvert;&#13;
                if (singleElement.isHiddenAdditionAfter) {&#13;
                    rightSide += '+';&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        if (isEquation) {&#13;
            leftSide = convertDecimalSeparator(leftSide, separator, '.');&#13;
            rightSide = convertDecimalSeparator(rightSide, separator, '.');&#13;
&#13;
            try {&#13;
                var leftSideEvaluated = eval(leftSide).toFixed(2),&#13;
                rightSideEvaluated = eval(rightSide).toFixed(2);&#13;
            } catch (_) {&#13;
                return presenter.getErrorObject('E06');&#13;
            }&#13;
&#13;
            if(leftSideEvaluated != rightSideEvaluated) {&#13;
                return presenter.getErrorObject('E01');&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'allElements' : validatedGapsDefinition,&#13;
            'gapsValues' : gapsValues,&#13;
            'leftSide' : isEquation &amp;&amp; splittedGapsBySpace.length &gt; 0 ? leftSideEvaluated : leftSide,&#13;
            'rightSide' : isEquation &amp;&amp; splittedGapsBySpace.length &gt; 0 ? rightSideEvaluated : rightSide&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateDecimalSeparator = function(separator) {&#13;
        var spacePattern = /(\s)/;&#13;
&#13;
        if (spacePattern.test(separator)) {&#13;
            return presenter.getErrorObject('E02');&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : separator.length &gt; 0 ? separator : '.'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateGapWidth = function(gapWidth) {&#13;
        if (typeof gapWidth == "undefined" || gapWidth == 0) {&#13;
            gapWidth = '34';&#13;
        }&#13;
&#13;
        if (gapWidth &lt; 0 || isNaN(gapWidth)) {&#13;
            return presenter.getErrorObject('E04');&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : gapWidth&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateSigns = function(signs) {&#13;
        var availableFields = ["Addition", "Subtraction", "Division", "Multiplication"];&#13;
&#13;
        if (typeof signs == "undefined") {&#13;
            signs = [{Addition: "", Subtraction: "", Division: "", Multiplication: ""}];&#13;
        }&#13;
&#13;
        var regexp = new RegExp("[\=\\[\\]]");&#13;
&#13;
        for (var i = 0; i &lt; availableFields.length; i++) {&#13;
            var field = availableFields[i];&#13;
            if (regexp.test(signs[0][field])) {&#13;
                return presenter.getErrorObject('E05');&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'value' : signs[0]&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateGapType = function (model) {&#13;
        if(model.gapType === "Draggable") {&#13;
            return { value: true };&#13;
        }&#13;
&#13;
        return { value: false };&#13;
    };&#13;
&#13;
    presenter.onDestroy = function () {&#13;
        this.$view.off();&#13;
        presenter.$view.find('input').off();&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        var validatedIsEquation = ModelValidationUtils.validateBoolean(model['isEquation']),&#13;
            validatedIsDisabled = ModelValidationUtils.validateBoolean(model['isDisabled']),&#13;
            validatedIsActivity = !(ModelValidationUtils.validateBoolean(model['isNotActivity'])),&#13;
            validatedIsVisible = ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            validatedUseNumericKeyboard = ModelValidationUtils.validateBoolean(model['useNumericKeyboard']),&#13;
            validatedUserActionEvents = ModelValidationUtils.validateBoolean(model['userActionEvents']);&#13;
&#13;
        var validatedDecimalSeparator = presenter.validateDecimalSeparator(model['decimalSeparator']);&#13;
&#13;
        if (validatedDecimalSeparator.isError) {&#13;
            return validatedDecimalSeparator;&#13;
        }&#13;
&#13;
        var validatedGapWidth = presenter.validateGapWidth(model['gapWidth']);&#13;
&#13;
        if (validatedGapWidth.isError) {&#13;
            return validatedGapWidth;&#13;
        }&#13;
&#13;
        var validatedSigns = presenter.validateSigns(model['Signs']);&#13;
&#13;
        if (validatedSigns.isError) {&#13;
            return validatedSigns;&#13;
        }&#13;
&#13;
        var validatedGapsDefinition = presenter.validateGapsDefinition(model, validatedIsEquation, validatedDecimalSeparator.value, validatedSigns.value);&#13;
        if (validatedGapsDefinition.isError) {&#13;
            return validatedGapsDefinition;&#13;
        }&#13;
&#13;
        var validatedGapType = presenter.validateGapType(model);&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'gapsDefinition' : validatedGapsDefinition.allElements,&#13;
            'gapsValues' : validatedGapsDefinition.gapsValues,&#13;
            'isEquation' : validatedIsEquation,&#13;
            'addonID' : model.ID,&#13;
            'rightValue' : validatedGapsDefinition.rightSide,&#13;
            'leftValue' : validatedGapsDefinition.leftSide,&#13;
            'isActivity' : validatedIsActivity,&#13;
            'isNotActivity': !validatedIsActivity,&#13;
            'isDisabled' : validatedIsDisabled,&#13;
            'isDisabledByDefault': validatedIsDisabled,&#13;
            'isVisibleByDefault' : validatedIsVisible,&#13;
            'isVisible' : validatedIsVisible,&#13;
            'decimalSeparator' : validatedDecimalSeparator.value,&#13;
            'gapWidth' : validatedGapWidth.value,&#13;
            'isDraggable': validatedGapType.value,&#13;
            'Signs' : validatedSigns.value,&#13;
            'useNumericKeyboard' : validatedUseNumericKeyboard,&#13;
            'userActionsEventsEnabled': validatedUserActionEvents&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isErrorsMode = false;&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if(!presenter.isErrorsMode) {&#13;
            presenter.gapsContainer.check();&#13;
            presenter.isErrorsMode = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if (presenter.isErrorsMode) {&#13;
            presenter.gapsContainer.check();&#13;
            presenter.isErrorsMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.gapsContainer.reset();&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isDisabled = presenter.configuration.isDisabledByDefault;&#13;
        presenter.isErrorsMode = false;&#13;
    };&#13;
&#13;
    presenter.areValuesInEquation = function (userValuesInGaps, correctGapsValues) {&#13;
        correctGapsValues = [].concat(correctGapsValues);&#13;
        var len = userValuesInGaps.length;&#13;
&#13;
        for (var i = 0; i &lt; len; i++) {&#13;
            if (correctGapsValues.indexOf(userValuesInGaps[i]) === -1) {&#13;
                return false;&#13;
            } else {&#13;
                var index = correctGapsValues.indexOf(userValuesInGaps[i]);&#13;
                correctGapsValues.splice(index, 1);&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isEquationCorrect = function (validatedScore) {&#13;
        var isCorrect = presenter.isEquationCorrectWrapper(validatedScore);&#13;
        var valuesAreInEquation = presenter.areValuesInEquationWrapper();&#13;
&#13;
        return (isCorrect &amp;&amp; valuesAreInEquation);&#13;
    };&#13;
&#13;
    function getReconvertedUserExpression () {&#13;
        return presenter.reconvertExpression(getUserExpression().split(' '));&#13;
    }&#13;
&#13;
    function getConvertedUserGapsValues () {&#13;
        var gapsValues = presenter.reconvertExpression(presenter.gapsContainer.getValues());&#13;
&#13;
        return gapsValues.split(' ');&#13;
    }&#13;
&#13;
    presenter.areValuesInEquationWrapper = function () {&#13;
        return presenter.areValuesInEquation(getConvertedUserGapsValues(), presenter.configuration.gapsValues);&#13;
    };&#13;
&#13;
&#13;
    presenter.isEquationCorrectWrapper = function (validatedScore) {&#13;
        return validatedScore.isSameResultOnBothSides&#13;
            &amp;&amp; validatedScore.leftEvaluated == presenter.configuration.leftValue&#13;
            &amp;&amp; validatedScore.rightEvaluated == presenter.configuration.rightValue;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        const wasShowAnswersActive = presenter.configuration.isShowAnswersActive;&#13;
        if (presenter.configuration.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        const errorCount = _getErrorCount();&#13;
        wasShowAnswersActive &amp;&amp; presenter.showAnswers();&#13;
        return errorCount;&#13;
    };&#13;
&#13;
    function _getErrorCount () {&#13;
        if (presenter.cantCheck()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var validated = presenter.validateScore();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if(!presenter.gapsContainer.areAllGapsFilled()){&#13;
                return 0;&#13;
            }&#13;
&#13;
            return equationGetErrorCount(validated);&#13;
        } else {&#13;
            return presenter.gapsContainer.getNonEmptyGapsNumber() - validated.validGapsCount;&#13;
        }&#13;
    }&#13;
&#13;
    function equationGetErrorCount (validated) {&#13;
        if (presenter.isEquationCorrect(validated) ) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return 1;&#13;
    }&#13;
&#13;
    function filterInputs(testFunction) {&#13;
        return $.grep(presenter.$view.find('input'), function(element) { return testFunction(element) });&#13;
    }&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.configuration.isNotActivity) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return presenter.gapsContainer.getMaxScore();&#13;
    };&#13;
&#13;
    function getUserExpression() {&#13;
        function getValueFromChild($gap) {&#13;
            var gapID = $gap.attr("id");&#13;
            var gapValue = presenter.gapsContainer.getValueByID(gapID);&#13;
&#13;
            return value = gapValue;&#13;
        }&#13;
&#13;
        var result = '';&#13;
&#13;
        $.each(presenter.$view.find('.basic-math-gaps-container').children(), function() {&#13;
            var elements = [$(this)];&#13;
&#13;
            if (elements[0].hasClass('fraction-container')) {&#13;
                var container = elements[0];&#13;
                elements = [];&#13;
                elements.push(container.find('.numerator').children());&#13;
                elements.push($('&lt;span class="element"&gt;/&lt;/span&gt;'));&#13;
                elements.push(container.find('.denominator').children());&#13;
            }&#13;
&#13;
            $.each(elements, function() {&#13;
                var $element = $(this),&#13;
                    value = '';&#13;
&#13;
                if ($element.is('input')) {&#13;
                    var gapID = $element.attr("id");&#13;
                    var gapValue = presenter.gapsContainer.getValueByID(gapID);&#13;
                    value = gapValue + ' ';&#13;
                } else if ($element.hasClass("draggableContainer")) {&#13;
                    var child = $element.find(":first-child");&#13;
                    value = getValueFromChild(child) + ' ';&#13;
                } else {&#13;
                    value = $element.text() + ' ';&#13;
                }&#13;
                result += convertDecimalSeparator(value, presenter.configuration.decimalSeparator, '.');&#13;
            });&#13;
        });&#13;
&#13;
        return result.trim();&#13;
    }&#13;
&#13;
    presenter.reconvertExpression = function(splittedUserExpression) {&#13;
        var convertedSign,&#13;
            reconvertedExpression = '';&#13;
&#13;
        $.each(splittedUserExpression, function(i) {&#13;
            convertedSign = presenter.reconvertSign(presenter.configuration.Signs, splittedUserExpression[i]);&#13;
            reconvertedExpression += convertedSign + " ";&#13;
        });&#13;
&#13;
        return reconvertedExpression.trim();&#13;
    };&#13;
&#13;
    presenter.getValidGapsCount = function (valuesArray) {&#13;
        var isValid = true;&#13;
        var validGapsCount = 0;&#13;
&#13;
        valuesArray.forEach(function (value, index) {&#13;
            if (presenter.configuration.gapsValues[index] != presenter.reconvertSign(presenter.configuration.Signs, value)) {&#13;
                isValid = false;&#13;
            } else if (value.length &gt; 0) {&#13;
                validGapsCount++;&#13;
            }&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: isValid,&#13;
            validGapsCount: validGapsCount&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getStringReconvertedUserExpression = function () {&#13;
        return getReconvertedUserExpression().split(' ').reduce(function (result, element) {&#13;
            return result + element;&#13;
        }, '');&#13;
    };&#13;
&#13;
    presenter.validateScore = function () {&#13;
        var validatedGapsCount = presenter.getValidGapsCount(presenter.gapsContainer.getValues());&#13;
&#13;
        var reconvertedExpression = presenter.getStringReconvertedUserExpression();&#13;
&#13;
        var splitted = reconvertedExpression.split('=');&#13;
&#13;
        if (presenter.configuration.isEquation &amp;&amp; splitted.length &gt; 1 &amp;&amp; filterInputs(function(element) { return $(element).val().length == 0; }).length == 0) {&#13;
            try {&#13;
                var userExpressionLeft = splitted[0];&#13;
                var userExpressionRight = splitted[1];&#13;
                var leftEvaluated = eval(userExpressionLeft).toFixed(2);&#13;
                var rightEvaluated = eval(userExpressionRight).toFixed(2);&#13;
                var isSameResultOnBothSides = leftEvaluated == rightEvaluated;&#13;
            } catch (_) {&#13;
                leftEvaluated = "";&#13;
                rightEvaluated = "";&#13;
                isSameResultOnBothSides = false;&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            'isValid' : validatedGapsCount.isValid,&#13;
            'isSameResultOnBothSides' : isSameResultOnBothSides,&#13;
            'leftEvaluated' : leftEvaluated,&#13;
            'rightEvaluated' : rightEvaluated,&#13;
            'validGapsCount' : validatedGapsCount.validGapsCount&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        const wasShowAnswersActive = presenter.configuration.isShowAnswersActive;&#13;
        if (presenter.configuration.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        const score = _getScore();&#13;
        wasShowAnswersActive &amp;&amp; presenter.showAnswers();&#13;
        return score;&#13;
    };&#13;
&#13;
    function _getScore() {&#13;
        if (presenter.cantCheck()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        var validated = presenter.validateScore();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if(!presenter.gapsContainer.areAllGapsFilled()){&#13;
                return 0;&#13;
            }&#13;
&#13;
            if (presenter.isEquationCorrect(validated) ) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            return 0;&#13;
        } else {&#13;
            return validated.validGapsCount;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.cantCheck = function () {&#13;
        if (presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || presenter.gapsContainer.areAllGapsEmpty()) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        const wasShowAnswersActive = presenter.configuration.isShowAnswersActive;&#13;
        if (presenter.configuration.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var state = {&#13;
            'values' : presenter.gapsContainer.getValues(),&#13;
            'sources': presenter.gapsContainer.getSources(),&#13;
            'isVisible' : presenter.configuration.isVisible,&#13;
            'isDisabled' : presenter.configuration.isDisabled,&#13;
            'droppedElements' : presenter.gapsContainer.getDroppedElements()&#13;
        };&#13;
&#13;
        wasShowAnswersActive &amp;&amp; presenter.showAnswers();&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (state) {&#13;
        if (state.sources == undefined) {&#13;
             return presenter.upgradeSources(state);&#13;
        }&#13;
&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.upgradeSources = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        upgradedState["sources"] = upgradedState.values.map(function () {&#13;
            return "";&#13;
        });&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.setDisabledInSetState = function (isDisabled) {&#13;
        if (presenter.configuration.isDisabledByDefault &amp;&amp; !isDisabled) {&#13;
            presenter.gapsContainer.unlock();&#13;
        } else if (!presenter.configuration.isDisabledByDefault &amp;&amp; isDisabled) {&#13;
            presenter.gapsContainer.lock();&#13;
        } else if (presenter.configuration.isDisabledByDefault &amp;&amp; isDisabled) {&#13;
            presenter.gapsContainer.lock();&#13;
        }&#13;
&#13;
        presenter.configuration.isDisabled = isDisabled;&#13;
    };&#13;
&#13;
    presenter.upgradeDroppedElements = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        upgradedState["droppedElements"] = upgradedState.values.map(function () {&#13;
            return "";&#13;
        });&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.upgradeStateDroppedElements = function (state) {&#13;
        if(state.droppedElements == undefined){&#13;
            return presenter.upgradeDroppedElements(state);&#13;
        }&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString){&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        var upgradedState = presenter.upgradeState(state);&#13;
        upgradedState = presenter.upgradeStateDroppedElements(upgradedState);&#13;
&#13;
        presenter.gapsContainer.setState(upgradedState.values, upgradedState.sources, upgradedState.droppedElements);&#13;
&#13;
        presenter.configuration.isVisible = upgradedState.isVisible;&#13;
        presenter.setDisabledInSetState(upgradedState.isDisabled);&#13;
&#13;
        presenter.setVisibility(upgradedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
	if(!presenter.configuration.isActivity || presenter.gapsContainer.areAllGapsFilled()){&#13;
		return true;&#13;
	} else {&#13;
		return false;&#13;
	}&#13;
    };&#13;
    &#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.find('.basic-math-gaps-wrapper').css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.configuration.isDisabled = true;&#13;
&#13;
        presenter.gapsContainer.lock();&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.gapsContainer.unlock();&#13;
            presenter.configuration.isDisabled = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        var score = presenter.getScore();&#13;
        return score == presenter.getMaxScore() &amp;&amp; score != 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable' : presenter.disable,&#13;
            'enable' : presenter.enable,&#13;
            'isAllOK' : presenter.isAllOK,&#13;
            'getView' : presenter.getView,&#13;
	    'isAttempted' : presenter.isAttempted&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getView = function() {&#13;
        return this.$view;&#13;
    };&#13;
&#13;
    presenter.createEventData = function (item, value, score) {&#13;
        if (presenter.configuration.isEquation) {&#13;
            score = presenter.isAllOK() ? 1 : 0;&#13;
            value = '';&#13;
            item = 'all';&#13;
        } else {&#13;
            score = score ? 1 : 0;&#13;
            value.toString();&#13;
            item = (item + 1).toString();&#13;
        }&#13;
&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item,&#13;
            'value': value,&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(item, value, score) {&#13;
        var eventData = presenter.createEventData(item, value, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
        if (presenter.isAllOK() &amp;&amp; !presenter.configuration.isEquation) presenter.sendAllOKEvent();&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "ItemSelected") {&#13;
            presenter.lastDraggedItem = eventData;&#13;
        }&#13;
&#13;
        if (eventName == "ItemConsumed") {&#13;
            presenter.lastDraggedItem = {};&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.isErrorsMode = false;&#13;
            presenter.gapsContainer.showAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.configuration.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.gapsContainer.hideAnswers();&#13;
        presenter.isErrorsMode = false;&#13;
    };&#13;
&#13;
    presenter.parseItemValue = function (item) {&#13;
    	return item.replace(/\*\*(.*?)\*\*/g, "&lt;b&gt;$1&lt;/b&gt;").replace(/__(.*?)__/g, "&lt;i&gt;$1&lt;/i&gt;").replace(/__(.*?)_/g, "&lt;i&gt;$1_&lt;/i&gt;").replace(/\*\*(.*?)\*/g, "&lt;b&gt;$1*&lt;/b&gt;").replace(/_(.*?)__/g, "_$1").replace(/\*(.*?)\*\*/g, "*$1");&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject = function () {&#13;
        this._gaps = {};&#13;
        this._gapsOrderArray = [];&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getGapIndexByID = function (htmlID) {&#13;
        return this._gapsOrderArray.indexOf(htmlID);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getValues = function () {&#13;
        return this._gapsOrderArray.map(function (element) {&#13;
            return this._gaps[element].getValue();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getMaxScore = function () {&#13;
        return this._gapsOrderArray.length;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getSources = function () {&#13;
        return this._gapsOrderArray.map(function (gapID){&#13;
            return this._gaps[gapID].getSource();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getDroppedElements = function () {&#13;
        return this._gapsOrderArray.map(function (gapID){&#13;
            return this._gaps[gapID].getDroppedElement();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.areAllGapsEmpty = function () {&#13;
        var reducedValue = this.getValues().reduce(function (previousElement, currentElement) {&#13;
            return previousElement + currentElement;&#13;
        });&#13;
&#13;
        return (reducedValue === "");&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.setState = function (valuesArray, sourcesArray, droppedElementsArray) {&#13;
        this._gapsOrderArray.forEach(function (gapID, index) {&#13;
            if (presenter.configuration.isDraggable) {&#13;
                this._gaps[gapID].setState(valuesArray[index], sourcesArray[index], droppedElementsArray[index]);&#13;
            } else {&#13;
                this._gaps[gapID].value = valuesArray[index];&#13;
                this._gaps[gapID].source = sourcesArray[index];&#13;
                this._gaps[gapID].$view.val(valuesArray[index]);&#13;
            }&#13;
&#13;
            if (valuesArray[index] == "") {&#13;
                this._gaps[gapID].destroyDraggableProperty();&#13;
            }else{&#13;
                this.addGapFilled(gapID);&#13;
            }&#13;
&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.addGapFilled = function (gapID){&#13;
        this._gaps[gapID].removeCssClass("gapEmpty");&#13;
        this._gaps[gapID].addCssClass("gapFilled");&#13;
        this._gaps[gapID].notifyEdit();&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.showAnswers = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].showAnswers();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.hideAnswers = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].hideAnswers();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.canSendEvent = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return this.getNonEmptyGapsNumber() == this._gapsOrderArray.length;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.check = function (isSetShow) {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].check(isSetShow);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.lock = function () {&#13;
        this._gapsOrderArray.forEach(function (element) {&#13;
            this._gaps[element].lock();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.unlock = function () {&#13;
        this._gapsOrderArray.forEach(function (element) {&#13;
            this._gaps[element].unlock();&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.reset = function () {&#13;
        this._gapsOrderArray.forEach(function (gapID) {&#13;
            this._gaps[gapID].reset();&#13;
            this._gaps[gapID].removeCssClass("gapFilled");&#13;
            this._gaps[gapID].removeCssClass("gapEmpty");&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getNonEmptyGapsNumber = function () {&#13;
        return this.getValues().filter(function (value) {&#13;
            return value.length &gt; 0;&#13;
        }).length;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.areAllGapsFilled = function () {&#13;
        return (this.getNonEmptyGapsNumber() == this._gapsOrderArray.length);&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.addGap = function (gap) {&#13;
        var gapID = gap.getObjectID();&#13;
&#13;
        this._gapsOrderArray.push(gapID);&#13;
&#13;
        this._gaps[gapID] = gap;&#13;
    };&#13;
&#13;
    presenter.GapsContainerObject.prototype.getValueByID = function (gapID) {&#13;
        return this._gaps[gapID].getValue();&#13;
    };&#13;
&#13;
    presenter.getCSSConfiguration = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return {&#13;
                showAnswers: 'bmg_show-answers'&#13;
            };&#13;
        } else {&#13;
            return {&#13;
                correct: "correct",&#13;
                wrong: "wrong",&#13;
                showAnswers: 'bmg_show-answers'&#13;
            };&#13;
        }&#13;
    }&#13;
&#13;
    presenter.GapUtils = function (configuration) {&#13;
        DraggableDroppableObject.call(this, configuration, presenter.getCSSConfiguration());&#13;
&#13;
        this.valueChangeObserver = presenter.valueChangeObserver;&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype = Object.create(DraggableDroppableObject.prototype);&#13;
    presenter.GapUtils.constructor = presenter.GapUtils;&#13;
&#13;
    presenter.GapUtils.prototype.addClassToContainer = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').addClass("basic_math_gaps_check");&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.removeClassFromContainer = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').removeClass("basic_math_gaps_check");&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.removeClassInEquation = function () {&#13;
        presenter.$view.find('.basic-math-gaps-container').removeClass('correct wrong');&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.getClassName = function () {&#13;
        if (presenter.isEquationCorrect(presenter.validateScore())) {&#13;
            return "correct";&#13;
        } else {&#13;
            return "wrong";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.addClassInEquation = function () {&#13;
        if (presenter.gapsContainer.areAllGapsFilled()) {&#13;
            presenter.$view.find('.basic-math-gaps-container').addClass(this.getClassName());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.shouldNotAddCssClassInEquation = function (valueFunction) {&#13;
        return presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || presenter.gapsContainer.areAllGapsEmpty();&#13;
    };&#13;
    &#13;
    presenter.GapUtils.prototype.shouldNotAddCssClass = function () {&#13;
        return presenter.configuration.isNotActivity&#13;
        || presenter.configuration.isDisabled&#13;
        || this.isEmpty();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCss = function (containerCssFunction, equationFunction, notEquationFunction) {&#13;
        containerCssFunction();&#13;
&#13;
        if (presenter.configuration.isEquation) {&#13;
            if (this.shouldNotAddCssClassInEquation()) {&#13;
                return;&#13;
            }&#13;
            equationFunction.call(this);&#13;
        } else {&#13;
            if (this.shouldNotAddCssClass()) {&#13;
                return;&#13;
            }&#13;
            notEquationFunction.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isEmpty = function () {&#13;
        return this.getValue() == "";&#13;
    }&#13;
&#13;
    presenter.GapUtils.prototype.onBlock = function () {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            this.lock();&#13;
            if(this.isEmpty()){&#13;
                this.addCssClass("gapEmpty");&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnblock = function () {&#13;
        if (!presenter.configuration.isDisabled) {&#13;
            this.unlock();&#13;
            this.removeCssClass("gapEmpty");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onShowAnswers = function () {&#13;
        presenter.configuration.isShowAnswersActive = true;&#13;
&#13;
        if (presenter.configuration.isDisabled) {&#13;
            this.setViewValue(this.showAnswersValue);&#13;
        } else {&#13;
            DraggableDroppableObject.prototype.onShowAnswers.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onHideAnswers = function () {&#13;
        presenter.configuration.isShowAnswersActive = false;&#13;
&#13;
        if (presenter.configuration.isDisabled) {&#13;
            this.setViewValue(this.value);&#13;
        } else {&#13;
            DraggableDroppableObject.prototype.onHideAnswers.call(this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onReset = function () {&#13;
        DraggableDroppableObject.prototype.onReset.call(this);&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault &amp;&amp; !presenter.configuration.isDisabled) {&#13;
            this.lock();&#13;
        } else if (!presenter.configuration.isDisabledByDefault &amp;&amp; presenter.configuration.isDisabled) {&#13;
            this.unlock();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onCorrect = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnCorrect = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onWrong = function () {&#13;
        this.onBlock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.onUnWrong = function () {&#13;
        this.onUnblock();&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnCorrect = function () {&#13;
        this.setCss(this.addClassToContainer, this.addClassInEquation, DraggableDroppableObject.prototype.setCssOnCorrect);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnCorrect = function () {&#13;
        this.setCss(this.removeClassFromContainer, this.removeClassInEquation, DraggableDroppableObject.prototype.setCssOnUnCorrect);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnWrong = function () {&#13;
        this.setCss(this.addClassToContainer, this.addClassInEquation, DraggableDroppableObject.prototype.setCssOnWrong);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.setCssOnUnWrong = function () {&#13;
        this.setCss(this.removeClassFromContainer, this.removeClassInEquation, DraggableDroppableObject.prototype.setCssOnUnWrong);&#13;
    };&#13;
&#13;
    presenter.GapUtils.prototype.isCorrect = function () {&#13;
        if (presenter.configuration.isEquation) {&#13;
            return presenter.isEquationCorrect(presenter.validateScore());&#13;
        } else {&#13;
            return DraggableDroppableObject.prototype.isCorrect.call(this);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.EditableInputGap = function (htmlID, correctAnswer) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            createView: presenter.EditableInputGap.prototype.createView,&#13;
            connectEvents: presenter.EditableInputGap.prototype.connectEvents,&#13;
            setViewValue: presenter.EditableInputGap.prototype.setViewValue&#13;
        };&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.EditableInputGap.constructor = presenter.EditableInputGap;&#13;
&#13;
    presenter.EditableInputGap.prototype.connectEvents = function () {&#13;
        this.$view.on("input", this.onEdit.bind(this));&#13;
        this.$view.on('keyup', this.onKeyUp.bind(this));&#13;
        this.$view.on("keypress", this.onKeyPress.bind(this));&#13;
        this.$view.off('change').bind('change', this.onEdit.bind(this));&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.createView = function () {&#13;
        var inputType = "text";&#13;
        if (presenter.configuration.useNumericKeyboard) {&#13;
            inputType = "tel";&#13;
        }&#13;
        var $inputGap = $('&lt;input type="' + inputType + '" value="" id="' + this.objectID + '" /&gt;');&#13;
        $inputGap.css({&#13;
            width: presenter.configuration.gapWidth + "px"&#13;
        });&#13;
        if ((presenter.configuration.useNumericKeyboard)) {&#13;
            $inputGap.attr("step", "any");&#13;
        }&#13;
&#13;
        return $inputGap;&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onKeyUp = function(event) {&#13;
        event.stopPropagation();&#13;
        if (presenter.configuration.useNumericKeyboard) {&#13;
            var newText = String(event.target.value);&#13;
            var pattern = StringUtils.getNumericPattern();&#13;
            if (newText.length &gt; 0 &amp;&amp; !newText.match(pattern)) {&#13;
                var patternWithoutLastCharacter = pattern.slice(0, -1);&#13;
                var regExp = RegExp(patternWithoutLastCharacter);&#13;
                var match = regExp.exec(newText);&#13;
&#13;
                if (match) {&#13;
                    this.setViewValue(match[0]);&#13;
                } else {&#13;
                    this.setViewValue("");&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onKeyPress = function(event) {&#13;
        event.stopPropagation();&#13;
        if (presenter.configuration.useNumericKeyboard) {&#13;
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);&#13;
            var selectionStartIdx = event.target.selectionStart;&#13;
            var selectionEndIdx = event.target.selectionEnd;&#13;
            var oldText = String(event.target.value);&#13;
            var newText = oldText.substring(0, selectionStartIdx)&#13;
                            + key&#13;
                            + oldText.substring(selectionEndIdx);&#13;
            var pattern = StringUtils.getNumericPattern();&#13;
            if (!newText.match(pattern)) {&#13;
                event.preventDefault();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onEdit = function (event) {&#13;
        this.notifyEdit();&#13;
        this.value = this.getValue();&#13;
&#13;
        if(presenter.configuration.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.userActionsEventsEnabled) {&#13;
            presenter.$view.find("#" + this.getObjectID()).trigger("BMG:send_event");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.lock = function () {&#13;
        this.$view.attr('disabled','disabled');&#13;
        this.$view.addClass('disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.unlock = function () {&#13;
        this.$view.removeAttr('disabled');&#13;
        this.$view.removeClass('disabled');&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getValue = function () {&#13;
        return this.$view.val().trim();&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.setViewValue = function (value) {&#13;
        return this.$view.val(value);&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.getSource = function () {&#13;
        return "";&#13;
    };&#13;
&#13;
    presenter.EditableInputGap.prototype.onShowAnswers = function () {&#13;
        this.value = this.getValue();&#13;
        presenter.GapUtils.prototype.onShowAnswers.call(this);&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap = function (htmlID, correctAnswer) {&#13;
        var configuration = {&#13;
            addonID: presenter.configuration.addonID,&#13;
            objectID: htmlID,&#13;
            eventBus: presenter.eventBus,&#13;
            getSelectedItem: presenter.getSelectedItem,&#13;
&#13;
            showAnswersValue: correctAnswer,&#13;
&#13;
            fillGap: presenter.DraggableDroppableGap.prototype.fillGap,&#13;
            makeGapEmpty: presenter.DraggableDroppableGap.prototype.makeGapEmpty&#13;
        };&#13;
&#13;
&#13;
        presenter.GapUtils.call(this, configuration);&#13;
&#13;
        this.$view.css({&#13;
            width: presenter.configuration.gapWidth + "px",&#13;
            display: 'inline-block'&#13;
        });&#13;
&#13;
        this.addCssClass("draggable-gap");&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype = Object.create(presenter.GapUtils.prototype);&#13;
    presenter.DraggableDroppableGap.parent = presenter.GapUtils.prototype;&#13;
    presenter.DraggableDroppableGap.constructor = presenter.DraggableDroppableGap;&#13;
&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.fillGap = function (selectedItem) {&#13;
        DraggableDroppableObject.prototype.fillGap.call(this, selectedItem);&#13;
        this.notify();&#13;
        this.addCssClass("gapFilled");&#13;
        this.removeCssClass("gapEmpty")&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.makeGapEmpty = function () {&#13;
        DraggableDroppableObject.prototype.makeGapEmpty.call(this);&#13;
        this.notify();&#13;
        this.removeCssClass("gapFilled");&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.notify = function () {&#13;
        this.valueChangeObserver.notify(this.getValueChangeEventData());&#13;
    };&#13;
&#13;
    presenter.DraggableDroppableGap.prototype.getValueChangeEventData = function () {&#13;
        return {&#13;
            htmlID: this.getObjectID(),&#13;
            value: this.getValue(),&#13;
            isCorrect: this.getValue() == this.showAnswersValue&#13;
        };&#13;
    };&#13;
&#13;
    presenter.ElementGapObject = function (value) {&#13;
        this._value = value;&#13;
        this.$view = this._createView();&#13;
    };&#13;
&#13;
&#13;
    presenter.ElementGapObject.prototype._createView = function () {&#13;
        return $('&lt;span class="element"&gt;' + this._value + '&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.ElementGapObject.prototype.getView = function () {&#13;
        return $('&lt;span class="element"&gt;' + this._value + '&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.getSelectedItem = function () {&#13;
        var item = presenter.lastDraggedItem;&#13;
&#13;
        presenter.onEventReceived("ItemSelected", {});&#13;
&#13;
        return item;&#13;
    };&#13;
&#13;
&#13;
    presenter.FractionGapObject = function (id) {&#13;
        this._id = id;&#13;
        this._$mainContainer;&#13;
        this._$numeratorContainer;&#13;
        this._$denominatorContainer;&#13;
        this._numerator;&#13;
        this._denominator;&#13;
        this._numeratorValue;&#13;
        this._denominatorValue;&#13;
&#13;
        this._createContainers();&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.constructor = presenter.FractionGapObject;&#13;
&#13;
    presenter.FractionGapObject.prototype._createContainers = function () {&#13;
        this._$mainContainer = $('&lt;span class="fraction-container"&gt;&lt;/span&gt;');&#13;
        this._$numeratorContainer = $('&lt;span class="numerator"&gt;&lt;/span&gt;');&#13;
        this._$denominatorContainer = $('&lt;span class="denominator"&gt;&lt;/span&gt;');&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createElementNumerator = function (value) {&#13;
        this._numerator = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, value);&#13;
&#13;
        this._numeratorValue = value;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createElementDenominator = function (value) {&#13;
        this._denominator = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, value);&#13;
&#13;
        this._denominatorValue = value;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.setDisplayInlineBlock = function (gap) {&#13;
        gap.getView().css({&#13;
            display: "inline-block"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createGapNumerator = function (type, data) {&#13;
         this._numerator = presenter.widgetsFactory.produce(type, this._getNominatorProductionData(data));&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.createGapDenominator = function (type, data) {&#13;
         this._denominator = presenter.widgetsFactory.produce(type, this._getDenominatorProductionData(data));&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype._getNominatorProductionData = function (data) {&#13;
        return {&#13;
            id: this._id + "-numerator",&#13;
            width: presenter.configuration.gapWidth,&#13;
            correctAnswer: data.correctAnswerNumerator&#13;
        };&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype._getDenominatorProductionData = function (data) {&#13;
        return {&#13;
            id: this._id + "-denominator",&#13;
            width: presenter.configuration.gapWidth,&#13;
            correctAnswer: data.correctAnswerDenominator&#13;
        };&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getView = function () {&#13;
        return this._$mainContainer;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.joinNumeratorDenominator = function () {&#13;
        this._$numeratorContainer.append(this._numerator.getView());&#13;
        this._$denominatorContainer.append(this._denominator.getView());&#13;
&#13;
        this._$mainContainer.append(this._$numeratorContainer).append(this._$denominatorContainer);&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getNumerator = function () {&#13;
        return this._numerator;&#13;
    };&#13;
&#13;
    presenter.FractionGapObject.prototype.getDenominator = function () {&#13;
        return this._denominator;&#13;
    };&#13;
&#13;
    presenter.ObjectFactory = function () {&#13;
        this.gapsFactory = new presenter.GapsFactoryObject();&#13;
        this.gapsContainerFactory = new presenter.GapsContainerFactoryObject();&#13;
    };&#13;
&#13;
    presenter.ObjectFactory.PRODUCTION_TYPE = {&#13;
        EDITABLE_INPUT_GAP: 0,&#13;
        FRACTION_GAP: 1,&#13;
        ELEMENT_GAP: 2,&#13;
        DRAGGABLE_MATH_GAP: 3,&#13;
        GAP_CONTAINER: 4&#13;
    };&#13;
&#13;
    presenter.ObjectFactory.prototype.produce = function (type, data) {&#13;
        var producedItem;&#13;
&#13;
        switch (type) {&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP:&#13;
                producedItem = this.gapsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.GAP_CONTAINER:&#13;
                producedItem = this.gapsContainerFactory.produce(data);&#13;
                break;&#13;
        }&#13;
&#13;
        return producedItem;&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject = function () {};&#13;
&#13;
    presenter.FractionBuilderObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.FractionBuilderObject.prototype.constructor = presenter.FractionBuilderObject;&#13;
&#13;
    presenter.FractionBuilderObject.prototype.produce = function (data) {&#13;
        var fraction = this._produceFractionObject(data);&#13;
&#13;
        this._setNumerator(fraction, data);&#13;
        this._setDenominator(fraction, data);&#13;
&#13;
&#13;
        fraction.setDisplayInlineBlock(fraction.getNumerator());&#13;
        fraction.setDisplayInlineBlock(fraction.getDenominator());&#13;
&#13;
        fraction.joinNumeratorDenominator();&#13;
&#13;
        return fraction;&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._produceFractionObject = function (data) {&#13;
        return new presenter.FractionGapObject(data.fractionID);&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._setNumerator = function (fraction, data) {&#13;
        if (data.fraction.numerator.isGap) {&#13;
            if (presenter.configuration.isDraggable) {&#13;
                fraction.createGapNumerator(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
            } else {&#13;
                fraction.createGapNumerator(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);}&#13;
&#13;
        } else {&#13;
            fraction.createElementNumerator(data.fraction.numerator.parsed);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.FractionBuilderObject.prototype._setDenominator = function (fraction, data) {&#13;
        if (data.fraction.denominator.isGap) {&#13;
            if (presenter.configuration.isDraggable) {&#13;
                fraction.createGapDenominator(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
            } else {&#13;
                fraction.createGapDenominator(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
            }&#13;
        } else {&#13;
            fraction.createElementDenominator(data.fraction.denominator.parsed);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.GapsFactoryObject = function () {&#13;
        this._fractionBuilder = new presenter.FractionBuilderObject();&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.GapsFactoryObject.prototype.constructor = presenter.GapsFactoryObject;&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produce = function (type, data) {&#13;
        switch (type) {&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                return this.produceEditableInputGap(data);&#13;
                break;&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP:&#13;
                return this.produceDraggableMathGap(data);&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                return this.produceElementGap(data);&#13;
            case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                return this.produceFractionGap(data);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceEditableInputGap = function (data) {&#13;
        return new presenter.EditableInputGap(data.id, data.correctAnswer);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceDraggableMathGap = function (data) {&#13;
        return new presenter.DraggableDroppableGap(data.id, data.correctAnswer);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceElementGap = function (value) {&#13;
        return new presenter.ElementGapObject(value);&#13;
    };&#13;
&#13;
    presenter.GapsFactoryObject.prototype.produceFractionGap = function (data) {&#13;
        return this._fractionBuilder.produce(data);&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject = function () {};&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype = Object.create(presenter.ObjectFactory.prototype);&#13;
    presenter.GapsContainerFactoryObject.prototype.constructor = presenter.GapsContainerFactoryObject;&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype.getFractionIndexIncrement = function (dataElement) {&#13;
        var increment = 0;&#13;
&#13;
        if (dataElement.fraction.denominator.isGap) {&#13;
            increment++;&#13;
        }&#13;
&#13;
        if (dataElement.fraction.numerator.isGap) {&#13;
            increment++;&#13;
        }&#13;
&#13;
        return increment;&#13;
    };&#13;
&#13;
    function wrapItemInContainer(item) {&#13;
        var $container = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $container.css({&#13;
            height: "50px",&#13;
            'text-align': 'center',&#13;
            float: 'left',&#13;
            display: 'inline-block'&#13;
        });&#13;
        $container.addClass("draggableContainer");&#13;
        $container.append(item.getView());&#13;
&#13;
        return $container&#13;
    }&#13;
&#13;
    function setFractionCssToMainContainer($mainContainer) {&#13;
        $mainContainer.addClass('hasFractions');&#13;
        $mainContainer.find(".draggableContainer").css({&#13;
            'margin-top': "15px"&#13;
        });&#13;
    }&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype.produce = function (data) {&#13;
        var container = presenter.$view.find('.basic-math-gaps-container');&#13;
        var hasFractions = false;&#13;
&#13;
&#13;
        var dataIndex;&#13;
        var elementIndex;&#13;
        var draggable = false;&#13;
        for(dataIndex = 0, elementIndex = 0; dataIndex &lt; data.length; dataIndex += 1) {&#13;
            var dataElement = data[dataIndex];&#13;
            var item;&#13;
&#13;
            switch (dataElement.gapType) {&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP:&#13;
                    item = this._produceGap(this._getGapData(elementIndex));&#13;
                    elementIndex++;&#13;
                    presenter.gapsContainer.addGap(item);&#13;
                    draggable = true;&#13;
                    break;&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP:&#13;
                    item = this._produceElementGap(dataElement);&#13;
                    break;&#13;
                case presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP:&#13;
                    item = this._produceFractionGap(dataElement, this._getElementId(elementIndex), elementIndex);&#13;
                    elementIndex += this.getFractionIndexIncrement(dataElement);&#13;
                    this._addFractionGap(item, dataElement);&#13;
                    hasFractions = true;&#13;
                    break;&#13;
            }&#13;
&#13;
&#13;
            if (draggable) {&#13;
                var $wrappedItem = wrapItemInContainer(item);&#13;
                container.append($wrappedItem);&#13;
                draggable = false;&#13;
            } else {&#13;
                container.append(item.getView());&#13;
            }&#13;
&#13;
            if (dataElement.isHiddenAdditionAfter) {&#13;
                container.append($('&lt;span class="hidden-addition"&gt;+&lt;/span&gt;'));&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.isDisabledByDefault) {&#13;
            presenter.gapsContainer.lock();&#13;
        }&#13;
&#13;
        if (hasFractions) {&#13;
            setFractionCssToMainContainer(container);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._addFractionGap = function (fractionGap, gapDefinition) {&#13;
&#13;
        if (gapDefinition.fraction.numerator.isGap) {&#13;
            presenter.gapsContainer.addGap(fractionGap.getNumerator());&#13;
        }&#13;
&#13;
        if (gapDefinition.fraction.denominator.isGap) {&#13;
            presenter.gapsContainer.addGap(fractionGap.getDenominator());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceFractionGap = function (data, id, elementIndex) {&#13;
        data.fractionID = id;&#13;
&#13;
        if (data.fraction.numerator.isGap) {&#13;
            data["correctAnswerNumerator"] = presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[elementIndex]);&#13;
            elementIndex++;&#13;
        }&#13;
&#13;
        if (data.fraction.denominator.isGap) {&#13;
            data["correctAnswerDenominator"] = presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[elementIndex]);&#13;
        }&#13;
&#13;
        return presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.FRACTION_GAP, data);&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceElementGap = function (data) {&#13;
        return presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.ELEMENT_GAP, data.originalForm);&#13;
    };&#13;
&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._produceGap = function (data) {&#13;
        var gap;&#13;
&#13;
        if (presenter.configuration.isDraggable) {&#13;
            gap = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.DRAGGABLE_MATH_GAP, data);&#13;
        } else {&#13;
            gap = presenter.widgetsFactory.produce(presenter.ObjectFactory.PRODUCTION_TYPE.EDITABLE_INPUT_GAP, data);&#13;
        }&#13;
&#13;
        return gap;&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._getGapData = function (index) {&#13;
        return {&#13;
            id: this._getElementId(index),&#13;
            width: presenter.configuration.gapWidth,&#13;
            value: "",&#13;
            source: "",&#13;
            correctAnswer: presenter.convertSign(presenter.configuration.Signs, presenter.configuration.gapsValues[index])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.GapsContainerFactoryObject.prototype._getElementId = function (index) {&#13;
        return (presenter.configuration.addonID + "-" + index);&#13;
    };&#13;
&#13;
    presenter.ValueChangeObserver = function () {};&#13;
&#13;
    presenter.ValueChangeObserver.prototype.notify = function (data) {&#13;
        var eventData = presenter.createEventData(presenter.gapsContainer.getGapIndexByID(data.htmlID), data.value, data.isCorrect);&#13;
&#13;
        if (!presenter.gapsContainer.canSendEvent()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.isAllOK() &amp;&amp; !presenter.configuration.isEquation) presenter.sendAllOKEvent();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonBasic_Math_Gaps_create.__supported_player_options__ = {&#13;
    interfaceVersion: 2&#13;
};&#13;
</presenter></addon>