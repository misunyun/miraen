<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Rating" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Title Text" nameLabel="Page_Rating_property_title_text" type="string"/>
		<property name="Comment Text" nameLabel="Page_Rating_property_comment_text" type="string"/>
		<property name="Rates" nameLabel="Page_Rating_property_rates" type="list">
            <property name="Deselected" nameLabel="Page_Rating_property_deselected" type="image"/>
		    <property name="Selected" nameLabel="Page_Rating_property_selected" type="image"/>
		</property>
        <property isLocalized="true" name="Close button visible" nameLabel="Page_Rating_property_close_button_visible" type="boolean"/>
	</model>
<css>.page-rating-wrapper {&#13;
	border-style: solid;&#13;
	border-color: black;&#13;
    background-color: #ffffff;&#13;
	height: 100%;&#13;
	width: 100%;&#13;
}&#13;
&#13;
.page-rating-comment &gt; [data-name="textarea"] {&#13;
    width: 65%;&#13;
	border: 2px solid #bfbab5;&#13;
	border-radius: 10px;&#13;
    padding: 3px;&#13;
	height: 60px;&#13;
	overflow: hidden;&#13;
    resize: none;&#13;
    float: left;&#13;
    margin-left: 10px;&#13;
    margin-bottom: 10px;&#13;
}&#13;
&#13;
.page-rating-comment &gt; [data-name="textarea"]:focus {&#13;
	border-color:#333; &#13;
}&#13;
&#13;
.page-rating-comment{&#13;
    display: block;&#13;
	position: absolute;&#13;
	text-align: center;&#13;
	padding-top: 10px;&#13;
	bottom: 0;&#13;
	background-color: #f2f1d5;&#13;
	width: 100%;&#13;
}&#13;
&#13;
.page-rating-comment &gt; p {&#13;
    padding-bottom: 3px;&#13;
    position: relative;&#13;
    text-align: left;&#13;
    margin-left: 15px;&#13;
}&#13;
&#13;
.page-rating-rates &gt; img {&#13;
	height: 80px;&#13;
	width: 80px;&#13;
    margin: 2px;&#13;
    border-radius: 5px;&#13;
}&#13;
&#13;
.page-rating-rates {&#13;
	text-align: center;&#13;
	bottom: 10px;&#13;
    padding: 3px;&#13;
}&#13;
&#13;
.page-rating-title {&#13;
	background-color: #e1f2d5;&#13;
    padding-bottom: 3px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.page-rating-comment &gt; .page-rating-submit-button {&#13;
    display: block;&#13;
    padding: 10px 15px;&#13;
    float: right;&#13;
    background: #4479BA;&#13;
    color: #FFF;&#13;
    margin-top: 28px;&#13;
    margin-right: 10px;&#13;
    margin-left: 10px;&#13;
    margin-bottom: 10px;&#13;
    border-radius: 4px;&#13;
    border: solid 1px #20538D;&#13;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.4);&#13;
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 1px&#13;
}&#13;
&#13;
.page-rating-comment &gt; .page-rating-submit-button:disabled {&#13;
    background-color: grey;&#13;
}&#13;
&#13;
.page-rating-comment &gt; button:hover{&#13;
    background: #356094;&#13;
    border: solid 1px #2A4E77;&#13;
    text-decoration: none;&#13;
}&#13;
&#13;
.page-rating-wrapper &gt; .page-rating-close-button {&#13;
    float: right;&#13;
    background: #4479BA;&#13;
    color: #FFF;&#13;
    margin-top: 2px;&#13;
    margin-right: 2px;&#13;
    border-radius: 4px;&#13;
    border: solid 1px #20538D;&#13;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.4);&#13;
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.4), 0 1px&#13;
}&#13;
</css><view>&lt;div class="page-rating-wrapper"&gt;&#13;
    &lt;div class="page-rating-title"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-rates"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-comment"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="page-rating-wrapper"&gt;&#13;
    &lt;div class="page-rating-title"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-rates"&gt;&lt;/div&gt;&#13;
    &lt;div class="page-rating-comment"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Rating_create() {&#13;
    var presenter = function () { };&#13;
    var eventBus;&#13;
    var selected_img = [],&#13;
    	deselected_img = [];&#13;
    &#13;
    presenter.currentRate = 0;&#13;
    presenter.playerController = null;&#13;
	presenter.isElementSelected = null;&#13;
	presenter.isModelError = false;&#13;
    presenter.addonID = null;&#13;
    presenter.originalDisplay = "";&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
	&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "You have to add at least 2 rates.",&#13;
        'E_02': "You did not add Selected or/and Deselected image for at least one rate."&#13;
    };&#13;
    &#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model)  {&#13;
        if(model.Rates.length &lt;2){&#13;
            return returnErrorObject('E_01');&#13;
        }&#13;
&#13;
    	for (var model_img=0; model_img &lt; model.Rates.length; model_img++){&#13;
    		selected_img[model_img] = model.Rates[model_img].Selected;&#13;
			deselected_img[model_img] = model.Rates[model_img].Deselected;&#13;
    	}&#13;
        if(model.Rates.length &gt; 1) {&#13;
            for (var img = 0; img &lt; model.Rates.length; img++) {&#13;
                if (!model.Rates[img].Selected || !model.Rates[img].Deselected) {&#13;
                    return returnErrorObject('E_02');&#13;
                }&#13;
            }&#13;
        }&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        var buttonCloseVisible = ModelValidationUtils.validateBoolean(model['Close button visible']);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            rates: {&#13;
                selected: selected_img,&#13;
                deselected: deselected_img&#13;
            },&#13;
            length: model.Rates.length,&#13;
            title: model['Title Text'],&#13;
            comment: model['Comment Text'],&#13;
            isVisible: isVisible,&#13;
            closeButtonVisible: buttonCloseVisible&#13;
        }&#13;
    };&#13;
&#13;
    function submitEventHandler (e) {&#13;
        e.stopPropagation();&#13;
        presenter.hide();&#13;
    }&#13;
&#13;
    presenter.createRatingEventData = function (data) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : data.index,&#13;
            value : data.selected ? "1" : "0"&#13;
        };&#13;
    };&#13;
    &#13;
    function clickEventHandler (e) {&#13;
        e.stopPropagation();&#13;
&#13;
    	var $image = $(this),&#13;
            index = parseInt($image.data('index'), 10),&#13;
    		eventData = presenter.createRatingEventData({'index' : index+1, 'selected' : $image.attr("name") === "deselected"});&#13;
    	&#13;
    	if($image.attr("name") === "deselected") {&#13;
    		presenter.currentRate = index+1;&#13;
    	} else {&#13;
    		presenter.currentRate = 0;&#13;
    	}&#13;
    	eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
    	if( $image.attr("name") === "deselected" ) {&#13;
        	if(presenter.isElementSelected !== null) {&#13;
                var $selectedImage = presenter.$view.find('img[data-index="'+ presenter.isElementSelected +'"]');&#13;
&#13;
                $selectedImage.attr({&#13;
                    'src': deselected_img[presenter.isElementSelected],&#13;
                    'name': "deselected"&#13;
                });&#13;
            }&#13;
              presenter.setSelectedImage(index);&#13;
        } else {&#13;
        	if(presenter.isElementSelected === index) {&#13;
                $image.attr({&#13;
                    "src": deselected_img[index],&#13;
                    "name": "deselected"&#13;
                });&#13;
&#13;
                presenter.isElementSelected = null;&#13;
                presenter.$view.find('.page-rating-submit-button').attr('disabled','disabled');&#13;
        	}&#13;
        }&#13;
        &#13;
    }&#13;
    &#13;
    function updateTitle (view, title) {&#13;
    	if(title){&#13;
        	$(view).find('.page-rating-title').html(title);&#13;
        }&#13;
    }&#13;
    &#13;
    function updateComment(view, comment, isPreview){&#13;
        $(view).find('.page-rating-comment').prepend('&lt;p class="CommentText"&gt;&lt;/p&gt;');&#13;
        $(view).find('.CommentText').html(comment);&#13;
        $(view).find('.page-rating-comment').append('&lt;textarea&gt;&lt;/textarea&gt;');&#13;
        $(view).find('textarea').attr('data-name', 'textarea');&#13;
        $(view).find('.page-rating-comment').append('&lt;button type="button" class="page-rating-submit-button"&gt;Submit&lt;/button&gt;');&#13;
        $(view).find('.page-rating-submit-button').attr('disabled','disabled');&#13;
&#13;
        if(!isPreview) {&#13;
            $(view).find(".page-rating-submit-button").live("click", submitEventHandler);&#13;
        }&#13;
    }&#13;
    &#13;
    function updateRates(view, rates, length,isPreview){&#13;
        if(rates){&#13;
            for (var i=0; i&lt;length; i++){&#13;
                var $image = $(document.createElement('img'));&#13;
&#13;
                $image.attr({&#13;
                    'src': deselected_img[i],&#13;
                    'name': "deselected",&#13;
                    'data-index': i&#13;
                });&#13;
&#13;
                $(view).find('.page-rating-rates').append($image);&#13;
            }&#13;
            if(!isPreview){&#13;
                $(view).find("img").live("click", clickEventHandler);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.updateView = function (isPreview){&#13;
        if(presenter.configuration.closeButtonVisible){&#13;
            presenter.$view.find('.page-rating-wrapper').prepend('&lt;button type="button" class="page-rating-close-button"&gt;Close&lt;/button&gt;');&#13;
            presenter.$view.find(".page-rating-close-button").live("click", submitEventHandler);&#13;
        }&#13;
        updateTitle(presenter.$view, presenter.configuration.title);&#13;
        updateRates(presenter.$view, presenter.configuration.rates, presenter.configuration.length, isPreview);&#13;
        updateComment(presenter.$view, presenter.configuration.comment, isPreview);&#13;
        presenter.$view.css('display',presenter.originalDisplay);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
    	presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.originalDisplay = $(view).css('display');&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
        presenter.updateView(isPreview);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.presenterLogic(view, model, false);&#13;
        presenter.addonID = model.ID;&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setSelectedImage = function(index){&#13;
        var $img_RateIndex = presenter.$view.find('img[data-index="'+ index +'"]');&#13;
        $img_RateIndex.attr({&#13;
            'src': selected_img[index],&#13;
            'name': 'selected'&#13;
        });&#13;
&#13;
        presenter.isElementSelected = index;&#13;
&#13;
        if(index == null){&#13;
            presenter.$view.find('.page-rating-submit-button').attr('disabled', 'disabled');&#13;
        }else {&#13;
            presenter.$view.find('.page-rating-submit-button').removeAttr('disabled');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setCommentValue = function(comment){&#13;
        presenter.$view.find('textarea[data-name="textarea"]').text(comment);&#13;
    };&#13;
&#13;
    presenter.getCommentValue = function(){&#13;
        return presenter.$view.find('textarea[data-name="textarea"]').val();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
    	return JSON.stringify({&#13;
    		commentValue: presenter.getCommentValue(),&#13;
    		isVisible: presenter.configuration.isVisible,&#13;
    		selectedItem: presenter.isElementSelected,&#13;
    		currentRate: presenter.currentRate&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
    	var parsedState = JSON.parse(state),&#13;
            selectedItem = parsedState.selectedItem,&#13;
            currentRate = parsedState.currentRate;&#13;
            &#13;
    		&#13;
        presenter.setCommentValue(parsedState.commentValue);&#13;
        presenter.setSelectedImage(selectedItem);&#13;
        presenter.currentRate = currentRate ? currentRate : "0";&#13;
    	presenter.configuration.isVisible = parsedState.isVisible;&#13;
    	presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getRate': presenter.getRate&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
    &#13;
    presenter.getRate = function() {&#13;
		return presenter.currentRate;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isElementSelected = null;&#13;
        var $img = presenter.$view.find("img[name='selected']"),&#13;
            index = parseInt($img.data('index'), 10);&#13;
&#13;
        $img.attr({&#13;
            "src": deselected_img[index],&#13;
            "name": "deselected"&#13;
        });&#13;
&#13;
        presenter.$view.find('textarea[data-name="textarea"]').val("");&#13;
        presenter.$view.find('.page-rating-submit-button').attr('disabled','disabled');&#13;
    };&#13;
        &#13;
    return presenter;&#13;
}&#13;
</presenter></addon>