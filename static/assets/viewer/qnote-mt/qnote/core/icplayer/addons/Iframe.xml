<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Iframe" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Iframe URL" name="iframeURL" nameLabel="IFrame_property_iframe_url" type="string"/>
        <property displayName="File List" name="fileList" nameLabel="IFrame_property_file_list" type="list">
            <property displayName="File" name="file" nameLabel="IFrame_property_file" type="file"/>
            <property displayName="ID" name="id" nameLabel="IFrame_property_id" type="string"/>
        </property>
        <property displayName="Index Html Location" name="indexHtmlLocation" nameLabel="IFrame_property_index_html_location" type="string"/>
        <property displayName="Zip File" name="zipFile" nameLabel="IFrame_property_zip_file" type="file"/>
        <property displayName="Index File" name="index" nameLabel="IFrame_property_index_file" type="file"/>
        <property displayName="Communication ID" name="communicationID" nameLabel="IFrame_property_communication_id" type="string"/>
        <property name="allowFullscreen" nameLabel="IFrame_property_allow_fullscreen" type="boolean"/>
        <property isLocalized="true" name="Alt text" nameLabel="IFrame_property_alt_text" type="string"/>
    </model>
<css>.addon-IFrame{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: none;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="addon-IFrame-wrapper"&gt;&#13;
    &lt;iframe class="addon-IFrame"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="addon-IFrame-wrapper"&gt;&#13;
    &lt;iframe class="addon-IFrame"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>/**&#13;
 * &#13;
 * KNOWN WORKAROUNDS:&#13;
 *  Iframe src:&#13;
 *      -mCourser have optimalization on /file/serve, where file serving is redirecting to GCS. Files passed in FILE_DICTIONARY_ACTUALIZATION are relative to domain, so after redirect that files while request are built by browser as storage.google.com/file/serve/&lt;id&gt;. To fix it add no_gcs flag to address&#13;
 * &#13;
 */&#13;
function AddonIframe_create() {&#13;
    var presenter = function (){};&#13;
&#13;
    presenter.iframeState = undefined;&#13;
    presenter.iframeContent = null;&#13;
    presenter.configuration = null;&#13;
    presenter.$view = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.isEditor = false;&#13;
    presenter.isVisible = true;&#13;
    presenter.originalDisplay = "block";&#13;
&#13;
    presenter.actionID = {&#13;
        SET_WORK_MODE : "SET_WORK_MODE",&#13;
        SET_SHOW_ERRORS_MODE : "SET_SHOW_ERRORS_MODE",&#13;
        RESET : "RESET",&#13;
        STATE_ACTUALIZATION: "STATE_ACTUALIZATION",&#13;
        STATE_REQUEST: "STATE_REQUEST",&#13;
        SHOW_ANSWERS: "SHOW_ANSWERS",&#13;
        HIDE_ANSWERS: "HIDE_ANSWERS",&#13;
        FILE_DICTIONARY_REQUEST: "FILE_DICTIONARY_REQUEST",&#13;
        FILE_DICTIONARY_ACTUALIZATION: "FILE_DICTIONARY_ACTUALIZATION",&#13;
        CUSTOM_EVENT: "CUSTOM_EVENT"&#13;
    };&#13;
&#13;
    presenter.iframeScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'M01' : "Module must have Index File or IFrame URL",&#13;
        'M02' : "Module must have Communication ID",&#13;
        'F01' : "File must have ID",&#13;
        'F02' : "In File List all elements must have file",&#13;
        'I01' : "Multiple File ID in File List"&#13;
    };&#13;
&#13;
    presenter.validateMessage = function AddonIFrame_Communication_Validate_Message (message) {&#13;
        if (message != undefined) {&#13;
            if ((message.id == presenter.configuration.communicationID) &amp;&amp; (message.actionID != undefined)) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function AddonIFrame_Communication_run (view, model) {&#13;
        presenter.initialize(view, model);&#13;
        if (presenter.configuration.isValid) {&#13;
            presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonIFrame_Communication_create_preview (view, model) {&#13;
        presenter.isEditor = true;&#13;
        presenter.initialize(view, model);&#13;
        if (presenter.configuration.isValid) {&#13;
            presenter.setVisibility(true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getIframeIndexSource = function () {&#13;
        var source = presenter.configuration.index;&#13;
        if (source.indexOf("/file/serve") &gt; -1) {&#13;
            var separator = (presenter.configuration.index.indexOf("?")===-1)?"?":"&amp;";&#13;
            source = presenter.configuration.index + separator + "no_gcs=true";&#13;
        }&#13;
&#13;
        return source;&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonIFrame_Communication_initialize (view, model)  {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        window.addEventListener("message", presenter.getMessage, false);&#13;
&#13;
        var iframe = $(view).find("iframe");&#13;
&#13;
        if (presenter.configuration.allowFullScreen) {  // It must be done before src setup.&#13;
            iframe.attr("allowfullscreen", "allowfullscreen");&#13;
            iframe.attr("webkitallowfullscreen", "webkitallowfullscreen");&#13;
            iframe.attr("mozallowfullscreen", "mozallowfullscreen");&#13;
        }&#13;
&#13;
        if(presenter.configuration.haveURL) {&#13;
            iframe.attr("src", presenter.configuration.iframeURL);&#13;
        }&#13;
        else {&#13;
            iframe.attr("src", presenter.getIframeIndexSource());&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
&#13;
         var display = presenter.$view.css('display');&#13;
        if (display != null &amp;&amp; display.length &gt; 0) {&#13;
            presenter.originalDisplay = display;&#13;
        }&#13;
&#13;
        presenter.iframeContent = iframe.get(0).contentWindow;&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.$view.attr('alt', presenter.configuration.altText);&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        window.removeEventListener("message",presenter.getMessage);&#13;
    };&#13;
&#13;
    presenter.validateFile = function AddonIFrame_Communication_Validate_File (file, dictionary) {&#13;
        var trimmedFileID = file.id.trim();&#13;
        var trimmedFile = file.file.trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedFileID)) {&#13;
            return {isValid: false, errorCode: "F01" };&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedFile)) {&#13;
            return {isValid: false, errorCode: "F02" };&#13;
        }&#13;
&#13;
        if (dictionary[trimmedFileID] !== undefined) {&#13;
            return {isValid: false, errorCode: "I01" };&#13;
        }&#13;
&#13;
        return {isValid: true, id: trimmedFileID, file: trimmedFile};&#13;
    };&#13;
&#13;
&#13;
    presenter.validateFileList = function AddonIFrame_Communication_Validate_File_List (model) {&#13;
        var fileDictionary = {};&#13;
&#13;
        for (var i = 0; i &lt; model.fileList.length; i++) {&#13;
            if(ModelValidationUtils.isStringEmpty(model.fileList[i].fileDictionary)&#13;
                &amp;&amp; ModelValidationUtils.isStringEmpty(model.fileList[i].file)){&#13;
                continue;&#13;
            }&#13;
            var validateFileResult = presenter.validateFile(model.fileList[i],fileDictionary);&#13;
            if (!validateFileResult.isValid) {&#13;
                return validateFileResult;&#13;
            }&#13;
            else {&#13;
                fileDictionary[validateFileResult.id] = validateFileResult.file;&#13;
            }&#13;
        }&#13;
        return {isValid: true, fileDictionary: fileDictionary};&#13;
    };&#13;
    presenter.validateIFrameSource = function AddonIFrame_Communication_Validate_IFrame_Source (model) {&#13;
        var haveURL = !ModelValidationUtils.isStringEmpty(model.iframeURL.trim());&#13;
&#13;
        if (!haveURL &amp;&amp; ModelValidationUtils.isStringEmpty(model.index.trim()))  {&#13;
            return { isValid: false, errorCode: 'M01'};&#13;
        }&#13;
        return { isValid: true, haveURL: haveURL };&#13;
    };&#13;
&#13;
    presenter.validateCommunicationID = function AddonIFrame_Communication_Validate_Communication_ID (model) {&#13;
       if (ModelValidationUtils.isStringEmpty(model.communicationID.trim()) ) {&#13;
           return { isValid: false, errorCode: 'M02'};&#13;
        }&#13;
        return { isValid: true, value: (model.communicationID.trim()) };&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonIFrame_Communication_Validate_Model(model) {&#13;
        var validateIFrameSourceResult = presenter.validateIFrameSource(model);&#13;
        if (!validateIFrameSourceResult.isValid) {&#13;
            return validateIFrameSourceResult;&#13;
        }&#13;
&#13;
        var validateCommunicationIDResult = presenter.validateCommunicationID(model);&#13;
        if (!validateCommunicationIDResult.isValid) {&#13;
            return validateCommunicationIDResult;&#13;
        }&#13;
&#13;
        var validateFileListResult = presenter.validateFileList(model);&#13;
        if (!validateFileListResult.isValid) {&#13;
            return validateFileListResult;&#13;
        }&#13;
&#13;
        var allowFullScreen = model['allowFullscreen'];&#13;
        if (allowFullScreen === undefined) {&#13;
            allowFullScreen = "False";&#13;
        }&#13;
&#13;
        var altText = model['Alt text'];&#13;
        if(altText === undefined) {&#13;
            altText = '';&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            haveURL: validateIFrameSourceResult.haveURL,&#13;
            iframeURL: model.iframeURL,&#13;
            index: model.index,&#13;
            indexHtmlLocation: model.indexHtmlLocation,&#13;
            zipFile: model.zipFile,&#13;
            communicationID: validateCommunicationIDResult.value,&#13;
            addonID : model.ID,&#13;
            fileDictionary: validateFileListResult.fileDictionary,&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            allowFullScreen: ModelValidationUtils.validateBoolean(allowFullScreen),&#13;
            altText: altText&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        if(!presenter.isEditor) {&#13;
            presenter.$view.css('display', isVisible ? presenter.originalDisplay : 'none');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function AddonIFrame_Communication_show () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonIFrame_Communication_hide () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.reset = function AddonIFrame_Communication_reset () {&#13;
        presenter.sendMessage(presenter.actionID.RESET);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function AddonIFrame_Communication_show_answers () {&#13;
        presenter.sendMessage(presenter.actionID.SHOW_ANSWERS);&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function AddonIFrame_Communication_hide_answers () {&#13;
        presenter.sendMessage(presenter.actionID.HIDE_ANSWERS);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function AddonIFrame_Communication_set_work_mode () {&#13;
        presenter.sendMessage(presenter.actionID.SET_WORK_MODE);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function AddonIFrame_Communication_set_show_errors_mode () {&#13;
        presenter.sendMessage(presenter.actionID.SET_SHOW_ERRORS_MODE);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function AddonIFrame_Communication_set_state (state) {&#13;
        try {&#13;
            var parsedState = JSON.parse(state);&#13;
            presenter.iframeState = parsedState.iframeState;&#13;
            presenter.iframeScore = parsedState.iframeScore;&#13;
            if(typeof(parsedState.isVisible) === "boolean") {&#13;
                presenter.isVisible = parsedState.isVisible;&#13;
            }else{&#13;
                presenter.isVisible = presenter.configuration.isVisibleByDefault;&#13;
            }&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
        }&#13;
        catch (error) {&#13;
            presenter.iframeState = undefined;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function AddonIFrame_Communication_get_state () {&#13;
        return JSON.stringify({&#13;
            iframeState: presenter.iframeState,&#13;
            iframeScore: presenter.iframeScore,&#13;
            isVisible:presenter.isVisible,&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getScore = function AddonIFrame_Communication_get_score () {&#13;
        return presenter.iframeScore.score;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function AddonIFrame_Communication_get_maxScore () {&#13;
        return presenter.iframeScore.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function AddonIFrame_Communication_get_error_count () {&#13;
        return presenter.iframeScore.errors;&#13;
    };&#13;
&#13;
    presenter.sendMessageCommand = function (command) {&#13;
        presenter.sendMessage(command[0], command[1]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonIFrame_Communication_execute_Command (name, params) {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'sendMessage': presenter.sendMessage&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
    presenter.createEventData = function AddonIFrame_Communication_create_event_data() {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : "all",&#13;
            value : '',&#13;
            score : ''&#13;
        };&#13;
&#13;
    };&#13;
&#13;
   presenter.triggerFrameChangeEvent = function AddonIFrame_Communication_trigger_frame_change_event () {&#13;
        if (presenter.eventBus != undefined) {&#13;
            presenter.eventBus.sendEvent('ValueChanged', presenter.createEventData());&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createCustomEventData = function AddonIframe_Communication_create_custom_data (data) {&#13;
        return {&#13;
            source : presenter.configuration.addonID,&#13;
            item : "CUSTOM_EVENT",&#13;
            value : data.params,&#13;
            score : ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.triggerCustomEvent = function AddonIFrame_Communication_trigget_custon_event (data) {&#13;
        if (presenter.eventBus != undefined) {&#13;
            presenter.eventBus.sendEvent('ValueChanged', presenter.createCustomEventData(data));&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendMessage = function AddonIFrame_Communication_send_message (actionID, params) {&#13;
        if (params == undefined) {&#13;
            params = {};&#13;
        }&#13;
        var newMessage = { id : presenter.configuration.communicationID, actionID : actionID, params:params};&#13;
        presenter.iframeContent.postMessage(newMessage, "*");&#13;
    };&#13;
&#13;
    presenter.setStateActualization = function AddonIFrame_Communication_set_state_actualization (state) {&#13;
        if (presenter.validateActualizationModel(state).isValid) {&#13;
            //state undefined nie aktualizwac&#13;
            if(state.iframeState !== undefined) {&#13;
                presenter.iframeState = state.iframeState;&#13;
            }&#13;
            presenter.iframeScore = state.iframeScore;&#13;
            if(typeof(presenter.isVisible) === "boolean") {&#13;
                presenter.isVisible = state.isVisible&#13;
            }else{&#13;
                presenter.isVisible = presenter.configuration.isVisibleByDefault;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateActualizationModel = function AddonIFrame_Communication_Validate_Actualization_Model (actualization) {&#13;
        if (actualization === undefined) {&#13;
            return {isValid: false};&#13;
        }&#13;
        var attributes = ["pageCount", "checks", "errors", "mistakes", "score", "maxScore", "scaledScore"];&#13;
        if(actualization.iframeScore === undefined) {&#13;
            return {isValid: false };&#13;
        }&#13;
        for (var i = 0; i&lt; attributes.length; i++) {&#13;
            if (!ModelValidationUtils.validateInteger(actualization.iframeScore[attributes[i]]).isValid) {&#13;
                return {isValid: false };&#13;
            }&#13;
        }&#13;
        return {isValid: true};&#13;
    };&#13;
&#13;
    presenter.getMessage = function AddonIFrame_Communication_get_message (event) {&#13;
        var message = event.data;&#13;
        if (presenter.validateMessage(message)) {&#13;
            switch (message.actionID) {&#13;
                case presenter.actionID.STATE_ACTUALIZATION:&#13;
                    presenter.setStateActualization(message.params);&#13;
                    presenter.triggerFrameChangeEvent();&#13;
                    break;&#13;
&#13;
                case presenter.actionID.STATE_REQUEST:&#13;
                    presenter.sendMessage(presenter.actionID.STATE_ACTUALIZATION, { iframeState: presenter.iframeState, iframeScore: presenter.iframeScore } );&#13;
                    break;&#13;
&#13;
                case presenter.actionID.FILE_DICTIONARY_REQUEST:&#13;
                    presenter.sendMessage(presenter.actionID.FILE_DICTIONARY_ACTUALIZATION, { fileDictionary: presenter.configuration.fileDictionary});&#13;
                    break;&#13;
                case presenter.actionID.CUSTOM_EVENT:&#13;
                    presenter.triggerCustomEvent(message);&#13;
                    break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>