<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Variable_Storage" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Variables" isDefault="true" name="Variables" nameLabel="Variable_Storage_property_variables" type="list">
            <property displayName="Name" name="Name" nameLabel="Variable_Storage_property_variables_name" type="string"/>
            <property displayName="Start value" name="Start" nameLabel="Variable_Storage_property_variables_start" type="string"/>
        </property>
        <property displayName="Do not reset" name="NotReset" nameLabel="Variable_Storage_property_do_not_reset" type="boolean"/>
    </model>
<css>.variables_storage {&#13;
    color: black;&#13;
    font-size:12px;&#13;
}&#13;
</css><view>&lt;div class="variables_addon"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="variables_storage"&gt;Variable storage&lt;/div&gt;&#13;
</preview><presenter>function AddonVariable_Storage_create(){&#13;
    var presenter = function(){}&#13;
    presenter.Variables = [];&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'getVariable'.toLowerCase():&#13;
                presenter.getVariable(params[0]);&#13;
                break;&#13;
            case 'setVariable'.toLowerCase():&#13;
                presenter.setVariable(params[0],params[1]);&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    }&#13;
    function validateVariables(list){&#13;
        var variable = [], variableName, variableValue, tmpVariable;&#13;
        for (i = 0; i &lt; list.length; i++) {&#13;
            variable = [];&#13;
            variableName = list[i]['Name'];&#13;
            if (variableName != '') {&#13;
                variableValue = list[i]['Start'];&#13;
                tmpVariable = {&#13;
                    name: variableName,&#13;
                    startValue: variableValue,&#13;
                    currentValue: variableValue&#13;
                };&#13;
                presenter.Variables.push(tmpVariable);&#13;
            }&#13;
        };&#13;
    }&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        validateVariables(presenter.model['Variables']);&#13;
        presenter.notReset = false;&#13;
        presenter.notReset = ModelValidationUtils.validateBoolean(presenter.model['NotReset']);&#13;
    }&#13;
    presenter.run = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
    }&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
    }&#13;
    presenter.getVariable = function(varName) {&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            if (presenter.Variables[i]['name'] == varName)&#13;
                return presenter.Variables[i]['currentValue'];&#13;
        }&#13;
        return false;&#13;
    }&#13;
    presenter.setVariable = function(varName, varValue) {&#13;
        var isValue = false;&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            if (presenter.Variables[i]['name'] == varName) {&#13;
                presenter.Variables[i]['currentValue'] = varValue;&#13;
                isValue = true;&#13;
            }&#13;
        }&#13;
        if (!isValue) {&#13;
            var tmpVariable = {&#13;
                name: varName,&#13;
                startValue: false,&#13;
                currentValue: varValue&#13;
            };&#13;
            presenter.Variables.push(tmpVariable);&#13;
        }&#13;
    }&#13;
    presenter.reset = function() {&#13;
        if (!presenter.notReset) {&#13;
            for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
                presenter.Variables[i]['currentValue'] = presenter.Variables[i]['startValue'];&#13;
            }&#13;
        }&#13;
    }&#13;
    presenter.getState = function() {&#13;
        var tmpVariablesValue = [], tmpVariablesStart = [], tmpVariablesName = [];&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            tmpVariablesValue[i] = presenter.Variables[i]['currentValue'];&#13;
            tmpVariablesStart[i] = presenter.Variables[i]['startValue'];&#13;
            tmpVariablesName[i] = presenter.Variables[i]['name'];&#13;
        }&#13;
        return JSON.stringify({&#13;
            Variables : tmpVariablesValue,&#13;
            VariablesName : tmpVariablesName,&#13;
            VariableValue : tmpVariablesStart,&#13;
            VariablesNumber: presenter.Variables.length&#13;
        });&#13;
    }&#13;
    presenter.setState = function(state) {&#13;
        var VariablesNumber = JSON.parse(state).VariablesNumber;&#13;
        var tmpVariable;&#13;
        for (var i = 0; i &lt; presenter.Variables.length; i++) {&#13;
            presenter.Variables[i]['currentValue'] = JSON.parse(state).Variables[i];&#13;
        }&#13;
        for (; i &lt; VariablesNumber; i++) {&#13;
            tmpVariable = {&#13;
                name: JSON.parse(state).VariablesName[i],&#13;
                startValue: JSON.parse(state).VariableValue[i],&#13;
                currentValue: JSON.parse(state).Variables[i]&#13;
            };&#13;
            presenter.Variables.push(tmpVariable);&#13;
        }&#13;
    }&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>