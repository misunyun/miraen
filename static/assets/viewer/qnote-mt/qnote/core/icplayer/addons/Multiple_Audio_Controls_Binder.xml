<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Multiple_Audio_Controls_Binder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Connections" nameLabel="Multiple_Audio_Controls_Binder_property_connections" type="text"/>
	</model>
<css/><view/><preview/><presenter>function AddonMultiple_Audio_Controls_Binder_create() {&#13;
    var presenter = function () {};&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'CONNECTIONS_01': "Connections cannot be empty!",&#13;
        'CONNECTIONS_02': "Missing separator character!",&#13;
        'CONNECTIONS_03': "Missing Audio addon ID!",&#13;
        'CONNECTIONS_04': "Missing Double State Button addon ID!",&#13;
        'CONNECTIONS_05': "Empty lines are not allowed!",&#13;
        'CONNECTIONS_06': "Repeated Audio addon ID!",&#13;
        'CONNECTIONS_07': "Repeated Double State Button addon ID!",&#13;
        'CONNECTIONS_08': "Missing item number!",&#13;
        'CONNECTIONS_09': "Item must be positive number!"&#13;
    };&#13;
&#13;
    presenter.STATES = {&#13;
        AUDIO: {&#13;
            PLAYING: 1,&#13;
            STOPPED: 2&#13;
        },&#13;
&#13;
        DOUBLE_STATE_BUTTON: {&#13;
            SELECTED: 1,&#13;
            DESELECTED: 2&#13;
        }&#13;
    };&#13;
&#13;
    function showErrorMessage(errorCode) {&#13;
        presenter.$view.html(presenter.ERROR_CODES[errorCode]);&#13;
    }&#13;
&#13;
    presenter.validateModel = function AddonMultiple_Audio_Controls_Binder_validateModel (model) {&#13;
        var validatedConnections = presenter.validateConnections(model.Connections);&#13;
&#13;
        if (!validatedConnections.isValid) {&#13;
            return {&#13;
                isValid: false,&#13;
                errorCode: validatedConnections.errorCode&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            connections:  new presenter.Connections(validatedConnections.connections)&#13;
        }&#13;
    };&#13;
&#13;
    function presenterLogic (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            showErrorMessage(presenter.configuration.errorCode);&#13;
&#13;
            delete presenter.getState;&#13;
            delete presenter.setState;&#13;
&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.eventBus) {&#13;
            presenter.eventBus.addEventListener('PageLoaded', presenter);&#13;
        }&#13;
&#13;
        if (isPreview) return;&#13;
&#13;
        presenter.$view.css('visible', 'hidden');&#13;
    }&#13;
&#13;
    presenter.isAudioIDPresent = function (connections, audioID) {&#13;
        var i;&#13;
&#13;
        for (i = 0; i &lt; connections.length; i++) {&#13;
            if (connections[i].Audio === audioID) return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.isDoubleStateButtonIDPresent = function (connections, doubleStateButtonID) {&#13;
        var i;&#13;
&#13;
        for (i = 0; i &lt; connections.length; i++) {&#13;
            if (connections[i].DoubleStateButton === doubleStateButtonID) return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.validateConnections = function AddonMultiple_Audio_Controls_Binder_validateConnections(connections) {&#13;
        var parsedConnections = [], isValid = true, errorCode;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(connections)) return { isValid: false, errorCode: 'CONNECTIONS_01'};&#13;
&#13;
        jQuery.each(connections.split('\n'), function (elementIndex, element) {&#13;
            var indexOfSeparator, modules, audioID, doubleStateButtonID, itemNumber;&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(element)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_05';&#13;
                return false;&#13;
            }&#13;
&#13;
            indexOfSeparator = element.indexOf('|');&#13;
            if (indexOfSeparator === -1) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_02';&#13;
                return false;&#13;
            }&#13;
&#13;
            modules = element.split('|');&#13;
            audioID = modules[0];&#13;
            doubleStateButtonID = modules[1];&#13;
            itemNumber = modules[2];&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(audioID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_03';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(doubleStateButtonID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_04';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (itemNumber === undefined &amp;&amp; presenter.isAudioIDPresent(parsedConnections, audioID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_06';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (presenter.isDoubleStateButtonIDPresent(parsedConnections, doubleStateButtonID)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_07';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (itemNumber !== undefined &amp;&amp; ModelValidationUtils.isStringEmpty(itemNumber)) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_08';&#13;
                return false;&#13;
            }&#13;
&#13;
            if (itemNumber !== undefined &amp;&amp; !ModelValidationUtils.validatePositiveInteger(itemNumber).isValid) {&#13;
                isValid = false;&#13;
                errorCode = 'CONNECTIONS_09';&#13;
                return false;&#13;
            }&#13;
&#13;
            parsedConnections.push({ Audio: audioID, DoubleStateButton: doubleStateButtonID, Item: itemNumber });&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: isValid,&#13;
            connections: parsedConnections,&#13;
            errorCode: errorCode&#13;
        };&#13;
    };&#13;
&#13;
    presenter.Connection = function (audioID, doubleStateButtonID, ID, item) {&#13;
        var self = this;&#13;
&#13;
        this.DoubleStateButton = {&#13;
            ID: doubleStateButtonID,&#13;
            getModule: function () { return presenter.getModule(self.DoubleStateButton.ID); },&#13;
            state: presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED&#13;
        };&#13;
&#13;
        this.Audio = {&#13;
            ID: audioID,&#13;
            getModule: function () { return new presenter.AudioAdapter(presenter.getModule(self.Audio.ID)); },&#13;
            state: presenter.STATES.AUDIO.STOPPED&#13;
        };&#13;
&#13;
         this.Item = {&#13;
            Digit: item&#13;
        };&#13;
&#13;
        this.ID = ID;&#13;
    };&#13;
&#13;
    presenter.Connections = function (connections) {&#13;
        this.connections = [];&#13;
&#13;
        for (var i = 0; i &lt; connections.length; i++) {&#13;
            var audioID = connections[i].Audio;&#13;
            var doubleStateButtonID = connections[i].DoubleStateButton;&#13;
            var item = connections[i].Item;&#13;
&#13;
            this.connections.push(new presenter.Connection(audioID, doubleStateButtonID, i, item));&#13;
        }&#13;
&#13;
        this.getConnection = function (connectionID) {&#13;
            return jQuery.grep(this.connections, function (element) {&#13;
                return element.ID == connectionID;&#13;
            })[0];&#13;
        };&#13;
&#13;
        this.getConnectionWithAudio = function (audioID) {&#13;
            for (var i = 0; i &lt; this.connections.length; i++) {&#13;
                if (this.connections[i].Audio.ID == audioID) return this.connections[i];&#13;
            }&#13;
&#13;
            return undefined;&#13;
        };&#13;
&#13;
        this.getConnectionWithAudioAndItem = function (audioID, item) {&#13;
            for (var i = 0; i &lt; this.connections.length; i++) {&#13;
                if (this.connections[i].Audio.ID == audioID &amp;&amp; this.connections[i].Item.Digit == item) return this.connections[i];&#13;
            }&#13;
&#13;
            return undefined;&#13;
        };&#13;
&#13;
        this.getConnectionWithDSB = function (doubleStateButtonID) {&#13;
            for (var i = 0; i &lt; this.connections.length; i++) {&#13;
                if (this.connections[i].DoubleStateButton.ID == doubleStateButtonID) return this.connections[i];&#13;
            }&#13;
&#13;
            return undefined;&#13;
        };&#13;
&#13;
        this.getConnectionsOtherThan = function (connectionID) {&#13;
            return jQuery.grep(this.connections, function (connection) {&#13;
                return connection.ID != connectionID;&#13;
            });&#13;
        };&#13;
&#13;
        this.getAllConnections = function () {&#13;
            return this.connections;&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getModule = function (moduleID) {&#13;
        return presenter.playerController.getModule(moduleID);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        var matchedModule = presenter.matchEventToModules(eventData);&#13;
&#13;
        if (!matchedModule.isMatch) return;&#13;
&#13;
        switch (matchedModule.action) {&#13;
            case presenter.EVENT_ACTIONS.AUDIO_END:&#13;
                presenter.audioEndHandler(matchedModule.moduleID, eventData.item);&#13;
                break;&#13;
            case presenter.EVENT_ACTIONS.DOUBLE_STATE_BUTTON_SELECT:&#13;
                presenter.doubleStateButtonSelectionHandler(matchedModule.moduleID);&#13;
                break;&#13;
            case presenter.EVENT_ACTIONS.DOUBLE_STATE_BUTTON_DESELECT:&#13;
                presenter.doubleStateButtonDeselectionHandler(matchedModule.moduleID);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.audioEndHandler = function (audioID, item) {&#13;
        var connection = presenter.getAudioAdapterConnection(audioID, item);&#13;
&#13;
        connection.Audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
        connection.DoubleStateButton.getModule().deselect();&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
    };&#13;
&#13;
    presenter.getAudioAdapterConnection = function (audioID, item) {&#13;
        if (presenter.getModule(audioID).type === 'multiaudio') {&#13;
            return presenter.configuration.connections.getConnectionWithAudioAndItem(audioID, item);&#13;
        }&#13;
&#13;
        return presenter.configuration.connections.getConnectionWithAudio(audioID);&#13;
    };&#13;
&#13;
    presenter.doubleStateButtonSelectionHandler = function (moduleID) {&#13;
        var connection = presenter.configuration.connections.getConnectionWithDSB(moduleID),&#13;
            otherConnections = presenter.configuration.connections.getConnectionsOtherThan(connection.ID),&#13;
            audio, doubleStateButton;&#13;
&#13;
        jQuery.each(otherConnections, function (index, connection) {&#13;
            audio = connection.Audio;&#13;
            doubleStateButton = connection.DoubleStateButton;&#13;
            if (presenter.STATES.AUDIO.PLAYING == audio.state) {&#13;
                audio.getModule().stop();&#13;
                audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
                doubleStateButton.getModule().deselect();&#13;
                doubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
            }&#13;
        });&#13;
&#13;
        connection.Audio.getModule().play(connection.Item.Digit);&#13;
        connection.Audio.state = presenter.STATES.AUDIO.PLAYING;&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.SELECTED;&#13;
    };&#13;
&#13;
    presenter.doubleStateButtonDeselectionHandler = function (moduleID) {&#13;
        var connection = presenter.configuration.connections.getConnectionWithDSB(moduleID);&#13;
&#13;
        connection.Audio.getModule().stop();&#13;
        connection.Audio.state = presenter.STATES.AUDIO.STOPPED;&#13;
        connection.DoubleStateButton.state = presenter.STATES.DOUBLE_STATE_BUTTON.DESELECTED;&#13;
    };&#13;
&#13;
    presenter.matchEventToModules = function (eventData) {&#13;
        var moduleID = eventData.source,&#13;
            connection = presenter.configuration.connections.getConnectionWithAudio(moduleID),&#13;
            eventActions = presenter.EVENT_ACTIONS;&#13;
&#13;
        if (connection) {&#13;
            if (eventData.item !== 'end' &amp;&amp; eventData.value !== 'end') return { isMatch: false };&#13;
&#13;
            return {&#13;
                isMatch: true,&#13;
                moduleID: moduleID,&#13;
                moduleType: presenter.MODULE_TYPE.AUDIO,&#13;
                action: eventActions.AUDIO_END,&#13;
                connectionID: connection.ID&#13;
            };&#13;
        }&#13;
&#13;
        // No Audio module with given ID&#13;
        connection = presenter.configuration.connections.getConnectionWithDSB(moduleID);&#13;
        if (!connection) return { isMatch: false };&#13;
&#13;
        return {&#13;
            isMatch: true,&#13;
            moduleType: presenter.MODULE_TYPE.DOUBLE_STATE_BUTTON,&#13;
            moduleID: moduleID,&#13;
            action: eventData.value == '1' ? eventActions.DOUBLE_STATE_BUTTON_SELECT : eventActions.DOUBLE_STATE_BUTTON_DESELECT,&#13;
            connectionID: connection.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.EVENT_ACTIONS = {&#13;
        AUDIO_END: 0,&#13;
        DOUBLE_STATE_BUTTON_SELECT: 1,&#13;
        DOUBLE_STATE_BUTTON_DESELECT: 2&#13;
    };&#13;
&#13;
    presenter.MODULE_TYPE = {&#13;
        AUDIO: 0,&#13;
        DOUBLE_STATE_BUTTON: 1&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var state = jQuery.map(presenter.configuration.connections.getAllConnections(), function (connection) {&#13;
            var isSelected = presenter.STATES.DOUBLE_STATE_BUTTON.SELECTED === connection.DoubleStateButton.state;&#13;
&#13;
            return { ID: connection.ID, isSelected: isSelected };&#13;
        });&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function (stringifiedState) {&#13;
        var state = JSON.parse(stringifiedState);&#13;
&#13;
        state = jQuery.grep(state, function (element) {&#13;
            return element.isSelected;&#13;
        });&#13;
&#13;
        presenter.pageLoadedHandlerLoad(state);&#13;
    };&#13;
&#13;
    presenter.pageLoadedHandlerLoad = function (state) {&#13;
        var connection;&#13;
        presenter.pageLoaded.then(function() {&#13;
            jQuery.each(state, function (index, value) {&#13;
                connection = presenter.configuration.connections.getConnection(value.ID);&#13;
                connection.DoubleStateButton.getModule().deselect();&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.AudioAdapter = function AddonMultiple_Audio_Controls_Binder_AudioAdapter (audioPresenter) {&#13;
        this.audioPresenter = audioPresenter;&#13;
    };&#13;
&#13;
    presenter.AudioAdapter.prototype.play = function (item) {&#13;
        if (this.audioPresenter === undefined || this.audioPresenter === null) return;&#13;
&#13;
        if (this.audioPresenter.type === 'multiaudio') {&#13;
            this.audioPresenter.jumpTo(item);&#13;
        }&#13;
        this.audioPresenter.play();&#13;
    };&#13;
&#13;
     presenter.AudioAdapter.prototype.stop = function () {&#13;
         if (this.audioPresenter === undefined || this.audioPresenter === null) return;&#13;
&#13;
         this.audioPresenter.stop();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>