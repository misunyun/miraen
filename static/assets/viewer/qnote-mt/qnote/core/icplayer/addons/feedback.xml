<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="feedback" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Responses" nameLabel="feedback_property_responses" type="list">
			<property name="Unique response ID" nameLabel="feedback_property_unique_response_id" type="string"/>
			<property name="Status" nameLabel="feedback_property_status" type="string"/>
			<property isLocalized="true" name="Text" nameLabel="feedback_property_text" type="html"/>
		</property>
		<property isLocalized="true" name="Default response" nameLabel="feedback_property_default_response" type="html"/>
		<property name="Preview response ID" nameLabel="feedback_property_preview_response_id" type="string"/>
		<property name="Reset response on page change" nameLabel="feedback_property_reset_response_on_page_change" type="boolean"/>
		<property name="Fade transitions" nameLabel="feedback_property_fade_transitions" type="boolean"/>
		<property name="Center horizontally" nameLabel="feedback_property_center_horizontally" type="boolean"/>
		<property name="Center vertically" nameLabel="feedback_property_center_vertically" type="boolean"/>
		<property name="Is not an activity" nameLabel="feedback_property_is_not_an_activity" type="boolean"/>
		<property name="langAttribute" nameLabel="feedback_property_lang_attribute" type="string"/>
        <property name="speechTexts" nameLabel="feedback_property_speech_texts" type="staticlist">
            <property name="Positive" nameLabel="feedback_property_positive" type="staticrow">
                <property name="Positive" nameLabel="feedback_property_positive" type="string"/>
            </property>
            <property name="Negative" nameLabel="feedback_property_negative" type="staticrow">
                <property name="Negative" nameLabel="feedback_property_negative" type="string"/>
            </property>
			<property name="Empty" nameLabel="feedback_property_no_feedback" type="staticrow">
                <property name="Empty" nameLabel="feedback_property_no_feedback" type="string"/>
            </property>
		</property>
	</model>
<css>.feedback_container .response {&#13;
    padding: 1em;&#13;
    position: absolute;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.feedback_container .response.visible a {&#13;
    z-index: 1;&#13;
}&#13;
&#13;
.feedback_container .true_response {&#13;
    border: 2px solid #00aa00;&#13;
    border-radius: 4px;&#13;
}&#13;
&#13;
.feedback_container .false_response {&#13;
    border: 2px solid #ff0000;&#13;
    border-radius: 4px;&#13;
}&#13;
</css><view/><preview/><presenter>function Addonfeedback_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.responses = {};&#13;
    presenter.defaultResponse = "";&#13;
    presenter.feedbackContainer = null;&#13;
    presenter.currentStateDefault = false;&#13;
    presenter.currentStateId = null;&#13;
    presenter.speechTexts = {};&#13;
&#13;
    var playerController = null;&#13;
    var textParser = null;&#13;
&#13;
    presenter.STATUSES = {&#13;
        TRUE: "T",&#13;
        FALSE: "F",&#13;
        NEUTRAL: "N",&#13;
        CUSTOM: "C"&#13;
    };&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        RESPONSE_ID_NOT_UNIQUE: "Response ID \"%id%\" is not unique",&#13;
        RESPONSE_STATUS_INVALID: "Response status \"%status%\" for response %n% (ID \"%id%\") is invalid, it has to be one of \"T\" (true), \"N\" (neutral), \"F\" (false) or \"C\" (custom)",&#13;
        PREVIEW_RESPONSE_ID_INVALID: "Cannot preview response: there's no response with ID \"%id%\""&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
        textParser = new TextParserProxy(playerController.getTextParser());&#13;
    };&#13;
&#13;
    function getTextVoiceObject (text, lang) {return {text: text, lang: lang};}&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    var feedbackSpeakInterval = null;&#13;
    function setSpeakInterval (data) {&#13;
        if(feedbackSpeakInterval) {&#13;
            clearInterval(feedbackSpeakInterval);&#13;
            feedbackSpeakInterval = null;&#13;
        }&#13;
        feedbackSpeakInterval = setInterval(function () {&#13;
&#13;
            var speechSynthSpeaking = false;&#13;
            var responsiveVoiceSpeaking = false;&#13;
            if ('speechSynthesis' in window) {&#13;
                speechSynthSpeaking = window.speechSynthesis.speaking;&#13;
            }&#13;
            if (window.responsiveVoice) {&#13;
                responsiveVoiceSpeaking = window.responsiveVoice.isPlaying();&#13;
            }&#13;
            if (!speechSynthSpeaking &amp;&amp; !responsiveVoiceSpeaking) {&#13;
                clearInterval(feedbackSpeakInterval);&#13;
                feedbackSpeakInterval = null;&#13;
                var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
                if (tts &amp;&amp; playerController.isWCAGOn()) {&#13;
                    tts.speak(data);&#13;
                }&#13;
            }&#13;
        }, 200);&#13;
    }&#13;
&#13;
    var feedbackSpeakTimeout = null;&#13;
    function speak (data) {&#13;
        if(feedbackSpeakTimeout) {&#13;
            clearTimeout(feedbackSpeakTimeout);&#13;
            feedbackSpeakTimeout = null;&#13;
        }&#13;
        feedbackSpeakTimeout = setTimeout(function(){setSpeakInterval(data);},300);&#13;
    }&#13;
&#13;
    presenter.stopFeedbackTTS = function() {&#13;
        clearTimeout(feedbackSpeakTimeout);&#13;
        clearInterval(feedbackSpeakInterval);&#13;
    };&#13;
&#13;
    function getTextVoiceArrayFromText(text) {&#13;
        const el = document.createElement('div');&#13;
        el.innerHTML = window.xssUtils.sanitize(text);&#13;
        const $el = $(el);&#13;
&#13;
        return window.TTSUtils.getTextVoiceArrayFromElement($el,presenter.configuration.langTag);&#13;
    }&#13;
&#13;
    presenter.readCurrentMessage = function(readEmptyOnDefault) {&#13;
        if (presenter.getTextToSpeechOrNull(playerController) &amp;&amp; playerController.isWCAGOn()) {&#13;
            if (presenter.currentStateDefault) {&#13;
                if(readEmptyOnDefault) {&#13;
                    presenter.readDefaultMessage();&#13;
                } else {&#13;
                    presenter.stopFeedbackTTS();&#13;
                }&#13;
            } else if (presenter.currentStateId) {&#13;
                presenter.readMessageById(presenter.currentStateId);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.readDefaultMessage = function() {&#13;
        var TextVoiceArray = [];&#13;
        TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.empty));&#13;
        speak(TextVoiceArray);&#13;
    };&#13;
&#13;
    presenter.readMessageById = function(id) {&#13;
        if(id &amp;&amp; presenter.responses[id]) {&#13;
            var TextVoiceArray = [];&#13;
            var response = presenter.responses[id];&#13;
            if ( 0 === response.status.toLowerCase().localeCompare("t")) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.positive));&#13;
            }&#13;
            if ( 0 === response.status.toLowerCase().localeCompare("f")) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.negative));&#13;
            }&#13;
            TextVoiceArray = TextVoiceArray.concat(getTextVoiceArrayFromText(response.text));&#13;
            speak(TextVoiceArray);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (!substitutions.hasOwnProperty(key)) continue;&#13;
&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setDefaultResponse = function () {&#13;
        if (!presenter.preview) {&#13;
            presenter.feedbackContainer.find('.response').removeClass('visible');&#13;
            presenter.feedbackContainer.find('.default_response').addClass('visible');&#13;
&#13;
            if (presenter.configuration.isTabindexEnabled) {&#13;
                presenter.setTabindex(presenter.feedbackContainer.find('.response'), false);&#13;
                presenter.setTabindex(presenter.feedbackContainer.find('.default_response'), true);&#13;
            }&#13;
        }&#13;
        if (presenter.preview || !presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').css('opacity', 0);&#13;
            presenter.feedbackContainer.find('.default_response').css('opacity', 1);&#13;
        } else if (presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response:not(.default_response)').animate({opacity: 0.0}, {queue: false});&#13;
            presenter.feedbackContainer.find('.default_response').animate({opacity: 1.0}, {queue: false});&#13;
        }&#13;
        presenter.currentStateDefault = true;&#13;
        presenter.currentStateId = null;&#13;
&#13;
        presenter.readCurrentMessage(false);&#13;
    };&#13;
&#13;
    presenter.setResponse = function (id) {&#13;
        if (!presenter.preview) {&#13;
            presenter.feedbackContainer.find('.response').removeClass('visible');&#13;
            presenter.feedbackContainer.find('.response_' + id).addClass('visible');&#13;
&#13;
            if (presenter.configuration.isTabindexEnabled) {&#13;
                presenter.setTabindex(presenter.feedbackContainer.find('.response'), false);&#13;
                presenter.setTabindex(presenter.feedbackContainer.find('.response_' + id), true);&#13;
            }&#13;
        }&#13;
        if (presenter.preview || !presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').css('opacity', 0);&#13;
            presenter.feedbackContainer.find('.response_' + id).appendTo(presenter.feedbackContainer).css('opacity', 1);&#13;
        } else if (presenter.configuration.fadeTransitions) {&#13;
            presenter.feedbackContainer.find('.response').animate({opacity: 0.0}, {queue: false});&#13;
            presenter.feedbackContainer.find('.response_' + id).appendTo(presenter.feedbackContainer).animate({opacity: 1.0}, {queue: false});&#13;
        }&#13;
&#13;
        presenter.currentStateDefault = false;&#13;
        presenter.currentStateId = id;&#13;
&#13;
        presenter.readCurrentMessage(false);&#13;
    };&#13;
&#13;
&#13;
    function createResponseTable(content) {&#13;
        var $feedbackTable = $(document.createElement('table'));&#13;
        var $feedbackTableRow = $(document.createElement('tr'));&#13;
        var $feedbackTableCell = $(document.createElement('td'));&#13;
&#13;
        $feedbackTableRow.append($feedbackTableCell);&#13;
        $feedbackTable.append($feedbackTableRow);&#13;
        $feedbackTableCell.html(content);&#13;
&#13;
        return $feedbackTable;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["Positive"]) {&#13;
            upgradedModel["speechTexts"]["Positive"] = {Positive: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["Negative"]) {&#13;
            upgradedModel["speechTexts"]["Negative"] = {Negative: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["Empty"]) {&#13;
            upgradedModel["speechTexts"]["Empty"] = {Empty: ""};&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, preview) {&#13;
        var text;&#13;
        var text_inner;&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.preview = preview;&#13;
        presenter.model = model;&#13;
&#13;
        presenter.feedbackContainer = $('&lt;div class="feedback_container"&gt;&lt;/div&gt;');&#13;
        presenter.$view.append(presenter.feedbackContainer);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        for (var i = 0; i &lt; model['Responses'].length; i++) {&#13;
            if (typeof(presenter.responses[model['Responses'][i]['Unique response ID']]) != "undefined") {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.RESPONSE_ID_NOT_UNIQUE, { id: model['Responses'][i]['Unique response ID']});&#13;
                return;&#13;
            }&#13;
&#13;
            if (model['Responses'][i]['Status'] != presenter.STATUSES.TRUE &amp;&amp;&#13;
                model['Responses'][i]['Status'] != presenter.STATUSES.NEUTRAL &amp;&amp;&#13;
                model['Responses'][i]['Status'] != presenter.STATUSES.FALSE &amp;&amp;&#13;
                model['Responses'][i]['Status'] != presenter.STATUSES.CUSTOM) {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.RESPONSE_STATUS_INVALID, { n: i + 1, id: model['Responses'][i]['Unique response ID'], status: model['Responses'][i]['Status']});&#13;
                return;&#13;
            }&#13;
&#13;
            var responseText = model['Responses'][i]['Text'];&#13;
            if (textParser !== null &amp;&amp; !preview) {&#13;
                responseText = textParser.parse(responseText);&#13;
            }&#13;
            presenter.responses[model['Responses'][i]['Unique response ID']] = { status: model['Responses'][i]['Status'].toUpperCase(), text: responseText };&#13;
&#13;
            text = $('&lt;div class="response"&gt;&lt;/div&gt;');&#13;
            text_inner = $('&lt;div class="response_inner"&gt;&lt;/div&gt;');&#13;
            text.append(text_inner);&#13;
            text.addClass('response_' + model['Responses'][i]['Unique response ID']);&#13;
&#13;
            var $responseTable = createResponseTable(responseText);&#13;
            text_inner.html($responseTable);&#13;
&#13;
            switch (model['Responses'][i]['Status']) {&#13;
                case presenter.STATUSES.TRUE:&#13;
                    text.addClass("true_response");&#13;
                    break;&#13;
&#13;
                case presenter.STATUSES.NEUTRAL:&#13;
                    text.addClass("neutral_response");&#13;
                    break;&#13;
&#13;
                case presenter.STATUSES.FALSE:&#13;
                    text.addClass("false_response");&#13;
                    break;&#13;
&#13;
                case presenter.STATUSES.CUSTOM:&#13;
                    text.addClass("custom_response");&#13;
                    break;&#13;
            }&#13;
&#13;
            presenter.feedbackContainer.append(text);&#13;
            presenter.centerInner(text_inner);&#13;
        }&#13;
&#13;
        presenter.$view.find('.response').css('opacity', 0.0);&#13;
&#13;
        presenter.defaultResponse = model['Default response'];&#13;
        if (textParser !== null &amp;&amp; !preview) {&#13;
            presenter.defaultResponse = textParser.parse(presenter.defaultResponse);&#13;
        }&#13;
&#13;
        text = $('&lt;div class="response default_response neutral_response"&gt;&lt;/div&gt;');&#13;
        text_inner = $('&lt;div class="response_inner"&gt;&lt;/div&gt;');&#13;
        text.append(text_inner);&#13;
&#13;
        var defaultResponseTable = createResponseTable(presenter.defaultResponse);&#13;
        text_inner.html(defaultResponseTable);&#13;
        presenter.feedbackContainer.append(text);&#13;
        presenter.centerInner(text_inner);&#13;
        if (textParser !== null &amp;&amp; !preview) {&#13;
            textParser.connectLinks(presenter.feedbackContainer);&#13;
            presenter.connectHTMLLinks(presenter.feedbackContainer);&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            presenter.setDefaultResponse();&#13;
            return;&#13;
        }&#13;
&#13;
        if (typeof(model['Preview response ID']) == "undefined" ||&#13;
            (typeof(model['Preview response ID']) == "string" &amp;&amp; model['Preview response ID'] == "")) {&#13;
            presenter.setDefaultResponse();&#13;
        } else {&#13;
            if (typeof(presenter.responses[model['Preview response ID']]) == "undefined") {&#13;
                presenter.showErrorMessage(presenter.ERROR_MESSAGES.PREVIEW_RESPONSE_ID_INVALID, { id: model['Preview response ID'] });&#13;
            } else {&#13;
                presenter.setResponse(model['Preview response ID']);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            positive:  'Correct answer',&#13;
            negative: 'Incorrect answer',&#13;
            empty: 'No feedback message'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            positive:    getSpeechTextProperty(speechTexts['Positive']['Positive'], presenter.speechTexts.positive),&#13;
            negative: getSpeechTextProperty(speechTexts['Negative']['Negative'], presenter.speechTexts.negative),&#13;
            empty: getSpeechTextProperty(speechTexts['Empty']['Empty'], presenter.speechTexts.empty)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedIsVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        setSpeechTexts(model["speechTexts"]);&#13;
&#13;
        return {&#13;
            resetResponse: ModelValidationUtils.validateBoolean(model['Reset response on page change']),&#13;
            fadeTransitions: ModelValidationUtils.validateBoolean(model['Fade transitions']),&#13;
            centerHorizontally: ModelValidationUtils.validateBoolean(model['Center horizontally']),&#13;
            centerVertically: ModelValidationUtils.validateBoolean(model['Center vertically']),&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model['Is not an activity']),&#13;
            isVisible: validatedIsVisible,&#13;
            isVisibleByDefault: validatedIsVisible,&#13;
            isTabindexEnabled: ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']),&#13;
            langTag: model['langAttribute']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.centerInner = function (text_inner) {&#13;
        if (presenter.configuration.centerVertically) {&#13;
            var parentHeight = $(text_inner).parent().height();&#13;
            var parentHWidth = $(text_inner).parent().width();&#13;
            $(text_inner).css({&#13;
                height: parentHeight + 'px',&#13;
                width: parentHWidth + 'px',&#13;
                display: 'table-cell',&#13;
                'verticalAlign': 'middle'&#13;
            });&#13;
        }&#13;
&#13;
        if (presenter.configuration.centerHorizontally) {&#13;
            $(text_inner).find('table').css({&#13;
                marginLeft: 'auto',&#13;
                marginRight: 'auto'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setDefaultResponse();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.setDefaultResponse();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.change = function (responseID) {&#13;
        if (presenter.responses[responseID] !== undefined) {&#13;
            presenter.setResponse(responseID);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCommand = function (params) {&#13;
        if (params.length &gt;= 1) {&#13;
            presenter.change(params[0])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'change': presenter.changeCommand,&#13;
            'setDefaultResponse': presenter.setDefaultResponse,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'getResponseIndex': presenter.getResponseIndex&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.next = function () {&#13;
        var currentID = presenter.currentStateId, index, newID;&#13;
        if (presenter.currentStateDefault) {&#13;
            newID = presenter.getResponseID(0);&#13;
        } else {&#13;
            index = presenter.getResponseIndex(currentID);&#13;
            newID = presenter.getResponseID(index + 1);&#13;
        }&#13;
&#13;
        if (newID == undefined) return;&#13;
&#13;
        presenter.setResponse(newID);&#13;
    };&#13;
&#13;
    presenter.previous = function () {&#13;
        var currentID = presenter.currentStateId, index, newID;&#13;
&#13;
        if (presenter.currentStateDefault) return;&#13;
&#13;
        index = presenter.getResponseIndex(currentID);&#13;
        newID = presenter.getResponseID(index - 1);&#13;
&#13;
        if (newID == undefined) return;&#13;
&#13;
        presenter.setResponse(newID);&#13;
    };&#13;
&#13;
    presenter.connectHTMLLinks = function ($element) {&#13;
        $element.find('a').each(function(){&#13;
            $(this).click(function(){&#13;
                var url = $(this).attr('href');&#13;
                var target = $(this).attr('target');&#13;
                if (target != null &amp;&amp; target.length &gt; 0) {&#13;
                    window.open(url, target);&#13;
                } else {&#13;
                    window.open(url);&#13;
                }&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'currentStateDefault': presenter.currentStateDefault,&#13;
            'currentStateId': presenter.currentStateId,&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if (presenter.configuration.resetResponse) {&#13;
            presenter.setDefaultResponse();&#13;
            return;&#13;
        }&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        if (state['currentStateDefault']) {&#13;
            presenter.setDefaultResponse();&#13;
        } else {&#13;
            presenter.setResponse(state['currentStateId']);&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = state['isVisible'];&#13;
        presenter.setVisibility(state['isVisible']);&#13;
    };&#13;
&#13;
    presenter.getResponseIndex = function (responseID) {&#13;
        var responses = presenter.model.Responses, i;&#13;
&#13;
        for (i = 0; i &lt; responses.length; i++) {&#13;
            if (responses[i]['Unique response ID'] === responseID) return i;&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.getResponseID = function (index) {&#13;
        var response = presenter.model.Responses[index];&#13;
&#13;
        return response !== undefined ? response['Unique response ID'] : undefined;&#13;
    };&#13;
&#13;
    presenter.setTabindex = function ($element, isTabindexEnabled){&#13;
        var value = isTabindexEnabled ? '0' : '-1';&#13;
        $element.attr('tabindex', value);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShift, event) { //every time keyboard is pressed&#13;
        if (keyCode == window.KeyboardControllerKeys.SPACE ||&#13;
            keyCode == window.KeyboardControllerKeys.ARROW_UP ||&#13;
            keyCode == window.KeyboardControllerKeys.ARROW_DOWN ||&#13;
            keyCode == window.KeyboardControllerKeys.ESC)&#13;
        {&#13;
            event.preventDefault();&#13;
        }&#13;
&#13;
        if (keyCode == window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.readCurrentMessage(true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isEnterable = function() {&#13;
        return false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>