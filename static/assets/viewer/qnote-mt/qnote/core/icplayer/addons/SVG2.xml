<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SVG2" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="SVG file" nameLabel="SVG2_property_svg_file" type="image"/>
		<property name="Skip aspect ratio" nameLabel="SVG2_property_skip_aspect_ration" type="boolean"/>
	</model>
<css>.addon_SVG2 .errorContainer {&#13;
    border: 1px dotted red;&#13;
    display: none;&#13;
}&#13;
.addon_SVG2 .svgContainer {&#13;
    overflow: hidden;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.addon_SVG2 .errorContainer .message{&#13;
    padding: 5px;&#13;
    color: red;&#13;
}&#13;
</css><view>&lt;div class="errorContainer"&gt;&#13;
    &lt;div class="message"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="svgContainer"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="errorContainer"&gt;&#13;
    &lt;div class="message"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="svgContainer"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonSVG2_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    var svgContainer, errorContainer, aspect, containerWidth, containerHeight;&#13;
&#13;
    var errorMessages = {&#13;
        invalidFile: 'Invalid SVG file',&#13;
        svgSupportMissing: 'Your browser doesn\'t support SVG',&#13;
        xmlSerializerNotSupported: 'XmlSerializer not supported',&#13;
        missingFile: 'Please provide SVG file'&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.presenterLogic(view, model);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        svgContainer = $(view).find('.svgContainer:first');&#13;
        errorContainer = $(view).find('.errorContainer');&#13;
        aspect = model['Skip aspect ratio'] == 'True';&#13;
        containerWidth = model['Width'];&#13;
        containerHeight = model['Height'];&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
&#13;
        if(this.hasSVGSupport()) {&#13;
            if(model['SVG file'] != '') {&#13;
                this.loadFile(model['SVG file']);&#13;
            } else {&#13;
                this.onError(errorMessages.missingFile);&#13;
            }&#13;
        } else {&#13;
            this.onError(errorMessages.svgSupportMissing);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    //detection based on Modernizer library&#13;
    presenter.hasSVGSupport = function() {&#13;
        return !!document.createElementNS &amp;&amp; !!document.createElementNS('http://www.w3.org/2000/svg', "svg").createSVGRect;&#13;
    };&#13;
&#13;
    presenter.loadFile = function(file) {&#13;
        $.ajax({&#13;
            url: file,&#13;
            success: this.onLoadComplete,&#13;
            error: this.onLoadError,&#13;
            dataType: 'xml'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onLoadComplete = function(data) {&#13;
        var el = $(data).find('svg');&#13;
        //validate response&#13;
        if(el.length === 0) {&#13;
            presenter.onError(errorMessages.invalidFile);&#13;
            return;&#13;
        }&#13;
&#13;
        var cw = el.attr('width') ? el.attr('width') : containerWidth;&#13;
        var ch = el.attr('height') ? el.attr('height') : containerHeight;&#13;
&#13;
        //fit size of svg&#13;
        cw = cw.replace("px", "");&#13;
        ch = ch.replace("px", "");&#13;
&#13;
        cw = (parseInt(cw)+1) + "";&#13;
        ch = (parseInt(ch)+1) + "";&#13;
&#13;
//        el.attr('viewBox', '0 0 ' + cw + ' ' + ch);&#13;
//        el.attr('viewBox', '-1 -1 ' + cw + ' ' + ch);&#13;
           el.attr('viewBox', '-1 -1 ' + cw + ' ' + ch);&#13;
        el.attr('preserveAspectRatio', !aspect ? 'xMinYMin' : 'none');&#13;
        el.attr('width', '100%');&#13;
        el.attr('height', '100%');&#13;
&#13;
        svgContainer.html('');&#13;
        //convert xml to string&#13;
        var svgHtml = presenter.xmlToString(data);&#13;
        if(svgHtml === false) {&#13;
            presenter.onError(errorMessages.xmlSerializerNotSupported);&#13;
        } else {&#13;
            //add converted content&#13;
            svgContainer.append(svgHtml);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.xmlToString = function(xml) {&#13;
        var output = false;&#13;
        try {&#13;
            // Gecko-based browsers, Safari, Opera&#13;
            output = new XMLSerializer().serializeToString(xml);&#13;
        } catch(e) {&#13;
            try {&#13;
                // Internet Explorer&#13;
                output = xml.xml;&#13;
            } catch(e2) {&#13;
                //Xmlserializer not supported&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return output;&#13;
    };&#13;
&#13;
    presenter.onLoadError = function() {&#13;
        presenter.onError(errorMessages.invalidFile);&#13;
    };&#13;
&#13;
    presenter.onError = function(msg) {&#13;
        svgContainer.hide();&#13;
        errorContainer.find('.message').html(msg);&#13;
        errorContainer.show();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>