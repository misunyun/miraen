<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="YouTube_Addon" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="HTTPS" nameLabel="YouTube_Addon_property_https" type="boolean"/>
		<property name="ID" nameLabel="YouTube_Addon_property_id" type="string"/>
		<property name="URL" nameLabel="YouTube_Addon_property_url" type="string"/>
        <property name="Offline message" nameLabel="YouTube_Addon_property_offline_message" type="string"/>
        <property name="Disable Fullscreen" nameLabel="YouTube_Addon_property_disable_fullscreen" type="boolean"/>
		<property name="Time start" nameLabel="YouTube_Addon_property_time_start" type="integer"/>
		<property name="Autoplay" nameLabel="YouTube_Addon_property_autoplay" type="boolean"/>
	</model>
<css/><view/><preview/><presenter> function AddonYouTube_Addon_create(){&#13;
    var presenter = function() {&#13;
    };&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.ismLibro = false;&#13;
 &#13;
    function createVideoThumbnailAsync(videoID, viewContainer, addonWidth, addonHeight) {&#13;
&#13;
        var feedURL = "https://mauthor.com/api/v2/youtube/thumbnail?video_id=" + videoID;&#13;
&#13;
        $.when($.get(feedURL)).then(function (jsonResponse) {&#13;
            if (jsonResponse.items.length &gt; 0) {&#13;
                var thumbnails = jsonResponse.items[0].snippet.thumbnails;&#13;
                var thumbnailURL = thumbnails.maxres.url;&#13;
                var thumbnailElement = document.createElement("img");&#13;
                $(thumbnailElement).attr('src', thumbnailURL);&#13;
                viewContainer.html(thumbnailElement);&#13;
                $(thumbnailElement).css({&#13;
                    width: addonWidth + 'px',&#13;
                    height: addonHeight + 'px'&#13;
                });&#13;
            }&#13;
        });&#13;
    }&#13;
 &#13;
    function showErrorMessage(viewContainer, errorMessage) {&#13;
        var errorElement = document.createElement('p');&#13;
        $(errorElement).text(errorMessage);&#13;
        viewContainer.html(errorElement);&#13;
    }&#13;
&#13;
     function doesConnectionExist() {&#13;
         if (!presenter.ismLibro) return true;&#13;
&#13;
         var xhr = new ( window.ActiveXObject || XMLHttpRequest )( "Microsoft.XMLHTTP" );&#13;
&#13;
         //YouTube API key is generated in lorepocorporate google account&#13;
         xhr.open( "HEAD", "https://mauthor.com/api/v2/youtube/", false );&#13;
&#13;
         try {&#13;
             xhr.send();&#13;
             return ( xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304 );&#13;
         } catch (error) {&#13;
             return false;&#13;
         }&#13;
     }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        var width = model.Width;&#13;
        var height = model.Height;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
        presenter.disableFullscreen = ModelValidationUtils.validateBoolean(model['Disable Fullscreen']);&#13;
&#13;
        var isAutoplay = ModelValidationUtils.validateBoolean(model['Autoplay']);&#13;
        var timeStart = presenter.decodeTimeStart(model['Time start'] || "");&#13;
        var viewContainer = $(view);&#13;
        var decodedVideoID = presenter.decodeVideoID(model.URL, model.ID);&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        if (decodedVideoID.isError) {&#13;
            showErrorMessage(viewContainer, decodedVideoID.errorMessage);&#13;
            return;&#13;
        }&#13;
        if (!timeStart.isValid) {&#13;
            showErrorMessage(viewContainer, "Incorrect video time start - value must be number greater than 0");&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            createVideoThumbnailAsync(decodedVideoID.videoID, viewContainer, width, height);&#13;
        } else {&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
            var src = '${protocol}://www.youtube.com/embed/${video_id}';&#13;
            src = src.replace("${video_id}", decodedVideoID.videoID);&#13;
&#13;
            //Protocol (HTTP or HTTPS)&#13;
            var myProtocol = window.location.protocol;&#13;
            myProtocol = myProtocol.replace(":","");&#13;
            var httsStr = model.HTTPS;&#13;
            var protocol = httsStr === 'True' ? 'https' : 'http';&#13;
&#13;
            if (myProtocol == 'https' || protocol == 'http') {&#13;
                src = src.replace("${protocol}", myProtocol);&#13;
            } else {&#13;
                src = src.replace("${protocol}", protocol);&#13;
            }&#13;
&#13;
            var url = src + presenter.getUrlParams(isAutoplay, timeStart.value);&#13;
&#13;
            var iframe = document.createElement('iframe');&#13;
            $(iframe).attr('id', 'ytIframe');&#13;
            $(iframe).attr('frameborder', '0');&#13;
            $(iframe).attr('src', url);&#13;
            $(iframe).attr('width', parseInt(width, 10) + 'px');&#13;
            $(iframe).attr('height', parseInt(height, 10) + 'px');&#13;
&#13;
            if(!presenter.disableFullscreen){&#13;
                $(iframe).attr("allowfullscreen","allowfullscreen");&#13;
            }&#13;
&#13;
            if(doesConnectionExist()){&#13;
                viewContainer.html(iframe);&#13;
            }else{&#13;
                var offlineDiv = document.createElement('div');&#13;
                $(offlineDiv).addClass('offline-message');&#13;
                if(model['Offline message']){&#13;
                    $(offlineDiv).text(model['Offline message']);&#13;
                    viewContainer.html(offlineDiv);&#13;
                }else{&#13;
                    $(offlineDiv).text('No connection to the Internet');&#13;
                    viewContainer.html(offlineDiv);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
 &#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
 &#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
 &#13;
    // Return -1 if any error occurs&#13;
    presenter.decodeVideoID = function(URL, ID) {&#13;
        //Encoding video ID from URL if ID is not given&#13;
        var videoID = "";&#13;
        var prefix = "";&#13;
        var methodResult = {&#13;
            videoID : -1,&#13;
            isError: false,&#13;
            errorMessage : ''&#13;
        };&#13;
 &#13;
        if(ID !== '') {&#13;
            if (ID.search(/[^a-zA-Z0-9_-]/gm) === -1) {&#13;
                methodResult.videoID = ID;&#13;
 &#13;
                return methodResult;&#13;
            } else {&#13;
                methodResult.isError = true;&#13;
                methodResult.errorMessage = "Video ID seems to be incorrect!";&#13;
 &#13;
                return methodResult;&#13;
            }&#13;
        }&#13;
 &#13;
        if(URL === '') {&#13;
            methodResult.isError = true;&#13;
            methodResult.errorMessage = "Neither video ID nor URL was given!";&#13;
 &#13;
            return methodResult;&#13;
        }&#13;
 &#13;
        var ampersandIndex = URL.indexOf("&amp;");&#13;
        var youtubeIndex = URL.indexOf("youtube.com/watch?v=");&#13;
 &#13;
        if(youtubeIndex == -1) {&#13;
            // There is a possibility that user enters shorted URL&#13;
            youtubeIndex = URL.indexOf("youtu.be/");&#13;
 &#13;
            if(youtubeIndex == -1) {&#13;
                methodResult.isError = true;&#13;
                methodResult.errorMessage = "URL seems to be incorrect!";&#13;
 &#13;
                return methodResult;&#13;
            }&#13;
 &#13;
            prefix = ".be/";&#13;
        } else {&#13;
            prefix = "?v=";&#13;
        }&#13;
 &#13;
        var startIndex = URL.indexOf(prefix) + prefix.length;&#13;
        if (startIndex == URL.length) {&#13;
            methodResult.isError = true;&#13;
            methodResult.errorMessage = "URL seems to be incorrect. It must contain video ID!";&#13;
 &#13;
            return methodResult;&#13;
        }&#13;
 &#13;
        if(ampersandIndex == -1) {&#13;
            videoID = URL.substring(startIndex);&#13;
        } else {&#13;
            videoID = URL.substring(startIndex, ampersandIndex);&#13;
        }&#13;
 &#13;
        methodResult.videoID = videoID;&#13;
 &#13;
        return methodResult;&#13;
    };&#13;
&#13;
    presenter.decodeTimeStart = function (timeStart) {&#13;
        if (ModelValidationUtils.isStringEmpty(timeStart.trim())) {&#13;
            return {&#13;
                isValid: true,&#13;
                value: 0&#13;
            };&#13;
        }&#13;
&#13;
        return ModelValidationUtils.validatePositiveInteger(timeStart);&#13;
    };&#13;
&#13;
    presenter.getUrlParams = function (isAutoplay, timeStart) {&#13;
        var autoplay = isAutoplay ? 1 : 0;&#13;
        return `?enablejsapi=1&amp;start=${timeStart}&amp;autoplay=${autoplay}&amp;mute=${autoplay}`;&#13;
    };&#13;
&#13;
     presenter.setVisibility = function (isVisible) {&#13;
         presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
     };&#13;
&#13;
     presenter.setPlayerController = function (controller) {&#13;
         presenter.playerController = controller;&#13;
         var context = controller.getContextMetadata();&#13;
         if (context != null &amp;&amp; "ismLibro" in context) {&#13;
             presenter.ismLibro = context["ismLibro"];&#13;
         }&#13;
&#13;
     };&#13;
&#13;
     presenter.show = function() {&#13;
         presenter.setVisibility(true);&#13;
         presenter.isVisible = true;&#13;
     };&#13;
&#13;
     presenter.hide = function() {&#13;
         presenter.setVisibility(false);&#13;
         presenter.isVisible = false;&#13;
     };&#13;
&#13;
     // This function takes argument as function's name from iframe API:&#13;
     // https://developers.google.com/youtube/iframe_api_reference?hl=pl#Functions&#13;
     function callPlayer(func, args) {&#13;
         presenter.$view.find("iframe")[0].contentWindow.postMessage(JSON.stringify({&#13;
             'event': 'command',&#13;
             'func': func,&#13;
             'args': args || []&#13;
         }), "*");&#13;
     }&#13;
&#13;
     presenter.stop = function() {&#13;
         callPlayer('stopVideo');&#13;
         callPlayer('seekTo', [0, true]);&#13;
     };&#13;
&#13;
     presenter.executeCommand = function(name, params) {&#13;
         var commands = {&#13;
             'show': presenter.show,&#13;
             'hide': presenter.hide,&#13;
             'stop': presenter.stop&#13;
         };&#13;
&#13;
         Commands.dispatch(commands, name, params, presenter);&#13;
     };&#13;
&#13;
     presenter.reset = function(){&#13;
         presenter.isVisible = presenter.isVisibleByDefault;&#13;
         presenter.setVisibility(presenter.isVisibleByDefault);&#13;
     };&#13;
&#13;
     presenter.getState = function () {&#13;
         return JSON.stringify({&#13;
             isVisible: presenter.isVisible&#13;
         });&#13;
     };&#13;
&#13;
     presenter.upgradeStateForVisibility = function(state) {&#13;
         if (state.isVisible === undefined) {&#13;
             state.isVisible = true;&#13;
         }&#13;
&#13;
         return state;&#13;
     };&#13;
&#13;
     presenter.upgradeState = function (parsedState) {&#13;
         parsedState = presenter.upgradeStateForVisibility(parsedState);&#13;
&#13;
         return parsedState;&#13;
     };&#13;
&#13;
     presenter.setState = function(state) {&#13;
         if (ModelValidationUtils.isStringEmpty(state)) {&#13;
             return;&#13;
         }&#13;
&#13;
         var parsedState = presenter.upgradeState(JSON.parse(state));&#13;
&#13;
         presenter.isVisible = parsedState.isVisible;&#13;
&#13;
         presenter.setVisibility(presenter.isVisible);&#13;
     };&#13;
 &#13;
    return presenter;&#13;
}&#13;
/**&#13;
 * YouTube Addon&#13;
 * Version 1.6&#13;
 * Last update: 23-08-2016&#13;
 */&#13;
</presenter></addon>