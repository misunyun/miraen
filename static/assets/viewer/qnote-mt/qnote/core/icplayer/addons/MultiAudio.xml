<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MultiAudio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Files" nameLabel="MultiAudio_property_files" type="list">
			<property name="ID" nameLabel="MultiAudio_property_id" type="string"/>
			<property name="Mp3" nameLabel="MultiAudio_property_mp3" type="audio"/>
			<property name="Ogg" nameLabel="MultiAudio_property_ogg" type="audio"/>
			<property name="Enable loop" nameLabel="MultiAudio_property_enable_loop" type="boolean"/>
			<property isLocalized="true" name="Text" nameLabel="MultiAudio_property_text" type="html"/>
		</property>
		<property name="Interface" nameLabel="MultiAudio_property_interface" type="{None, Default controls, Display time, Draggable items}"/>
		<property isLocalized="true" name="Narration" nameLabel="MultiAudio_property_narration" type="narration"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="MultiAudio_property_lang_attribute" type="string"/>
		<property displayName="Speech texts" name="speechTexts" nameLabel="MultiAudio_property_property_speech_texts" type="staticlist">

			<property name="Selected" nameLabel="MultiAudio_property_selected" type="staticrow">
				<property name="Selected" nameLabel="MultiAudio_property_selected" type="string"/>
			</property>

			<property name="Deselected" nameLabel="MultiAudio_property_deselected" type="staticrow">
				<property name="Deselected" nameLabel="MultiAudio_property_deselected" type="string"/>
			</property>

			<property name="Empty" nameLabel="MultiAudio_property_empty" type="staticrow">
				<property name="Empty" nameLabel="MultiAudio_property_empty" type="string"/>
			</property>

		</property>
	</model>
<css>.wrapper-addon-audio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio {&#13;
    height: 100%;&#13;
    position: relative;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper {&#13;
    width: 110px;&#13;
    height: 45px;&#13;
    display: block;&#13;
    background-color: #3792cb;&#13;
    padding: 5px;&#13;
    margin: 2px;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper.multiaudio-item-has-text {&#13;
    min-width: 110px;&#13;
    min-height: 45px;&#13;
    width: fit-content;&#13;
    height: auto;&#13;
    display:flex;&#13;
    flex-wrap: wrap;&#13;
    padding: 3px;&#13;
}&#13;
&#13;
.multiaudio-selected {&#13;
    border: 1px solid orange;&#13;
    z-index: 100;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper .multiaudio-item-grab-area {&#13;
    background-color: rgba(0,0,0,0.15);&#13;
    width: 32px;&#13;
    height: 44px;&#13;
    margin-right: 5px;&#13;
    display:inline-block;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper.multiaudio-item-has-text  .multiaudio-item-grab-area {&#13;
    background-color: white;&#13;
    min-width: 32px;&#13;
    min-height: 44px;&#13;
    width: auto;&#13;
    height: 100%;&#13;
    margin: 3px;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper .multiaudio-item-button {&#13;
    width: 71px;&#13;
    height: 44px;&#13;
    display:inline-block;&#13;
    background: white;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper.multiaudio-item-has-text .multiaudio-item-button {&#13;
    margin: 3px;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper .multiaudio-item-icon {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    display:block;&#13;
    background: #3792cb;&#13;
    mask: url('resources/volume_up-24px.svg') no-repeat center;&#13;
    -webkit-mask: url('resources/volume_up-24px.svg') no-repeat center;&#13;
}&#13;
&#13;
.multiaudio-item-wrapper.playing .multiaudio-item-icon {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    display:block;&#13;
    background: #3792cb;&#13;
    mask: url('resources/volume_off-24px.svg') no-repeat center;&#13;
    -webkit-mask: url('resources/volume_off-24px.svg') no-repeat center;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonMultiAudio_create(){&#13;
    var presenter = function(){};&#13;
    var AUDIO_FILES_MISSING = "This addon needs at least 1 audio file.";&#13;
    var eventBus;&#13;
    var currentTimeAlreadySent;&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
    presenter.currentAudio = 0;&#13;
    presenter.audio = {};&#13;
    presenter.files = [];&#13;
    presenter.visible = true;&#13;
    presenter.defaultVisibility = true;&#13;
    presenter.globalView = null;&#13;
    presenter.globalModel = null;&#13;
    presenter.playerController = null;&#13;
    presenter.addonID = null;&#13;
    presenter.type = 'multiaudio';&#13;
    presenter.draggableItems = {};&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.selectedItemID = '';&#13;
    presenter.currentDraggableItemID = '';&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function getTextVoiceObject(text, lang) {return window.TTSUtils.getTextVoiceObject(text, lang);}&#13;
    &#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        if (eventName == "ValueChanged") {&#13;
            if (eventData.value == 'dropdownClicked' &amp;&amp; !presenter.audio.playing &amp;&amp; !isTemporarilyPaused()) {&#13;
                this.audio.load();&#13;
            }&#13;
        }else if (eventName == "ItemConsumed") {&#13;
            if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
                var itemID = getItemIdFromEvent(eventData.item);&#13;
                if (itemID != null) {&#13;
                    removeDraggableItem(itemID);&#13;
                }&#13;
            }&#13;
        } else if (eventName == "ItemReturned") {&#13;
            if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
                var itemID = getItemIdFromEvent(eventData.item);&#13;
                if (itemID != null) {&#13;
                    createDraggableItem(itemID);&#13;
                }&#13;
            }&#13;
        } else if (eventName == "itemDragged") {&#13;
            if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
                var itemID = getItemIdFromEvent(eventData.item);&#13;
                presenter.fireSelectedDraggableEvent(itemID);&#13;
                hideDraggableItem(itemID);&#13;
            }&#13;
        } else if (eventName == "itemStopped") {&#13;
            if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
                var itemID = getItemIdFromEvent(eventData.item);&#13;
                if (itemID != null) {&#13;
                    showDraggableItem(itemID);&#13;
                }&#13;
            }&#13;
        } else if (eventName == "ItemSelected" &amp;&amp; eventData.item !== null) { // when ImageSource deselects item, then item is null&#13;
            var itemID = getItemIdFromEvent(eventData.item);&#13;
            this.applySelectedClass(itemID);&#13;
        }&#13;
    };&#13;
&#13;
    function isTemporarilyPaused() {&#13;
        return (presenter.audio.paused&#13;
            &amp;&amp; presenter.audio.readyState &gt; 2&#13;
            &amp;&amp; presenter.audio.currentTime &gt; 0&#13;
            &amp;&amp; !presenter.audio.ended&#13;
        );&#13;
    }&#13;
&#13;
    function getItemIdFromEvent(eventDataItem) {&#13;
        var addonAndItemIds = eventDataItem.split('-');&#13;
        if (addonAndItemIds.length != 2) return null;&#13;
        if (addonAndItemIds[0] != presenter.addonID) return null;&#13;
        return addonAndItemIds[1];&#13;
    }&#13;
&#13;
    presenter.applySelectedClass = function(itemID) {&#13;
        if (presenter.globalModel["Interface"] != "Draggable items") return;&#13;
        var keys = Object.keys(presenter.draggableItems);&#13;
        for (var i = 0; i &lt; keys.length; i++) {&#13;
            var key = keys[i];&#13;
            var item = presenter.draggableItems[key];&#13;
            if (key == itemID) {&#13;
                item.addClass('multiaudio-selected');&#13;
            } else {&#13;
                item.removeClass('multiaudio-selected');&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getEventObject(_item, _value, _score) {&#13;
    	return {&#13;
            source : presenter.addonID,&#13;
            item : _item + '',&#13;
            value : _value + '',&#13;
            score : _score + ''&#13;
        };&#13;
    }&#13;
&#13;
    function deferredQueueDecoratorChecker () {&#13;
        return presenter.isLoaded;&#13;
    }&#13;
    &#13;
    presenter.createEventData = function (data) {&#13;
    	return getEventObject(data.currentItem, data.currentTime, '');&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'end', '');&#13;
    };&#13;
    &#13;
    presenter.createOnPlayingEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'playing', '');&#13;
    };&#13;
    &#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function (eventData, currentTime) {&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function () {&#13;
        return this.audio.currentTime;&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function() {&#13;
&#13;
        var ua = navigator.userAgent;&#13;
        if( ua.indexOf("Android") &gt;= 0 )&#13;
        {&#13;
            var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
            if (androidversion == 4.4)&#13;
            {&#13;
                var duration = parseInt(presenter.audio.duration, 10);&#13;
                duration = isNaN(duration) ? 0 : duration;&#13;
                var currentTime2 = parseInt(presenter.audio.currentTime, 10);&#13;
&#13;
                if(duration == currentTime2){&#13;
                    presenter.sendOnEndEvent();&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var currentTime = presenter.formatTime(presenter.getAudioCurrentTime());&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        if (currentTime !== currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createEventData({'currentTime' : currentTime, 'currentItem': currentItem});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.addAttributeLoop = function(audio) {&#13;
        $(audio).on("ended", function() {&#13;
            this.currentTime = 0;&#13;
            this.play();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.prepareAudio = function(){&#13;
        this.audio = document.createElement("audio");&#13;
        var audioWrapper = presenter.globalView.find(".wrapper-addon-audio");&#13;
        audioWrapper.html("");&#13;
        audioWrapper.append(this.audio);&#13;
        return audioWrapper;&#13;
    };&#13;
    &#13;
    presenter.sendOnEndEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnEndEventData({'currentItem': currentItem});&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    &#13;
    presenter.sendOnPlayingEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnPlayingEventData({'currentItem': currentItem});&#13;
            eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.playingEventSent = false;&#13;
    presenter.createView = function(view, model){&#13;
        var interfaceType = model["Interface"];&#13;
        var audioWrapper = this.prepareAudio();&#13;
        this.audio.addEventListener('timeupdate', function() {&#13;
            presenter.onTimeUpdateSendEventCallback();&#13;
&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 )&#13;
            {&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5)&#13;
                {&#13;
                    if(presenter.audio.currentTime &gt; 0 &amp;&amp; !presenter.playingEventSent){&#13;
                        presenter.sendOnPlayingEvent();&#13;
                        presenter.playingEventSent = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('playing', function () {&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 ){&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5){&#13;
                    //do nothing&#13;
                }else{&#13;
                    presenter.sendOnPlayingEvent();&#13;
                }&#13;
            }else{&#13;
                presenter.sendOnPlayingEvent();&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('play', function () {&#13;
        }, false);&#13;
        this.audio.addEventListener('click', function(e) {&#13;
            e.stopPropagation();&#13;
        }, false);&#13;
        this.audio.addEventListener('ended', function() {&#13;
            presenter.stop();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.playingEventSent = false;&#13;
        }, false);&#13;
&#13;
        if (!presenter.isLoaded) {&#13;
            this.audio.addEventListener("loadeddata", function() {&#13;
                presenter.isLoaded = true;&#13;
&#13;
                deferredSyncQueue.resolve();&#13;
            });&#13;
        }&#13;
&#13;
        switch(interfaceType) {&#13;
            case "Default controls":&#13;
                $(this.audio).attr("controls", "controls").attr("preload", "auto");&#13;
                break;&#13;
            case "Display time":&#13;
                this.createCurrentAndDuration(audioWrapper);&#13;
                this.audio.addEventListener('loadeddata', onLoadedMetadataCallback, false);&#13;
                this.audio.addEventListener('timeupdate', onTimeUpdateCallback, false);&#13;
                break;&#13;
            case "Draggable items":&#13;
                presenter.createDraggableItems(model['Files']);&#13;
                break;&#13;
        }&#13;
&#13;
        Object.defineProperty(presenter.audio, 'playing', {&#13;
            get: function () {&#13;
                return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createDraggableItems = function(filesModel) {&#13;
        for (var i=0; i &lt; filesModel.length; i++) {&#13;
            createDraggableItem(filesModel[i].ID);&#13;
        }&#13;
        if (presenter.selectedItemID.length &gt; 0) {&#13;
            presenter.applySelectedClass(presenter.selectedItemID);&#13;
        }&#13;
    };&#13;
&#13;
    function createDraggableItem (itemID) {&#13;
        if (itemID in presenter.draggableItems) return;&#13;
&#13;
        var $el = $('&lt;div&gt;&lt;/div&gt;');&#13;
            $el.attr('data-audio-id', itemID);&#13;
            $el.attr('data-addon-id', presenter.addonID);&#13;
            $el.addClass('multiaudio-item-wrapper');&#13;
&#13;
            var $grab = $('&lt;div&gt;&lt;/div&gt;');&#13;
            $grab.addClass('multiaudio-item-grab-area');&#13;
            $el.append($grab);&#13;
&#13;
            var itemText = presenter.getTextFromFileID(itemID);&#13;
            if (presenter.playerController) {&#13;
                itemText = presenter.playerController.getTextParser().parseAltTexts(itemText);&#13;
            } else {&#13;
                itemText = window.TTSUtils.parsePreviewAltText(itemText);&#13;
            }&#13;
            if ($("&lt;span&gt;" + itemText + "&lt;/span&gt;").text().length &gt; 0) {&#13;
                var $text = $('&lt;span&gt;&lt;/span&gt;');&#13;
                $text.addClass('multiaudio-item-text');&#13;
                $text.html(itemText);&#13;
                $grab.append($text);&#13;
                $el.addClass("multiaudio-item-has-text");&#13;
            }&#13;
&#13;
            $grab.click(function(){presenter.handleGrabAreaClick(itemID)});&#13;
&#13;
            var $button = $('&lt;div&gt;&lt;/div&gt;');&#13;
            $button.addClass('multiaudio-item-button');&#13;
            $el.append($button);&#13;
&#13;
            var $icon = $('&lt;div&gt;&lt;/div&gt;');&#13;
            $icon.addClass('multiaudio-item-icon');&#13;
            $button.append($icon);&#13;
&#13;
            $button.click(draggableItemButtonClickHandler);&#13;
&#13;
            $el.draggable({&#13;
                revert: true,&#13;
                helper: "original",&#13;
                handle: ".multiaudio-item-grab-area",&#13;
                start : function(event, ui) {&#13;
                    presenter.fireSelectedDraggableEvent(itemID);&#13;
                    if (presenter.draggableItems[itemID].hasClass('playing')) {&#13;
                        presenter.stop();&#13;
                        presenter.draggableItems[itemID].removeClass('playing');&#13;
                    }&#13;
                },&#13;
                drag : function(event, ui) {&#13;
                    ui.position.left = ui.position.left / getScale().X;&#13;
                    ui.position.top = ui.position.top / getScale().Y;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.globalView.find(".wrapper-addon-audio").append($el);&#13;
            presenter.draggableItems[itemID] = $el;&#13;
    }&#13;
&#13;
    function getScale() {&#13;
        var $content = $("#content");&#13;
        if($content.size() &gt; 0) {&#13;
            var contentElem = $content[0];&#13;
            var scaleX = contentElem.getBoundingClientRect().width / contentElem.offsetWidth;&#13;
            var scaleY = contentElem.getBoundingClientRect().height / contentElem.offsetHeight;&#13;
            return {X: scaleX, Y: scaleY};&#13;
        } else if (presenter.playerController) {&#13;
            var scale = presenter.playerController.getScaleInformation();&#13;
            return {X: scale.scaleX, Y: scale.scaleY};&#13;
        } else {&#13;
            return {X: 1.0, Y: 1.0};&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTextFromFileID = function(itemID) {&#13;
        // This method is used by the multiplegap addon while creating the draggable audio widgets&#13;
        var item = null;&#13;
        for (var i = 0; i &lt; presenter.globalModel.Files.length; i++) {&#13;
            var tmpItem = presenter.globalModel.Files[i];&#13;
            if (tmpItem.ID === itemID) {&#13;
                item = tmpItem;&#13;
            }&#13;
        }&#13;
        if (item === null) return null;&#13;
        return item["Text"];&#13;
    }&#13;
&#13;
    function removeDraggableItem(itemID) {&#13;
        if (!(itemID in presenter.draggableItems)) return;&#13;
&#13;
        presenter.draggableItems[itemID].remove();&#13;
        delete presenter.draggableItems[itemID];&#13;
        if (presenter.selectedItemID == itemID) {&#13;
            presenter.selectedItemID = '';&#13;
        }&#13;
    }&#13;
&#13;
    function removeDraggableItems() {&#13;
        presenter.globalView.find('.multiaudio-item-wrapper').remove();&#13;
        presenter.draggableItems = {};&#13;
        presenter.selectedItemID = '';&#13;
    }&#13;
&#13;
    function hideDraggableItem(itemID) {&#13;
        if (itemID in presenter.draggableItems) {&#13;
            presenter.draggableItems[itemID].css('display','none');&#13;
        }&#13;
    }&#13;
&#13;
    function showDraggableItem(itemID) {&#13;
        if (itemID in presenter.draggableItems) {&#13;
            presenter.draggableItems[itemID].css('display','');&#13;
        }&#13;
    }&#13;
&#13;
    // itemID is optional, if left empty a "deselecting" event will be fired&#13;
    presenter.fireSelectedDraggableEvent = function(itemID) {&#13;
        var eventData = {&#13;
            source : presenter.addonID,&#13;
            type : 'audio',&#13;
            item : "",&#13;
            value : ""&#13;
        };&#13;
        if (itemID != null) {&#13;
            eventData.item = presenter.addonID + '-' + itemID;&#13;
            eventData.value = itemID + '';&#13;
        }&#13;
        eventBus.sendEvent('ItemSelected', eventData);&#13;
    };&#13;
&#13;
    presenter.handleGrabAreaClick = function(itemID) {&#13;
        if (presenter.draggableItems[itemID].hasClass('ui-draggable-dragging')) return;&#13;
        if (presenter.draggableItems[itemID].hasClass('multiaudio-selected')) {&#13;
            presenter.fireSelectedDraggableEvent();&#13;
            presenter.selectedItemID = '';&#13;
            readDeselected();&#13;
        } else {&#13;
            presenter.fireSelectedDraggableEvent(itemID);&#13;
            presenter.selectedItemID = itemID;&#13;
            readSelected();&#13;
        }&#13;
    };&#13;
&#13;
    function draggableItemButtonClickHandler (event) {&#13;
        var $parent = $(event.currentTarget).parent();&#13;
        var itemID = $parent.attr('data-audio-id');&#13;
        if ($parent.hasClass('playing')) {&#13;
            presenter.stop();&#13;
            presenter.jumpToID(itemID);&#13;
        } else {&#13;
            $parent.addClass('playing');&#13;
            presenter.jumpToID(itemID);&#13;
            presenter.play();&#13;
&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createCurrentAndDuration = function(audioWrapper) {&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime");&#13;
        $(durationTime).attr("id", "durationTime");&#13;
        audioWrapper.html(currentTime).append(durationTime);&#13;
    };&#13;
&#13;
    presenter.formatTime = function(seconds) {&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        minutes = (minutes &gt;= 10) ? minutes : "0" + minutes;&#13;
        seconds = Math.floor(seconds % 60);&#13;
        seconds = (seconds &gt;= 10) ? seconds : "0" + seconds;&#13;
        return minutes + ":" + seconds;&#13;
    };&#13;
&#13;
    function onLoadedMetadataCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.displayTimer(0, duration);&#13;
    }&#13;
&#13;
    function onTimeUpdateCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        presenter.displayTimer(currentTime, duration);&#13;
    }&#13;
&#13;
    presenter.displayTimer = function(current, duration) {&#13;
        presenter.globalView.find('#currentTime').html(presenter.formatTime(current) + ' / ');&#13;
        presenter.globalView.find('#durationTime').html(presenter.formatTime(duration));&#13;
    };&#13;
&#13;
    presenter.loadFiles = function(audio, model){&#13;
        this.files = model["Files"];&#13;
        var oggFile = this.files[this.currentAudio]["Ogg"];&#13;
        var mp3File = this.files[this.currentAudio]["Mp3"];&#13;
        var loop = !!(this.files[this.currentAudio]["Enable loop"] == "True");&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
&#13;
        var validated = this.validateFiles(this.files[this.currentAudio]);&#13;
&#13;
        if (!validated) {&#13;
            this.globalView.find(".wrapper-addon-audio").html(AUDIO_FILES_MISSING);&#13;
        }&#13;
&#13;
        if (loop) {&#13;
            presenter.addAttributeLoop(audio);&#13;
        }&#13;
&#13;
        if(audio.canPlayType) {&#13;
            canPlayMp3 = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
            if(canPlayMp3){&#13;
                $(audio).attr("src", mp3File);&#13;
            } else if (canPlayOgg) {&#13;
                $(audio).attr("src", oggFile);&#13;
            }&#13;
        } else {&#13;
            $(audio).append("Your browser doesn't support audio.");&#13;
        }&#13;
&#13;
        audio.load();&#13;
&#13;
    };&#13;
&#13;
    function upgradeModel(model) {&#13;
        var upgradedModel = upgradeFileText(model);&#13;
        upgradedModel = upgradeTextToSpeechSupport(upgradedModel);&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    function upgradeFileText(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
        for (var i = 0; i &lt; upgradedModel["Files"].length; i++) {&#13;
            if (upgradedModel["Files"][i]["Text"] === undefined) {&#13;
                upgradedModel["Files"][i]["Text"] = "";&#13;
            }&#13;
        }&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    function upgradeTextToSpeechSupport(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['speechTexts'] === undefined) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Selected: {Selected: "Selected"},&#13;
                Deselected: {Deselected: "Deselected"},&#13;
                Empty: {Empty: "Empty"}&#13;
            };&#13;
        }&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
            var value = rawValue.trim();&#13;
&#13;
            if (value === undefined || value === null || value === '') {&#13;
                return defaultValue;&#13;
            }&#13;
&#13;
            return value;&#13;
        }&#13;
&#13;
    presenter.getSpeechTexts = function(speechTextsModel) {&#13;
        var speechTexts = {&#13;
            selected:  'Selected',&#13;
            deselected: 'Deselected',&#13;
            empty: 'Empty'&#13;
        };&#13;
&#13;
        if (!speechTextsModel) {&#13;
            return speechTexts;&#13;
        }&#13;
&#13;
        speechTexts = {&#13;
            selected:        getSpeechTextProperty(speechTextsModel['Selected']['Selected'], speechTexts.selected),&#13;
            deselected:        getSpeechTextProperty(speechTextsModel['Deselected']['Deselected'], speechTexts.deselected),&#13;
            empty:        getSpeechTextProperty(speechTextsModel['Empty']['Empty'], speechTexts.empty)&#13;
        };&#13;
&#13;
        return speechTexts;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        this.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
        eventBus.addEventListener('ItemSelected', this);&#13;
        eventBus.addEventListener('ItemConsumed', this);&#13;
        eventBus.addEventListener('ItemReturned', this);&#13;
        eventBus.addEventListener('itemStopped', this);&#13;
        eventBus.addEventListener('itemDragged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        this.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function(view, model, isPreview) {&#13;
        var upgradedModel = upgradeModel(model);&#13;
        this.globalModel = upgradedModel;&#13;
        this.speechTexts = presenter.getSpeechTexts(upgradedModel['speechTexts']);&#13;
        this.globalView = $(view);&#13;
        this.createView(view, upgradedModel);&#13;
        if (!isPreview) {&#13;
        	this.loadFiles(this.audio, upgradedModel);&#13;
        }&#13;
        this.visible = !!(upgradedModel['Is Visible'] == 'True');&#13;
        this.defaultVisibility = this.visible;&#13;
&#13;
        presenter.view = view;&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonMultiAudio_destroy() {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.audio.pause();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'jumpTo': presenter.jumpToCommand,&#13;
            'jumpToID': presenter.jumpToIDCommand,&#13;
            'pause': presenter.pause&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(presenter.globalView).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.play = deferredSyncQueue.decorate(function() {&#13;
        if (!this.audio.playing) {&#13;
            this.audio.play();&#13;
        }&#13;
        if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
            presenter.setCurrentDraggableItemToPlay();&#13;
        }&#13;
    });&#13;
&#13;
    presenter.setCurrentDraggableItemToPlay = function() {&#13;
        var itemID = presenter.files[presenter.currentAudio].ID;&#13;
        $(presenter.view).find(".multiaudio-item-wrapper").each(function(){&#13;
            var $this = $(this);&#13;
            if ($this.attr('data-audio-id') == itemID) {&#13;
                $this.addClass('playing');&#13;
            } else {&#13;
                $this.removeClass('playing');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.stop = deferredSyncQueue.decorate(function() {&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
&#13;
        presenter.audio.currentTime = 0;&#13;
        if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
            presenter.stopDraggableItems();&#13;
        }&#13;
    });&#13;
&#13;
    presenter.stopDraggableItems = function() {&#13;
        $(presenter.view).find('.multiaudio-item-wrapper.playing').removeClass('playing');&#13;
    };&#13;
&#13;
    presenter.pause = function() {&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
        presenter.stopDraggableItems();&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        this.visible = true;&#13;
        if(audioStarted(this.audio)) {&#13;
            this.audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    function increaseVolume() {&#13;
        var volume = presenter.audio.volume;&#13;
        volume += 0.1;&#13;
        if (volume &gt; 1.0) volume = 1.0;&#13;
        presenter.audio.volume = volume;&#13;
    };&#13;
&#13;
    function decreaseVolume() {&#13;
        var volume = presenter.audio.volume;&#13;
        volume -= 0.1;&#13;
        if (volume &lt; 0.0) volume = 0.0;&#13;
        presenter.audio.volume = volume;&#13;
    };&#13;
&#13;
    function forward() {&#13;
        presenter.audio.currentTime += 5;&#13;
    }&#13;
&#13;
    function backward() {&#13;
            presenter.audio.currentTime -= 5;&#13;
        }&#13;
&#13;
    function playPause() {&#13;
        if (presenter.audio.paused) {&#13;
            presenter.play();&#13;
        } else {&#13;
            presenter.pause();&#13;
        }&#13;
    }&#13;
&#13;
    function playStop() {&#13;
            if (presenter.audio.paused) {&#13;
                presenter.play();&#13;
            } else {&#13;
                presenter.stop();&#13;
            }&#13;
        }&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        this.visible = false;&#13;
        if(audioStarted(this.audio)){&#13;
            this.audio.pause();&#13;
        }&#13;
    };&#13;
&#13;
    function audioStarted(audio) {&#13;
        return audio.currentTime &gt; 0;&#13;
    }&#13;
    &#13;
    presenter.reset = function() {&#13;
        this.visible = this.defaultVisibility;&#13;
        if (this.visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        this.stop();&#13;
        this.currentAudio = 0;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
&#13;
        if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
            removeDraggableItems();&#13;
            for (var i = 0; i &lt; presenter.globalModel.Files.length; i++) {&#13;
                createDraggableItem(presenter.globalModel.Files[i].ID);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpTo = function(audioNumber) {&#13;
        var newAudio = parseInt(audioNumber, 10) - 1;&#13;
        if (0 &lt;= newAudio &amp;&amp; newAudio &lt; this.files.length) {&#13;
            this.currentAudio = newAudio;&#13;
            presenter.isLoaded = false;&#13;
            presenter.loadFiles(this.audio, this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToCommand = function(params) {&#13;
        presenter.jumpTo(params[0]);&#13;
        presenter.playingEventSent = false;&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (this.currentAudio &gt; 0) {&#13;
            this.currentAudio--;&#13;
            this.initialize(this.globalView[0], this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (this.currentAudio &lt; this.files.length - 1) {&#13;
            this.currentAudio++;&#13;
            this.initialize(this.globalView[0], this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.previousDraggableItem = function() {&#13;
        var itemIDs = Object.keys(presenter.draggableItems);&#13;
        if (itemIDs.length == 0){&#13;
            presenter.currentDraggableItemID = '';&#13;
            return;&#13;
        }&#13;
        if (presenter.currentDraggableItemID.length == 0) {&#13;
            presenter.currentDraggableItemID = itemIDs[itemIDs.length - 1];&#13;
            presenter.jumpToID(presenter.currentDraggableItemID);&#13;
            updateWCAGSelectedClass();&#13;
        } else {&#13;
            var index = itemIDs.indexOf(presenter.currentDraggableItemID);&#13;
            if (index &gt; 0) {&#13;
                presenter.currentDraggableItemID = itemIDs[index-1];&#13;
                presenter.jumpToID(presenter.currentDraggableItemID);&#13;
                updateWCAGSelectedClass();&#13;
            }&#13;
        }&#13;
        }&#13;
&#13;
    presenter.nextDraggableItem = function() {&#13;
        var itemIDs = Object.keys(presenter.draggableItems);&#13;
        if (itemIDs.length == 0){&#13;
            presenter.currentDraggableItemID = '';&#13;
            return;&#13;
        }&#13;
        if (presenter.currentDraggableItemID.length == 0) {&#13;
            presenter.currentDraggableItemID = itemIDs[0];&#13;
            presenter.jumpToID(presenter.currentDraggableItemID);&#13;
            updateWCAGSelectedClass();&#13;
        } else {&#13;
            var index = itemIDs.indexOf(presenter.currentDraggableItemID);&#13;
            if (index &lt; itemIDs.length -1 &amp;&amp; index != -1) {&#13;
                presenter.currentDraggableItemID = itemIDs[index+1];&#13;
                presenter.jumpToID(presenter.currentDraggableItemID);&#13;
                updateWCAGSelectedClass();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function updateWCAGSelectedClass() {&#13;
        if (presenter.globalModel["Interface"] != "Draggable items") return;&#13;
&#13;
        clearWCAGSelectedClass();&#13;
        if (presenter.currentDraggableItemID.length &gt; 0) {&#13;
            presenter.draggableItems[presenter.currentDraggableItemID].addClass('keyboard_navigation_active_element');&#13;
        }&#13;
    }&#13;
&#13;
    function clearWCAGSelectedClass() {&#13;
        var activeClassName = 'keyboard_navigation_active_element';&#13;
        presenter.globalView.find('.'+activeClassName).removeClass(activeClassName);&#13;
    }&#13;
&#13;
    presenter.jumpToID = function(id) {&#13;
        for (var i = 0; i &lt; this.files.length; i++) {&#13;
            if (id === this.files[i].ID) {&#13;
                this.jumpTo(i + 1);  // Audio numbers are counted from 1 to n&#13;
                break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToIDCommand = function(params) {&#13;
        presenter.jumpToID(params[0]);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var state = {&#13;
            'visible' : "" + this.visible,&#13;
            'currentAudio' : "" + this.currentAudio,&#13;
            'currentTime'   : "" + this.audio.currentTime&#13;
        };&#13;
        var draggableKeys = Object.keys(presenter.draggableItems);&#13;
        if (draggableKeys.length != 0) {&#13;
            state['draggableItems'] = Object.keys(presenter.draggableItems).join(',')&#13;
        }&#13;
        return this.convertStateToString(state);&#13;
    };&#13;
&#13;
    presenter.convertStateToString = function(state) {&#13;
        var stateString = "";&#13;
        $.each(state, function(key, value){&#13;
            stateString += "[" + key + ":" + value + "]";&#13;
        });&#13;
        return stateString;&#13;
    };&#13;
&#13;
    presenter.convertStringToState = function(stateString) {&#13;
        var state = {};&#13;
        var pattern = /\w+:[\w|\,]+/g;&#13;
        var stateElements = stateString.match(pattern);&#13;
        for (var i = 0; i &lt; stateElements.length; i++) {&#13;
            var keyAndValue = stateElements[i].split(":");&#13;
            var key = keyAndValue[0];&#13;
            state[key] = keyAndValue[1];&#13;
        }&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = this.convertStringToState(stateString);&#13;
        var visible = !!(state["visible"] == "true");&#13;
        var currentAudio = parseInt(state["currentAudio"]);&#13;
        var currentTime = parseInt(state["currentTime"]);&#13;
&#13;
        if (visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
&#13;
        this.currentAudio = currentAudio;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
&#13;
        if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
            var keys = Object.keys(presenter.draggableItems);&#13;
            if ('draggableItems' in state) {&#13;
                var loadedDraggableItems = state['draggableItems'].split(',');&#13;
                for (var i = 0; i &lt; keys.length; i++) {&#13;
                    if (loadedDraggableItems.indexOf(keys[i]) == -1) {&#13;
                        removeDraggableItem(keys[i]);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                for (var i = 0; i &lt; keys.length; i++) {&#13;
                    removeDraggableItem(keys[i]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateFiles = function(files) {&#13;
        return !(!files["Ogg"] &amp;&amp; !files["Mp3"]);&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
            presenter.isWCAGOn = isOn;&#13;
            if (!isOn) {&#13;
                clearWCAGSelectedClass();&#13;
                presenter.currentDraggableItemID = '';&#13;
            }&#13;
        };&#13;
&#13;
    presenter.keyboardController = function (keycode, isShift, event) {&#13;
        event.preventDefault();&#13;
        if (presenter.globalModel["Interface"] == "Draggable items") {&#13;
            presenter.draggableKeyboardController(keycode, isShift, event);&#13;
        } else {&#13;
            presenter.audioKeyboardController(keycode, isShift, event);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.draggableKeyboardController = function (keycode, isShift, event) {&#13;
        switch (keycode) {&#13;
            case 9: // TAB&#13;
                if (isShift) {&#13;
                    presenter.previousDraggableItem();&#13;
                } else {&#13;
                    presenter.nextDraggableItem();&#13;
                }&#13;
                readCurrentDraggableFileText();&#13;
                break;&#13;
            case 13: //ENTER&#13;
                if (isShift) {&#13;
                    presenter.stop();&#13;
                    clearWCAGSelectedClass();&#13;
                    presenter.currentDraggableItemID = '';&#13;
                } else {&#13;
                    if (presenter.currentDraggableItemID.length &gt; 0) {&#13;
                        playStop();&#13;
                        updateWCAGSelectedClass();&#13;
                    }&#13;
                }&#13;
                break;&#13;
            case 32: //SPACE&#13;
                var itemID = presenter.files[presenter.currentAudio].ID;&#13;
                presenter.handleGrabAreaClick(itemID);&#13;
                break;&#13;
            case 38: // UP&#13;
                presenter.previousDraggableItem();&#13;
                readCurrentDraggableFileText();&#13;
                updateWCAGSelectedClass();&#13;
                break;&#13;
            case 40: // DOWN&#13;
                presenter.nextDraggableItem();&#13;
                readCurrentDraggableFileText();&#13;
                updateWCAGSelectedClass();&#13;
                break;&#13;
            case 37: // LEFT&#13;
                presenter.previousDraggableItem();&#13;
                readCurrentDraggableFileText();&#13;
                updateWCAGSelectedClass();&#13;
                break;&#13;
            case 39: // RIGHT&#13;
                presenter.nextDraggableItem();&#13;
                readCurrentDraggableFileText();&#13;
                updateWCAGSelectedClass();&#13;
                break;&#13;
            case 27: // ESC&#13;
                presenter.stop();&#13;
                clearWCAGSelectedClass();&#13;
                presenter.currentDraggableItemID = '';&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.audioKeyboardController = function (keycode, isShift, event) {&#13;
        switch (keycode) {&#13;
            case 9: // TAB&#13;
                if (isShift) {&#13;
                    presenter.previous();&#13;
                } else {&#13;
                    presenter.next();&#13;
                }&#13;
                readCurrentAudioFileText();&#13;
                break;&#13;
            case 13: //ENTER&#13;
                if (!isShift) {&#13;
                    presenter.pause();&#13;
                    readCurrentAudioFileText();&#13;
                }&#13;
                break;&#13;
            case 32: // SPACE&#13;
                playPause();&#13;
                break;&#13;
            case 38: // UP&#13;
                increaseVolume();&#13;
                break;&#13;
            case 40: // DOWN&#13;
                decreaseVolume();&#13;
                break;&#13;
            case 37: // LEFT&#13;
                backward();&#13;
                break;&#13;
            case 39: // RIGHT&#13;
                forward();&#13;
                break;&#13;
            case 27: // ESC&#13;
                presenter.stop();&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    function readSelected() {&#13;
        var textVoiceArray = [];&#13;
        textVoiceArray.push(getTextVoiceObject(presenter.speechTexts.selected, ""));&#13;
        speak(textVoiceArray);&#13;
    }&#13;
&#13;
    function readDeselected() {&#13;
        var textVoiceArray = [];&#13;
        textVoiceArray.push(getTextVoiceObject(presenter.speechTexts.deselected, ""));&#13;
        speak(textVoiceArray);&#13;
    }&#13;
&#13;
    function readCurrentDraggableFileText() {&#13;
        var textVoiceArray = [];&#13;
        if (Object.keys(presenter.draggableItems).length == 0) {&#13;
            textVoiceArray.push(getTextVoiceObject(presenter.speechTexts.empty, ""));&#13;
        } else {&#13;
            var item = presenter.files[presenter.currentAudio];&#13;
            textVoiceArray.push(getTextVoiceObject(item.Text, presenter.globalModel['langAttribute']));&#13;
            if (presenter.selectedItemID == item.ID) {&#13;
                textVoiceArray.push(getTextVoiceObject(presenter.speechTexts.selected, ""));&#13;
            }&#13;
        }&#13;
        speak(textVoiceArray);&#13;
    }&#13;
&#13;
    function readCurrentAudioFileText() {&#13;
        var item = presenter.files[presenter.currentAudio];&#13;
        var textVoiceArray = [getTextVoiceObject(item.Text, presenter.globalModel['langAttribute'])];&#13;
        speak(textVoiceArray);&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function () {&#13;
        if (presenter.playerController) {&#13;
            return presenter.playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull();&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>