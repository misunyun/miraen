<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Animated_Lesson_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Ranges" nameLabel="Animated_Lesson_Progress_property_ranges" type="list">
            <property name="Score" nameLabel="Animated_Lesson_Progress_property_score" type="string"/>
		    <property name="Image" nameLabel="Animated_Lesson_Progress_property_image" type="image"/>
		</property>
	</model>
<css>.animated-lesson-progress-wrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.animated-lesson-progress-rate {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-size: 100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
</css><view>&lt;div class="animated-lesson-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="animated-lesson-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAnimated_Lesson_Progress_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    var range_img = [],&#13;
        range_max_score = [];&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "All ranges must be in ascending order",&#13;
        'E_02': "Last range must equal 100",&#13;
        'E_03': "All ranges must be positive",&#13;
        'E_04': "First range must equal 0",&#13;
        'E_05': "All scores must be filled"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model)  {&#13;
&#13;
        for (var ranges_prop=0; ranges_prop &lt; model.Ranges.length; ranges_prop++){&#13;
            range_img[ranges_prop] = model.Ranges[ranges_prop].Image;&#13;
            range_max_score[ranges_prop] = parseFloat(model.Ranges[ranges_prop].Score);&#13;
        }&#13;
&#13;
        for (var i=0; i&lt; model.Ranges.length; i++){&#13;
            if(!model.Ranges[i].Score){&#13;
                return returnErrorObject('E_05');&#13;
            }&#13;
            if(range_max_score[i]&gt; range_max_score[i+1]){&#13;
                return returnErrorObject('E_01');&#13;
            }&#13;
            if(range_max_score[i] &lt; 0){&#13;
                return returnErrorObject('E_03');&#13;
            }&#13;
        }&#13;
&#13;
        if(range_max_score[model.Ranges.length-1] != 100){&#13;
            return returnErrorObject('E_02');&#13;
        }&#13;
&#13;
        if(range_max_score[0] != 0){&#13;
            return returnErrorObject('E_04');&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            Ranges: {&#13;
                Image: range_img,&#13;
                deselected: range_max_score&#13;
            },&#13;
            length: model.Ranges.length,&#13;
            isVisible: isVisible&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.cleanView = function () {&#13;
        presenter.$view.find('.animated-lesson-progress-rate').each(function () {&#13;
            $(this).css('display', 'none');&#13;
            $(this).attr('data-name', 'invisible');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setViewImage = function (rate) {&#13;
        presenter.$view.find('.rate-' + (rate+1)).css('display', 'block');&#13;
        presenter.$view.find('.rate-' + (rate+1)).attr('data-name', 'visible');&#13;
    };&#13;
&#13;
    presenter.countPercentageScore = function () {&#13;
        var model = playerController.getPresentation();&#13;
        var scoreService = playerController.getScore();&#13;
        var count = 0,&#13;
            percentageScore = 0;&#13;
&#13;
        for(var i = 0; i &lt; model.getPageCount(); i++){&#13;
            var page = model.getPage(i);&#13;
&#13;
            if(page.isReportable()){&#13;
                count += 1;&#13;
&#13;
                var pageScore = scoreService.getPageScoreById(page.getId()),&#13;
                    score = pageScore.score,&#13;
                    maxScore = pageScore.maxScore;&#13;
&#13;
                if (maxScore &gt; 0) {&#13;
                    percentageScore += ((score/maxScore) * 100);&#13;
                } else if (page.isVisited()) {&#13;
                    percentageScore += 100; // the page was visited but there is no activities, so we give you a bonus +100% :-)&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
&#13;
        if (count &gt; 0) {&#13;
            percentageScore = percentageScore / count;&#13;
        }&#13;
&#13;
        for (var j = 0; j &lt; range_max_score.length; j++){&#13;
            if(percentageScore == 0){&#13;
                presenter.cleanView();&#13;
                presenter.setViewImage(0);&#13;
                return;&#13;
            }&#13;
&#13;
            if(percentageScore &lt;= range_max_score[j+1] &amp;&amp; percentageScore &gt; range_max_score[j]){&#13;
                presenter.cleanView();&#13;
                presenter.setViewImage(j+1);&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.appendImages = function (length) {&#13;
        for (var j=0; j&lt;length; j++){&#13;
            presenter.$view.find('.animated-lesson-progress-wrapper').append('&lt;div class="animated-lesson-progress-rate rate-'+ (j+1) +'"&gt;&lt;/div&gt;');&#13;
            if(range_img[j] != "") {&#13;
                presenter.$view.find('.rate-' + (j + 1)).css('background-image', 'url(' + range_img[j] + ')');&#13;
            }&#13;
            presenter.$view.find('.rate-'+(j+1)).css('display', 'none');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.eventListener = function () {&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.countPercentageScore();&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
    	presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.appendImages(presenter.configuration.length);&#13;
&#13;
        if(!isPreview) {&#13;
            presenter.eventListener();&#13;
        }else{&#13;
            presenter.setViewImage(0);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ValueChanged" &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.countPercentageScore();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getImageId = function () {&#13;
        return presenter.$view.find('[data-name="visible"]').attr('id');&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
    	return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
       if (!state) return;&#13;
&#13;
    	var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.countPercentageScore();&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>