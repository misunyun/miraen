<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Layered_Image" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Base image" nameLabel="Layered_Image_property_base_image" type="image"/>
		<property name="Layers" nameLabel="Layered_Image_property_layers" type="list">
			<property name="Image" nameLabel="Layered_Image_property_image" type="image"/>
			<property name="Show at start" nameLabel="Layered_Image_property_show_at_start" type="boolean"/>
		</property>
		<property name="Image size" nameLabel="Layered_Image_property_image_size" type="{Original, Keep aspect ratio, Stretch}"/>
        <property name="Animated gif refresh" nameLabel="Layered_Image_property_animated_gif_refresh" type="boolean"/>
	</model>
<css>.layeredimage-wrapper,&#13;
.layeredimage-image {&#13;
    border: 0;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.layeredimage-wrapper {&#13;
    position: relative;&#13;
}&#13;
&#13;
.layeredimage-image {&#13;
    position: absolute;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
.layeredimage-loading {&#13;
    display: none;&#13;
    z-index: 10;&#13;
    position: absolute;&#13;
    border: 0 solid black;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
</css><view>&lt;div class="layeredimage-wrapper"&gt;&#13;
    &lt;div class="layeredimage-image"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="layeredimage-loading"/&gt;&#13;
</view><preview>&lt;div class="layeredimage-wrapper"&gt;&#13;
    &lt;div class="layeredimage-image"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="layeredimage-loading"/&gt;&#13;
</preview><presenter>function AddonLayered_Image_create() {&#13;
    var presenter = function () {};&#13;
    var DOMElements = {};&#13;
    presenter.flags = [];&#13;
    presenter.savedState = "";&#13;
    var elementsDimensions = {};&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        BI_01: "Base image wasn't set or was set incorrectly!",&#13;
        L_01: "At least one layer must be set and no blank layers can be left!"&#13;
    };&#13;
&#13;
    presenter.IMAGE_SIZE = {&#13;
        ORIGINAL: 0,&#13;
        SCALED: 1,&#13;
        STRETCHED: 2&#13;
    };&#13;
&#13;
    function deferredQueueDecoratorChecker () {&#13;
        return presenter.imagesAreLoaded || presenter.diplayingLayers;&#13;
    }&#13;
&#13;
    function setDOMElementsHrefAndSelectors(view) {&#13;
        DOMElements.$view = $(view);&#13;
        DOMElements.wrapper = $(DOMElements.$view.find('.layeredimage-wrapper:first')[0]);&#13;
        DOMElements.loading = $(DOMElements.$view.find('.layeredimage-loading:first')[0]);&#13;
        DOMElements.baseImage = $(DOMElements.wrapper.find('.layeredimage-image:first')[0]);&#13;
    }&#13;
&#13;
    function setElementsDimensions(width, height) {&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(DOMElements.wrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
        var wrapperWidth = width - wrapperDistances.horizontal;&#13;
        var wrapperHeight = height - wrapperDistances.vertical;&#13;
&#13;
        $(DOMElements.wrapper).css({&#13;
            width: wrapperWidth,&#13;
            height: wrapperHeight&#13;
        });&#13;
&#13;
        var imageDimensions = DOMOperationsUtils.getOuterDimensions(DOMElements.baseImage);&#13;
        var imageDistances = DOMOperationsUtils.calculateOuterDistances(imageDimensions);&#13;
        var imageWidth = width - imageDistances.horizontal;&#13;
        var imageHeight = height - imageDistances.vertical;&#13;
&#13;
        elementsDimensions = {&#13;
            wrapper: {&#13;
                width: wrapperWidth,&#13;
                height: wrapperHeight&#13;
            },&#13;
            image: {&#13;
                width: imageWidth,&#13;
                height: imageHeight&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    // Calculate scale for image containing element depending on frame aspect ratio&#13;
    function calculateContainerDimensions(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal;&#13;
        var vertical;&#13;
&#13;
        if (imageRatio &gt;= containerRatio) {&#13;
            horizontal = containerWidth;&#13;
            vertical = containerWidth / imageRatio;&#13;
        } else {&#13;
            vertical = containerHeight;&#13;
            horizontal = containerHeight * imageRatio;&#13;
        }&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    }&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size) {&#13;
        var cssValue;&#13;
&#13;
        switch (size) {&#13;
            case presenter.IMAGE_SIZE.SCALED:&#13;
            case presenter.IMAGE_SIZE.STRETCHED:&#13;
                cssValue = '100% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function appendImage(image, show) {&#13;
        var imageElement = document.createElement('div');&#13;
        $(imageElement).css('backgroundImage', 'url(' + image + ')');&#13;
        $(imageElement).addClass('layeredimage-image');&#13;
        $(DOMElements.wrapper).append(imageElement);&#13;
&#13;
        if (!show) {&#13;
            $(imageElement).hide();&#13;
        }&#13;
    }&#13;
&#13;
    function calculateImageDimensions(image) {&#13;
        $(DOMElements.wrapper).append(image);&#13;
&#13;
        $(image).show();&#13;
        var imageWidth = $(image).width();&#13;
        var imageHeight = $(image).height();&#13;
        $(image).hide();&#13;
&#13;
        $(image).remove();&#13;
        return { width: imageWidth, height: imageHeight };&#13;
    }&#13;
&#13;
    function preloadImages(isPreview) {&#13;
        showLoadingScreen();&#13;
&#13;
        var images = [presenter.configuration.baseImage];&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            images.push(presenter.configuration.layers[i].image);&#13;
        }&#13;
&#13;
        $.imgpreload(images, {&#13;
            all: function() {&#13;
                var imageDimensions = calculateImageDimensions(this[0]);&#13;
                loadImages(imageDimensions.width, imageDimensions.height, isPreview);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function loadImages(imageWidth, imageHeight, isPreview) {&#13;
        appendImage(presenter.configuration.baseImage, true);&#13;
        DOMElements.baseImage = $(DOMElements.$view.find('.layeredimage-image:first')[0]);&#13;
&#13;
        var containerWidth = elementsDimensions.wrapper.width;&#13;
        var containerHeight = elementsDimensions.wrapper.height;&#13;
        var containerDimensions = calculateContainerDimensions(imageWidth, imageHeight, containerWidth, containerHeight);&#13;
        var backgroundSize = calculateBackgroundSize(presenter.configuration.imageSize);&#13;
&#13;
        var isScaledMode = presenter.configuration.imageSize === presenter.IMAGE_SIZE.SCALED;&#13;
        $(DOMElements.baseImage).css({&#13;
            width: isScaledMode ? containerDimensions.horizontal + 'px' : containerWidth + 'px',&#13;
            height: isScaledMode ? containerDimensions.vertical + 'px' : containerHeight + 'px'&#13;
        });&#13;
        if (backgroundSize) {&#13;
            $(DOMElements.baseImage).css('background-size', backgroundSize);&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            var showLayer = isPreview ? true : presenter.configuration.layers[i].showAtStart;&#13;
            if(!presenter.savedState) {&#13;
                setFlag(i, presenter.configuration.layers[i].showAtStart);&#13;
            }&#13;
            var imageElement = document.createElement('div');&#13;
            $(imageElement).css('backgroundImage', 'url(' + presenter.configuration.layers[i].image + ')');&#13;
            $(imageElement).addClass('layeredimage-image');&#13;
            $(imageElement).attr('data-index', (i+1));&#13;
            $(DOMElements.wrapper).append(imageElement);&#13;
&#13;
            if (!showLayer) {&#13;
                $(imageElement).hide();&#13;
            }&#13;
&#13;
            var layer = DOMElements.wrapper.find('div[data-index="'+ (i+1) +'"]');&#13;
            $(layer).css({&#13;
                width: isScaledMode ? containerDimensions.horizontal + 'px' : containerWidth + 'px',&#13;
                height: isScaledMode ? containerDimensions.vertical + 'px' : containerHeight + 'px'&#13;
            });&#13;
            if (backgroundSize) {&#13;
                $(layer).css('background-size', backgroundSize);&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
&#13;
        if(!isPreview){&#13;
            if (!presenter.imagesAreLoaded &amp;&amp; !presenter.savedState) {&#13;
                executeTasks();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function executeTasks () {&#13;
        presenter.imagesAreLoaded = true;&#13;
&#13;
        deferredSyncQueue.resolve();&#13;
    }&#13;
&#13;
    function setFlag(index, value) {&#13;
        presenter.flags[index] = value;&#13;
    }&#13;
&#13;
    function getFlag(index) {&#13;
        return presenter.flags[index];&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(DOMElements.loading).css({&#13;
            top: ((containerHeight - $(DOMElements.loading).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(DOMElements.loading).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(DOMElements.loading).show();&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        $(DOMElements.loading).hide();&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        var width = model.Width;&#13;
        var height = model.Height;&#13;
&#13;
        setDOMElementsHrefAndSelectors(view);&#13;
&#13;
        if (!isPreview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(DOMElements.loading).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        setElementsDimensions(width, height);&#13;
        $(DOMElements.baseImage).remove();&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(DOMElements.$view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        } else {&#13;
            prepareLoadingScreen(width, height);&#13;
            preloadImages(isPreview);&#13;
            if (!isPreview &amp;&amp; !presenter.configuration.isVisibleByDefault) {&#13;
                presenter.hide();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.imagesAreLoaded = false;&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        hideAllLayers();&#13;
        displayVisibleLayers(true);&#13;
        presenter.showLayer(0);&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            flags: presenter.flags&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setStateCallback = function() {&#13;
        displayVisibleLayers(false);&#13;
&#13;
        if (presenter.isVisbleSaved) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if (!presenter.imagesAreLoaded) {&#13;
            executeTasks();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        this.savedState = JSON.parse(state);&#13;
&#13;
        presenter.isVisbleSaved = this.savedState.isVisible;&#13;
&#13;
        for (var i = 0; i &lt; this.savedState.flags.length; i++) {&#13;
            presenter.flags[i] = this.savedState.flags[i];&#13;
        }&#13;
&#13;
        $.when(presenter.imageLoaded).then(presenter.setStateCallback);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        DOMElements.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'showLayer': presenter.showLayerCommand,&#13;
            'hideLayer': presenter.hideLayerCommand,&#13;
            'toggleLayer': presenter.toggleLayerCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function displayVisibleLayers(displayLayersWithShowAtStart) {&#13;
        presenter.diplayingLayers = true;&#13;
        for (var i = 0; i &lt; presenter.configuration.layers.length; i++) {&#13;
            var layerShouldBeDisplayed = displayLayersWithShowAtStart ? presenter.configuration.layers[i].showAtStart : presenter.flags[i];&#13;
            if(layerShouldBeDisplayed) {&#13;
                presenter.showLayer(i + 1);&#13;
            } else {&#13;
                presenter.hideLayer(i + 1);&#13;
            }&#13;
        }&#13;
        presenter.displayingLayers = false;&#13;
    }&#13;
&#13;
    presenter.showLayer = deferredSyncQueue.decorate(function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
&#13;
        setFlag(index - 1, true);&#13;
&#13;
        var layer = DOMElements.wrapper.find('div[data-index="'+ index +'"]'),&#13;
            $layer = $(layer);&#13;
&#13;
        $layer.show();&#13;
        if(presenter.configuration.animatedGifRefresh){&#13;
            var backgroundImageUrl = $layer.css('background-image'),&#13;
                backgroundImage = backgroundImageUrl.substring(backgroundImageUrl.indexOf('url(') + 'url('.length, backgroundImageUrl.indexOf(')')).replace(/"/g, ""),&#13;
                timestamp = new Date().getTime();&#13;
&#13;
            if(backgroundImage.indexOf('?') !== -1) {&#13;
                backgroundImage = backgroundImage.substring(0, backgroundImage.indexOf('?'));&#13;
            }&#13;
&#13;
            backgroundImage = backgroundImage + '?' + timestamp;&#13;
            $layer.css('background-image', '');&#13;
            $layer.css('background-image', 'url('+ backgroundImage +')');&#13;
        }&#13;
    });&#13;
&#13;
    presenter.showLayerCommand = function (params) {&#13;
        presenter.showLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.hideLayer = deferredSyncQueue.decorate(function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
&#13;
        setFlag(index - 1, false);&#13;
&#13;
        var layer = DOMElements.wrapper.find('div[data-index="'+ index +'"]');&#13;
        $(layer).hide();&#13;
    });&#13;
&#13;
    presenter.hideLayerCommand = function (params) {&#13;
        presenter.hideLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    presenter.toggleLayer = deferredSyncQueue.decorate(function(index) {&#13;
        if (isNaN(index) || index &lt; 1 || index &gt; presenter.configuration.layers.length) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (getFlag(index - 1)) {&#13;
            this.hideLayer(index);&#13;
        } else {&#13;
            this.showLayer(index);&#13;
        }&#13;
    });&#13;
&#13;
    presenter.toggleLayerCommand = function (params) {&#13;
        presenter.toggleLayer(parseInt(params[0], 10));&#13;
    };&#13;
&#13;
    function hideAllLayers() {&#13;
        for (var i = 1; i &lt;= presenter.configuration.layers.length; i++) {&#13;
            presenter.hideLayer(i);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateImage = function(image) {&#13;
        if (ModelValidationUtils.isStringEmpty(image)) return { isError: true };&#13;
&#13;
        return { isError: false, image: image };&#13;
    };&#13;
&#13;
    presenter.validateImageList = function (list) {&#13;
        var imageList = [];&#13;
&#13;
        for (var i = 0; i &lt; list.length; i++) {&#13;
            var image = list[i].Image;&#13;
            if (presenter.validateImage(image).isError) {&#13;
                return { isError: true, errorCode: "IL_01" };&#13;
            }&#13;
&#13;
            var showAtStart = presenter.showAtStart(list[i]["Show at start"]);&#13;
            imageList.push({&#13;
                image: image,&#13;
                showAtStart: showAtStart&#13;
            });&#13;
        }&#13;
&#13;
        return { isError: false, list: imageList };&#13;
    };&#13;
&#13;
    presenter.validateImageSize = function(imageSize) {&#13;
        var result;&#13;
&#13;
        switch (imageSize) {&#13;
            case "Keep aspect ratio":&#13;
                result = presenter.IMAGE_SIZE.SCALED;&#13;
                break;&#13;
            case "Stretch":&#13;
                result = presenter.IMAGE_SIZE.STRETCHED;&#13;
                break;&#13;
            default:&#13;
                result = presenter.IMAGE_SIZE.ORIGINAL;&#13;
                break;&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.showAtStart = function(value) {&#13;
        return value === "True" || value === "1";&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedBaseImage = presenter.validateImage(model["Base image"]);&#13;
        if (validatedBaseImage.isError) return { isError: true, errorCode: "BI_01" };&#13;
&#13;
        var validatedLayers = presenter.validateImageList(model.Layers);&#13;
        if (validatedLayers.isError) return { isError: true, errorCode: "L_01" };&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            baseImage: validatedBaseImage.image,&#13;
            layers: validatedLayers.list,&#13;
            imageSize: presenter.validateImageSize(model["Image size"]),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            animatedGifRefresh: ModelValidationUtils.validateBoolean(model["Animated gif refresh"])&#13;
        };&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>