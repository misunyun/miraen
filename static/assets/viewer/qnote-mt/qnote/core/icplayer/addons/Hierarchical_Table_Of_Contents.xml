<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Table_Of_Contents" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Table_Of_Contents_property_title_label" type="string"/>
        <property displayName="Display only chapters" name="displayOnlyChapters" nameLabel="Hierarchical_Table_Of_Contents_property_display_only_chapters" type="boolean"/>
        <property displayName="Depth of expand" name="expandDepth" nameLabel="Hierarchical_Table_Of_Contents_property_expand_depth" type="string"/>
        <property displayName="Show Pages" isLocalized="true" name="showPages" nameLabel="Hierarchical_Table_Of_Contents_property_show_pages" type="{All, Reportable, Not-reportable}"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Hierarchical_Table_Of_Contents_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Hierarchical_Table_Of_Contents_property_speech_texts" type="staticlist">
            <property name="Title" nameLabel="Hierarchical_Table_Of_Contents_speech_text_title" type="staticrow">
                <property name="Title" nameLabel="Hierarchical_Table_Of_Contents_speech_text_title" type="string"/>
            </property>
            <property name="GoToPage" nameLabel="Hierarchical_Table_Of_Contents_speech_text_go_to_page" type="staticrow">
                <property name="GoToPage" nameLabel="Hierarchical_Table_Of_Contents_speech_text_go_to_page" type="string"/>
            </property>
            <property name="Chapter" nameLabel="Hierarchical_Table_Of_Contents_speech_text_chapter" type="staticrow">
                <property name="Chapter" nameLabel="Hierarchical_Table_Of_Contents_speech_text_chapter" type="string"/>
            </property>
            <property name="Expanded" nameLabel="Hierarchical_Table_Of_Contents_speech_text_expanded" type="staticrow">
                <property name="Expanded" nameLabel="Hierarchical_Table_Of_Contents_speech_text_expanded" type="string"/>
            </property>
            <property name="Collapsed" nameLabel="Hierarchical_Table_Of_Contents_speech_text_collapsed" type="staticrow">
                <property name="Collapsed" nameLabel="Hierarchical_Table_Of_Contents_speech_text_collapsed" type="string"/>
            </property>
        </property>
    </model>
<css>.hier_report {&#13;
    padding: 15px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid gray;&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
.hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
&#13;
.hier_report-chapter{&#13;
    background-color: Lavender;&#13;
}&#13;
&#13;
.hier_report-odd{&#13;
    background-color: AliceBlue;&#13;
}&#13;
&#13;
.hier_report-even{&#13;
    background-color: #f0f1ff;&#13;
}&#13;
&#13;
.hier_report-progress {&#13;
    text-align:center;&#13;
    color:#0A8DBD;&#13;
    display: inline-block;&#13;
    width: 190px;&#13;
}&#13;
&#13;
.hier_report-checks {&#13;
    width: 10%;&#13;
    color: green;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-mistakes {&#13;
    width: 10%;&#13;
    color: #990000;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-errors {&#13;
    width: 10%;&#13;
    color: red;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-score {&#13;
    width: 10%;&#13;
    color: blue;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-non-max-score, .hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.ui-progressbar {&#13;
    padding:2px;&#13;
    width:	130px  !important;&#13;
    height: 15px    !important;&#13;
    border-radius: 5px;&#13;
    border:2px solid #02789F;&#13;
    background-color: #3CC6CD;&#13;
    border-radius: 5px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hier_drag-source{&#13;
    border: 1px solid orange;&#13;
}&#13;
&#13;
.hier_report .treegrid-expander {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .treegrid-indent {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
</css><view> &lt;div class="hier_report"&gt;&#13;
     &lt;table  style="width: 100%"&gt;&#13;
     &lt;/table&gt;&#13;
 &lt;/div&gt;&#13;
&#13;
</view><preview>&lt;div class="hier_report"&gt;&#13;
    &lt;table  style="width: 100%"&gt;&#13;
    &lt;/table&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHierarchical_Table_Of_Contents_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
    var pageIndex = 0;&#13;
&#13;
    presenter.isVisible = null;&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        EXPAND_DEPTH_NOT_NUMERIC: "Depth of expand is not proper",&#13;
    };&#13;
&#13;
    presenter.CSS_CLASSES = {&#13;
        TABLE: "table",&#13;
        TITLE: "hier_report-header",&#13;
        FOOTER: "hier_report-footer",&#13;
        TABLE_CONTAINER: "hier_report",&#13;
        CHAPTER: "hier_report-chapter",&#13;
        CHAPTER_EXPANDER: "treegrid-expander",&#13;
        CHAPTER_EXPANDER_EXPANDED: "treegrid-expander-expanded",&#13;
        CHAPTER_EXPANDER_COLLAPSED: "treegrid-expander-collapsed",&#13;
    };&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        Title: "Title",&#13;
        GoToPage: "Go to page",&#13;
        Chapter: "Chapter",&#13;
        Collapsed: "Collapsed",&#13;
        Expanded: "Expanded",&#13;
    };&#13;
&#13;
    presenter.isFirstEnter = true;&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (substitutions.hasOwnProperty(key)) {&#13;
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
                }&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    function addHeader() {&#13;
        var headerHTML = "&lt;td&gt; " + presenter.configuration.labels.title + "&lt;/td&gt;";&#13;
        $("&lt;tr&gt;&lt;/tr&gt;").prependTo(getJqueryTable()).addClass("hier_report-header").html(headerHTML);&#13;
    }&#13;
&#13;
    function addFooter() {&#13;
        var row = document.createElement('tr');&#13;
        $(row).appendTo(getJqueryTable());&#13;
        $(row).addClass("hier_report-footer");&#13;
    }&#13;
&#13;
    function createRow(index, parentIndex, isChapter) {&#13;
        var row = document.createElement('tr');&#13;
&#13;
        $(row).appendTo(getJqueryTable());&#13;
        $(row).addClass("treegrid-" + index);&#13;
&#13;
        if (parentIndex != null) {&#13;
            $(row).addClass("treegrid-parent-" + parentIndex);&#13;
        }&#13;
&#13;
        if (isChapter) {&#13;
            $(row).addClass("hier_report-chapter");&#13;
        } else {&#13;
            $(row).addClass(index % 2 &gt; 0 ? "hier_report-odd" : "hier_report-even");&#13;
        }&#13;
&#13;
        return row;&#13;
    }&#13;
&#13;
    function generatePageLinks(text, isChapter, pageId) {&#13;
        var $element = $(document.createElement('td')),&#13;
            $link = $("&lt;a&gt;&lt;/a&gt;").text(text).attr('href', '#').attr('data-page-id', pageId);&#13;
&#13;
        $element.append($('&lt;div class="text-wrapper"&gt;').html(isChapter ? text : $link));&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function addRow(name, index, parrentIndex, isChapter, pageId) {&#13;
        var row = createRow(index, parrentIndex, isChapter);&#13;
&#13;
        var nameCell = generatePageLinks(name, isChapter, pageId);&#13;
        if(row != null){&#13;
            $(nameCell).appendTo($(row));&#13;
        }&#13;
    }&#13;
&#13;
    function resetScore() {&#13;
        return {&#13;
            score: 0,&#13;
            countedScore: 0,&#13;
            maxScore: 0,&#13;
            countedMaxScore: 0,&#13;
            errorCount: 0,&#13;
            checkCount: 0,&#13;
            mistakeCount: 0,&#13;
            count: 0&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreviewTree = function() {&#13;
        var pagesMockup = [&#13;
            {name : "Page1", parent : null},&#13;
            {name : "Unit1", parent : null},&#13;
            {name : "Chapter2", parent : 1},&#13;
            {name : "Page5", parent : 6},&#13;
            {name : "Page6", parent : 1},&#13;
            {name : "Page7", parent : null},&#13;
            {name : "Page8", parent : null},&#13;
            {name : "Page9", parent : null},&#13;
            {name : "Page10", parent : null},&#13;
            {name : "Page11", parent : null},&#13;
            {name : "Unit2", parent : null},&#13;
            {name : "Page12", parent : 10},&#13;
            {name : "Page13", parent : 10}&#13;
        ];&#13;
&#13;
        var chapterScore = resetScore();&#13;
        for (var i = 0; i &lt; pagesMockup.length; i++) {&#13;
            if(pagesMockup[i].name == "Unit1" || pagesMockup[i].name == "Unit2"){&#13;
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, true, "some_id");&#13;
            }else{&#13;
                addRow(pagesMockup[i].name, i, pagesMockup[i].parent, false, "some_id");&#13;
            }&#13;
        }&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    presenter.createTree = function (root, parrentIndex, pageCount) {&#13;
        var chapterIndex = 0,&#13;
            chapterScore = resetScore(),&#13;
            pageScore = resetScore(),&#13;
            isEmpty = true,&#13;
            values = {},&#13;
            isEnabled = true;&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            var isChapter = (root.get(i).type == "chapter");&#13;
&#13;
            if (!isChapter &amp;&amp; !root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Reportable") continue;&#13;
            if (!isChapter &amp;&amp; root.get(i).isReportable() &amp;&amp; presenter.configuration.showPages == "Not-reportable") continue;&#13;
            if (!isChapter &amp;&amp; root.get(i).isReportable()) {&#13;
                isEmpty = false;&#13;
            }&#13;
            var pageId = "chapter";&#13;
            if (!isChapter) {&#13;
                pageId = root.get(i).getId();&#13;
            }&#13;
            addRow(root.get(i).getName(), pageIndex, parrentIndex, isChapter, pageId);&#13;
            pageScore = presentationController.getScore().getPageScoreById(pageId);&#13;
            pageScore.count = 1;&#13;
            pageIndex++;&#13;
            if (isChapter) {&#13;
                chapterIndex = pageIndex - 1;&#13;
                values = presenter.createTree(root.get(i), chapterIndex, root.get(i).size());&#13;
                pageScore =  values.pagesScore;&#13;
            }&#13;
        }&#13;
&#13;
        return { pagesScore: chapterScore, isEmpty: isEmpty };&#13;
    };&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            $report = presenter.$view.find('.hier_report tr');&#13;
&#13;
        $report.find('td a').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
                commander.gotoPageId($(this).attr('data-page-id'));&#13;
            });&#13;
        });&#13;
&#13;
        $report.find(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER}`).each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function expandTree(level) {&#13;
        presenter.$view.find('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            if ($(this).treegrid('getDepth') &lt; level) {&#13;
                $(this).treegrid('expand'); &#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function saveTreeState() {&#13;
        var state = [];&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            state.push($(this).treegrid('isExpanded'))&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    function restoreTreeState(state) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            $(this).treegrid(state[$(this).treegrid('getNodeId')] ? 'expand' : 'collapse');&#13;
        });&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'treeState': saveTreeState(),&#13;
            'isVisible': presenter.isVisible,&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        restoreTreeState(state.treeState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var expandDepth = returnCorrectObject(0);&#13;
        if (model['expandDepth'].length &gt; 0) {&#13;
            expandDepth = ModelValidationUtils.validateInteger(model['expandDepth']);&#13;
            if (!expandDepth.isValid) {&#13;
                return returnErrorObject('EXPAND_DEPTH_NOT_NUMERIC');&#13;
            }&#13;
        }&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            labels: {&#13;
                title: model['titleLabel']&#13;
            },&#13;
            displayOnlyChapters: ModelValidationUtils.validateBoolean(model.displayOnlyChapters),&#13;
            expandDepth: expandDepth.value,&#13;
            showPages: model.showPages,&#13;
            langTag: model.langAttribute,&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        if (!presenter.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        if (presenter.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        const upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
        presenter.lessonScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
        };&#13;
&#13;
        $('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");&#13;
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");&#13;
        presenter.$view.find("div").first().attr('id', presenter.treeID);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
&#13;
        addHeader();&#13;
        if (isPreview) {&#13;
            presenter.createPreviewTree();&#13;
        } else {&#13;
            var presentation = presentationController.getPresentation();&#13;
            presenter.createTree(presentation.getTableOfContents(), null, presentation.getTableOfContents().size());&#13;
            checkIfChapterHasChildren(false);&#13;
            if(presenter.configuration.displayOnlyChapters){&#13;
                displayOnlyChapters();&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.showTotal) {&#13;
            addFooter();&#13;
        }&#13;
&#13;
        getJqueryTable().not('.hier_report-header').not('.hier_report-footer').treegrid({&#13;
            'initialState': 'collapsed',&#13;
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'&#13;
        });&#13;
&#13;
        expandTree(presenter.configuration.expandDepth);&#13;
        if (!isPreview) {&#13;
            handleMouseClickActions();&#13;
        }&#13;
&#13;
        if(presenter.configuration.displayOnlyChapters){&#13;
            presenter.$view.find("tr").each(function () {&#13;
                if($(this).hasClass("hier_report-even") || $(this).hasClass("hier_report-odd")){&#13;
                    $(this).remove();&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        checkIfChapterHasChildren(true);&#13;
&#13;
        presenter.setSpeechTexts(upgradedModel["speechTexts"]);&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        const upgradedLangTagModel = presenter.upgradeLangTag(model);&#13;
        const upgradedSpeechTextsModel = presenter.upgradeSpeechTexts(upgradedLangTagModel);&#13;
        const upgradedDepthOfExpandModel = presenter.upgradeDepthOfExpand(upgradedSpeechTextsModel);&#13;
&#13;
        return upgradedDepthOfExpandModel;&#13;
    };&#13;
&#13;
    presenter.upgradeLangTag = function (model) {&#13;
        const upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (upgradedModel["langAttribute"] === undefined) {&#13;
            upgradedModel["langAttribute"] =  '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
        const upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["speechTexts"]) upgradedModel["speechTexts"] = {};&#13;
&#13;
        const modelSpeechTexts = upgradedModel["speechTexts"];&#13;
&#13;
        if (!modelSpeechTexts["Title"]) modelSpeechTexts["Title"] = {Title: ""};&#13;
        if (!modelSpeechTexts["GoToPage"]) modelSpeechTexts["GoToPage"] = {GoToPage: ""};&#13;
        if (!modelSpeechTexts["Chapter"]) modelSpeechTexts["Chapter"] = {Chapter: ""};&#13;
        if (!modelSpeechTexts["Expanded"]) modelSpeechTexts["Expanded"] = {Expanded: ""};&#13;
        if (!modelSpeechTexts["Collapsed"]) modelSpeechTexts["Collapsed"] = {Collapsed: ""};&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeDepthOfExpand = function (model) {&#13;
        const upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (upgradedModel["expandDepth"] === undefined) {&#13;
            upgradedModel["expandDepth"] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            ...presenter.DEFAULT_TTS_PHRASES&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            Title: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Title.Title,&#13;
                presenter.speechTexts.Title),&#13;
            GoToPage: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.GoToPage.GoToPage,&#13;
                presenter.speechTexts.GoToPage),&#13;
            Chapter: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Chapter.Chapter,&#13;
                presenter.speechTexts.Chapter),&#13;
            Expanded: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Expanded.Expanded,&#13;
                presenter.speechTexts.Expanded),&#13;
            Collapsed: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Collapsed.Collapsed,&#13;
                presenter.speechTexts.Collapsed)&#13;
        };&#13;
    };&#13;
&#13;
    function displayOnlyChapters() {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
            var element = $(this);&#13;
            element.find(".text-wrapper").wrap('&lt;a href=""&gt;&lt;/a&gt;');&#13;
            if(element.next('tr[class*=treegrid-parent]').length &gt; 0){&#13;
                var dataPageId = element.next().find("a").attr("data-page-id");&#13;
                element.find("a").attr("data-page-id", dataPageId);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function checkIfChapterHasChildren (isDisplayOnlyChapters) {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
            if($(this).next('tr[class*=treegrid-parent]').length == 0){&#13;
                if(isDisplayOnlyChapters){&#13;
                    $(this)&#13;
                        .find(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER}`)&#13;
                        .removeClass(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER_COLLAPSED}`)&#13;
                        .removeClass(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER_EXPANDED}`);&#13;
                }else{&#13;
                    $(this).remove();&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function getJqueryTable() {&#13;
        return presenter.$view.find("#" + presenter.treeID).find('table');&#13;
    }&#13;
&#13;
    presenter.keyboardController = function (keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    function HTocKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    HTocKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    HTocKeyboardController.prototype.constructor = HTocKeyboardController;&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        const keyNavElements = presenter.getElementsForKeyboardNavigation();&#13;
&#13;
        presenter.keyboardControllerObject = new HTocKeyboardController(keyNavElements, 1);&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        const tableRows = presenter.$view.find("tbody")&#13;
            .find("tr")&#13;
            .filter((i, element) =&gt; element.className.includes("treegrid"))&#13;
            .map((i, element) =&gt; $(element));&#13;
&#13;
        return tableRows.toArray();&#13;
    };&#13;
&#13;
    presenter.getElementsForTTS = function() {&#13;
        const elements = presenter.getElementsForKeyboardNavigation();&#13;
        elements.unshift(presenter.getTitleElementForKeyboardNavigation());&#13;
&#13;
        return elements;&#13;
    };&#13;
&#13;
    presenter.getTitleElementForKeyboardNavigation = function() {&#13;
        return $(presenter.$view.find(`.${presenter.CSS_CLASSES.TITLE}`)[0]);&#13;
    };&#13;
&#13;
    // Right Arrow or TAB&#13;
    HTocKeyboardController.prototype.nextElement = function (event) {&#13;
        if (event) event.preventDefault();&#13;
        this.moveToNextKeyNavElement();&#13;
    };&#13;
&#13;
    // Left Arrow or SHIFT+TAB&#13;
    HTocKeyboardController.prototype.previousElement = function (event) {&#13;
        if (event) event.preventDefault();&#13;
        this.moveToPreviousKeyNavElement();&#13;
    };&#13;
&#13;
    // Down Arrow&#13;
    HTocKeyboardController.prototype.nextRow = function (event) {&#13;
        if (event) event.preventDefault();&#13;
        this.moveToNextKeyNavElement();&#13;
    }&#13;
&#13;
    // Up Arrow&#13;
    HTocKeyboardController.prototype.previousRow = function (event) {&#13;
        if (event) event.preventDefault();&#13;
        this.moveToPreviousKeyNavElement();&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.moveToNextKeyNavElement = function () {&#13;
        const nextIndex = this.getNextSelectableElementIndexOrNull();&#13;
        if (nextIndex === null) return;&#13;
&#13;
        this.markCurrentElement(nextIndex);&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.moveToPreviousKeyNavElement = function () {&#13;
        const previousIndex = this.getPreviousSelectableElementIndexOrNull()&#13;
        if (previousIndex === null) return;&#13;
&#13;
        this.markCurrentElement(previousIndex);&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    }&#13;
&#13;
    HTocKeyboardController.prototype.getNextSelectableElementIndexOrNull = function () {&#13;
        const elements = this.keyboardNavigationElements;&#13;
        const nextElementIndex = this.keyboardNavigationCurrentElementIndex + 1;&#13;
&#13;
        for (let i = nextElementIndex; i &lt; elements.length; i++) {&#13;
            if (presenter.isParentTableRowVisible(elements[i])) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
        return null;&#13;
    }&#13;
&#13;
    HTocKeyboardController.prototype.getPreviousSelectableElementIndexOrNull = function () {&#13;
        const elements = this.keyboardNavigationElements;&#13;
        const nextElementIndex = this.keyboardNavigationCurrentElementIndex - 1;&#13;
&#13;
        for (let i = nextElementIndex; i &gt;= 0; i--) {&#13;
            if (presenter.isParentTableRowVisible(elements[i])) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
        return null;&#13;
    }&#13;
&#13;
    presenter.isParentTableRowVisible = function (element) {&#13;
        return $(element).closest("tr").style('display') !== "none";&#13;
    }&#13;
&#13;
    HTocKeyboardController.prototype.enter = function (event) {&#13;
        if (presenter.isFirstEnter) {&#13;
            if (presenter.isTTS()) {&#13;
                this.setElements.call(this, presenter.getElementsForTTS());&#13;
            }&#13;
            presenter.isFirstEnter = false;&#13;
        }&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.select = function (event) {&#13;
        if (event) event.preventDefault();&#13;
        if (!this.isSelectEnabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        this.selectAction();&#13;
        if (this.isCurrentElementSelectable()) {&#13;
            const $element = $(this.getCurrentElement());&#13;
            const expanderTTSPostFix = isChapterExpanderExpanded($element)&#13;
                ? presenter.speechTexts.Expanded&#13;
                : presenter.speechTexts.Collapsed;&#13;
&#13;
            presenter.speak(expanderTTSPostFix);&#13;
        }&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.selectAction = function () {&#13;
        const $currentElement = $(this.getCurrentElement());&#13;
&#13;
        const clickableElement = $currentElement.hasClass(presenter.CSS_CLASSES.CHAPTER)&#13;
            ? $currentElement.find(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER}`)&#13;
            : $currentElement.find("a");&#13;
&#13;
        this.getTarget(clickableElement, true).click();&#13;
    };&#13;
&#13;
&#13;
    HTocKeyboardController.prototype.markCurrentElement = function (nextIndex) {&#13;
        KeyboardController.prototype.markCurrentElement.call(this, nextIndex);&#13;
        if(this.isCurrentElementDisplayed()) {&#13;
            this.readCurrentElement();&#13;
        }&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.readCurrentElement = function () {&#13;
        const $element = this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
&#13;
        if ($element.hasClass(presenter.CSS_CLASSES.TITLE)) {&#13;
            presenter.speak(getTitleTTS($element));&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.CHAPTER)) {&#13;
            presenter.speak(getChapterTTS($element));&#13;
        } else {&#13;
            presenter.speak(getHyperLinkTTS($element));&#13;
        }&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.isCurrentElementDisplayed = function () {&#13;
        const currentElement = this.getCurrentElement();&#13;
        return presenter.isParentTableRowVisible(currentElement);&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.isCurrentElementSelectable = function () {&#13;
        const currentElement = this.getCurrentElement();&#13;
        return !($(currentElement).hasClass("hier_report-header"));&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.getCurrentElement = function () {&#13;
        return this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
    };&#13;
&#13;
    HTocKeyboardController.prototype.exitWCAGMode = function () {&#13;
        presenter.isFirstEnter = true;&#13;
        this.setElements.call(this, presenter.getElementsForKeyboardNavigation());&#13;
        KeyboardController.prototype.exitWCAGMode.call(this);&#13;
        presenter.setWCAGStatus(false);&#13;
    };&#13;
&#13;
    function getTitleTTS($element) {&#13;
        const textVoiceObject = [];&#13;
&#13;
        const titlePrefix = presenter.speechTexts.Title;&#13;
        pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, titlePrefix);&#13;
&#13;
        const titleText = $element[0].innerText;&#13;
        pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, titleText);&#13;
&#13;
        return textVoiceObject;&#13;
    }&#13;
&#13;
    function getChapterTTS ($element) {&#13;
        const textVoiceObject = [];&#13;
&#13;
        const chapterPrefix = presenter.speechTexts.Chapter;&#13;
        pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, chapterPrefix);&#13;
&#13;
        const chapterName = $element.find(".text-wrapper").text();&#13;
        pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, chapterName);&#13;
&#13;
        const expanderStatus = isChapterExpanderExpanded($element)&#13;
            ? presenter.speechTexts.Expanded&#13;
            : presenter.speechTexts.Collapsed;&#13;
&#13;
        pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, expanderStatus);&#13;
&#13;
        return textVoiceObject;&#13;
    }&#13;
&#13;
    function getHyperLinkTTS($element) {&#13;
        const textVoiceObject = [];&#13;
&#13;
        const goToPagePrefix = presenter.speechTexts.GoToPage;&#13;
        pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, goToPagePrefix);&#13;
&#13;
        const pageName = $element[0].innerText;&#13;
        pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, pageName);&#13;
&#13;
        return textVoiceObject;&#13;
    }&#13;
&#13;
    function pushMessageToTextVoiceObjectWithLanguageFromLesson(textVoiceObject, message) {&#13;
        textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message));&#13;
    }&#13;
&#13;
    function pushMessageToTextVoiceObjectWithLanguageFromPresenter(textVoiceObject, message) {&#13;
        textVoiceObject.push(window.TTSUtils.getTextVoiceObject(message, presenter.configuration.langTag));&#13;
    }&#13;
&#13;
    function centerElement(element){&#13;
        scrollVertically(element);&#13;
    }&#13;
&#13;
    function scrollVertically(element) {&#13;
        let pos = $(element).position().top;&#13;
        let currentScroll = presenter.$view.find(`.${presenter.CSS_CLASSES.TABLE_CONTAINER}`).scrollTop();&#13;
        let divHeight =  presenter.$view.find(`.${presenter.CSS_CLASSES.TABLE_CONTAINER}`).height();&#13;
&#13;
        pos=(pos+currentScroll)-(divHeight/2);&#13;
&#13;
        presenter.$view.find(`.${presenter.CSS_CLASSES.TABLE_CONTAINER}`).scrollTop(pos);&#13;
    }&#13;
&#13;
    function isChapterExpanderExpanded ($element) {&#13;
        return $element&#13;
            .find(`.${presenter.CSS_CLASSES.CHAPTER_EXPANDER}`)&#13;
            .hasClass(presenter.CSS_CLASSES.CHAPTER_EXPANDER_EXPANDED);&#13;
    }&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.speak = function(data) {&#13;
        const tts = presenter.getTextToSpeechOrNull(presentationController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isTTS = function () {&#13;
        return presenter.getTextToSpeechOrNull(presentationController) &amp;&amp; presenter.isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function HToc_getTextToSpeechOrNull(playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>