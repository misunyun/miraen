<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Clock" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="TimeStandard" nameLabel="Clock_property_time_standard" type="{24H,12H}"/>
		<property name="InitialTime" nameLabel="Clock_property_initial_time" type="string"/>
		<property displayName="Step (minutes)" name="TimeStep" nameLabel="Clock_property_time_step" type="string"/>
		<property name="ShowClockLabels" nameLabel="Clock_property_show_clock_labels" type="boolean"/>
		<property name="ShowSecondHand" nameLabel="Clock_property_show_second_hand" type="boolean"/>
		<property displayName="Step (seconds)" name="SecondTimeStep" nameLabel="Clock_property_second_time_step" type="string"/>
		<property name="ActiveHand" nameLabel="Clock_property_active_hand" type="{Hour, Minute, Second, H+M, H+S, M+S, All}"/>
		<property name="SynchronizeHands" nameLabel="Clock_property_synchronize_hands" type="{None, Min with Hour, Both, All}"/>
		<property name="Images" nameLabel="Clock_property_images" type="list">
			<property name="Background" nameLabel="Clock_property_background" type="image"/>
		</property>
		<property name="CorrectAnswer" nameLabel="Clock_property_correct_answer" type="string"/>
		<property name="isDisable" nameLabel="Clock_property_is_disable" type="boolean"/>
		<property name="isActivity" nameLabel="Clock_property_is_activity" type="boolean"/>
        <property name="Continuous events" nameLabel="Clock_property_continuous_events" type="boolean"/>
	</model>
<css>#clock-face {&#13;
    stroke: black;&#13;
    stroke-width: 2px;&#13;
    fill: white;&#13;
}&#13;
&#13;
.analog-clock {&#13;
    border: 3px solid transparent;&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.analog-clock.incorrect {&#13;
    border: 3px solid #ff4901;&#13;
}&#13;
&#13;
.analog-clock.correct {&#13;
    border: 3px solid #06d401;&#13;
}&#13;
&#13;
#h-hand,#m-hand, #s-hand {&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0.0;&#13;
}&#13;
&#13;
#h-hand {&#13;
    stroke-width: 50px&#13;
}&#13;
&#13;
#m-hand {&#13;
    stroke-width: 50px;&#13;
}&#13;
&#13;
#s-hand {&#13;
    stroke-width: 50px;&#13;
}&#13;
&#13;
.time-text {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.text_label { /*fill: blue;*/&#13;
&#13;
}&#13;
&#13;
#label_mask {&#13;
    opacity: 0;&#13;
}&#13;
</css><view>&lt;p class="clock-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="analog-clock" class="analog-clock"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;p class="clock-counter" style="position: absolute;"&gt;&lt;/p&gt;&#13;
&lt;div id="analog-clock" class="analog-clock"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonClock_create() {&#13;
    var presenter = function() {&#13;
    };&#13;
&#13;
    presenter.currentHand = 0;&#13;
    presenter.getHour = 0;&#13;
    presenter.getMinute = 0;&#13;
    presenter.mouseX = 0;&#13;
    presenter.mouseY = 0;&#13;
    presenter.isHandInMove = false;&#13;
    presenter.currentHour = 0;&#13;
    presenter.currentMinute = 0;&#13;
    presenter.lastMinuteValue = 0;&#13;
    presenter.Step = 1;&#13;
    presenter.StepSeconds = 1;&#13;
    presenter.showClockLabels = false;&#13;
    presenter.isActivity = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.TimeStandard = 24;&#13;
    presenter.showAnswersMode = false;&#13;
    presenter.shouldSendEventTime = null;&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
    presenter.showSecondHand = false;&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'], isTextColored = presenter.model['Color text'] === 'True', $textContainer = presenter.$view&#13;
            .find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch (name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'setClockTime'.toLowerCase():&#13;
                presenter.setClockTime(params[0]);&#13;
                break;&#13;
            case 'getCurrentTime'.toLowerCase():&#13;
                presenter.getCurrentTime();&#13;
                break;&#13;
            case 'getCurrentHour'.toLowerCase():&#13;
                presenter.getCurrentHour();&#13;
                break;&#13;
            case 'getCurrentMinute'.toLowerCase():&#13;
                presenter.getCurrentMinute();&#13;
                break;&#13;
            case 'getCurrentSeconds'.toLowerCase():&#13;
                presenter.getCurrentSeconds();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsEmpty'.toLowerCase():&#13;
                presenter.markAsEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawClock = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.modelID = model.ID;&#13;
        presenter.Height = parseInt(model.Height, 10);&#13;
        presenter.Width = parseInt(model.Width, 10);&#13;
&#13;
        var centerX = parseInt(presenter.Height / 2, 10);&#13;
        var centerY = parseInt(presenter.Width / 2, 10);&#13;
        presenter.center = centerX &gt; centerY ? centerY : centerX;&#13;
        presenter.radius = presenter.center - 5;&#13;
&#13;
        var size = 2 * presenter.center;&#13;
&#13;
        presenter.$view.find('.analog-clock').css({&#13;
            'width' : size,&#13;
            'height' : size&#13;
        });&#13;
&#13;
        var vector = presenter.center / 15;&#13;
&#13;
        var fig = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="'&#13;
            + presenter.Width + '" height="' + presenter.Height + '"&gt;';&#13;
        var uniqueID = Math.floor((Math.random() * 10000) + 1);&#13;
        if (model.Images[0].Background != "") {&#13;
            fig += '&lt;defs&gt;';&#13;
            fig += '&lt;pattern id="imageBackground' + presenter.modelID&#13;
                + uniqueID&#13;
                + '" x="0" y="0" patternUnits="userSpaceOnUse" height="'&#13;
                + (2 * presenter.center) + '" width="'&#13;
                + (2 * presenter.center) + '"&gt;';&#13;
            fig += '&lt;image y="0" x="0" id="imageBackground' + presenter.modelID&#13;
                + uniqueID + '" xlink:href="' + model.Images[0].Background&#13;
                + '" height="' + (2 * presenter.center) + '" width="'&#13;
                + (2 * presenter.center) + '" /&gt;';&#13;
            fig += '&lt;/pattern&gt;';&#13;
            fig += '&lt;/defs&gt;';&#13;
&#13;
            fig += '&lt;circle id="clock-face-with-image" class="circle" cx="'&#13;
                + presenter.center + '" cy="' + presenter.center + '" r="'&#13;
                + presenter.radius + '" fill="url(#imageBackground'&#13;
                + presenter.modelID + uniqueID + ')"/&gt;';&#13;
        } else {&#13;
            fig += '&lt;circle id="clock-face" class="circle" cx="'&#13;
                + presenter.center + '" cy="' + presenter.center + '" r="'&#13;
                + presenter.radius + '" /&gt;';&#13;
        }&#13;
        if (presenter.showClockLabels) {&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center - 17 * vector / 10) + '" y="'&#13;
                + (presenter.center / 5 + vector / 2) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;12&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (2 * presenter.center - presenter.center / 5) + '" y="'&#13;
                + (presenter.center + presenter.center / 10 - vector / 2)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;3&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center - presenter.center / 20) + '" y="'&#13;
                + (2 * presenter.center - presenter.center / 10)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;6&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="' + (presenter.center / 10)&#13;
                + '" y="'&#13;
                + (presenter.center + presenter.center / 10 - vector / 2)&#13;
                + '" font-size="' + (presenter.center / 5)&#13;
                + 'px" &gt;9&lt;/text&gt;';&#13;
&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (14 * presenter.center / 10) + '" y="'&#13;
                + (9 * presenter.center / 25) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;1&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (4 * presenter.center / 10 + vector) + '" y="'&#13;
                + (9 * presenter.center / 25) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;11&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (8.4 * presenter.center / 5) + '" y="'&#13;
                + (7 * presenter.center / 10 - vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;2&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (presenter.center / 5 - vector / 2) + '" y="'&#13;
                + (7 * presenter.center / 10 - vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;10&lt;/text&gt;';&#13;
&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (14 * presenter.center / 10 - vector) + '" y="'&#13;
                + (44 * presenter.center / 25 + vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;5&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (4 * presenter.center / 10 + 2 * vector) + '" y="'&#13;
                + (44 * presenter.center / 25 + vector) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;7&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="'&#13;
                + (8.4 * presenter.center / 5) + '" y="'&#13;
                + (15 * presenter.center / 10) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;4&lt;/text&gt;';&#13;
            fig += '&lt;text class="text_label" x="' + (presenter.center / 5)&#13;
                + '" y="' + (15 * presenter.center / 10) + '" font-size="'&#13;
                + (presenter.center / 5) + 'px" &gt;8&lt;/text&gt;';&#13;
            fig += '&lt;rect id="label_mask" x="0" y="0" width="'&#13;
                + (2 * presenter.center) + '" height="'&#13;
                + (2 * presenter.center) + '"/&gt;';&#13;
        }&#13;
&#13;
        if (presenter.showSecondHand) {&#13;
            if (presenter.isMinuteHandActive()){&#13;
                fig += presenter.getSecondHandElement(vector);&#13;
                fig += presenter.getHourHandElement(vector);&#13;
                fig += presenter.getMinuteHandElement(vector);&#13;
            } else {&#13;
                fig += presenter.getMinuteHandElement(vector);&#13;
                fig += presenter.getSecondHandElement(vector);&#13;
                fig += presenter.getHourHandElement(vector);&#13;
            }&#13;
        } else {&#13;
            if (presenter.ActiveHand == 'HourHand' || presenter.ActiveHand == 'Hour') {&#13;
                fig += presenter.getMinuteHandElement(vector);&#13;
                fig += presenter.getHourHandElement(vector);&#13;
            } else {&#13;
                fig += presenter.getHourHandElement(vector);&#13;
                fig += presenter.getMinuteHandElement(vector);&#13;
            }&#13;
        }&#13;
&#13;
        fig += '&lt;/svg&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
    presenter.getHourHandElement = function (vector) {&#13;
        return '&lt;rect id="h-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 2) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (presenter.center / 2 + vector) + '" /&gt;';&#13;
    };&#13;
&#13;
    presenter.getMinuteHandElement = function (vector) {&#13;
        return '&lt;rect id="m-hand" x="' + (presenter.center - vector)&#13;
                + '" y="' + (presenter.center / 5) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (2 * vector) + '" height="'&#13;
                + (4 * presenter.center / 5 + vector) + '" /&gt;';&#13;
    };&#13;
&#13;
    presenter.getSecondHandElement = function (vector) {&#13;
        return '&lt;rect id="s-hand" x="' + (presenter.center - vector / 4)&#13;
                + '" y="' + (presenter.center / 5) + '" ry="'&#13;
                + (2 * vector) + '" rx="' + (2 * vector) + '" width="'&#13;
                + (vector / 2) + '" height="'&#13;
                + (4 * presenter.center / 5 + vector) + '" /&gt;';&#13;
    };&#13;
&#13;
    presenter.getNewTime = function(myTime) {&#13;
        var newTime = [];&#13;
&#13;
        var position = myTime.indexOf(':');&#13;
        newTime[0] = myTime.slice(0, position);&#13;
        newTime[1] = myTime.slice(position + 1, myTime.length);&#13;
        return newTime;&#13;
    };&#13;
&#13;
    presenter.getTimeWithSeconds = function(time) {&#13;
        return time.split(":");&#13;
    }&#13;
&#13;
    presenter.validateTimeCorrectnessWithSeconds = function (time) {&#13;
        let timeSplited = time.split(":");&#13;
&#13;
        if (timeSplited.length !== 3) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return (&#13;
            presenter.checkIfValidNumber(timeSplited[0])&#13;
            &amp;&amp; presenter.checkIfValidNumber(timeSplited[1])&#13;
            &amp;&amp; presenter.checkIfValidNumber(timeSplited[2])&#13;
        );&#13;
    }&#13;
&#13;
    presenter.checkTime = function(time) {&#13;
        var hour, minute;&#13;
&#13;
        if (time.indexOf(':') !== -1) {&#13;
            var position = time.indexOf(':');&#13;
            hour = time.slice(0, position);&#13;
            minute = time.slice(position + 1, time.length);&#13;
&#13;
            if (presenter.checkIfValidNumber(hour) &amp;&amp; presenter.checkIfValidNumber(minute)) {&#13;
                return true;&#13;
            } else {&#13;
                return false;&#13;
            }&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.checkIfValidNumber = function (num) {&#13;
        return parseInt(num, 10) === Math.round(num * 100) / 100 &amp;&amp; parseInt(num, 10) &gt; -1 &amp;&amp; !(isNaN(num));&#13;
    }&#13;
&#13;
    presenter.countTimeFromMinuteAngle = function(angleValue) {&#13;
        value = angleValue / 6;&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.setClockTime = function(time) {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.showSecondHand) {&#13;
            presenter.setClockTimeWithSeconds(time);&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.checkTime(time)) {&#13;
            return 0;&#13;
        }&#13;
        var newTime = presenter.getNewTime(time);&#13;
&#13;
        presenter.currentMinuteValue = parseInt(newTime[1], 10);&#13;
        presenter.currentHourValue = parseInt(newTime[0], 10)&#13;
            % presenter.TimeStandard;&#13;
        if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 0) {&#13;
            presenter.currentHourValue = 12;&#13;
        }&#13;
        var h = 30 * ((parseInt(presenter.currentHourValue, 10) % 12) + parseInt(&#13;
            presenter.currentMinuteValue, 10) / 60);&#13;
        var m = 6 * parseInt(presenter.currentMinuteValue, 10);&#13;
&#13;
        presenter.currentHourAngle = h;&#13;
&#13;
        presenter.setAttr('h-hand', h);&#13;
        presenter.setAttr('m-hand', m);&#13;
&#13;
    };&#13;
&#13;
    presenter.setClockTimeWithSeconds = function (time) {&#13;
        if (!presenter.validateTimeCorrectnessWithSeconds(time)) {&#13;
            console.error("Time to set with seconds is not valid");&#13;
            return;&#13;
        }&#13;
&#13;
        const newTime = presenter.getTimeWithSeconds(time);&#13;
        presenter.currentHourValue = parseInt(newTime[0], 10) % presenter.TimeStandard;&#13;
        presenter.currentMinuteValue = parseInt(newTime[1], 10);&#13;
        presenter.currentSecondValue = parseInt(newTime[2], 10);&#13;
&#13;
        if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 0) {&#13;
            presenter.currentHourValue = 12;&#13;
        }&#13;
&#13;
        const h = 30 * (presenter.currentHourValue % 12 + presenter.currentMinuteValue / 60 + presenter.currentSecondValue / 3600);&#13;
        const m = 6 * (presenter.currentMinuteValue + presenter.currentSecondValue / 60);&#13;
        const s = 6 * (presenter.currentSecondValue);&#13;
&#13;
        presenter.currentHourAngle = h;&#13;
        presenter.currentMinuteAngle = m;&#13;
        presenter.currentSecondAngle = s;&#13;
&#13;
        presenter.setAttr('h-hand', h);&#13;
        presenter.setAttr('m-hand', m);&#13;
        presenter.setAttr('s-hand', s);&#13;
    }&#13;
&#13;
    presenter.setTimeNotSynhronized = function() {&#13;
        let h = presenter.currentHourValue;&#13;
        let m = presenter.currentMinuteValue;&#13;
        let s = presenter.currentSecondValue;&#13;
&#13;
        if (presenter.currentHand === 'h-hand') {&#13;
            presenter.setNewCurrentHourValue();&#13;
            h = presenter.currentHourValue;&#13;
        } else if (presenter.currentHand === 'm-hand') {&#13;
            m = Math.round(presenter.currentHandValue / 6);&#13;
            if (m === 60) {&#13;
                m = 0;&#13;
            }&#13;
        } else if (presenter.currentHand === 's-hand') {&#13;
            s = Math.round(presenter.currentHandValue / 6);&#13;
            if (s === 60) {&#13;
                s = 0;&#13;
            }&#13;
        }&#13;
&#13;
        const timeToSet = presenter.showSecondHand ? `${h}:${m}:${s}` : `${h}:${m}`;&#13;
        presenter.setClockTime(timeToSet);&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeSynhronizedMinWithHour = function() {&#13;
&#13;
        let h = presenter.currentHourValue;&#13;
        let m = presenter.currentMinuteValue;&#13;
        let s = presenter.currentSecondValue;&#13;
        var valueMinutePrevious = presenter.currentMinuteValue;&#13;
&#13;
        if (presenter.currentHand === 'h-hand') {&#13;
            presenter.setNewCurrentHourValue();&#13;
            h = presenter.currentHourValue;&#13;
&#13;
        } else if (presenter.currentHand === 'm-hand') {&#13;
            m = Math.round(presenter.currentHandValue / 6);&#13;
            if (m === 60) {&#13;
                m = 0;&#13;
            }&#13;
&#13;
            presenter.hourValueOnFullPeriod(m, valueMinutePrevious);&#13;
            h = presenter.currentHourValue;&#13;
            valueMinutePrevious = m;&#13;
&#13;
        } else if (presenter.currentHand === 's-hand') {&#13;
            s = Math.round(presenter.currentHandValue / 6);&#13;
            if (s === 60) {&#13;
                s = 0;&#13;
            }&#13;
        }&#13;
&#13;
        const timeToSet = presenter.showSecondHand ? `${h}:${m}:${s}` : `${h}:${m}`;&#13;
        presenter.setClockTime(timeToSet);&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeSynhronizedBoth = function() {&#13;
&#13;
        let h = presenter.currentHourValue;&#13;
        let m = presenter.currentMinuteValue;&#13;
        let s = presenter.currentSecondValue;&#13;
        var valueMinutePrevious = presenter.currentMinuteValue;&#13;
&#13;
        if (presenter.currentHand === 'h-hand') {&#13;
            presenter.setNewCurrentHourValue();&#13;
            h = presenter.currentHourValue;&#13;
&#13;
            m = Math.round(2 * (presenter.currentHandValue % 30));&#13;
            m = presenter.countNewHandValue(m, presenter.Step);&#13;
&#13;
        } else if (presenter.currentHand === 'm-hand') {&#13;
            m = Math.round(presenter.currentHandValue / 6);&#13;
            if (m === 60) {&#13;
                m = 0;&#13;
            }&#13;
&#13;
            presenter.hourValueOnFullPeriod(m, valueMinutePrevious);&#13;
            h = presenter.currentHourValue;&#13;
            valueMinutePrevious = m;&#13;
&#13;
        } else if (presenter.currentHand === 's-hand') {&#13;
            s = Math.round(presenter.currentHandValue / 6);&#13;
            if (s === 60) {&#13;
                s = 0;&#13;
            }&#13;
        }&#13;
&#13;
        const timeToSet = presenter.showSecondHand ? `${h}:${m}:${s}` : `${h}:${m}`;&#13;
        presenter.setClockTime(timeToSet);&#13;
    };&#13;
&#13;
    presenter.setTimeSynhronizedAll = function() {&#13;
&#13;
        let h = presenter.currentHourValue;&#13;
        let m = presenter.currentMinuteValue;&#13;
        let s = presenter.currentSecondValue;&#13;
        let valueMinutePrevious = presenter.currentMinuteValue;&#13;
        let valueSecondPrevious = presenter.currentSecondValue;&#13;
&#13;
        if (presenter.currentHand === 'h-hand') {&#13;
            presenter.setNewCurrentHourValue();&#13;
            h = presenter.currentHourValue;&#13;
&#13;
            m = Math.round(2 * (presenter.currentHandValue % 30));&#13;
            m = presenter.countNewHandValue(m, presenter.Step);&#13;
&#13;
        } else if (presenter.currentHand === 'm-hand') {&#13;
            m = Math.round(presenter.currentHandValue / 6);&#13;
            if (m === 60) {&#13;
                m = 0;&#13;
            }&#13;
&#13;
            presenter.hourValueOnFullPeriod(m, valueMinutePrevious);&#13;
            h = presenter.currentHourValue;&#13;
            valueMinutePrevious = m;&#13;
&#13;
        } else if (presenter.currentHand === 's-hand') {&#13;
            s = Math.round(presenter.currentHandValue / 6);&#13;
            if (s === 60) {&#13;
                s = 0;&#13;
            }&#13;
            presenter.minuteValueOnFullPeriod(s, valueSecondPrevious);&#13;
            m = presenter.currentMinuteValue;&#13;
            presenter.hourValueOnFullPeriod(m, valueMinutePrevious);&#13;
            h = presenter.currentHourValue;&#13;
        }&#13;
&#13;
        const timeToSet = presenter.showSecondHand ? `${h}:${m}:${s}` : `${h}:${m}`;&#13;
        presenter.setClockTime(timeToSet);&#13;
    };&#13;
&#13;
    presenter.minuteValueOnFullPeriod = function (value, prevValue) {&#13;
        if (value &lt; 15 &amp;&amp; prevValue &gt; 45) {&#13;
            if (presenter.currentMinuteValue == 59) {&#13;
                presenter.currentMinuteValue = 0;&#13;
            } else {&#13;
                presenter.currentMinuteValue++;&#13;
            }&#13;
        }&#13;
        if (value &gt; 45 &amp;&amp; prevValue &lt; 15) {&#13;
            if (presenter.currentMinuteValue == 0) {&#13;
                presenter.currentMinuteValue = 59;&#13;
            } else {&#13;
                presenter.currentMinuteValue--;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hourValueOnFullPeriod = function (value, prevValue) {&#13;
        if (value &lt; 15 &amp;&amp; prevValue &gt; 45) {&#13;
            if (presenter.currentHourValue == 23) {&#13;
                presenter.currentHourValue = 0;&#13;
            } else {&#13;
                presenter.currentHourValue++;&#13;
            }&#13;
        }&#13;
        if (value &gt; 45 &amp;&amp; prevValue &lt; 15) {&#13;
            if (presenter.currentHourValue == 0) {&#13;
                presenter.currentHourValue = 23;&#13;
            } else {&#13;
                presenter.currentHourValue--;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
&#13;
    presenter.setNewCurrentHourValue = function () {&#13;
        if (presenter.currentHourValue == 11&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 12;&#13;
            }&#13;
            if (presenter.currentHourValue == 12&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 11;&#13;
            }&#13;
            if (presenter.currentHourValue == 0&#13;
                &amp;&amp; presenter.currentHandValue &gt; 330) {&#13;
                presenter.currentHourValue = 23;&#13;
            }&#13;
            if (presenter.currentHourValue == 23&#13;
                &amp;&amp; presenter.currentHandValue &lt; 30) {&#13;
                presenter.currentHourValue = 0;&#13;
            }&#13;
            if (presenter.currentHourValue &gt;= 12) {&#13;
                presenter.currentHourValue = 12 + Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            } else {&#13;
                presenter.currentHourValue = Math&#13;
                    .floor(presenter.currentHandValue / 30);&#13;
            }&#13;
    };&#13;
&#13;
    presenter.moveCurrentHand = function(element) {&#13;
        presenter.currentHand = element.id;&#13;
    };&#13;
&#13;
    presenter.setAttr = function(id, val) {&#13;
        var v = 'rotate(' + val + ', ' + presenter.center + ', '&#13;
            + presenter.center + ')';&#13;
        presenter.$view.find('#' + id).attr('transform', v);&#13;
&#13;
    };&#13;
&#13;
    presenter.validate = function(view, model) {&#13;
        presenter.showSecondHand = ModelValidationUtils.validateBoolean(model["ShowSecondHand"]);&#13;
        presenter.ActiveHand = model.ActiveHand;&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        if (model.TimeStandard == '12H') {&#13;
            presenter.TimeStandard = 12;&#13;
        } else {&#13;
            presenter.TimeStandard = 24;&#13;
        }&#13;
        $counter = $(view).find('.clock-counter');&#13;
&#13;
        if (!presenter.validateStep(model.TimeStep, $counter, "minute")){&#13;
            return false;&#13;
        }&#13;
&#13;
        if (presenter.showSecondHand) {&#13;
            return presenter.validateModelWithSeconds(view, model, $counter);&#13;
        } else {&#13;
            return presenter.validateStandardModel(view, model, $counter);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateStep = function (rawStep, counterView, stepName) {&#13;
        const step = parseInt(rawStep, 10);&#13;
&#13;
        if (rawStep.length == 0) {&#13;
            $counter.text(`Fill step-${stepName} value.`);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (step != Math.round(rawStep * 100) / 100 || isNaN(rawStep)) {&#13;
            $counter.text(`Incorrect step-${stepName} value.`);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (60 % step != 0) {&#13;
            $counter.text(`Step-${stepName} should be a divisor of 60.`);&#13;
            return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.validateModelWithSeconds = function(view, model, $counter) {&#13;
        if(!presenter.validateTimeCorrectnessWithSeconds(model.InitialTime)) {&#13;
            $counter.text('Put correct InitialTime (hour:minute:second).');&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateStep(model.SecondTimeStep, $counter, "second")) {&#13;
            return false;&#13;
        }&#13;
&#13;
        let time = presenter.getTimeWithSeconds(model.InitialTime);&#13;
        let hour = parseInt(time[0], 10);&#13;
        let min = parseInt(time[1], 10);&#13;
        let sec = parseInt(time[2], 10);&#13;
        let timeStandard = parseInt(presenter.TimeStandard, 10);&#13;
        const timeStepMinutes = parseInt(model.TimeStep, 10);&#13;
        const timeStepSeconds = parseInt(model.SecondTimeStep, 10);&#13;
&#13;
        if (!presenter.validateRangeTime(hour, min, timeStandard)) {&#13;
            $counter.text(`Put correct InitialTime (hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateHourExceedTimeStandard(hour, timeStandard)) {&#13;
            $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (sec &lt; 0 || sec &gt;= 60) {&#13;
            $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`);&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateIfValueMultipleOfStep(sec, timeStepSeconds)) {&#13;
            $counter.text('Value of seconds in InitialTime should be a multiple value of step-second.');&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateIfValueMultipleOfStep(min, timeStepMinutes)) {&#13;
            $counter.text('Value of minutes in InitialTime should be a multiple value of step-minute.');&#13;
            return false;&#13;
        }&#13;
&#13;
        if (model.isActivity == "True") {&#13;
            if (!(presenter.validateTimeCorrectnessWithSeconds(model.CorrectAnswer))) {&#13;
                $counter.text('Put CorrectAnswer (hour:minute:second) or uncheck isActivity.');&#13;
                return false;&#13;
            }&#13;
&#13;
            time = presenter.getTimeWithSeconds(model.CorrectAnswer);&#13;
            hour = parseInt(time[0], 10);&#13;
            min = parseInt(time[1], 10);&#13;
            sec = parseInt(time[2], 10);&#13;
&#13;
            if (!presenter.validateRangeTime(hour, min, timeStandard)) {&#13;
                $counter.text(`Put correct InitialTime (hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`)&#13;
                return false;&#13;
            }&#13;
&#13;
            if (!presenter.validateHourExceedTimeStandard(hour, timeStandard)) {&#13;
                $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`)&#13;
                return false;&#13;
            }&#13;
&#13;
            if (sec &lt; 0 || sec &gt;= 60) {&#13;
                $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1}, seconds and minutes in range &lt;0 to 60)).`)&#13;
                return false&#13;
            }&#13;
&#13;
            if (!presenter.validateIfValueMultipleOfStep(sec, timeStepSeconds)) {&#13;
                $counter.text('Value of seconds in CorrectAnswer should be a multiple value of step-seconds.');&#13;
                return false;&#13;
            }&#13;
&#13;
            if (!presenter.validateIfValueMultipleOfStep(min, timeStepMinutes)) {&#13;
                $counter.text('Value of minutes in CorrectAnswer should be a multiple value of step-minutes.');&#13;
                return false;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.Step = timeStepMinutes;&#13;
        presenter.StepSeconds = timeStepSeconds;&#13;
        presenter.continousEvents = ModelValidationUtils.validateBoolean(model['Continuous events']);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.validateStandardModel = function(view, model, $counter) {&#13;
        if (!presenter.checkTime(model.InitialTime)) {&#13;
            $counter.text('Put correct InitialTime (hour:minute).');&#13;
            return false;&#13;
        }&#13;
&#13;
        let getTime = presenter.getNewTime(model.InitialTime);&#13;
        let min = parseInt(getTime[1], 10);&#13;
        let hour = parseInt(getTime[0], 10);&#13;
        let timeStandard = parseInt(presenter.TimeStandard, 10);&#13;
        const timeStep = parseInt(model.TimeStep, 10);&#13;
&#13;
        if (!presenter.validateRangeTime(hour, min, timeStandard)) {&#13;
            $counter.text(`Put correct InitialTime (hour &lt; ${timeStandard + 1} and minute &lt; 60.`)&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateHourExceedTimeStandard(hour, timeStandard)) {&#13;
            $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1} and minute &lt; 60).`)&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.validateIfValueMultipleOfStep(min, timeStep)) {&#13;
            $counter.text('Value of minutes in InitialTime should be a multiple value of step.');&#13;
            return false;&#13;
        }&#13;
&#13;
        if (presenter.isSecondHandActive()) {&#13;
            $counter.text('Active hand cannot be H+S, M+S, Second or All because Show Second Hand option is off.');&#13;
            return false;&#13;
        }&#13;
&#13;
        if (model.isActivity == "True") {&#13;
            if (!(presenter.checkTime(model.CorrectAnswer))) {&#13;
                $counter.text('Put CorrectAnswer (hour:minute) or uncheck isActivity.');&#13;
                return false;&#13;
            }&#13;
&#13;
            getTime = presenter.getNewTime(model.CorrectAnswer);&#13;
            min = parseInt(getTime[1], 10);&#13;
            hour = parseInt(getTime[0], 10);&#13;
&#13;
            if (!presenter.validateRangeTime(hour, min, timeStandard)) {&#13;
                $counter.text(`Put correct InitialTime (hour &lt; ${timeStandard + 1} and minute &lt; 60.`)&#13;
                return false;&#13;
            }&#13;
&#13;
            if (!presenter.validateHourExceedTimeStandard(hour, timeStandard)) {&#13;
                $counter.text(`Put correct InitialTime (0 &lt; hour &lt; ${timeStandard + 1} and minute &lt; 60).`)&#13;
                return false;&#13;
            }&#13;
&#13;
            if (!presenter.validateIfValueMultipleOfStep(min, timeStep)) {&#13;
                $counter.text('Value of minutes in CorrectAnswer should be a multiple value of step.');&#13;
                return false;&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        presenter.Step = timeStep;&#13;
        presenter.continousEvents = ModelValidationUtils.validateBoolean(model['Continuous events']);&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.validateRangeTime = function (hour, min, timeStandard) {&#13;
            if (min &gt; 59 || hour &gt; timeStandard) {&#13;
                return false;&#13;
            }&#13;
            return true;&#13;
    };&#13;
&#13;
     presenter.validateHourExceedTimeStandard = function (hour, timeStandard) {&#13;
            if (timeStandard == 12 &amp;&amp; hour == 0) {&#13;
                return false;&#13;
            }&#13;
            return true;&#13;
    };&#13;
&#13;
     presenter.validateIfValueMultipleOfStep = function (value, step) {&#13;
         return value % step === 0;&#13;
     };&#13;
&#13;
    presenter.validateTime = function(time) {&#13;
        if (presenter.showSecondHand) {&#13;
            const myTime = presenter.getTimeWithSeconds(time);&#13;
            let h = myTime[0];&#13;
            let m = presenter.getValueWithLeadingZero(parseInt(myTime[1], 10));&#13;
            let s = presenter.getValueWithLeadingZero(parseInt(myTime[2], 10));&#13;
            return `${h}:${m}:${s}`&#13;
        }&#13;
&#13;
        var hour, minute, newTime;&#13;
&#13;
        var position = time.indexOf(':');&#13;
        hour = time.slice(0, position);&#13;
        minute = time.slice(position + 1, time.length);&#13;
&#13;
        hour = parseInt(hour, 10);&#13;
        minute = minute &gt; 9 ? parseInt(minute, 10) : "0" + parseInt(minute, 10);&#13;
        newTime = hour +":" + minute;&#13;
        return newTime;&#13;
    };&#13;
&#13;
    presenter.init = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.modelID = model.ID;&#13;
        presenter.isActivity = model.isActivity == "True" ? true : false;&#13;
        presenter.CorrectAnswer = presenter.validateTime(model.CorrectAnswer);&#13;
        presenter.InitialTime = presenter.validateTime(model.InitialTime);&#13;
        presenter.isDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasDisable = model.isDisable == "True" ? true : false;&#13;
        presenter.wasVisible = model["Is Visible"] == 'True';&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.ActiveHand = model.ActiveHand;&#13;
&#13;
        if (model.ShowClockLabels == 'True') {&#13;
            presenter.showClockLabels = true;&#13;
        }&#13;
&#13;
        presenter.isSynhronized = model.SynchronizeHands;&#13;
        var myDiv = $(view).find('.analog-clock')[0];&#13;
&#13;
        var figureClock = presenter.drawClock(view, model);&#13;
        $(myDiv).append(figureClock);&#13;
&#13;
        if (presenter.isDisable) {&#13;
            $(myDiv).addClass('disable');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
&#13;
            presenter.init(view, model);&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
&#13;
            presenter.setClockTime(model.InitialTime);&#13;
&#13;
            ['ShowAnswers', 'HideAnswers', 'GradualShowAnswers', 'GradualHideAnswers'].forEach(event =&gt; {&#13;
                presenter.eventBus.addEventListener(event, this);&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#analog-clock').mousemove(function(e) {&#13;
&#13;
                    e.stopImmediatePropagation();&#13;
                    presenter.currentHand = 0;&#13;
                    e.stopPropagation();&#13;
&#13;
                    if (presenter.isHandInMove &amp;&amp; !presenter.isDisable 	&amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.continousEvents) {&#13;
                        presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
                    }&#13;
                    presenter.isHandInMove = false;&#13;
                }).click(function(e) {&#13;
&#13;
&#13;
                    }).mouseleave(function(e) {&#13;
                        if(presenter.isHandInMove){&#13;
                            presenter.isHandInMove = false;&#13;
                            presenter.currentHand = 0;&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
&#13;
                        }&#13;
                    }).mouseup(function(e) {&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#h-hand')&#13;
                    .click(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                    })&#13;
                    .mouseup(&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
&#13;
                        if (presenter.isHandInMove &amp;&amp; !presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
&#13;
                            presenter.isHandInMove = false;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousedown(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHourHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousemove(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'mouse');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
                            e.stopPropagation();&#13;
                            if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                                presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            }&#13;
                            presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
&#13;
                    }).mouseleave(function() {&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#m-hand')&#13;
                    .click(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
&#13;
                    })&#13;
                    .mouseup(&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        if (presenter.isHandInMove &amp;&amp; !presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            presenter.isHandInMove = false;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousedown(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if ( presenter.isMinuteHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                                e.stopPropagation();&#13;
                                presenter.moveCurrentHand(this);&#13;
                                presenter.isHandInMove = true;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousemove(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'mouse');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
                            e.stopPropagation();&#13;
&#13;
                        if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                        }&#13;
                        presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
&#13;
                    }).mouseleave(function() {&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#s-hand')&#13;
                    .click(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
&#13;
                    })&#13;
                    .mouseup(&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        if (presenter.isHandInMove &amp;&amp; !presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            presenter.isHandInMove = false;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousedown(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if ( presenter.isSecondHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                                e.stopPropagation();&#13;
                                presenter.moveCurrentHand(this);&#13;
                                presenter.isHandInMove = true;&#13;
                        }&#13;
                        return false;&#13;
                    })&#13;
                    .mousemove(&#13;
                    function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'mouse');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
                            e.stopPropagation();&#13;
&#13;
                        if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                        }&#13;
                        presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
&#13;
                    }).mouseleave(function() {&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#label_mask')&#13;
                    .click(function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        presenter.isHandInMove = false;&#13;
&#13;
                    }).mouseup(function(e) {&#13;
&#13;
                        if(presenter.isHandInMove){&#13;
&#13;
                            presenter.isHandInMove = false;&#13;
                            presenter.currentHand = 0;&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1 : 0);&#13;
                        }&#13;
&#13;
                    }).mousemove(function(e) {&#13;
                        e.stopImmediatePropagation();&#13;
&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'mouse');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
                            e.stopPropagation();&#13;
                        }&#13;
&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#analog-clock').on('touchmove', function(e) {&#13;
                    presenter.currentHand = 0;&#13;
                    e.stopPropagation();&#13;
                    e.stopImmediatePropagation();&#13;
                    presenter.isHandInMove = false;&#13;
                });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view).find('#label_mask').on('touchmove', function(e) {&#13;
                    e.preventDefault();&#13;
                    e.stopPropagation();&#13;
                    e.stopImmediatePropagation();&#13;
                });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#m-hand')&#13;
                    .on(&#13;
                    'touchstart',&#13;
                    function(e) {&#13;
                        if (presenter.isMinuteHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            e.stopImmediatePropagation();&#13;
                            e.preventDefault();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchend',&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                        if(!presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchmove',&#13;
                    function(e) {&#13;
                        e.preventDefault();&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'touch');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
&#13;
                            if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                                presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            }&#13;
                            presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#h-hand')&#13;
                    .on(&#13;
                    'touchstart',&#13;
                    function(e) {&#13;
                        if (presenter.isHourHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            e.stopImmediatePropagation();&#13;
                            e.preventDefault();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchend',&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                        if(!presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                        }&#13;
&#13;
                    })&#13;
                    .on(&#13;
                    'touchmove',&#13;
                    function(e) {&#13;
                        e.preventDefault();&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'touch');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
&#13;
                            if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                                presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            }&#13;
                            presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
                    });&#13;
            });&#13;
&#13;
            jQuery(function($) {&#13;
                $(view)&#13;
                    .find('#s-hand')&#13;
                    .on(&#13;
                    'touchstart',&#13;
                    function(e) {&#13;
                        if (presenter.isSecondHandActive()&#13;
                            &amp;&amp; !presenter.isDisable&#13;
                            &amp;&amp; !presenter.isErrorCheckingMode) {&#13;
                            e.stopPropagation();&#13;
                            e.stopImmediatePropagation();&#13;
                            e.preventDefault();&#13;
                            presenter.moveCurrentHand(this);&#13;
                            presenter.isHandInMove = true;&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchend',&#13;
                    function(e) {&#13;
                        presenter.currentHand = 0;&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        presenter.isHandInMove = false;&#13;
                        if(!presenter.continousEvents) {&#13;
                            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                        }&#13;
                    })&#13;
                    .on(&#13;
                    'touchmove',&#13;
                    function(e) {&#13;
                        e.preventDefault();&#13;
                        e.stopPropagation();&#13;
                        e.stopImmediatePropagation();&#13;
                        if (presenter.isHandInMove) {&#13;
                            presenter.changeHandPosition(e, 'touch');&#13;
                            presenter.setTimeBasedOnSyncOption();&#13;
&#13;
                            if (presenter.shouldSendEventTime != presenter.getCurrentTime() &amp;&amp; presenter.continousEvents) {&#13;
                                presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
                            }&#13;
                            presenter.shouldSendEventTime = presenter.getCurrentTime();&#13;
                        }&#13;
                    });&#13;
            });&#13;
&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setTimeBasedOnSyncOption = function() {&#13;
        if (presenter.isSynhronized === 'Min with Hour') {&#13;
            presenter.setTimeSynhronizedMinWithHour();&#13;
        } else if (presenter.isSynhronized === 'Both') {&#13;
            presenter.setTimeSynhronizedBoth();&#13;
        } else if (presenter.isSynhronized === 'All') {&#13;
            presenter.setTimeSynhronizedAll();&#13;
        } else {&#13;
            presenter.setTimeNotSynhronized();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isHourHandActive = function() {&#13;
        const activeOptions = ["Hour", "H+M", "H+S", "All"];&#13;
        activeOptions.push("Both"); //for backward compatibility&#13;
        activeOptions.push("HourHand"); //for backward compatibility&#13;
        activeOptions.push(""); //for backward compatibility&#13;
&#13;
        return activeOptions.includes(presenter.ActiveHand);&#13;
    };&#13;
&#13;
    presenter.isMinuteHandActive = function() {&#13;
        const activeOptions = ["Minute", "H+M", "M+S", "All"];&#13;
        activeOptions.push("Both"); //for backward compatibility&#13;
        activeOptions.push("MinuteHand"); //for backward compatibility&#13;
        activeOptions.push(""); //for backward compatibility&#13;
&#13;
        return activeOptions.includes(presenter.ActiveHand);&#13;
    };&#13;
&#13;
    presenter.isSecondHandActive = function() {&#13;
        const activeOptions = ["Second", "H+S", "M+S", "All"];&#13;
&#13;
        return activeOptions.includes(presenter.ActiveHand);&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        if (presenter.validate(view, model)) {&#13;
            presenter.init(view, model);&#13;
&#13;
            presenter.setVisibility(true);&#13;
            presenter.setClockTime(model.InitialTime);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getCurrentTime = function() {&#13;
        if(presenter.currentMinuteValue == 60){&#13;
            presenter.currentMinuteValue = 0;&#13;
            if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 12) {&#13;
                presenter.currentHourValue = 1;&#13;
            } else{&#13;
                if (presenter.TimeStandard == 24 &amp;&amp; presenter.currentHourValue == 23) {&#13;
                    presenter.currentHourValue = 0;&#13;
                } else{&#13;
                    presenter.currentHourValue++;&#13;
                }&#13;
            }&#13;
        }&#13;
        let currentTime = `${presenter.currentHourValue}:${presenter.getValueWithLeadingZero(presenter.currentMinuteValue)}`;&#13;
        if (presenter.showSecondHand) {&#13;
            currentTime = currentTime + ":" + presenter.getValueWithLeadingZero(presenter.currentSecondValue);&#13;
        }&#13;
&#13;
        return currentTime;&#13;
    };&#13;
&#13;
    presenter.getValueWithLeadingZero = function(value) {&#13;
        return value &lt; 10 ? "0" + value : value;&#13;
    };&#13;
&#13;
    presenter.getCurrentHour = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        return presenter.currentHourValue;&#13;
    };&#13;
&#13;
    presenter.getCurrentMinute = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        return presenter.currentMinuteValue &lt; 10 ? "0"&#13;
            + presenter.currentMinuteValue : presenter.currentMinuteValue;&#13;
    };&#13;
&#13;
    presenter.getCurrentSeconds = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        return presenter.showSecondHand ? presenter.getValueWithLeadingZero(presenter.currentSecondValue) : null;&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.showAnswersMode &amp;&amp; !presenter.isGradualShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isDisable = true;&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        $($myDiv).addClass('disable');&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.isDisable = false;&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        if (presenter.isActivity === false) {&#13;
            return true;&#13;
        } else {&#13;
            if (presenter.InitialTime == presenter.getCurrentTime()) {&#13;
                return false;&#13;
            } else {&#13;
                return true;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveCurrentHand = function(element) {&#13;
        presenter.currentHand = element.id;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).addClass('correct');&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).addClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.changeHandPosition = function(e, device) {&#13;
        if (presenter.currentHand != 0 &amp;&amp; presenter.isHandInMove) {&#13;
            var h = 0, m = 0;&#13;
            var value = 0;&#13;
            var $div = presenter.$view.find('#analog-clock');&#13;
&#13;
            if (device == 'mouse') {&#13;
                presenter.mouseX = e.pageX - $div.offset().left;&#13;
                presenter.mouseY = e.pageY - $div.offset().top;&#13;
            } else {&#13;
                presenter.mouseX = e.originalEvent.touches[0].pageX&#13;
                    - $div.offset().left;&#13;
                presenter.mouseY = e.originalEvent.touches[0].pageY&#13;
                    - $div.offset().top;&#13;
            }&#13;
&#13;
            if (presenter.mouseX == presenter.center) {&#13;
                if (presenter.mouseY &lt; presenter.center) {&#13;
                    value = 0;&#13;
                } else {&#13;
                    if (presenter.mouseY &gt; presenter.center) {&#13;
                        value = 180;&#13;
                    }&#13;
                }&#13;
&#13;
            } else {&#13;
                if (presenter.mouseY == presenter.center) {&#13;
                    if (presenter.mouseX &lt; presenter.center) {&#13;
                        value = 270;&#13;
                    } else {&#13;
                        if (presenter.mouseX &gt; presenter.center) {&#13;
                            value = 90;&#13;
                        }&#13;
                    }&#13;
&#13;
                } else {&#13;
                    if (presenter.mouseX &gt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &lt; presenter.center) {&#13;
                        value = 90 - presenter.countAngle(parseInt(&#13;
                            presenter.mouseX, 10)&#13;
                            - parseInt(presenter.center, 10), parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseY, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &lt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &lt; presenter.center) {&#13;
                        value = 270 + presenter.countAngle(parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseX, 10), parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseY, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &lt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &gt; presenter.center) {&#13;
                        value = 270 - presenter.countAngle(parseInt(&#13;
                            presenter.center, 10)&#13;
                            - parseInt(presenter.mouseX, 10), parseInt(&#13;
                            presenter.mouseY, 10)&#13;
                            - parseInt(presenter.center, 10));&#13;
                    }&#13;
&#13;
                    if (presenter.mouseX &gt; presenter.center&#13;
                        &amp;&amp; presenter.mouseY &gt; presenter.center) {&#13;
                        value = 90 + presenter.countAngle(parseInt(&#13;
                            presenter.mouseX, 10)&#13;
                            - parseInt(presenter.center, 10), parseInt(&#13;
                            presenter.mouseY, 10)&#13;
                            - parseInt(presenter.center, 10));&#13;
&#13;
                    }&#13;
&#13;
                }&#13;
            }&#13;
&#13;
            if (presenter.currentHand === "m-hand") {&#13;
                value = presenter.countNewHandValue(value, presenter.Step);&#13;
            }&#13;
&#13;
            if (presenter.currentHand === "s-hand") {&#13;
                value = presenter.countNewHandValue(value, presenter.StepSeconds);&#13;
            }&#13;
&#13;
            presenter.setAttr(presenter.currentHand, value);&#13;
            presenter.currentHandValue = value;&#13;
&#13;
        } else{&#13;
            presenter.triggerFrameChangeEvent(presenter.getCurrentTime() == presenter.CorrectAnswer ? 1	: 0);&#13;
&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.countNewHandValue = function(value, step) {&#13;
        const roundedValue = Math.floor(parseInt(value / 6) / step) * step;&#13;
&#13;
        if (parseInt(value / 6) % step &gt;= parseInt(step / 2, 10)) {&#13;
            value = (roundedValue + step) * 6;&#13;
        } else {&#13;
            value = roundedValue * 6;&#13;
        }&#13;
&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.countAngle = function(coordinateX, coordinateY) {&#13;
        var value = parseInt(Math.atan((coordinateY / coordinateX)) * 180&#13;
            / Math.PI, 10);&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var isVisible = presenter.isVisible;&#13;
        var wasVisible = presenter.wasVisible;&#13;
        var initialTime = presenter.InitialTime;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        var currentTime = presenter.getCurrentTime();&#13;
&#13;
        return JSON.stringify({&#13;
            initialTime : initialTime,&#13;
            isVisible : isVisible,&#13;
            wasVisible : wasVisible,&#13;
            wasDisable : wasDisable,&#13;
            isDisable : isDisable,&#13;
            currentTime : currentTime&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsedState = JSON.parse(state), $myDiv = presenter.$view&#13;
            .find('.analog-clock')[0];&#13;
        presenter.currentTime = parsedState.currentTime;&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.wasVisible = parsedState.wasVisible;&#13;
        presenter.InitialTime = parsedState.initialTime;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.setClockTime(presenter.currentTime);&#13;
        presenter.isDisable === true ? $($myDiv).addClass('disable')&#13;
            : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        var $myDiv = presenter.$view.find('#analog-clock')[0];&#13;
        presenter.setWorkMode();&#13;
        presenter.isErrorCheckingMode = false;&#13;
&#13;
        presenter.setClockTime(presenter.InitialTime);&#13;
        presenter.isVisible = presenter.wasVisible;&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ? $($myDiv).addClass('disable')&#13;
            : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.CorrectAnswer === presenter.InitialTime) {&#13;
            return 0;&#13;
        }&#13;
        if (presenter.isActivity === true) {&#13;
            return 1;&#13;
        } return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        var isShowAnswerActive = presenter.showAnswersMode;&#13;
&#13;
        if (presenter.showAnswersMode){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var scoreValue = presenter.getScoreValue();&#13;
&#13;
        if (isShowAnswerActive) {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        return scoreValue;&#13;
    };&#13;
&#13;
    presenter.getScoreValue = function () {&#13;
        if (presenter.isActivity &amp;&amp; presenter.getCurrentTime() === presenter.CorrectAnswer) {&#13;
            return 1;&#13;
        } return 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        var isShowAnswerActive = presenter.showAnswersMode;&#13;
&#13;
        if(presenter.showAnswersMode){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var errorCount = presenter.getErrorCountValue();&#13;
&#13;
        if (isShowAnswerActive) {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        return errorCount;&#13;
    };&#13;
&#13;
    presenter.getErrorCountValue = function () {&#13;
        var isAnswerDefault = presenter.CorrectAnswer === presenter.InitialTime;&#13;
        var isAnswerCorrect = presenter.getCurrentTime() === presenter.CorrectAnswer;&#13;
        switch (true) {&#13;
            case (presenter.isActivity &amp;&amp; isAnswerDefault &amp;&amp; !isAnswerCorrect):&#13;
                return 1;&#13;
&#13;
            case (presenter.isActivity &amp;&amp; presenter.neutralOption() === 1):&#13;
                return 0;&#13;
&#13;
            case (presenter.isActivity):&#13;
                return presenter.getMaxScore() - presenter.getScore();&#13;
&#13;
            default:&#13;
                return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.neutralOption = function() {&#13;
        return presenter.getCurrentTime() == presenter.InitialTime ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
&#13;
        if (presenter.isActivity === true) {&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
&#13;
            if (presenter.neutralOption() === 0) {&#13;
&#13;
                if (presenter.getScore() === presenter.getMaxScore()&#13;
                    &amp;&amp; presenter.getErrorCount() === 0) {&#13;
                    $($myDiv).addClass('correct');&#13;
                } else {&#13;
                    $($myDiv).addClass('incorrect');&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if(presenter.showAnswersMode === true){&#13;
            presenter.hideAnswers();&#13;
&#13;
        }&#13;
        var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).removeClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(checkScore) {&#13;
        return {&#13;
            source : presenter.modelID,&#13;
            item : "" + "1",&#13;
            value : presenter.getCurrentTime(),&#13;
            score : '' + checkScore&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(checkScore) {&#13;
        var eventData = presenter.createEventData(checkScore);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isErrorCheckingMode){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
        if (presenter.isActivity === true) {&#13;
            presenter.isErrorCheckingMode = true;&#13;
            presenter.showAnswersMode = true;&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
            $($myDiv).addClass('showAnswers');&#13;
            presenter.showAnswersCurrentTime = presenter.getCurrentTime();&#13;
            presenter.setShowAnswerTime(presenter.CorrectAnswer);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.showAnswersMode === true){&#13;
            var $myDiv = presenter.$view.find('.analog-clock')[0];&#13;
            $($myDiv).removeClass('showAnswers');&#13;
            presenter.isErrorCheckingMode = false;&#13;
            presenter.showAnswersMode = false;&#13;
            presenter.setShowAnswerTime(presenter.showAnswersCurrentTime);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.gradualShowAnswers = function (data) {&#13;
        if (data.moduleID !== presenter.modelID) {&#13;
            return;&#13;
        }&#13;
        presenter.isGradualShowAnswersActive = true;&#13;
        presenter.showAnswers();&#13;
    };&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        return 1;&#13;
    }&#13;
&#13;
    presenter.setShowAnswerTime = function(time) {&#13;
        if (presenter.showSecondHand) {&#13;
            presenter.setClockTimeWithSeconds(time);&#13;
            return;&#13;
        }&#13;
&#13;
        var newTime = presenter.getNewTime(time);&#13;
&#13;
        presenter.currentMinuteValue = parseInt(newTime[1], 10);&#13;
        presenter.currentHourValue = parseInt(newTime[0], 10)&#13;
            % presenter.TimeStandard;&#13;
        if (presenter.TimeStandard == 12 &amp;&amp; presenter.currentHourValue == 0) {&#13;
            presenter.currentHourValue = 12;&#13;
        }&#13;
        var h = 30 * ((parseInt(presenter.currentHourValue, 10) % 12) + parseInt(&#13;
            presenter.currentMinuteValue, 10) / 60);&#13;
        var m = 6 * parseInt(presenter.currentMinuteValue, 10);&#13;
&#13;
        presenter.currentHourAngle = h;&#13;
&#13;
        presenter.setAttr('h-hand', h);&#13;
        presenter.setAttr('m-hand', m);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        switch (eventName) {&#13;
            case 'GradualShowAnswers':&#13;
                presenter.gradualShowAnswers(eventData);&#13;
                break;&#13;
&#13;
            case 'ShowAnswers':&#13;
                presenter.showAnswers();&#13;
                break;&#13;
&#13;
            case 'GradualHideAnswers':&#13;
                presenter.isGradualShowAnswersActive = false;&#13;
            case 'HideAnswers':&#13;
                presenter.hideAnswers();&#13;
                break;&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>