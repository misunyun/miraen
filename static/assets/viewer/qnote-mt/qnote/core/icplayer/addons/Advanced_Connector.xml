<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Advanced_Connector" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Scripts" nameLabel="Advanced_Connector_property_scripts" type="editablescript"/>
        <property name="Is disabled" nameLabel="Advanced_Connector_property_is_disabled" type="boolean"/>
	</model>
<css/><view/><preview/><presenter>function AddonAdvanced_Connector_create() {&#13;
    var presenter = function () {};&#13;
    var event;&#13;
&#13;
    presenter.STANDARD_EVENTS = [&#13;
        'ValueChanged',&#13;
        'Definition',&#13;
        'ItemSelected',&#13;
        'ItemConsumed',&#13;
        'ItemReturned',&#13;
        'PageLoaded',&#13;
        'PageAllOk',&#13;
        'ShowAnswers',&#13;
        'HideAnswers',&#13;
        'Done',&#13;
        'AllAttempted',&#13;
        'NotAllAttempted',&#13;
        'LimitedCheck',&#13;
        'GradualShowAnswers',&#13;
        'GradualHideAnswers',&#13;
    ];&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (presenter.isDisabled) {&#13;
            return;&#13;
        }&#13;
        var i, length;&#13;
        let filledEventData = presenter.fillEventData(eventData, eventName);&#13;
&#13;
        try {&#13;
            var filteredEvents = presenter.filterEvents(presenter.events, filledEventData);&#13;
            for (i = 0, length = filteredEvents.length; i &lt; length; i++) {&#13;
                event = filledEventData;&#13;
                eval(filteredEvents[i].Code);&#13;
            }&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Advanced Connector - problem occurred while running scripts!");&#13;
        }&#13;
&#13;
        event = undefined;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.onEventReceived('Reset', {});&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.onEventReceived('Check', {});&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.onEventReceived('Uncheck', {});&#13;
    };&#13;
&#13;
    function isCustomEvent(eventName) {&#13;
        return $.inArray(eventName, presenter.STANDARD_EVENTS) == -1;&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        var validatedScript = presenter.validateScript(model.Scripts), eventBus,&#13;
            customEventListeners = [];&#13;
&#13;
        if (validatedScript.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedScript.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(model["Is disabled"]);&#13;
        if (presenter.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.events = validatedScript.events;&#13;
&#13;
        $.each(presenter.STANDARD_EVENTS, function(_, name) {&#13;
            eventBus.addEventListener(name, presenter);&#13;
        });&#13;
&#13;
        $.each(presenter.events, function() {&#13;
            if (isCustomEvent(this.Name) &amp;&amp; (customEventListeners.indexOf(this.Name) == -1) ){&#13;
                eventBus.addEventListener(this.Name.trim(), presenter);&#13;
                customEventListeners.push(this.Name);&#13;
            }&#13;
        });&#13;
&#13;
        $(view).css('visibility', 'hidden');&#13;
    };&#13;
&#13;
    presenter.checkScriptsResources = function(script) {&#13;
        script = script.replace(/\s/g,'');&#13;
        var regex = new RegExp("[\(|\=](\'|\")*(/)*file/serve/[0-9]*");&#13;
&#13;
        return regex.test(script);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        var validatedScript = presenter.validateScript(model.Scripts);&#13;
        if (validatedScript.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedScript.errorCode);&#13;
        }&#13;
        if (presenter.checkScriptsResources(model.Scripts)) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, 'SV_09');&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'SV_01': "Script source must be provided and cannot be empty!",&#13;
        'SV_02': "Missing EVENTSTART keyword or new line after it!",&#13;
        'SV_03': "Missing EVENTEND keyword or new line after it!",&#13;
        'SV_04': "Missing SCRIPTSTART keyword or new line after it!",&#13;
        'SV_05': "Missing SCRIPTEND keyword or new line after it!",&#13;
        'SV_06': "Repeated event field value declaration!",&#13;
        'SV_07': "Repeated keyword!",&#13;
        'SV_08': "Invalid identification. Should be Source,Item, Value or Score!",&#13;
        'SV_09': "Please pay attention to the correct linking resources"&#13;
    };&#13;
&#13;
    function returnErrorResult(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.fillBlankFields = function(eventDeclaration) {&#13;
        for (var prop in eventDeclaration) {&#13;
            if (eventDeclaration.hasOwnProperty(prop) &amp;&amp; prop !== 'Name') {&#13;
                if (eventDeclaration[prop] == undefined) {&#13;
                    eventDeclaration[prop] = '.*';&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (eventDeclaration.Name == undefined) {&#13;
            eventDeclaration.Name = 'ValueChanged';&#13;
        }&#13;
    };&#13;
&#13;
    presenter.findKeywordIndex = function(script, keyword, currentLine) {&#13;
        for (var i = currentLine + 1; i &lt; script.length; i++) {&#13;
            if (script[i].trim() === keyword) return i;&#13;
        }&#13;
&#13;
        return -1;&#13;
    };&#13;
&#13;
    presenter.validateEvent = function(script) {&#13;
        var indexes = [], i, length;&#13;
        var eventDeclaration = {&#13;
            Source: undefined,&#13;
            Item: undefined,&#13;
            Value: undefined,&#13;
            Score: undefined,&#13;
            Name: undefined,&#13;
            Word: undefined,&#13;
            Type: undefined,&#13;
            Code: ''&#13;
        };&#13;
&#13;
        for(i = 0, length = script.length; i &lt; length; i++) {&#13;
            indexes[i] = false;&#13;
        }&#13;
&#13;
        var scriptStartIndex = presenter.findKeywordIndex(script, "SCRIPTSTART", -1);&#13;
        var scriptEndIndex = presenter.findKeywordIndex(script, "SCRIPTEND", 1);&#13;
&#13;
        var isScriptInvalid = scriptStartIndex === -1 &amp;&amp; scriptEndIndex !== -1;&#13;
        isScriptInvalid = isScriptInvalid || scriptStartIndex !== -1 &amp;&amp; scriptEndIndex === -1;&#13;
        isScriptInvalid = isScriptInvalid || scriptStartIndex &gt; scriptEndIndex;&#13;
&#13;
        if (isScriptInvalid) return returnErrorResult('SV_04');&#13;
&#13;
        indexes[scriptStartIndex] = true;&#13;
        indexes[scriptEndIndex] = true;&#13;
&#13;
        for (i = scriptStartIndex + 1; i &lt; scriptEndIndex; i++) {&#13;
            indexes[i] = true;&#13;
            eventDeclaration.Code += script[i];&#13;
            if (i !== scriptEndIndex - 1) {&#13;
                eventDeclaration.Code += '\n';&#13;
            }&#13;
        }&#13;
&#13;
        for(i = 0, length = indexes.length; i &lt; length; i++) {&#13;
            if (indexes[i]) continue;&#13;
&#13;
            var line = script[i].split(':');&#13;
            if (line.length !== 2) return returnErrorResult('SV_08');&#13;
&#13;
            var keywords = ['Source', 'Item', 'Value', 'Score', 'Name', 'Type', 'Word'];&#13;
&#13;
            var trimmedKeyword = line[0].trim();&#13;
            if (keywords.indexOf(trimmedKeyword) === -1) return returnErrorResult('SV_08');&#13;
&#13;
            if (eventDeclaration[trimmedKeyword]) {&#13;
                return returnErrorResult('SV_06');&#13;
            } else {&#13;
                eventDeclaration[trimmedKeyword] = line[1];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.fillBlankFields(eventDeclaration);&#13;
&#13;
        return { isError: false, eventDeclaration: eventDeclaration };&#13;
    };&#13;
&#13;
    function extractLines(script, start, end) {&#13;
        var array = [];&#13;
&#13;
        for (var i = start; i &lt; end; i++) array.push(script[i]);&#13;
&#13;
        return array;&#13;
    }&#13;
&#13;
    function cleanScriptFromEmptyLines(script) {&#13;
        var array = [];&#13;
&#13;
        for (var i = 0; i &lt; script.length; i++) {&#13;
            if (script[i]) array.push(script[i]);&#13;
        }&#13;
&#13;
        return array;&#13;
    }&#13;
&#13;
    presenter.validateScript = function (script) {&#13;
        if (!script) return returnErrorResult('SV_01');&#13;
&#13;
        var scriptsArray = [];&#13;
        var scriptLines = cleanScriptFromEmptyLines(script.split('\n'));&#13;
        var lineIndex = 0, length = scriptLines.length;&#13;
&#13;
        while (lineIndex &lt; length) {&#13;
            if (scriptLines[lineIndex] !== "EVENTSTART") return returnErrorResult('SV_02');&#13;
&#13;
            var endEventIndex = presenter.findKeywordIndex(scriptLines, "EVENTEND", lineIndex);&#13;
            if (endEventIndex === -1) return returnErrorResult('SV_03');&#13;
&#13;
            lineIndex++;&#13;
            var startEventIndex = presenter.findKeywordIndex(scriptLines, "EVENTSTART", lineIndex);&#13;
&#13;
            if (startEventIndex !== -1 &amp;&amp; startEventIndex &lt; endEventIndex) return returnErrorResult('SV_07');&#13;
&#13;
            var eventCode = extractLines(scriptLines, lineIndex, endEventIndex);&#13;
            var validatedEvent = presenter.validateEvent(eventCode);&#13;
            if (validatedEvent.isError) {&#13;
                return returnErrorResult(validatedEvent.errorCode);&#13;
            } else {&#13;
                scriptsArray.push(validatedEvent.eventDeclaration);&#13;
            }&#13;
&#13;
            lineIndex = endEventIndex + 1;&#13;
        }&#13;
&#13;
        return { isError: false, events: scriptsArray };&#13;
    };&#13;
&#13;
    presenter.matchFieldToRule = function (field, rule, doExactMatch) {&#13;
        if (rule.length &gt; 0)&#13;
            var rule = doExactMatch ? '^' + $.trim(rule) + '$' : $.trim(rule);&#13;
        return new RegExp(rule).test(field);&#13;
    };&#13;
&#13;
    presenter.filterEvents = function (events, event) {&#13;
        var filteredArray = [], isMatch;&#13;
&#13;
        try {&#13;
            for (var i = 0, length = events.length; i &lt; length; i++) {&#13;
                isMatch = presenter.matchFieldToRule(event.name, events[i].Name, true);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.source, events[i].Source);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.item, events[i].Item);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.value, events[i].Value);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.score, events[i].Score);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.word, events[i].Word);&#13;
                isMatch = isMatch &amp;&amp; presenter.matchFieldToRule(event.type, events[i].Type);&#13;
&#13;
                if (isMatch) {&#13;
                    filteredArray.push(events[i]);&#13;
                }&#13;
            }&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Advanced Connector - problem occurred while processing conditions!");&#13;
        }&#13;
&#13;
        return filteredArray;&#13;
    };&#13;
&#13;
    presenter.fillEventData = function (eventData, eventName) {&#13;
        var filledEventData = $.extend(true, {}, eventData);&#13;
        filledEventData.name = eventName;&#13;
&#13;
        if (!filledEventData.word) filledEventData.word = '';&#13;
        if (!filledEventData.type) filledEventData.type = '';&#13;
        if (!filledEventData.item) filledEventData.item = '';&#13;
        if (!filledEventData.value) filledEventData.value = '';&#13;
        if (!filledEventData.source) filledEventData.source = '';&#13;
        if (!filledEventData.score) filledEventData.score = '';&#13;
&#13;
        return filledEventData;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>