<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Print_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Text" isLocalized="true" name="Text" nameLabel="Print_Report_property_text" type="string"/>
        <property displayName="Print Report Label" isLocalized="true" name="PrintReportLabel" nameLabel="Print_Report_property_print_report_label" type="string"/>
        <property displayName="Close Report Label" isLocalized="true" name="CloseReportLabel" nameLabel="Print_Report_property_close_report_label" type="string"/>
        <property displayName="Show Export Button" name="ShowExportButton" nameLabel="Print_Report_property_show_export_button" type="boolean"/>
        <property displayName="Export Button Label" isLocalized="true" name="ExportCsvLabel" nameLabel="Print_Report_property_export_csv_label" type="string"/>
        <property displayName="Title" name="Title" nameLabel="Print_Report_property_title" type="boolean"/>
        <property displayName="Title Label" isLocalized="true" name="TitleLabel" nameLabel="Print_Report_property_title_label" type="string"/>
        <property displayName="Show subtitle" name="Subtitle" nameLabel="Print_Report_property_subtitle" type="boolean"/>
        <property displayName="Subtitle" isLocalized="true" name="SubtitleLabel" nameLabel="Print_Report_property_subtitle_label" type="string"/>
        <property displayName="Show User First And Last Name" name="Username" nameLabel="Print_Report_property_username" type="boolean"/>
        <property displayName="Percentage Score" name="PercentageScore" nameLabel="Print_Report_property_percentage_score" type="boolean"/>
        <property displayName="Percentage Score Label" isLocalized="true" name="PercentageScoreLabel" nameLabel="Print_Report_property_percentage_score_label" type="string"/>
        <property displayName="Checks" name="Checks" nameLabel="Print_Report_property_checks" type="boolean"/>
        <property displayName="Checks Label" isLocalized="true" name="ChecksLabel" nameLabel="Print_Report_property_checks_label" type="string"/>
        <property displayName="Mistakes" name="Mistakes" nameLabel="Print_Report_property_mistakes" type="boolean"/>
        <property displayName="Mistakes Label" isLocalized="true" name="MistakesLabel" nameLabel="Print_Report_property_mistakes_label" type="string"/>
        <property displayName="Errors" name="Errors" nameLabel="Print_Report_property_errors" type="boolean"/>
        <property displayName="Errors Label" isLocalized="true" name="ErrorsLabel" nameLabel="Print_Report_property_errors_label" type="string"/>
        <property displayName="Page Score" name="PageScore" nameLabel="Print_Report_property_page_score" type="boolean"/>
        <property displayName="Page Score Label" isLocalized="true" name="PageScoreLabel" nameLabel="Print_Report_property_page_score_label" type="string"/>
        <property displayName="Time Per Page" name="TimePerPage" nameLabel="Print_Report_property_time_per_page" type="boolean"/>
        <property displayName="Time Per Page Label" isLocalized="true" name="TimePerPageLabel" nameLabel="Print_Report_property_time_per_page_label" type="string"/>
        <property displayName="Show Total Results" name="Total" nameLabel="Print_Report_property_total" type="boolean"/>
        <property displayName="Total Results Label" isLocalized="true" name="TotalLabel" nameLabel="Print_Report_property_total_label" type="string"/>
        <property displayName="Show Current Date" name="Date" nameLabel="Print_Report_property_date" type="boolean"/>
        <property displayName="Date Format" isLocalized="true" name="DateLabel" nameLabel="Print_Report_property_date_label" type="{dd-mm-yy, mm-dd-yy, yy-mm-dd, dd/mm/yy, mm/dd/yy, yy/mm/dd}"/>
        <property displayName="Time Per Page: Days Label" isLocalized="true" name="TimePerPageDaysLabel" nameLabel="Print_Report_property_time_per_page_days_label" type="string"/>
        <property displayName="Time Per Page: Hours Label" isLocalized="true" name="TimePerPageHoursLabel" nameLabel="Print_Report_property_time_per_page_hours_label" type="string"/>
        <property displayName="Time Per Page: Minutes Label" isLocalized="true" name="TimePerPageMinutesLabel" nameLabel="Print_Report_property_time_per_page_minutes_label" type="string"/>
        <property displayName="Time Per Page: Seconds Label" isLocalized="true" name="TimePerPageSecondsLabel" nameLabel="Print_Report_property_time_per_page_seconds_label" type="string"/>
        <property displayName="User Form: First Name Label" isLocalized="true" name="UsernameFirstLabel" nameLabel="Print_Report_property_username_first_label" type="string"/>
        <property displayName="User Form: Last Name Label" isLocalized="true" name="UsernameLastLabel" nameLabel="Print_Report_property_username_last_label" type="string"/>
        <property displayName="User Form: Confirm Label" isLocalized="true" name="UsernameConfirmLabel" nameLabel="Print_Report_property_username_confirm_label" type="string"/>
        <property displayName="User Form: Cancel Label" isLocalized="true" name="UsernameCancelLabel" nameLabel="Print_Report_property_username_cancel_label" type="string"/>
        <property displayName="Styles" name="Styles" nameLabel="Print_Report_property_styles" type="text"/>
    </model>
<css>.print-report-addon-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.print-report-popup {&#13;
    position: absolute;&#13;
    z-index: 9999;&#13;
    background: rgba(0,0,0,0.5);&#13;
    color: #000000;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form {&#13;
    display: table;&#13;
    padding: 15px;&#13;
    margin: 10px auto 0 auto;&#13;
    background: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form label,&#13;
.print-report-popup .print-report-form input {&#13;
    display: block;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form label {&#13;
    margin: 5px 0;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form input {&#13;
    height: 34px;&#13;
    width: 100%;&#13;
    min-width: 300px;&#13;
    padding: 6px 12px;&#13;
    border: 1px solid #cccccc;&#13;
    box-sizing: border-box;&#13;
    display: block;&#13;
    font-size: 14px;&#13;
    line-height: 1.42857143;&#13;
    border-radius: 6px;&#13;
    color: #555;&#13;
    background-color: #ffffff;&#13;
    background-image: none;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form .print-report-form-actions {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form .print-report-form-actions button {&#13;
    display: inline-block;&#13;
    padding: 6px 12px;&#13;
    margin: 5px 5px 0 5px;&#13;
    font-size: 14px;&#13;
    font-weight: 400;&#13;
    line-height: 1.42857143;&#13;
    text-align: center;&#13;
    white-space: nowrap;&#13;
    vertical-align: middle;&#13;
    background-image: none;&#13;
    border: 1px solid transparent;&#13;
    border-radius: 4px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.print-report-form-confirm-btn {&#13;
    background: #0000ff;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.export-report-form-confirm-btn {&#13;
    background: #0000ff;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.print-report-popup .print-report-form button.print-report-form-cancel-btn {&#13;
    background: #ff0000;&#13;
    color: #ffffff;&#13;
}&#13;
&#13;
.export-button {&#13;
    width: 100%;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonPrint_Report_create(){&#13;
    var presenter = function AddonPrint_Report_presenter () {};&#13;
&#13;
    presenter.logic = function addonPrint_Report_logic (view, model, preview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.$body = $('body');&#13;
        presenter.$view = $(view);&#13;
        presenter.$page = $('.ic_page');&#13;
        presenter.$wrapper = $('&lt;div&gt;&lt;/div&gt;').addClass('print-report-addon-wrapper').text(presenter.configuration.text);&#13;
        presenter.$exportButton = $('&lt;button&gt;&lt;/button&gt;').addClass('export-button').text(presenter.configuration.labels.exportCsvReport);&#13;
        presenter.$view.append(presenter.$exportButton);&#13;
        presenter.$view.append(presenter.$wrapper);&#13;
&#13;
        if(!presenter.configuration.report.showExportButton){&#13;
            presenter.$exportButton.hide();&#13;
        }&#13;
&#13;
        presenter.originalViewStyles = presenter.$view.attr('style');&#13;
        presenter.originalViewClasses = presenter.$view.attr('class');&#13;
&#13;
        presenter.user = {&#13;
            'firstName': '',&#13;
            'lastName': ''&#13;
        };&#13;
&#13;
        if (!preview) {&#13;
            presenter.$wrapper.click(presenter.clickAction);&#13;
            presenter.$popup = presenter.createPopup();&#13;
            presenter.$view.append(presenter.$popup);&#13;
            presenter.$popup.hide();&#13;
            presenter.bindPopupEvents();&#13;
            presenter.$exportButton.on("click", function () {&#13;
                presenter.showPopup(true);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.exportButtonClickAction = function () {&#13;
        var data = presenter.getPagesData(),&#13;
            name = presenter.user.firstName || '',&#13;
            lastName = presenter.user.lastName || '',&#13;
            date = presenter.prepareDate(presenter.configuration.labels.date),&#13;
            firstNameLabel = presenter.configuration.labels.userFirstName,&#13;
            lastNameLabel = presenter.configuration.labels.userLastName,&#13;
            scoreLabel = presenter.configuration.labels.pageScore || "Score",&#13;
            errorsLabel = presenter.configuration.labels.errors || "Errors";&#13;
&#13;
            var blob = new Blob([firstNameLabel+ ": " + name + ", " + lastNameLabel + ": " + lastName + ", " + scoreLabel + ": " + data.total.score + "/" + data.total.maxScore + ", " + errorsLabel + ": " + data.total.errors + ", " + date], {type: "text/plain;charset=utf-8"});&#13;
            saveAs(blob, "report.txt");&#13;
    };&#13;
&#13;
    presenter.clickAction = function addonPrint_Report_clickAction () {&#13;
        if (presenter.configuration.report.username) {&#13;
            presenter.showPopup(false);&#13;
        } else {&#13;
            presenter.showReport();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getPagesData = function addonPrint_Report_getPagesData () {&#13;
        var data = {}, page, total;&#13;
&#13;
        for(var i = 0; i &lt; presenter.pageCount; i += 1) {&#13;
            page = presenter.presentation.getPage(i);&#13;
            if (page.isReportable()) {&#13;
                data[i + 1] = presenter.getPageData(page);&#13;
            }&#13;
        }&#13;
        page = null;&#13;
&#13;
        total = presenter.calculateTotal(data);&#13;
&#13;
        return {&#13;
            pages: data,&#13;
            total: total&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getPageData = function addonPrint_Report_getPageData (page) {&#13;
        var id = page.getId(),&#13;
            score = presenter.scoreService.getPageScoreById(id),&#13;
            time = presenter.timeService.getPageTimeById(id),&#13;
            percentageScore;&#13;
&#13;
        if (score.score === 0 &amp;&amp; score.maxScore === 0) {&#13;
            if (page.isVisited()) {&#13;
                percentageScore = 100;&#13;
            } else {&#13;
                percentageScore = 0;&#13;
            }&#13;
        } else {&#13;
            percentageScore = parseInt(Math.floor( (score.score / score.maxScore) * 100 ));&#13;
        }&#13;
&#13;
        return {&#13;
            'name': page.getName(),&#13;
            'score': score.score,&#13;
            'maxScore': score.maxScore,&#13;
            'percentageScore': percentageScore,&#13;
            'mistakes': score.mistakeCount,&#13;
            'errors': score.errorCount,&#13;
            'checks': score.checkCount,&#13;
            'time': parseInt(time),&#13;
            'visited': page.isVisited()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.calculateTotal = function addonPrint_Report_calculateTotal (data) {&#13;
        var count = 0, total = {&#13;
            'score': 0,&#13;
            'maxScore': 0,&#13;
            'percentageScore': 0,&#13;
            'mistakes': 0,&#13;
            'errors': 0,&#13;
            'checks': 0,&#13;
            'time': 0&#13;
        };&#13;
&#13;
        $.each(data, function AddonPrint_Report_calculateTotalEach (_, page) {&#13;
            count += 1;&#13;
            total.score += page.score;&#13;
            total.maxScore += page.maxScore;&#13;
            total.percentageScore += page.percentageScore;&#13;
            total.mistakes += page.mistakes;&#13;
            total.errors += page.errors;&#13;
            total.checks += page.checks;&#13;
            total.time += page.time;&#13;
        });&#13;
&#13;
        total.percentageScore = parseInt(Math.floor( total.percentageScore / count ));&#13;
        return total;&#13;
    };&#13;
&#13;
    presenter.createPopup = function addonPrint_Report_createPopup () {&#13;
        var $popup = $('&lt;div&gt;&lt;/div&gt;').&#13;
                addClass('print-report-popup'),&#13;
            $form = $('&lt;div&gt;&lt;/div&gt;').&#13;
                addClass('print-report-form'),&#13;
            $firstNameLabel = $('&lt;label&gt;&lt;/label&gt;').&#13;
                addClass('print-report-form-firstname-label').&#13;
                text(presenter.configuration.labels.userFirstName),&#13;
            $firstName = $('&lt;input&gt;').&#13;
                attr('type', 'text').&#13;
                attr('value', presenter.user.firstName).&#13;
                addClass('print-report-form-firstname'),&#13;
            $lastNameLabel = $('&lt;label&gt;&lt;/label&gt;').&#13;
                addClass('print-report-form-lastname-label').&#13;
                text(presenter.configuration.labels.userLastName),&#13;
            $lastName = $('&lt;input&gt;').&#13;
                attr('type', 'text').&#13;
                attr('value', presenter.user.lastName).&#13;
                addClass('print-report-form-lastname'),&#13;
            $confirmBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print-report-form-confirm-btn').&#13;
                text(presenter.configuration.labels.userConfirm),&#13;
            $exportBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('export-report-form-confirm-btn').&#13;
                text(presenter.configuration.labels.exportCsvReport),&#13;
            $cancelBtn = $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print-report-form-cancel-btn').&#13;
                text(presenter.configuration.labels.userCancel);&#13;
&#13;
        $form.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-firstname-wrapper').&#13;
                    append($firstNameLabel).&#13;
                    append($firstName)&#13;
            ).&#13;
            append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-lastname-wrapper').&#13;
                    append($lastNameLabel).&#13;
                    append($lastName)&#13;
            ).&#13;
            append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').&#13;
                    addClass('print-report-form-actions').&#13;
                    append($cancelBtn).&#13;
                    append($confirmBtn).&#13;
                    append($exportBtn)&#13;
            );&#13;
&#13;
        $popup.css({&#13;
            width: presenter.$page.width() + 'px',&#13;
            height: presenter.$page.height() + 'px'&#13;
        });&#13;
&#13;
        $popup.append($form);&#13;
&#13;
        return $popup;&#13;
    };&#13;
&#13;
    presenter.bindPopupEvents = function addonPrint_Report_bindPopupEvents () {&#13;
        presenter.$popup.on('click', '.print-report-form-confirm-btn', function addonPrint_Report_onConfirmClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
            presenter.showReport();&#13;
        });&#13;
&#13;
        presenter.$popup.on('click', '.export-report-form-confirm-btn', function addonPrint_Report_onConfirmClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
            presenter.exportButtonClickAction();&#13;
        });&#13;
&#13;
        presenter.$popup.on('click', '.print-report-form-cancel-btn', function addonPrint_Report_onCancelClick (event) {&#13;
            event.preventDefault();&#13;
            presenter.hidePopup();&#13;
        });&#13;
&#13;
        presenter.$popup.on('input', '.print-report-form-firstname', function addonPrint_Report_onFirstNameInput () {&#13;
            presenter.user.firstName = $(this).val();&#13;
        });&#13;
&#13;
        presenter.$popup.on('input', '.print-report-form-lastname', function addonPrint_Report_onLastNameInput () {&#13;
            presenter.user.lastName = $(this).val();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.unbindPopupEvents = function addonPrint_Report_unbindPopupEvents () {&#13;
        presenter.$popup.off();&#13;
    };&#13;
&#13;
    presenter.showPopup = function AddonPrint_Report_showPopup (exportButtonClicked) {&#13;
        if(exportButtonClicked){&#13;
            presenter.$popup.find('.print-report-form-confirm-btn').hide();&#13;
        }else{&#13;
            presenter.$popup.find('.export-report-form-confirm-btn').hide();&#13;
        }&#13;
&#13;
        var $firstName = presenter.$popup.find('.print-report-form-firstname'),&#13;
            $lastName = presenter.$popup.find('.print-report-form-lastname');&#13;
&#13;
        $firstName.attr('value', presenter.user.firstName);&#13;
        $lastName.attr('value', presenter.user.lastName);&#13;
&#13;
        $firstName = null;&#13;
        $lastName = null;&#13;
&#13;
        presenter.$wrapper.hide();&#13;
        presenter.$exportButton.hide();&#13;
&#13;
        presenter.$view.&#13;
            removeAttr('style class').&#13;
            css({&#13;
                'width': presenter.$page.width() + 'px',&#13;
                'height': presenter.$page.height() + 'px',&#13;
                'z-index': 9999&#13;
            });&#13;
&#13;
        presenter.$popup.show();&#13;
        presenter.$body.animate({scrollTop: presenter.$popup.offset().top}, 'fast', 'swing');&#13;
    };&#13;
&#13;
    presenter.hidePopup = function AddonPrint_Report_hidePopup () {&#13;
        presenter.$popup.hide();&#13;
&#13;
        presenter.$view.&#13;
            removeAttr('style class').&#13;
            attr('style', presenter.originalViewStyles).&#13;
            attr('class', presenter.originalViewClasses);&#13;
&#13;
        presenter.$popup.find('.print-report-form-confirm-btn').show();&#13;
        presenter.$popup.find('.export-report-form-confirm-btn').show();&#13;
        presenter.$wrapper.show();&#13;
        if(presenter.configuration.report.showExportButton){&#13;
            presenter.$exportButton.show();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showReport = function addonPrint_Report_showReport () {&#13;
        var data = presenter.getPagesData(),&#13;
            $reportHtml = presenter.prepareReportHtml(data),&#13;
            reportWindow = window.open();&#13;
&#13;
        $(reportWindow.document).ready(function addonPrint_Report_onReportWindowReady () {&#13;
            $(reportWindow.document.body).html($reportHtml);&#13;
            reportWindow = null;&#13;
            $reportHtml = null;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.prepareReportHtml = function addonPrint_Report_prepareReportHtml (data) {&#13;
        var $reportWrapper = $('&lt;section&gt;&lt;/section&gt;').addClass('wrapper'),&#13;
            $reportDefaultStyles = $('&lt;style&gt;&lt;/style&gt;'),&#13;
            $reportStyles = $('&lt;style&gt;&lt;/style&gt;').text(presenter.configuration.styles),&#13;
            $reportActions = presenter.prepareReportActionsHtml(),&#13;
            $reportHeader = presenter.prepareReportHeaderHtml(),&#13;
            $reportTable = presenter.prepareReportTableHtml(data);&#13;
&#13;
        $reportDefaultStyles.text(&#13;
            '@media print and (color) { * { -webkit-print-color-adjust: exact; print-color-adjust: exact; } }' +&#13;
            'body { width: 210mm; margin: 0 auto; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;' +&#13;
                'font-size: 14px; line-height: 20px; color: #333333; padding: 0; }' +&#13;
            'h1, h2 { line-height: 40px; margin: 0; }' +&#13;
            'h1 { font-size: 38.5px; }' +&#13;
            'h2 { font-size: 31.5px; }' +&#13;
            'table { width: 100%; max-width: 100%; border-collapse: collapse; border-spacing: 0; ' +&#13;
            'background-color: transparent; }' +&#13;
            'table th, table td { padding: 8px; line-height: 20px; text-align: left; vertical-align: top; }' +&#13;
            'table td { border-top: 1px solid #dddddd; }' +&#13;
            'table tbody &gt; tr:nth-child(odd) td { background: #f9f9f9; }' +&#13;
            '.percentage-score-label, .percentage-score { color: blue; }' +&#13;
            '.checks-label, .checks { color: green; }' +&#13;
            '.mistakes-label, .mistakes { color: brown; }' +&#13;
            '.errors-label, .errors { color: red; }' +&#13;
            '.page-score-label, .page-score { color: blue; font-weight: bold; }' +&#13;
            '.total td { border-top: 3px solid #dddddd; font-weight: bold; }' +&#13;
            '.actions { border: 1px solid #ccc; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; ' +&#13;
                'border-top-width: 0; margin-bottom: 10px; overflow: auto; background: #fff; }' +&#13;
            '.actions button { display: inline-block; padding: 6px 12px; margin: 5px; font-size: 14px;' +&#13;
                'font-weight: bold; line-height: 1.42857143; text-align: center; white-space: nowrap;' +&#13;
                'vertical-align: middle; background-image: none; border: 1px solid transparent; border-radius: 4px;' +&#13;
                'cursor: pointer; }' +&#13;
            '.actions button.close { background: #ff0000; color: #ffffff; float: left; }' +&#13;
            '.actions button.print { background: #0000ff; color: #ffffff; float: right; }' +&#13;
            '@media print { body { width: 100% } .actions { display: none; } }'&#13;
        );&#13;
&#13;
        $reportWrapper.append($reportDefaultStyles);&#13;
        $reportWrapper.append($reportStyles);&#13;
        $reportWrapper.append($reportActions);&#13;
        $reportWrapper.append($reportHeader);&#13;
        $reportWrapper.append($reportTable);&#13;
&#13;
        return $reportWrapper;&#13;
    };&#13;
&#13;
    presenter.prepareReportActionsHtml = function addonPrint_Report_prepareReportActionsHtml () {&#13;
        var $actions = $('&lt;div&gt;&lt;/div&gt;').addClass('actions');&#13;
&#13;
        $actions.append(&#13;
            $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('close').&#13;
                text(presenter.configuration.labels.closeReport).&#13;
                attr('onclick', 'javascript:window.close()')&#13;
        ).&#13;
        append(&#13;
            $('&lt;button&gt;&lt;/button&gt;').&#13;
                addClass('print').&#13;
                text(presenter.configuration.labels.printReport).&#13;
                attr('onclick', 'javascript:window.print()')&#13;
        );&#13;
&#13;
        return $actions;&#13;
    };&#13;
&#13;
    presenter.prepareMonthFormat = function addonPrint_Report_prepareMonthFormat (month) {&#13;
        if(month.toString().length &lt; 2){&#13;
            return "0" + month;&#13;
        }&#13;
&#13;
        return month;&#13;
    };&#13;
&#13;
    presenter.prepareYearFormat = function addonPrint_Report_prepareYearFormat (year) {&#13;
        return year.toString().substring(2);&#13;
    };&#13;
&#13;
    presenter.prepareDate = function addonPrint_Report_prepareDate (format) {&#13;
        var date = new Date(),&#13;
            day = date.getDate(),&#13;
            month = presenter.prepareMonthFormat(date.getMonth()+1),&#13;
            year = presenter.prepareYearFormat(date.getFullYear());&#13;
&#13;
&#13;
        switch(format) {&#13;
            case "dd-mm-yy":&#13;
                return day + "-" + month + "-" + year;&#13;
                break;&#13;
            case "mm-dd-yy":&#13;
                return month + "-" + day + "-" + year;&#13;
                break;&#13;
            case "yy-mm-dd":&#13;
                return year + "-" + month + "-" + day;&#13;
                break;&#13;
            case "dd/mm/yy":&#13;
                return day + "/" + month + "/" + year;&#13;
                break;&#13;
            case "mm/dd/yy":&#13;
                return month + "/" + day + "/" + year;&#13;
                break;&#13;
            case "yy/mm/dd":&#13;
                return year + "/" + month + "/" + day;&#13;
                break;&#13;
            default:&#13;
                return day + "-" + month + "-" + year;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.prepareReportHeaderHtml = function addonPrint_Report_prepareReportHeaderHtml () {&#13;
        var $header = $('&lt;div&gt;&lt;/div&gt;').addClass('header');&#13;
&#13;
        if (presenter.configuration.report.title) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('title').append(&#13;
                    $('&lt;h1&gt;&lt;/h1&gt;').text(presenter.configuration.labels.title)&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.subtitle) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('subtitle').append(&#13;
                    $('&lt;h2&gt;&lt;/h2&gt;').text(presenter.configuration.labels.subtitle)&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        if(presenter.configuration.report.date) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('date').append(&#13;
                    $('&lt;h2&gt;&lt;/h2&gt;').text(presenter.prepareDate(presenter.configuration.labels.date))&#13;
                )&#13;
            )&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.username) {&#13;
            $header.append(&#13;
                $('&lt;div&gt;&lt;/div&gt;').addClass('user').append(&#13;
                        $('&lt;span&gt;&lt;/span&gt;').addClass('firstname').text(presenter.user.firstName || '')&#13;
                    ).&#13;
                    append(' ').&#13;
                    append(&#13;
                        $('&lt;span&gt;&lt;/span&gt;').addClass('lastname').text(presenter.user.lastName || '')&#13;
                    )&#13;
            );&#13;
        }&#13;
&#13;
        return $header;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableHtml = function addonPrint_Report_prepareReportTableHtml (data) {&#13;
        var $report = $('&lt;div&gt;&lt;/div&gt;').addClass('report'),&#13;
            $table = $('&lt;table&gt;&lt;/table&gt;'),&#13;
            $header = presenter.prepareReportTableHeaderHtml(),&#13;
            $body = presenter.prepareReportTableBodyHtml(data.pages, data.total);&#13;
&#13;
        $table.append($header).append($body);&#13;
        $report.append($table);&#13;
&#13;
        return $report;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableHeaderHtml = function addonPrint_Report_prepareReportTableHeaderHtml () {&#13;
        var $header = $('&lt;thead&gt;&lt;/thead&gt;'),&#13;
            $row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
&#13;
        $row.append(&#13;
            $('&lt;th&gt;&lt;/th&gt;').addClass('name-label')&#13;
        );&#13;
&#13;
        if (presenter.configuration.report.percentageScore) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('percentage-score-label').text(presenter.configuration.labels.percentageScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.checks) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('checks-label').text(presenter.configuration.labels.checks)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.mistakes) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('mistakes-label').text(presenter.configuration.labels.mistakes)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.errors) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('errors-label').text(presenter.configuration.labels.errors)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.pageScore) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('page-score-label').text(presenter.configuration.labels.pageScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.timePerPage) {&#13;
            $row.append(&#13;
                $('&lt;th&gt;&lt;/th&gt;').addClass('time-per-page-label').text(presenter.configuration.labels.timePerPage)&#13;
            );&#13;
        }&#13;
&#13;
        $header.append($row);&#13;
        return $header;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableBodyHtml = function addonPrint_Report_prepareReportTableBodyHtml (pagesData, total) {&#13;
        var $body = $('&lt;tbody&gt;&lt;/tbody&gt;');&#13;
&#13;
        $.each(pagesData, function AddonPrint_Report_prepareReportTableBodyHtmlEach (_, page) {&#13;
            $body.append(&#13;
                presenter.prepareReportTableBodyRowHtml(page)&#13;
            );&#13;
        });&#13;
&#13;
        if (presenter.configuration.report.total) {&#13;
            total.name = presenter.configuration.labels.total;&#13;
&#13;
            $body.append(&#13;
                presenter.prepareReportTableBodyRowHtml(total).addClass('total')&#13;
            );&#13;
        }&#13;
&#13;
        return $body;&#13;
    };&#13;
&#13;
    presenter.prepareReportTableBodyRowHtml = function addonPrint_Report_prepareReportTableBodyRowHtml (pageData) {&#13;
        var $row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
&#13;
        $row.append(&#13;
            $('&lt;td&gt;&lt;/td&gt;').addClass('name').text(pageData.name)&#13;
        );&#13;
&#13;
        if (presenter.configuration.report.percentageScore) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('percentage-score').text(pageData.percentageScore + '%')&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.checks) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('checks').text(pageData.checks)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.mistakes) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('mistakes').text(pageData.mistakes)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.errors) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('errors').text(pageData.errors)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.pageScore) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('page-score').text(pageData.score + '/' + pageData.maxScore)&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.report.timePerPage) {&#13;
            $row.append(&#13;
                $('&lt;td&gt;&lt;/td&gt;').addClass('time-per-page').text(&#13;
                    presenter.humanReadableTime(pageData.time,&#13;
                        {&#13;
                            days: presenter.configuration.labels.timePerPageDays,&#13;
                            hours: presenter.configuration.labels.timePerPageHours,&#13;
                            minutes: presenter.configuration.labels.timePerPageMinutes,&#13;
                            seconds: presenter.configuration.labels.timePerPageSeconds&#13;
                        })&#13;
                )&#13;
            );&#13;
        }&#13;
&#13;
        return $row;&#13;
    };&#13;
&#13;
    presenter.humanReadableTime = function addonPrint_Report_humanReadableTime (time, labels) {&#13;
        var seconds, minutes,hours, days, output = '';&#13;
&#13;
        seconds = parseInt( Math.floor( time / 1000 ) );&#13;
&#13;
        minutes = parseInt( Math.floor( seconds / 60 ) );&#13;
&#13;
        if (minutes &gt; 0) {&#13;
            seconds = seconds - (minutes * 60);&#13;
        }&#13;
&#13;
        hours = parseInt( Math.floor( minutes / 60 ) );&#13;
&#13;
        if (hours &gt; 0) {&#13;
            minutes = minutes - (hours * 60);&#13;
        }&#13;
&#13;
        days = parseInt( Math.floor( hours / 24 ) );&#13;
&#13;
        if (days &gt; 0) {&#13;
            hours = hours - (days * 24);&#13;
        }&#13;
&#13;
        output = seconds + labels.seconds;&#13;
&#13;
        if (minutes &gt; 0) {&#13;
            output = minutes + labels.minutes + ' ' + output;&#13;
        }&#13;
        if (hours &gt; 0) {&#13;
            output = hours + labels.hours + ' ' + output;&#13;
        }&#13;
        if (days &gt; 0) {&#13;
            output = days + labels.days + ' ' + output;&#13;
        }&#13;
&#13;
        return output;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function addonPrint_Report_executeCommand (name) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility =  function addonPrint_Report_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function addonPrint_Report_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.pageCount = presenter.presentation.getPageCount();&#13;
        presenter.scoreService = controller.getScore();&#13;
        presenter.timeService = controller.getTimeService();&#13;
    };&#13;
&#13;
    presenter.createPreview = function addonPrint_Report_createPreview (view, model) {&#13;
        presenter.logic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function addonPrint_run (view, model){&#13;
        presenter.logic(view, model, false);&#13;
&#13;
        presenter.view = view;&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function addonPrint_Report_destroy () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$wrapper.off();&#13;
        presenter.$exportButton.off();&#13;
        presenter.unbindPopupEvents();&#13;
&#13;
        presenter.user = null;&#13;
        presenter.configuration = null;&#13;
        presenter.originalViewStyles = null;&#13;
        presenter.originalViewClasses = null;&#13;
&#13;
        presenter.playerController = null;&#13;
        presenter.presentation = null;&#13;
        presenter.pageCount = null;&#13;
        presenter.scoreService = null;&#13;
        presenter.timeService = null;&#13;
&#13;
        presenter.$popup = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$page = null;&#13;
        presenter.$view = null;&#13;
        presenter.$body = null;&#13;
        presenter.view = null;&#13;
        presenter.$exportButton = null;&#13;
&#13;
        presenter.destroy = null;&#13;
        presenter = null;&#13;
    };&#13;
&#13;
    presenter.show = function addonPrint_Report_show () {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function addonPrint_Report_hide () {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function addonPrint_Report_reset () {&#13;
        presenter.hidePopup();&#13;
        presenter.user.firstName = '';&#13;
        presenter.user.lastName = '';&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function addonPrint_Report_getState () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            user: presenter.user&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonPrint_Report_setState (state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        if (parsedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        if (parsedState.user) {&#13;
            presenter.user.firstName = parsedState.user.firstName || '';&#13;
            presenter.user.lastName = parsedState.user.lastName || '';&#13;
        } else {&#13;
            presenter.user.firstName = '';&#13;
            presenter.user.lastName = '';&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function addonPrint_Report_validateModel (model) {&#13;
        return {&#13;
            'report': {&#13;
                'title': ModelValidationUtils.validateBoolean(model.Title),&#13;
                'subtitle': ModelValidationUtils.validateBoolean(model.Subtitle),&#13;
                'username': ModelValidationUtils.validateBoolean(model.Username),&#13;
                'percentageScore': ModelValidationUtils.validateBoolean(model.PercentageScore),&#13;
                'checks': ModelValidationUtils.validateBoolean(model.Checks),&#13;
                'mistakes': ModelValidationUtils.validateBoolean(model.Mistakes),&#13;
                'errors': ModelValidationUtils.validateBoolean(model.Errors),&#13;
                'pageScore': ModelValidationUtils.validateBoolean(model.PageScore),&#13;
                'timePerPage': ModelValidationUtils.validateBoolean(model.TimePerPage),&#13;
                'total': ModelValidationUtils.validateBoolean(model.Total),&#13;
                'date': ModelValidationUtils.validateBoolean(model.Date),&#13;
                'showExportButton': ModelValidationUtils.validateBoolean(model.ShowExportButton)&#13;
            },&#13;
            'labels': {&#13;
                'title': model.TitleLabel,&#13;
                'subtitle': model.SubtitleLabel,&#13;
                'percentageScore': model.PercentageScoreLabel,&#13;
                'checks': model.ChecksLabel,&#13;
                'mistakes': model.MistakesLabel,&#13;
                'errors': model.ErrorsLabel,&#13;
                'pageScore': model.PageScoreLabel,&#13;
                'timePerPage': model.TimePerPageLabel,&#13;
                'total': model.TotalLabel,&#13;
                'timePerPageDays': model.TimePerPageDaysLabel || 'd',&#13;
                'timePerPageHours': model.TimePerPageHoursLabel || 'h',&#13;
                'timePerPageMinutes': model.TimePerPageMinutesLabel || 'm',&#13;
                'timePerPageSeconds': model.TimePerPageSecondsLabel || 's',&#13;
                'userFirstName': model.UsernameFirstLabel || 'First name',&#13;
                'userLastName': model.UsernameLastLabel || 'Last name',&#13;
                'userConfirm': model.UsernameConfirmLabel || 'Generate',&#13;
                'userCancel': model.UsernameCancelLabel || 'Cancel',&#13;
                'closeReport': model.CloseReportLabel || 'Close',&#13;
                'printReport': model.PrintReportLabel || 'Print',&#13;
                'exportCsvReport': model.ExportCsvLabel || 'Export report',&#13;
                'date': model.DateLabel&#13;
&#13;
            },&#13;
            'styles': model.Styles,&#13;
            'text': model.Text,&#13;
            'isVisible': ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            'isVisibleByDefault': ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function addonPrint_Report_setShowErrorsMode () {};&#13;
&#13;
    presenter.setWorkMode = function addonPrint_Report_setWorkMode () {};&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>