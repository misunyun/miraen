<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Single_State_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Title" nameLabel="Single_State_Button_property_title" type="string"/>
		<property name="Image" nameLabel="Single_State_Button_property_image" type="image"/>
		<property isDefault="true" name="onClick" nameLabel="Single_State_Button_property_on_click" type="event"/>
		<property name="Disable" nameLabel="Single_State_Button_property_disable" type="boolean"/>
		<property name="Enable in error mode" nameLabel="Single_State_Button_property_enable_in_error_mode" type="boolean"/>
		<property name="Enable in show answers mode" nameLabel="Single_State_Button_property_enable_in_show_answers_mode" type="boolean"/>
	</model>
<css>.singlestate-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.singlestate-button-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: url('resources/ssb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.singlestate-button-title,&#13;
.singlestate-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="singlestate-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="singlestate-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSingle_State_Button_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TITLE: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.state = {&#13;
        isErrorMode: false&#13;
    };&#13;
&#13;
    presenter.executeUserEventCode = function() {&#13;
        if (presenter.playerController == null) return;&#13;
        if (presenter.configuration.onClickEvent.isEmpty) return;&#13;
&#13;
        presenter.playerController.getCommands().executeEventCode(presenter.configuration.onClickEvent.value);&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (event) {&#13;
        if (event !== undefined) {&#13;
            event.stopPropagation();&#13;
        }&#13;
&#13;
        var allowClickInErrorMode = presenter.state.isErrorMode &amp;&amp; presenter.configuration.enableInErrorMode;&#13;
        if (presenter.configuration.isDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; !allowClickInErrorMode) return;&#13;
        if (presenter.configuration.isShowAnswersMode &amp;&amp; !presenter.configuration.enableInShowAnswersMode) return;&#13;
&#13;
        presenter.executeUserEventCode();&#13;
        presenter.triggerButtonClickedEvent();&#13;
    };&#13;
&#13;
    function handleMouseActions() {&#13;
        var $element = presenter.$view.find('div[class*=singlestate-button-element]:first');&#13;
        $element.click(presenter.clickHandler);&#13;
    }&#13;
&#13;
    function setElementsDimensions(model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    }&#13;
&#13;
    function createImageElement(element) {&#13;
        var $imageElement = $(document.createElement('img'));&#13;
        $imageElement.addClass('singlestate-button-image');&#13;
        $imageElement.attr('src', presenter.configuration.image);&#13;
        $(element).append($imageElement);&#13;
    }&#13;
&#13;
    function createTitleElement(element) {&#13;
        var $titleElement = $(document.createElement('span'));&#13;
        $titleElement.addClass('singlestate-button-title');&#13;
        $titleElement.html(presenter.configuration.title);&#13;
        $(element).append($titleElement);&#13;
    }&#13;
&#13;
    function createElements(wrapper) {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('singlestate-button-element');&#13;
        if (presenter.configuration.isTabindexEnabled) {$element.attr('tabindex', '0');}&#13;
&#13;
        switch (presenter.configuration.displayContent) {&#13;
            case presenter.DISPLAY_CONTENT_TYPE.TITLE:&#13;
                createTitleElement($element);&#13;
&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
                createImageElement($element);&#13;
&#13;
                break;&#13;
            case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
                createImageElement($element);&#13;
                createTitleElement($element);&#13;
&#13;
                break;&#13;
        }&#13;
&#13;
        wrapper.append($element);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        var $wrapper = $(presenter.$view.find('.singlestate-button-wrapper:first')[0]);&#13;
        var $element = createElements($wrapper);&#13;
&#13;
        setElementsDimensions(upgradedModel, $wrapper, $element);&#13;
        presenter.toggleDisable(presenter.configuration.isDisabledByDefault);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault || isPreview);&#13;
&#13;
        if (!isPreview) {&#13;
            handleMouseActions();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        var upgradedModel = presenter.upgradeDisable(model);&#13;
        upgradedModel = presenter.upgradeEnableInErrorMode(upgradedModel);&#13;
        return presenter.upgradeEnableInShowAnswersMode(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeDisable = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel.Disable) {&#13;
            upgradedModel.Disable = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeEnableInErrorMode = function AddonSingleStateButton_upgradeEnableInErrorMode(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel['Enable in error mode']) {&#13;
            upgradedModel['Enable in error mode'] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeEnableInShowAnswersMode = function AddonSingleStateButton_upgradeEnableInErrorMode(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel['Enable in show answers mode']) {&#13;
            upgradedModel['Enable in show answers mode'] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(title, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
&#13;
        if (!title.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TITLE;&#13;
        } else if (title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var title = presenter.validateString(model.Title);&#13;
        var image = presenter.validateString(model.Image);&#13;
        var onClickEvent = presenter.validateString(model.onClick);&#13;
        var isDisabled = ModelValidationUtils.validateBoolean(model.Disable);&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);&#13;
        var enableInErrorMode = ModelValidationUtils.validateBoolean(model['Enable in error mode']);&#13;
        var enableInShowAnswersMode = ModelValidationUtils.validateBoolean(model['Enable in show answers mode']);&#13;
&#13;
        return {&#13;
            displayContent: presenter.determineDisplayContent(title, image),&#13;
            title: title.value,&#13;
            image: image.value,&#13;
            onClickEvent: onClickEvent,&#13;
            isDisabled: isDisabled,&#13;
            isDisabledByDefault: isDisabled,&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isErrorMode: false,&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            enableInErrorMode: enableInErrorMode,&#13;
            enableInShowAnswersMode: enableInShowAnswersMode&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '1',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerButtonClickedEvent = function() {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        presenter.playerController.getEventBus().sendEvent('ValueChanged', this.createEventData());&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.isEnabledInGSAMode = function () {&#13;
        return presenter.configuration.enableInShowAnswersMode;&#13;
    }&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setWorkMode();&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        presenter.toggleDisable(this.configuration.isDisabledByDefault);&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        this.toggleDisable(false);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        this.toggleDisable(true);&#13;
    };&#13;
&#13;
    presenter.toggleDisable = function(disable) {&#13;
        var element = presenter.$view.find('div[class*=singlestate-button-element]:first');&#13;
        if(disable) {&#13;
            element.addClass("disable");&#13;
        } else {&#13;
            element.removeClass("disable");&#13;
        }&#13;
        presenter.configuration.isDisabled = disable;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isDisabled: presenter.configuration.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.configuration.isDisabled = state.isDisabled;&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(presenter.configuration.isDisabled);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.configuration.isErrorMode = true;&#13;
        presenter.state.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.state.isErrorMode = false;&#13;
        presenter.configuration.isShowAnswersMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.configuration.isShowAnswersMode = true;&#13;
        }&#13;
&#13;
        if (eventName === "HideAnswers") {&#13;
            presenter.configuration.isShowAnswersMode = false;&#13;
            presenter.setWorkMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShiftDown, event) {&#13;
        event.preventDefault();&#13;
        if (keyCode === window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.clickHandler();&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>