<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Heading" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Heading" nameLabel="Heading_property_heading" type="{h1, h2, h3, h4, h5, h6}"/>
        <property isDefault="true" isLocalized="true" name="Content" nameLabel="Heading_property_content" type="html"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Heading_property_lang_attribute" type="string"/>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
        <property name="isSection" nameLabel="printable_is_section" type="boolean"/>
        <property name="isSplitInPrintBlocked" nameLabel="printable_block_split_label" type="boolean"/>
    </model>
<css/><view/><preview/><presenter>function AddonHeading_create () {&#13;
&#13;
    function getErrorObject (ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    var isVisibleByDefault = true;&#13;
    var isWCAGOn = false;&#13;
    var playerController = null;&#13;
    var textParser = null;&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        C01: 'Property content cannot be empty.'&#13;
    };&#13;
&#13;
    presenter.HEADINGS = {&#13;
        'h1': 'H1',&#13;
        'h2': 'H2',&#13;
        'h3': 'H3',&#13;
        'h4': 'H4',&#13;
        'h5': 'H5',&#13;
        'h6': 'H6',&#13;
        DEFAULT: 'h1'&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        var headingString = '&lt;[tag]&gt;&lt;/[tag]]&gt;'.replace('[tag]', presenter.configuration.heading);&#13;
        var $heading = $(headingString);&#13;
&#13;
        var parsedContent = presenter.configuration.content;&#13;
        if (textParser != null) {&#13;
            parsedContent = textParser.parseAltTexts(parsedContent);&#13;
        } else if (isPreview) {&#13;
            parsedContent = parsedContent.replace(/\\alt{([^{}|]*?)\|[^{}|]*?}(\[[a-zA-Z0-9_\- ]*?\])*/g, '$1'); // replace \alt{a|b}[c] with&#13;
            parsedContent = parsedContent.replace(/\\alt{([^|{}]*?)\|[^|{}]*?}/g, '$1'); // replace \alt{a|b} with a&#13;
        }&#13;
        $heading.html(parsedContent);&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            $heading.attr("tabindex", "0");&#13;
        }&#13;
&#13;
        presenter.$view.append($heading);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        if (ModelValidationUtils.isStringEmpty(model.Content)) {&#13;
            return getErrorObject('C01');&#13;
        }&#13;
&#13;
        return {&#13;
            heading: ModelValidationUtils.validateOption(presenter.HEADINGS, model['Heading']).toLowerCase(),&#13;
            content: model.Content,&#13;
&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            isTabindexEnabled: ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']),&#13;
            langTag: model['langAttribute']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (!presenter.configuration.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        isVisibleByDefault = presenter.configuration.isVisible;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setVisibility(isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) return;&#13;
&#13;
        var parsed = JSON.parse(state);&#13;
        var isVisible = parsed.isVisible;&#13;
        presenter.setVisibility(isVisible);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
&#13;
        playerController = controller;&#13;
&#13;
        textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShift, event) {&#13;
        event.preventDefault();&#13;
        if (keyCode == window.KeyboardControllerKeys.ENTER || keyCode == window.KeyboardControllerKeys.SPACE) {&#13;
            presenter.readContent();&#13;
        }&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readContent = function() {&#13;
        var ttr = window.TTSUtils.getTextVoiceArrayFromElement(presenter.$view,presenter.configuration.langTag);&#13;
        speak(ttr);&#13;
    };&#13;
&#13;
    presenter.isEnterable = function(){ return false;};&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        var model = presenter.upgradeModel(model);&#13;
        var configuration = presenter.validateModel(model);&#13;
&#13;
        var $root = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $root.attr('id',configuration.ID);&#13;
        $root.addClass('printable_addon_Heading');&#13;
        $root.css("max-width", model["Width"]+"px");&#13;
        $root.css("min-height", model["Height"]+"px");&#13;
&#13;
        var $heading = $('&lt;[tag]&gt;&lt;/[tag]]&gt;'.replace('[tag]', configuration.heading));&#13;
        var parsedContent = configuration.content;&#13;
        parsedContent = parsedContent.replace(/\\alt{([^{}|]*?)\|[^{}|]*?}(\[[a-zA-Z0-9_\- ]*?\])*/g, '$1'); // replace \alt{a|b}[c] with&#13;
        parsedContent = parsedContent.replace(/\\alt{([^|{}]*?)\|[^|{}]*?}/g, '$1'); // replace \alt{a|b} with a&#13;
        $heading.html(parsedContent);&#13;
        $root.append($heading);&#13;
&#13;
        return $root[0].outerHTML;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>