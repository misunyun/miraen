<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Audio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="mp3" nameLabel="Audio_property_mp3" type="audio"/>
		<property name="ogg" nameLabel="Audio_property_ogg" type="audio"/>
		<property name="defaultControls" nameLabel="Audio_property_default_controls" type="boolean"/>
        <property name="useBrowserControls" nameLabel="Audio_property_use_browser_controls" type="boolean"/>
		<property name="displayTime" nameLabel="Audio_property_display_time" type="boolean"/>
		<property name="enableLoop" nameLabel="Audio_property_enable_loop" type="boolean"/>
		<property isLocalized="true" name="Narration" nameLabel="Audio_property_narration" type="narration"/>
		<property name="onEnd" nameLabel="Audio_property_on_end" type="event"/>
		<property name="forceLoadAudio" nameLabel="Audio_property_force_load_audio" type="boolean"/>
		<property name="enablePlaybackSpeedControls" nameLabel="Audio_property_enable_playback_speed_controls" type="boolean"/>
	</model>
<css>.wrapper-addon-audio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio {&#13;
    height: 40px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.audioplayer {&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    width: 340px;&#13;
    height: 40px;&#13;
    display: table;&#13;
    padding-right: 2px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.audioplayer.playback-speed-control-enabled {&#13;
    width: 390px;&#13;
}&#13;
&#13;
.play-pause-btn {&#13;
    width: 38px;&#13;
    height: 40px;&#13;
    float:left;&#13;
    border: solid 1px #444;&#13;
    border-radius: 30px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-play-btn {&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
}&#13;
&#13;
.audio-pause-btn {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
.audio-stop-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-stop-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-volume-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-volume-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-volume0 {&#13;
    background-image: url('resources/volume-0.png');&#13;
}&#13;
&#13;
.audio-volume1 {&#13;
    background-image: url('resources/volume-1.png');&#13;
}&#13;
&#13;
.audio-volume2 {&#13;
    background-image: url('resources/volume-2.png');&#13;
}&#13;
&#13;
.audio-volume3 {&#13;
    background-image: url('resources/volume-3.png');&#13;
}&#13;
&#13;
.player-time {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
}&#13;
&#13;
.audio-playback-rate {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    width: 60px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    background-color:inherit;&#13;
}&#13;
&#13;
.audio-playback-rate select {&#13;
    width: 100%;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
    border: 0px;&#13;
    background-color:inherit;&#13;
}&#13;
&#13;
.audio-progress-bar {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
    width: 100px;&#13;
    float:left;&#13;
    padding-left: 0px;&#13;
    margin-top: 15px;&#13;
    margin-left: 5px;&#13;
    height: 10px;&#13;
    background-color: #FFF;&#13;
    border-radius: 5px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.audio-slider-btn {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat;&#13;
    float:left;&#13;
    margin-left: -10px;&#13;
    margin-top: -5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.audio-bar {&#13;
    background-color: #BDC2C7;&#13;
    float: left;&#13;
    height: 10px;&#13;
    margin-left: 0px;&#13;
    border-bottom-left-radius: 5px;&#13;
    border-top-left-radius: 5px;&#13;
}&#13;
&#13;
.audio-volume-layer {&#13;
    width: 100px;&#13;
    height: 40px;&#13;
    position: absolute;&#13;
    right: 15px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.volume-control-background {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 50%;&#13;
    border-bottom: solid 1px #808080;&#13;
}&#13;
&#13;
.audio-volume-control {&#13;
    position: absolute;&#13;
    width: 20px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat center;&#13;
    margin-left: -10px;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAudio_create(){&#13;
    var presenter = function(){};&#13;
    var AUDIO_FILES_MISSING = "This addon needs at least 1 audio file.";&#13;
    var mp3File;&#13;
    var oggFile;&#13;
    var eventBus;&#13;
    var currentTimeAlreadySent;&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
    var audioIsLoaded = false;&#13;
    var fetchedAudioData;&#13;
    var isReadyToReplay = true;&#13;
&#13;
    presenter.playbackRate = 1.0;&#13;
    var playbackRateList = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0];&#13;
&#13;
    function deferredQueueDecoratorChecker() {&#13;
        if (!presenter.configuration.forceLoadAudio) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return audioIsLoaded;&#13;
    }&#13;
&#13;
    presenter.audio = {&#13;
        readyState : 0&#13;
    };&#13;
    presenter.playerController = null;&#13;
    presenter.addonID = null;&#13;
    presenter.type = 'audio';&#13;
&#13;
    presenter.mouseData = {};&#13;
&#13;
    presenter.onEventReceived = function AddonAudio_onEventReceived (eventName, eventData) {&#13;
        if (eventData.value == 'dropdownClicked' &amp;&amp; !presenter.audio.playing &amp;&amp; !isTemporarilyPaused()) {&#13;
            presenter.audio.load();&#13;
        }&#13;
    };&#13;
&#13;
    function isTemporarilyPaused() {&#13;
        return (presenter.audio.paused&#13;
            &amp;&amp; presenter.audio.readyState &gt; 2&#13;
            &amp;&amp; presenter.audio.currentTime &gt; 0&#13;
            &amp;&amp; !presenter.audio.ended&#13;
        );&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function AddonAudio_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonAudio_upgradeModel (model) {&#13;
        var upgradedModel = presenter.upgradeEnableLoop(model);&#13;
        upgradedModel = presenter.upgradeForceLoadAudio(upgradedModel);&#13;
        upgradedModel = presenter.upgradeEnablePlaybackSpeedControls(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeForceLoadAudio = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["forceLoadAudio"]) {&#13;
            upgradedModel["forceLoadAudio"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeEnableLoop = function AddonAudio_upgradeEnableLoop (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["enableLoop"]) {&#13;
            upgradedModel["enableLoop"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeEnablePlaybackSpeedControls = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["enablePlaybackSpeedControls"]) {&#13;
            upgradedModel["enablePlaybackSpeedControls"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.createTimeUpdateEventData = function AddonAudio_createTimeUpdateEventData (data) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '' + data.currentTime,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function AddonAudio_createOnEndEventData () {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : 'end',&#13;
            value : '',&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function AddonAudio_getAudioCurrentTime () {&#13;
        return this.audio.currentTime;&#13;
    };&#13;
&#13;
    function addonAudio_formatTime (seconds) {&#13;
        return StringUtils.timeFormat(seconds);&#13;
    }&#13;
&#13;
    presenter.AddonAudio_onProgressedCallback = function () {&#13;
        deferredSyncQueue.resolve();&#13;
    };&#13;
&#13;
    presenter.AddonAudio_onLoadedMetadataCallback = function () {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        if (presenter.configuration.displayTime) {&#13;
            AddonAudio_displayTimer(0, duration);&#13;
        }&#13;
        if (presenter.configuration.isHtmlPlayer &amp;&amp; !presenter.configuration.useBrowserControls){&#13;
            presenter.$playerTime.html('0:00 / ' + addonAudio_formatTime(duration))&#13;
        }&#13;
&#13;
&#13;
        deferredSyncQueue.resolve();&#13;
    };&#13;
&#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function AddonAudio_sendEventAndSetCurrentTimeAlreadySent (eventData, currentTime) {&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.sendOnEndEvent = function AddonAudio_sendOnEndEvent () {&#13;
        var eventData = presenter.createOnEndEventData();&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function AddonAudio_onTimeUpdateSendEventCallback () {&#13;
        var currentTime = addonAudio_formatTime(presenter.getAudioCurrentTime());&#13;
        if (currentTime !== currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createTimeUpdateEventData({'currentTime' : currentTime});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
&#13;
    function AddonAudio_onTimeUpdateCallback() {&#13;
        var bar_width, duration = presenter.audio.duration;&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        if (presenter.configuration.displayTime) {&#13;
            AddonAudio_displayTimer(currentTime, duration);&#13;
        }&#13;
        if (presenter.configuration.isHtmlPlayer &amp;&amp; !presenter.configuration.useBrowserControls){&#13;
            presenter.$playerTime.html(addonAudio_formatTime(currentTime) + ' / ' + addonAudio_formatTime(duration));&#13;
            bar_width = presenter.$progressWrapper.width() * currentTime / duration;&#13;
            presenter.$progressBar.width(Math.round(bar_width));&#13;
            presenter.$progressSlider.css('left', Math.round(bar_width));&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function AddonAudio_change_volume_class(volume_class) {&#13;
        if (presenter.$volumeBtn.hasClass(volume_class)) {&#13;
            return;&#13;
        }&#13;
        for (var i=0; i&lt;=3; i++) {&#13;
            if (presenter.$volumeBtn.hasClass('audio-volume'+i)) {&#13;
                presenter.$volumeBtn.removeClass('audio-volume'+i);&#13;
            }&#13;
        }&#13;
        presenter.$volumeBtn.addClass(volume_class);&#13;
    }&#13;
&#13;
    function AddonAudio_onVolumeChanged() {&#13;
        if (presenter.configuration.isHtmlPlayer &amp;&amp; !presenter.configuration.useBrowserControls){&#13;
            var volume = presenter.audio.volume,&#13;
                volume_class = '';&#13;
            presenter.$volumeControl.css('left', volume * presenter.$volumeLayer.width());&#13;
            if (volume &lt; 0.1) {&#13;
                volume_class = 'audio-volume0';&#13;
                if (volume &gt; 0) {&#13;
                    presenter.audio.volume = 0;&#13;
                }&#13;
            } else if (volume &lt; 0.4) {&#13;
                volume_class = 'audio-volume1';&#13;
            } else if (volume &lt; 0.7) {&#13;
                volume_class = 'audio-volume2';&#13;
            } else {&#13;
                volume_class = 'audio-volume3';&#13;
            }&#13;
            AddonAudio_change_volume_class(volume_class);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_playPauseCallback () {&#13;
        if (presenter.$playPauseBtn.hasClass('audio-pause-btn')) {&#13;
            presenter.pause();&#13;
        }&#13;
        else {&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_playStopCallback () {&#13;
        if (presenter.$playPauseBtn.hasClass('audio-pause-btn2')) {&#13;
            presenter.stop();&#13;
        }&#13;
        else {&#13;
            presenter.play();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_displayTimer(current, duration) {&#13;
        presenter.$view.find('#currentTime').html(addonAudio_formatTime(current) + ' / ');&#13;
        presenter.$view.find('#durationTime').html(addonAudio_formatTime(duration));&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseDownCallback(event) {&#13;
        if ($(event.target).hasClass('audio-slider-btn')) {&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            presenter.mouseData.playedBeforeDragging = !presenter.audio.paused;&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseUpCallback() {&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            var duration = presenter.audio.duration;&#13;
            duration = isNaN(duration) ? 0 : duration;&#13;
            presenter.audio.currentTime = duration * presenter.$progressBar.width() / presenter.$progressWrapper.width();&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            presenter.mouseData.oldPosition = 0;&#13;
            if (presenter.mouseData.playedBeforeDragging) {&#13;
                presenter.play();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_progressMouseMoveCallback(event) {&#13;
        if (presenter.mouseData.isMouseDragged){&#13;
            var relativeDistance = event.pageX - presenter.mouseData.oldPosition,&#13;
                bar_width = 0,&#13;
                oldWidth = presenter.$progressBar.width();&#13;
            if (oldWidth + relativeDistance &lt; presenter.$progressWrapper.width()) {&#13;
                bar_width = oldWidth + relativeDistance;&#13;
            }&#13;
            else {&#13;
                bar_width = presenter.$progressWrapper.width();&#13;
            }&#13;
            presenter.$progressBar.width(bar_width);&#13;
            presenter.$progressSlider.css('left',Math.round(bar_width));&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
        }&#13;
    }&#13;
&#13;
    function addonAudio_isMoreThanOneFingerGesture(event) {&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches;&#13;
        return touchPoints.length&gt; 1;&#13;
    }&#13;
&#13;
    function AddonAudio_progressTouchStartCallback(event) {&#13;
        var touch, touchPoints;&#13;
        if (addonAudio_isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        AddonAudio_progressMouseDownCallback(touch);&#13;
    }&#13;
&#13;
&#13;
    function AddonAudio_progressTouchEndCallback() {&#13;
        AddonAudio_progressMouseUpCallback();&#13;
    }&#13;
&#13;
&#13;
    function AddonAudio_progressTouchMoveCallback(event) {&#13;
        if (addonAudio_isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        AddonAudio_progressMouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function AddonAudio_attachProgressListeners() {&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerDown", AddonAudio_progressTouchStartCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerUp", AddonAudio_progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerMove", AddonAudio_progressTouchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$progressWrapper[0].ontouchstart=AddonAudio_progressTouchStartCallback;&#13;
            presenter.$customPlayer[0].ontouchend=AddonAudio_progressTouchEndCallback;&#13;
            presenter.$progressWrapper[0].ontouchmove=AddonAudio_progressTouchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$progressWrapper.on('mousedown', AddonAudio_progressMouseDownCallback);&#13;
            presenter.$progressWrapper.on('mouseup', AddonAudio_progressMouseUpCallback);&#13;
            presenter.$progressWrapper.on('mousemove', AddonAudio_progressMouseMoveCallback);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_toogleVolumeLayer(){&#13;
        AddonAudio_onVolumeChanged();&#13;
        presenter.$volumeLayer.toggle();&#13;
        presenter.$playerTime.toggle();&#13;
    }&#13;
&#13;
    function AddonAudio_createHtmlPlayer() {&#13;
        presenter.$customPlayer = $('&lt;div&gt;').&#13;
            addClass('audioplayer');&#13;
        if (!presenter.configuration.useBrowserControls &amp;&amp; presenter.configuration.enablePlaybackSpeedControls) {&#13;
            presenter.$customPlayer.addClass('playback-speed-control-enabled');&#13;
        }&#13;
&#13;
        if( !presenter.configuration.useBrowserControls){&#13;
            presenter.$playPauseBtn = $('&lt;div&gt;').&#13;
                addClass('play-pause-btn').&#13;
                addClass('audio-play-btn').&#13;
                on('click', AddonAudio_playPauseCallback);&#13;
        }else{&#13;
            presenter.$playPauseBtn = $('&lt;div&gt;').&#13;
                addClass('play-pause-btn2').&#13;
                addClass('audio-play-btn2').&#13;
                on('click', AddonAudio_playStopCallback);&#13;
&#13;
             presenter.$view.css("background-color", "transparent");&#13;
        }&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playPauseBtn);&#13;
&#13;
        if( !presenter.configuration.useBrowserControls ){&#13;
&#13;
           presenter.$stopBtn = $('&lt;div&gt;').&#13;
                addClass('audio-stop-btn').&#13;
                on('click', presenter.stop);&#13;
&#13;
            presenter.$customPlayer.append(presenter.$stopBtn);&#13;
&#13;
            presenter.$progressWrapper = $('&lt;div&gt;').&#13;
                addClass('audio-progress-bar');&#13;
&#13;
            presenter.$progressBar = $('&lt;div&gt;').&#13;
                addClass('audio-bar');&#13;
&#13;
            presenter.$progressSlider = $('&lt;div&gt;').&#13;
                addClass('audio-slider-btn');&#13;
&#13;
            AddonAudio_attachProgressListeners();&#13;
&#13;
            presenter.$progressWrapper.&#13;
                append(presenter.$progressBar).&#13;
                append(presenter.$progressSlider);&#13;
&#13;
            presenter.$customPlayer.append(presenter.$progressWrapper);&#13;
&#13;
            if (!MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
                presenter.$volumeBtn = $('&lt;div&gt;').&#13;
                    addClass('audio-volume-btn').&#13;
                    on('click', AddonAudio_toogleVolumeLayer);&#13;
&#13;
                presenter.$customPlayer.append(presenter.$volumeBtn);&#13;
&#13;
                presenter.$volumeControlBackground = $('&lt;div&gt;').addClass('volume-control-background');&#13;
                presenter.$volumeControl = $('&lt;div&gt;').addClass('audio-volume-control');&#13;
&#13;
                presenter.$volumeLayer = $('&lt;div&gt;').&#13;
                    addClass('audio-volume-layer').&#13;
                    append(presenter.$volumeControlBackground).&#13;
                    append(presenter.$volumeControl).&#13;
                    on('click', function (e) {&#13;
                    presenter.audio.volume = e.offsetX / $(this).width();&#13;
                });&#13;
&#13;
                presenter.$volumeLayer.hide();&#13;
&#13;
                presenter.$customPlayer.append(presenter.$volumeLayer);&#13;
            }&#13;
&#13;
            presenter.$playbackRateControls = null;&#13;
            if (presenter.configuration.enablePlaybackSpeedControls) {&#13;
                presenter.$playbackRateControls = $('&lt;div&gt;');&#13;
                presenter.$playbackRateControls.addClass('audio-playback-rate');&#13;
                presenter.$playbackRateControls.append(createPlaybackRateSelectElement());&#13;
                displayPlaybackRate();&#13;
                presenter.$customPlayer.append(presenter.$playbackRateControls);&#13;
            }&#13;
&#13;
            presenter.$playerTime = $('&lt;div&gt;').&#13;
                addClass('player-time').&#13;
                text('00:00 / --:--');&#13;
            presenter.$customPlayer.append(presenter.$playerTime);&#13;
        };&#13;
&#13;
        presenter.$customPlayer.on('click mousedown mouseup', function(event){&#13;
            event.stopPropagation();&#13;
        });&#13;
        presenter.$audioWrapper.append(presenter.$customPlayer);&#13;
    }&#13;
&#13;
    function createPlaybackRateSelectElement () {&#13;
        var $select = $('&lt;select&gt;');&#13;
        for (var i = 0; i &lt; playbackRateList.length; i++) {&#13;
            var $option = $('&lt;option&gt;');&#13;
            $option.text(playbackRateList[i]);&#13;
            $option.attr('value', playbackRateList[i]);&#13;
            if (playbackRateList[i] == 1) {&#13;
                $option.attr('selected', 'selected');&#13;
            }&#13;
            $select.append($option);&#13;
        }&#13;
&#13;
        $select.on('change', function(){&#13;
            presenter.setPlaybackRate($select.val());&#13;
        })&#13;
&#13;
        return $select;&#13;
&#13;
    }&#13;
&#13;
    function displayPlaybackRate () {&#13;
        if (presenter.$playbackRateControls != null) {&#13;
            var $select = presenter.$playbackRateControls.find('select');&#13;
            if ($select.val() == presenter.playbackRate) {&#13;
                if (playbackRateList.indexOf(presenter.playbackRate) != -1) {&#13;
                    $select.find('.custom-option').remove();&#13;
                }&#13;
                return;&#13;
            }&#13;
            $select.find('.custom-option').remove();&#13;
            if (playbackRateList.indexOf(presenter.playbackRate) != -1) {&#13;
                $select.val(presenter.playbackRate);&#13;
            } else {&#13;
                var $customOption = $('&lt;option&gt;');&#13;
                $customOption.text(presenter.playbackRate);&#13;
                $customOption.attr('value', presenter.playbackRate);&#13;
                $customOption.addClass('custom-option');&#13;
                $select.append($customOption);&#13;
                $select.val(presenter.playbackRate);&#13;
&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_createView(view, model, isPreview){&#13;
//        if( presenter.configuration.isHtmlPlayer &amp;&amp; !presenter.configuration.useBrowserControls ){&#13;
//            presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-audio");&#13;
//        }else{&#13;
//            presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-audio-only-play");&#13;
//        }&#13;
&#13;
        presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-audio");&#13;
&#13;
&#13;
        mp3File = model.mp3;&#13;
        oggFile = model.ogg;&#13;
&#13;
        if (!oggFile &amp;&amp; !mp3File) {&#13;
            $(view).html(AUDIO_FILES_MISSING);&#13;
        }&#13;
&#13;
        var audio = document.createElement("audio");&#13;
&#13;
        if (presenter.configuration.defaultControls){&#13;
            $(audio).attr("preload", "auto");&#13;
            if (presenter.configuration.isHtmlPlayer){&#13;
                AddonAudio_createHtmlPlayer();&#13;
            }&#13;
            else {&#13;
                $(audio).attr("controls", "controls");&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime");&#13;
        $(durationTime).attr("id", "durationTime");&#13;
&#13;
        presenter.$audioWrapper.append(audio);&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.$audioWrapper.append(currentTime).append(durationTime);&#13;
        }&#13;
        if (!isPreview) {&#13;
            audio.addEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
        }&#13;
&#13;
        Object.defineProperty(audio, 'playing', {&#13;
            get: function() {&#13;
                return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
            }&#13;
        });&#13;
&#13;
        presenter.audio = audio;&#13;
    }&#13;
&#13;
    presenter.sendOnPLayingEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '',&#13;
            'value': 'playing',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.sendOnPauseEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '',&#13;
            'value': 'pause',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    function AddonAudio_onAudioPlaying () {&#13;
        presenter.sendOnPLayingEvent();&#13;
    }&#13;
&#13;
    function AddonAudio_onAudioPause () {&#13;
        presenter.sendOnPauseEvent();&#13;
    }&#13;
&#13;
    function AddonAudio_attachEventListeners(audio) {&#13;
        audio.addEventListener('loadeddata', presenter.AddonAudio_onLoadedMetadataCallback, false);&#13;
        audio.addEventListener('timeupdate', AddonAudio_onTimeUpdateCallback, false);&#13;
        audio.addEventListener('volumechange', AddonAudio_onVolumeChanged, false);&#13;
        audio.addEventListener('ended', AddonAudio_onAudioEnded , false);&#13;
        audio.addEventListener('click', AddonAudio_onAudioClick, false);&#13;
        audio.addEventListener('playing', AddonAudio_onAudioPlaying, false);&#13;
        audio.addEventListener('pause', AddonAudio_onAudioPause, false);&#13;
&#13;
        if (isMobileIOS()) {&#13;
            AddonAudio_attachEventListenersForIOS(audio);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_attachEventListenersForIOS(audio) {&#13;
        if (presenter.configuration.forceLoadAudio) {&#13;
            audio.addEventListener('progress', presenter.AddonAudio_onProgressedCallback, { once: true });&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_removeEventListeners(audio) {&#13;
        presenter.audio.removeEventListener('loadeddata', presenter.AddonAudio_onLoadedMetadataCallback, false);&#13;
        presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
        presenter.audio.removeEventListener('timeupdate', AddonAudio_onTimeUpdateCallback, false);&#13;
        presenter.audio.removeEventListener('volumechange', AddonAudio_onVolumeChanged, false);&#13;
        presenter.audio.removeEventListener('ended', AddonAudio_onAudioEnded , false);&#13;
        presenter.audio.removeEventListener('click', AddonAudio_onAudioClick, false);&#13;
        presenter.audio.removeEventListener('playing', AddonAudio_onAudioPlaying, false);&#13;
        presenter.audio.removeEventListener('pause', AddonAudio_onAudioPause, false);&#13;
&#13;
        if (isMobileIOS()) {&#13;
            AddonAudio_removeEventListenersForIOS(audio);&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_removeEventListenersForIOS(audio) {&#13;
        if (presenter.configuration.forceLoadAudio) {&#13;
            audio.removeEventListener('progress', presenter.AddonAudio_onProgressedCallback, { once: true });&#13;
        }&#13;
    }&#13;
&#13;
    function isMobileIOS() {&#13;
        return window.MobileUtils.isSafariMobile(navigator.userAgent);&#13;
    }&#13;
&#13;
    function AddonAudio_onAudioEnded () {&#13;
        if (presenter.configuration.enableLoop) {&#13;
            this.currentTime = 0;&#13;
            this.play();&#13;
        } else {&#13;
            presenter.executeOnEndEvent();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.stop();&#13;
        }&#13;
    }&#13;
&#13;
    function AddonAudio_onAudioClick (e) {&#13;
        e.stopPropagation();&#13;
    }&#13;
&#13;
    presenter.fetchAudioFromServer = function (src) {&#13;
        var req = new XMLHttpRequest();&#13;
        req.open('GET', src, true);&#13;
        req.responseType = 'blob';&#13;
        req.addEventListener("load", presenter.loadAudioDataFromRequest);&#13;
&#13;
        req.send();&#13;
    };&#13;
&#13;
    presenter.loadAudioDataFromRequest = function (event) {&#13;
        if (event.currentTarget.status == 200 || (isMobileIOS() &amp;&amp; event.currentTarget.status == 0)) {&#13;
            fetchedAudioData = event.currentTarget.response;&#13;
            presenter.audio.src = URL.createObjectURL(fetchedAudioData);&#13;
            audioIsLoaded = true;&#13;
        }&#13;
    };&#13;
&#13;
    function AddonAudio_loadFiles(){&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
        var audio = presenter.audio;&#13;
&#13;
        AddonAudio_attachEventListeners(audio);&#13;
&#13;
        if(audio.canPlayType) {&#13;
            canPlayMp3 = audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
            var audioSrc = "";&#13;
&#13;
            if(canPlayMp3){&#13;
                audioSrc = mp3File;&#13;
            } else if (canPlayOgg) {&#13;
                audioSrc = oggFile;&#13;
            }&#13;
&#13;
            if (presenter.configuration.forceLoadAudio) {&#13;
                presenter.fetchAudioFromServer(audioSrc);&#13;
            } else {&#13;
                $(audio).attr("src", audioSrc);&#13;
            }&#13;
&#13;
        } else {&#13;
            $(audio).append("Your browser doesn't support audio.");&#13;
        }&#13;
&#13;
        $(audio).load();&#13;
    }&#13;
&#13;
    presenter.run = function AddonAudio_run (view, model){&#13;
        presenter.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonAudio_createPreview (view, model){&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonAudio_initialize (view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        AddonAudio_createView(view, upgradedModel, isPreview);&#13;
        &#13;
        if (!isPreview) {&#13;
        	AddonAudio_loadFiles();&#13;
            presenter.$view.bind('click', function (event) {&#13;
                event.stopPropagation();&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonAudio_destroy (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.audio.pause();&#13;
&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.playerController = null;&#13;
&#13;
        AddonAudio_removeEventListeners(presenter.audio);&#13;
        if (presenter.configuration.forceLoadAudio &amp;&amp; audioIsLoaded) {&#13;
            URL.revokeObjectURL(presenter.audio.src);&#13;
        }&#13;
        presenter.audio.setAttribute('src', '');&#13;
        presenter.audio.load();&#13;
        presenter.audio = null;&#13;
&#13;
        if (presenter.$playPauseBtn) {&#13;
            presenter.$playPauseBtn.off();&#13;
            presenter.$playPauseBtn = null;&#13;
        }&#13;
        if (presenter.$stopBtn) {&#13;
            presenter.$stopBtn.off();&#13;
            presenter.$stopBtn = null;&#13;
        }&#13;
        if (presenter.$progressWrapper) {&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerDown", AddonAudio_progressTouchStartCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerUp", AddonAudio_progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerMove", AddonAudio_progressTouchMoveCallback, false);&#13;
            presenter.$progressWrapper[0].ontouchstart=null;&#13;
            presenter.$progressWrapper[0].ontouchmove=null;&#13;
            presenter.$progressWrapper.off();&#13;
            presenter.$progressWrapper = null;&#13;
        }&#13;
        if (presenter.$customPlayer) {&#13;
            presenter.$customPlayer.off();&#13;
            presenter.$customPlayer[0].ontouchend=null;&#13;
            presenter.$customPlayer = null;&#13;
        }&#13;
        if (presenter.$volumeBtn) {&#13;
            presenter.$volumeBtn.off();&#13;
            presenter.$volumeBtn = null;&#13;
        }&#13;
        if (presenter.$volumeLayer) {&#13;
            presenter.$volumeLayer.off();&#13;
            presenter.$volumeLayer = null;&#13;
        }&#13;
&#13;
        presenter.$volumeControlBackground = null;&#13;
        presenter.$volumeControl = null;&#13;
        presenter.$audioWrapper = null;&#13;
        presenter.$playerTime = null;&#13;
        presenter.$progressBar = null;&#13;
        presenter.$progressSlider = null;&#13;
&#13;
        presenter.mouseData = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view.unbind();&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
&#13;
        deferredSyncQueue = null;&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonAudio_validateModel (model) {&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            defaultControls = ModelValidationUtils.validateBoolean(model.defaultControls),&#13;
            useBrowserControls = ModelValidationUtils.validateBoolean(model.useBrowserControls);&#13;
&#13;
        return {&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            onEndEventCode: model.onEnd,&#13;
            enableLoop: ModelValidationUtils.validateBoolean(model.enableLoop),&#13;
            displayTime: ModelValidationUtils.validateBoolean(model.displayTime),&#13;
            defaultControls: defaultControls,&#13;
            useBrowserControls: useBrowserControls,&#13;
            isHtmlPlayer: true,&#13;
            addonID: model.ID,&#13;
            forceLoadAudio: ModelValidationUtils.validateBoolean(model.forceLoadAudio),&#13;
            narration: model.Narration,&#13;
            enablePlaybackSpeedControls: ModelValidationUtils.validateBoolean(model.enablePlaybackSpeedControls)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonAudio_executeCommand (name, params) {&#13;
        var commands = {&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'pause': presenter.pause,&#13;
            'getNarration': presenter.getNarration,&#13;
            'setPlaybackRate': presenter.setPlaybackRate&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonAudio_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.play = deferredSyncQueue.decorate(function() {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.src &amp;&amp; presenter.audio.paused) {&#13;
            if (!isReadyToReplay) {&#13;
                prepareToReplay();&#13;
            }&#13;
            presenter.audio.play();&#13;
            if (presenter.configuration.isHtmlPlayer) {&#13;
                if( !presenter.configuration.useBrowserControls ){&#13;
                    presenter.$playPauseBtn.&#13;
                        removeClass('audio-play-btn').&#13;
                        addClass('audio-pause-btn');&#13;
                }else{&#13;
                    presenter.$playPauseBtn.&#13;
                        removeClass('audio-play-btn2').&#13;
                        addClass('audio-pause-btn2');&#13;
                }&#13;
            }&#13;
        }&#13;
    });&#13;
&#13;
    presenter.pause = deferredSyncQueue.decorate(function AddonAudio_pause () {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.readyState &gt; 0) {&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.audio.pause();&#13;
            }&#13;
            if (presenter.configuration.isHtmlPlayer) {&#13;
                if( !presenter.configuration.useBrowserControls ){&#13;
                    presenter.$playPauseBtn.&#13;
                        removeClass('audio-pause-btn').&#13;
                        addClass('audio-play-btn');&#13;
                }else{&#13;
                    presenter.$playPauseBtn.&#13;
                        removeClass('audio-pause-btn2').&#13;
                        addClass('audio-play-btn2');&#13;
                }&#13;
            }&#13;
        }&#13;
    });&#13;
&#13;
    function prepareToReplay() {&#13;
        if (isMobileIOS()) {&#13;
            prepareToReplayOnMobileIOS()&#13;
        }&#13;
        isReadyToReplay = true;&#13;
    }&#13;
&#13;
    function prepareToReplayOnMobileIOS() {&#13;
        if (presenter.configuration.forceLoadAudio) {&#13;
            URL.revokeObjectURL(presenter.audio.src);&#13;
            presenter.audio.src = URL.createObjectURL(fetchedAudioData);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.stop = deferredSyncQueue.decorate(function AddonAudio_stop () {&#13;
        if (!presenter.audio) return;&#13;
        if(presenter.audio.readyState &gt; 0) {&#13;
            isReadyToReplay = false;&#13;
            presenter.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        }&#13;
    });&#13;
&#13;
    presenter.setPlaybackRate = function (value) {&#13;
        if (!presenter.audio) return;&#13;
        if (isNaN(value)) return;&#13;
        var parsedValue = parseFloat(value);&#13;
        presenter.playbackRate = parsedValue;&#13;
        presenter.audio.playbackRate = parsedValue;&#13;
        displayPlaybackRate();&#13;
    };&#13;
&#13;
    presenter.show = function AddonAudio_show () {&#13;
        this.setVisibility(true);&#13;
        this.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hideAddon = function AddonAudio_hideAddon () {&#13;
        this.setVisibility(false);&#13;
        this.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.hide = function AddonAudio_hide () {&#13;
        this.stop();&#13;
        this.hideAddon();&#13;
    };&#13;
&#13;
    presenter.reset = function AddonAudio_reset () {&#13;
        if (!presenter.audio) return;&#13;
&#13;
        presenter.stop();&#13;
&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function AddonAudio_getState () {&#13;
        return JSON.stringify({&#13;
            isVisible : presenter.configuration.isVisible,&#13;
            playbackRate: presenter.playbackRate&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonAudio_setState (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) {&#13;
            return false;&#13;
        }&#13;
&#13;
        /*&#13;
        * The If statement resolves an issue on Mobile Safari, where presenter.stop call from setState would be resolved&#13;
        * right after the first presenter.play call. The problem occurs because the deferred queue is resolved&#13;
        * on loadedmetadata event and Mobile Safari only downloads the audio/video src file on the first interaction&#13;
        * with the tag, rather than when the page itself is loaded.&#13;
        * */&#13;
        if (audioIsLoaded) {&#13;
            presenter.stop();&#13;
        };&#13;
&#13;
        var parsedJson = JSON.parse(stateString);&#13;
        if (parsedJson.isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hideAddon();&#13;
        }&#13;
        if (parsedJson['playbackRate'] != undefined) {&#13;
            presenter.setPlaybackRate(parsedJson['playbackRate']);&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.executeOnEndEvent = function AddonAudio_executeOnEndEvent () {&#13;
        if (presenter.configuration.onEndEventCode) {&#13;
            presenter.playerController.getCommands().executeEventCode(presenter.configuration.onEndEventCode);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getNarration = function AddonAudio_getNarration() {&#13;
        return presenter.configuration.narration;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        //This method has been added to enable the addon's detection by the autofill option of TTS&#13;
    };&#13;
&#13;
    function forward() {&#13;
        presenter.audio.currentTime += 5;&#13;
    }&#13;
&#13;
    function backward() {&#13;
        presenter.audio.currentTime -= 5;&#13;
    }&#13;
&#13;
    function playPause() {&#13;
        if (presenter.audio.paused) {&#13;
            presenter.play();&#13;
        } else {&#13;
            presenter.pause();&#13;
        }&#13;
    }&#13;
&#13;
    function increaseVolume() {&#13;
         var volume = presenter.audio.volume;&#13;
        volume += 0.1;&#13;
        if (volume &gt; 1.0) volume = 1.0;&#13;
        presenter.audio.volume = volume;&#13;
    }&#13;
&#13;
    function decreaseVolume() {&#13;
        var volume = presenter.audio.volume;&#13;
        volume -= 0.1;&#13;
        if (volume &lt; 0.0) volume = 0.0;&#13;
        presenter.audio.volume = volume;&#13;
    }&#13;
&#13;
    presenter.keyboardController = function (keycode, isShift, event) {&#13;
        event.preventDefault();&#13;
        switch (keycode) {&#13;
            case 9: // TAB&#13;
                if (isShift) {&#13;
                    backward();&#13;
                } else {&#13;
                    forward();&#13;
                }&#13;
                break;&#13;
            case 13: //ENTER&#13;
                if (isShift) {&#13;
                    presenter.stop();&#13;
                }&#13;
                break;&#13;
            case 32: // SPACE&#13;
                playPause();&#13;
                break;&#13;
            case 38: // UP&#13;
                increaseVolume();&#13;
                break;&#13;
            case 40: // DOWN&#13;
                decreaseVolume();&#13;
                break;&#13;
            case 37: // LEFT&#13;
                backward();&#13;
                break;&#13;
            case 39: // RIGHT&#13;
                forward();&#13;
                break;&#13;
            case 27: // ESC&#13;
                presenter.stop();&#13;
                break;&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>