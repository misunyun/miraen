<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Line_Selection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Lines" name="Lines" nameLabel="Line_Selection_property_lines" type="text"/>
		<property displayName="Is Activity" name="IsActivity" nameLabel="Line_Selection_property_is_activity" type="boolean"/>
        <property displayName="Is Disabled" name="IsDisabled" nameLabel="Line_Selection_property_is_disabled" type="boolean"/>
        <property displayName="Single Mode" name="SingleMode" nameLabel="Line_Selection_property_single_mode" type="boolean"/>
	</model>
<css>.lines_wrapper .line {&#13;
    stroke:#05B8CC;&#13;
    stroke-width:10;&#13;
    stroke-linecap: round;&#13;
    cursor: pointer;&#13;
}&#13;
.lines_wrapper .line.selected {&#13;
    stroke:#941B80;&#13;
}&#13;
.lines_wrapper .line.correct {&#13;
    stroke:green;&#13;
}&#13;
.lines_wrapper .line.wrong {&#13;
    stroke:red;&#13;
}&#13;
.lines_wrapper .line.show_answers_ok {&#13;
    stroke:black;&#13;
}&#13;
.lines_selection.disabled {&#13;
    opacity:0.3;&#13;
}&#13;
.lines_selection .coordinates {&#13;
    color: black;&#13;
    font-size: 14px;&#13;
    border: 1px solid black;&#13;
    padding-left: 20px;&#13;
    width: 100px;&#13;
}&#13;
</css><view>&lt;div class="lines_selection"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="lines_selection"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonLine_Selection_create(){&#13;
    var presenter = function(){}&#13;
    presenter.error = false;&#13;
    presenter.isErrorMode = false;&#13;
    presenter.isStarted = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'select'.toLowerCase():&#13;
                presenter.select(params[0]);&#13;
                break;&#13;
            case 'deselect'.toLowerCase():&#13;
                presenter.deselect(params[0]);&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.ERROR_CODES = {&#13;
        'lines_error' : "Error in lines' defition.",&#13;
        'lines_empty' : 'Property Lines cannot be empty!',&#13;
        'points_out' : 'Ending points are outside  the addon!'&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            presenter.$view.find('.lines_selection').addClass('disabled');&#13;
        }&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').removeClass('disabled');&#13;
    };&#13;
    presenter.updateDisability = function(){&#13;
        if (presenter.disabled)&#13;
            presenter.disable();&#13;
        else&#13;
            presenter.enable();&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else&#13;
            presenter.hide();&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() == 0)&#13;
            return true&#13;
        else&#13;
            return false;&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return presenter.isStarted;&#13;
    };&#13;
    presenter.select = function(index) {&#13;
        index--;&#13;
        presenter.isStarted = true;&#13;
        var line = presenter.$view.find('#line_'+index);&#13;
        if (line.attr('class') != 'line selected') {&#13;
            if (presenter.singleMode) {&#13;
                presenter.$view.find('.selected').attr('class','line');&#13;
                presenter.selected = [];&#13;
            }&#13;
            line.attr('class','line selected');&#13;
            presenter.selected.push(index);&#13;
        }&#13;
    }&#13;
    presenter.deselect = function(index) {&#13;
        index--;&#13;
        presenter.isStarted = true;&#13;
        var line = presenter.$view.find('#line_'+index);&#13;
        if (line.attr('class') == 'line selected') {&#13;
            if (presenter.singleMode)&#13;
                presenter.selected = [];&#13;
            else&#13;
                presenter.selected.splice(presenter.selected.indexOf(index),1);&#13;
            line.attr('class','line');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.wrapper = presenter.$view.find('.lines_selection');&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['IsActivity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['IsDisabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.singleMode = ModelValidationUtils.validateBoolean(presenter.model['SingleMode']);&#13;
        if (presenter.drawLines(presenter.model['Lines'])) {&#13;
            presenter.wrapper.text(presenter.ERROR_CODES[presenter.error])&#13;
        } else {&#13;
            presenter.updateDisability();&#13;
        }&#13;
    }&#13;
    presenter.drawLines = function(string) {&#13;
        if (string == '' || string == undefined) {&#13;
            presenter.error = 'lines_empty';&#13;
            return true;&#13;
        };&#13;
        var oneLine,points = [];&#13;
        var testString = /^\d+;\d+\-\d+;\d+\-[01]$/;&#13;
        var Lines = Helpers.splitLines(string);&#13;
        for(var i = 0; i &lt; Lines.length; i++) {&#13;
            if (!testString.test(Lines[i])) {&#13;
                presenter.error = 'lines_error';&#13;
                return true;&#13;
            };&#13;
        }&#13;
        var Width = presenter.wrapper.width();&#13;
        var Height = presenter.wrapper.parent().height();&#13;
        var $svg = '&lt;svg height="'+Height+'" width="'+Width+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="lines_wrapper"&gt;';&#13;
        for (i = 0; i &lt; Lines.length; i++) {&#13;
            oneLine = Lines[i].split('-');&#13;
            points[0] = oneLine[0].split(';');&#13;
            points[1] = oneLine[1].split(';');&#13;
            if (presenter.activity) presenter.answers.push(oneLine[2]);&#13;
            if (points[0][0] &lt; 0 || points[0][0] &gt; Width || points[1][0] &lt; 0 || points[1][0] &gt; Width || points[0][1] &lt; 0 || points[0][1] &gt; Height || points[1][1] &lt; 0 || points[1][1] &gt; Height) {&#13;
                presenter.error = 'points_out';&#13;
                return true;&#13;
            }&#13;
            $svg += '&lt;line id="line_'+(i)+'" class ="line" x1="' + points[0][0] +'" y1="'+points[0][1]+'" x2="'+points[1][0]+'" y2="'+points[1][1]+'"&gt;&lt;/line&gt;';&#13;
        }&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.wrapper.prepend($svg);&#13;
    }&#13;
    presenter.run = function(view, model){&#13;
        presenter.answers = [];&#13;
        presenter.selected = [];&#13;
        var presentId, item, value, score;&#13;
        presenter.initiate(view, model);&#13;
        presenter.updateVisibility();&#13;
        presenter.$view.find('.line').on('click', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (!presenter.disabled &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isStarted = true;&#13;
                presentId = $(this).attr('id').substr(5);&#13;
                if ($(this).attr('class') == 'line selected') {&#13;
                    $(this).attr('class','line');&#13;
                    if (presenter.singleMode)&#13;
                        presenter.selected = [];&#13;
                    else&#13;
                        presenter.selected.splice(presenter.selected.indexOf(presentId),1);&#13;
                    value = 0;&#13;
                } else {&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.$view.find('.selected').attr('class','line');&#13;
                        presenter.selected = [];&#13;
                    }&#13;
                    $(this).attr('class','line selected');&#13;
                    presenter.selected.push(presentId);&#13;
                    value = 1;&#13;
                }&#13;
                if (presenter.activity)&#13;
                    score = presenter.answers[presentId]&#13;
                else&#13;
                    score = 0;&#13;
                item = parseInt(presentId) + 1;&#13;
                presenter.triggerEvent(item,value,score);&#13;
            }&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    }&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") presenter.showAnswers();&#13;
        if (eventName == "HideAnswers") presenter.hideAnswers();&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(item,value,score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerEvent = function(item, value, score) {&#13;
        var eventData = presenter.createEventData(item, value, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.activity &amp;&amp; presenter.getErrorCount() == 0) {&#13;
            eventData = presenter.createEventData('all','','');&#13;
            presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.answers = [];&#13;
        presenter.selected = [];&#13;
        presenter.initiate(view, model);&#13;
        var coordinations = {x:0, y:0};&#13;
        if (!presenter.error) {&#13;
            var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
            coordinatesContainer.addClass('coordinates');&#13;
            coordinatesContainer.append(xContainer).append(yContainer);&#13;
            presenter.wrapper.append(coordinatesContainer);&#13;
            function setCalculatedPosition(e) {&#13;
                coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.wrapper.offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.wrapper.offset().top,10);&#13;
                xContainer.find('.value').html(presenter.mouseSX);&#13;
                yContainer.find('.value').html(presenter.mouseSY);&#13;
            }&#13;
&#13;
            var doesElementExist = function() {&#13;
                var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                if ($moduleSelector.length &gt; 0) {&#13;
                    $moduleSelector.on('mousemove', function(e) {&#13;
                        setCalculatedPosition(e);&#13;
                    });&#13;
&#13;
                    clearInterval(interval);&#13;
                }&#13;
            };&#13;
&#13;
            var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
            presenter.wrapper.on('mousemove', function(e) {&#13;
                setCalculatedPosition(e)&#13;
            });&#13;
        }&#13;
    };&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = true;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt;	presenter.answers.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 1)&#13;
                    presenter.$view.find('#line_'+presenter.selected[i]).addClass('correct');&#13;
                else&#13;
                    presenter.$view.find('#line_'+presenter.selected[i]).addClass('wrong');&#13;
            }&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.setWorkMode = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.correct').removeClass('correct');&#13;
        presenter.$view.find('.wrong').removeClass('wrong');&#13;
    }&#13;
    presenter.showAnswers = function () {&#13;
        presenter.setWorkMode();&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity) {&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.$view.find('.lines_selection').addClass('show_answers');&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            for (var i = 0; i &lt; presenter.answers.length; i++) {&#13;
                if (presenter.answers[i] == 1)&#13;
                    presenter.$view.find('#line_'+i).addClass('show_answers_ok');&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity &amp;&amp; presenter.isShowAnswersActive) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.lines_selection').removeClass('show_answers');&#13;
            presenter.$view.find('.show_answers_ok').removeClass('show_answers_ok');&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                presenter.$view.find('#line_'+presenter.selected[i]).addClass('selected');&#13;
            }&#13;
        }&#13;
    }&#13;
    presenter.reset = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.setWorkMode();&#13;
        presenter.selected = [];&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateDisability();&#13;
        presenter.updateVisibility();&#13;
        presenter.isStarted = false;&#13;
    }&#13;
    presenter.getErrorCount = function(){&#13;
        var error = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 0)&#13;
                    error++;&#13;
            };&#13;
            return error;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getMaxScore = function(){&#13;
        var maxscore = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt;	presenter.answers.length; i++)&#13;
                maxscore += parseInt(presenter.answers[i]);&#13;
            return maxscore;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getScore = function(){&#13;
        var score = 0;&#13;
        if (presenter.activity) {&#13;
            for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
                if (presenter.answers[presenter.selected[i]] == 1)&#13;
                    score++;&#13;
            };&#13;
            return score;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.getState = function(){&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return JSON.stringify({&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            lines : presenter.selected,&#13;
            isStarted : presenter.isStarted&#13;
        });&#13;
    }&#13;
    presenter.setState = function(state){&#13;
        presenter.isVisible = JSON.parse(state).visible;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.selected = JSON.parse(state).lines;&#13;
        presenter.isStarted = JSON.parse(state).isStarted;&#13;
        for (var i = 0; i &lt; presenter.selected.length; i++) {&#13;
            presenter.$view.find('#line_'+presenter.selected[i]).attr('class','line selected');&#13;
        }&#13;
        presenter.updateDisability();&#13;
        presenter.updateVisibility();&#13;
    }&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>