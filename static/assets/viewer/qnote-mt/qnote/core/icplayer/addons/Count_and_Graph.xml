<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Count_and_Graph" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="Count_and_Graph_property_is_not_activity" type="boolean"/>
        <property isLocalized="true" name="X axis description" nameLabel="Count_and_Graph_property_x_axis_description" type="string"/>
        <property name="X axis data" nameLabel="Count_and_Graph_property_x_axis_data" type="list">
            <property name="Answer" nameLabel="Count_and_Graph_property_answer" type="string"/>
            <property name="Color" nameLabel="Count_and_Graph_property_color" type="string"/>
            <property isLocalized="true" name="Description" nameLabel="Count_and_Graph_property_description" type="string"/>
            <property name="Description image" nameLabel="Count_and_Graph_property_description_image" type="image"/>
        </property>
        <property isLocalized="true" name="Y axis description" nameLabel="Count_and_Graph_property_y_axis_description" type="string"/>
        <property name="Y axis maximum value" nameLabel="Count_and_Graph_property_y_axis_minimum_value" type="string"/>
        <property name="Y axis values" nameLabel="Count_and_Graph_property_y_axis_values" type="string"/>
        <property name="Bars width" nameLabel="Count_and_Graph_property_bars_width" type="string"/>
        <property name="Background color" nameLabel="Count_and_Graph_property_background_color" type="string"/>
        <property name="Grid line color" nameLabel="Count_and_Graph_property_grid_line_color" type="string"/>
        <property name="Border" nameLabel="Count_and_Graph_property_border" type="string"/>
    </model>
<css>.main_container {&#13;
    position: relative;&#13;
    background-color: transparent;&#13;
    margin: 5px;&#13;
}&#13;
&#13;
.upper_container {&#13;
    position: relative;&#13;
}&#13;
&#13;
.bottom_container {&#13;
&#13;
}&#13;
&#13;
.graph_container {&#13;
    position: absolute;&#13;
    opacity: 0.8;&#13;
    top: 0px;&#13;
    left: 30px;&#13;
    box-shadow: 3px 0 15px -4px #333;&#13;
}&#13;
&#13;
.column {&#13;
    background-color: white;&#13;
    position: absolute;&#13;
    opacity: 0.9;&#13;
    top: 0.5px;&#13;
    box-shadow: 3px 0 15px -4px #333, -3px 0 8px -4px #333;&#13;
}&#13;
&#13;
.jqplot-xaxis-label {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.jqplot-xaxis {&#13;
    position: relative;&#13;
}&#13;
&#13;
.jqplot-xaxis-tick {&#13;
    position: absolute;&#13;
    font-size: 8px;&#13;
    text-align: center;&#13;
    heigth: 20px;&#13;
    top: 10px;&#13;
}&#13;
&#13;
.countGraph_image {&#13;
    position: absolute;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    margin-left: -15px;&#13;
}&#13;
&#13;
.axis_x_dash {&#13;
    position: absolute;&#13;
    height: 5px;&#13;
    width: 1px;&#13;
    background-color: black;&#13;
}&#13;
&#13;
.jqplot-yaxis-label {&#13;
    position: absolute;&#13;
    left: 0px;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
}&#13;
&#13;
.jqplot-yaxis-tick {&#13;
    position: absolute;&#13;
    font-size: 10px;&#13;
    left: 10px;&#13;
    height: 15px;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.jqplot-yaxis {&#13;
    position: absolute;&#13;
    background-color: white;&#13;
    opacity: 0.8;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
}&#13;
&#13;
.axis_y_dash {&#13;
    position: absolute;&#13;
    left: 26px;&#13;
    height: 2px;&#13;
    width: 8px;&#13;
    background-color: black;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonCount_and_Graph_create() {&#13;
    /*&#13;
        KNOWN ISSUES:&#13;
            Properties:&#13;
                Float user input - should be noticed but parsed to INT with parseInt, due to backward compatibility issue&#13;
&#13;
                Axis Y Maximum Value:&#13;
                    Validation of property due to earlier versions of working &amp; invalid validation, converts floats to ints,&#13;
                    thats why it have to use parseFloat &amp; parseInt&#13;
&#13;
                Axis Y Values:&#13;
                   Validation requires below requirements due to backward compatibility:&#13;
                   - Supported only 1 cyclic value&#13;
                   - cyclic value is every string ending with "*", and parseInt validated&#13;
&#13;
                Bars width:&#13;
                    - Values between 0-1 are parsed to 1&#13;
&#13;
                Border:&#13;
                    - negative numbers are ignored -&gt; no border&#13;
                    - strings are ignored -&gt; no border&#13;
&#13;
                Axis X Data:&#13;
                    Answers values can be negative numbers or greater than axis Y max. It makes no sense, due to&#13;
                    addon activity is not solvable. Backward compatibility requires showing addon without being solvable.&#13;
                    Preview logic should show message  with addon, that addon configuration is invalid with answers.&#13;
    */&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.graph = null;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.errorMode = false;&#13;
    presenter.observer = undefined;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        YAM_01: "Axis Y maximum value cant be lower or equal than 0.",&#13;
        YAM_02: "Axis Y maximum value have to be a integer string.",&#13;
        YAV_01: "Axis Y values cant be a non digit string.",&#13;
        YAV_02: "Axis Y cyclic value cant be equal or lower than 0.",&#13;
        YAV_03: "Axis Y fixed values cant be lower than 0.",&#13;
        YAV_04: "Axis Y values can\'t be greater than \"Axis Y Maximum Value\"",&#13;
        BW_01: "Bars width cant be lower than 0.",&#13;
        BW_02: "Bars width cant be a string.",&#13;
        BC_01: "Background color is not proper #RGB format.",&#13;
        AXD_01: "Axis data answers cant be empty string.",&#13;
        AXD_02: "Axis data answers have to be a positive integer value."&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return { isValid: false, errorCode: errorCode };&#13;
    };&#13;
&#13;
    presenter.GRAPH_EVENT_TYPE = {&#13;
        BAR_SELECTED: 0,&#13;
        IMAGE_HAS_FINISHED_LOADING: 1,&#13;
        GRAPH_HAS_FINISHED_LOADING: 2&#13;
    };&#13;
&#13;
    presenter.barObject = function (parentColumn, color, width, height, barValue, columnIndex) {&#13;
        this._column = parentColumn;&#13;
        this._color = color;&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._barValue = barValue;&#13;
        this._columnIndex = columnIndex;&#13;
        this.$view;&#13;
        this._$innerDiv;&#13;
        this._initView();&#13;
        this._connectEvents();&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._initView = function () {&#13;
        this.$view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view.css({&#13;
            'background-color': 'white',&#13;
            'height': this._height + "px",&#13;
            'width': this._width + "px",&#13;
            'position': 'relative'&#13;
        });&#13;
&#13;
        this._createInnerDivWithLabel();&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._createInnerDivWithLabel = function () {&#13;
        this._$innerDiv = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this._$innerDiv.addClass(this._getInitialClassName());&#13;
        this._$innerDiv.css({&#13;
            'position': 'absolute',&#13;
            'height': "0px",&#13;
            'width': "0px",&#13;
            'top': (this._height / 2) + "px",&#13;
            'left': (this._width / 2) + "px"&#13;
        });&#13;
&#13;
        this.$view.append(this._$innerDiv);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._getInitialClassName = function () {&#13;
        return "jqplot-point-label jqplot-series-" + (this._barValue - 1) + " jqplot-point-" + this._columnIndex;&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.restoreInitialClassName = function () {&#13;
        this._$innerDiv.addClass(this._getInitialClassName());&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._connectEvents = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            this.$view[0].addEventListener("touchend", this, false);&#13;
        } else {&#13;
            this.$view[0].addEventListener("click", this, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.block = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            this.$view[0].removeEventListener("touchend", this, false);&#13;
        } else {&#13;
            this.$view[0].removeEventListener("click", this, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.unblock = function() {&#13;
        this._connectEvents()&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._notify = function (event) {&#13;
        this._column.update(event);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.handleEvent = function (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        switch(event.type) {&#13;
            case "click":&#13;
                var barEvent = this._createSelectEvent();&#13;
                this._highLight();&#13;
                this._notify(barEvent);&#13;
                break;&#13;
            case "touchend":&#13;
                var barEvent = this._createSelectEvent();&#13;
                this._highLight();&#13;
                this._notify(barEvent);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._createSelectEvent = function () {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.BAR_SELECTED,&#13;
            barValue: this._barValue&#13;
        };&#13;
    };&#13;
&#13;
    presenter.barObject.prototype._highLight = function () {&#13;
        this.$view.css('background-color', 'rgb(224, 223, 219)');&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setOff = function() {&#13;
        this.$view.css('background-color', 'white');&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setOn = function() {&#13;
        this.$view.css('background-color', this._color);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.setCssClass = function (cssClass) {&#13;
        this._$innerDiv.addClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.barObject.prototype.removeCssClass = function (cssClass) {&#13;
        this._$innerDiv.removeClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject = function (axisYMaximumValue, color, columnWidth, columnHeight, answer, columnIndex) {&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._barsNumber = axisYMaximumValue;&#13;
        this._barsColor = color;&#13;
        this._topSelectedBarNumber = -1;&#13;
        this._height = columnHeight;&#13;
        this._columnWidth = columnWidth;&#13;
        this._answer = answer;&#13;
        this._columnIndex = columnIndex;&#13;
        this.$view;&#13;
        this._bars;&#13;
        this._initializeColumn();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._initializeColumn = function () {&#13;
        this._bars = this._createBars();&#13;
        this._initView();&#13;
        this._appendBarsToColumn(this._bars);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._appendBarsToColumn = function (barsArray) {&#13;
        for (var i = barsArray.length - 1; i &gt;= 0; i--) {&#13;
            this.$view.append(barsArray[i].$view);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getBarWidth = function () {&#13;
        return this._columnWidth;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getBarHeight = function () {&#13;
        return (this._height / this._barsNumber);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._initView = function () {&#13;
        this.$view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view.addClass("column");&#13;
        this.$view.css({&#13;
            'height': this._height + "px",&#13;
            'width': this._columnWidth + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.update = function (event) {&#13;
        switch(event.type) {&#13;
            case presenter.GRAPH_EVENT_TYPE.BAR_SELECTED:&#13;
                this._selectingBarLogic(event.barValue - 1);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._createBars = function () {&#13;
        var bars = [];&#13;
        var barWidth = this._getBarWidth();&#13;
        var barHeight = this._getBarHeight();&#13;
&#13;
        for(var i = 0; i &lt; this._barsNumber; i++) {&#13;
            var bar = new presenter.barObject(this, this._barsColor, barWidth, barHeight, i + 1, this._columnIndex);&#13;
            bars.push(bar);&#13;
        }&#13;
&#13;
        return bars;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._selectingBarLogic = function (selectedBarIndex) {&#13;
        var previousValue = this._topSelectedBarNumber;&#13;
        var change = "";&#13;
        this._setOffSelectedBar(selectedBarIndex);&#13;
&#13;
        if(this._columnShouldGetRaised(selectedBarIndex)) {&#13;
            this._raiseColumn();&#13;
            change = "increase";&#13;
        } else {&#13;
            this._lowerColumn();&#13;
            change = "decrease";&#13;
        }&#13;
&#13;
        this._sendEvents(change, previousValue);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._sendEvents = function (changeType, previousValue) {&#13;
        if(this._isCorrect()) {&#13;
            presenter.sendEvent(true, this._columnIndex, changeType);&#13;
        } else {&#13;
            this._sendIncorrectEvent(previousValue + 1, changeType);&#13;
        }&#13;
&#13;
        if(presenter.isAllOk()) {&#13;
            presenter.sendEventAllOk();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._sendIncorrectEvent = function (previousValue, changeType) {&#13;
        if (previousValue == this._answer &amp;&amp; changeType === "decrease") {&#13;
            return;&#13;
        }&#13;
&#13;
        if (previousValue &gt;= this._answer) {&#13;
            presenter.sendEvent(false, this._columnIndex, changeType);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._isCorrect = function () {&#13;
        return ((this._topSelectedBarNumber + 1) == this._answer);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOffSelectedBar = function (selectedBarIndex) {&#13;
        if (selectedBarIndex &gt; this._topSelectedBarNumber) {&#13;
            this._setOffBar(selectedBarIndex);&#13;
        } else {&#13;
            this._setOnBar(selectedBarIndex);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._columnShouldGetRaised = function (selectedBarIndex) {&#13;
        return (selectedBarIndex &gt; this._topSelectedBarNumber);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOffBar = function (barIndex) {&#13;
        this._bars[barIndex].setOff();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._lowerColumn = function () {&#13;
        this._setOffBar(this._topSelectedBarNumber);&#13;
        this._topSelectedBarNumber -= 1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._raiseColumn = function () {&#13;
        this._setOnBar(this._topSelectedBarNumber + 1);&#13;
        this._topSelectedBarNumber += 1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setOnBar = function (barIndex) {&#13;
        this._bars[barIndex].setOn();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setPosition = function (left) {&#13;
        this.$view.css({&#13;
            left: left + 'px'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getWidth = function () {&#13;
        return this.$view.width();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.showAnswer = function () {&#13;
        this.cleanSelection();&#13;
        this._drawCorrectAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.hideAnswer = function () {&#13;
        this.cleanSelection();&#13;
        this._drawUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._drawCorrectAnswer = function () {&#13;
        for(var i = 0; i &lt; this._answer; i++) {&#13;
            this._setOnBar(i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._drawUserAnswer = function () {&#13;
        for(var i = 0; i &lt;= this._topSelectedBarNumber; i++) {&#13;
            this._setOnBar(i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.block = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.block();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.unblock = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.unblock();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.cleanSelection = function () {&#13;
        this._bars.forEach(function (element) {&#13;
            element.setOff();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._resetUserAnswer = function () {&#13;
        this._topSelectedBarNumber = -1;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.reset = function () {&#13;
        this.cleanSelection();&#13;
        this._resetUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getScore = function () {&#13;
        if(this._isCorrect()) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setShowErrorsMode = function () {&#13;
        if (this._topSelectedBarNumber &gt; -1) {&#13;
            var cssClass = this._getCssClassForCheckAnswers();&#13;
&#13;
            this._setBarCssClass(this._topSelectedBarNumber, cssClass);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getCssClassForCheckAnswers = function () {&#13;
        return ("jqplot-point-label jqplot-series-" + this._topSelectedBarNumber + " jqplot-point-" + this._columnIndex +&#13;
                " " + this._getUserAnswerStatus());&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._getUserAnswerStatus = function () {&#13;
        var userAnswer = this._topSelectedBarNumber + 1;&#13;
&#13;
        if (userAnswer == this._answer) {&#13;
            return "ok";&#13;
        }&#13;
&#13;
        if (userAnswer &gt; this._answer) {&#13;
            return "down";&#13;
        }&#13;
&#13;
        return "up";&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._setBarCssClass = function (barIndex, cssClass) {&#13;
        this._bars[barIndex].setCssClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._removeBarCssClass = function (barIndex, cssClass) {&#13;
        this._bars[barIndex].removeCssClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setWorkMode = function () {&#13;
        if (this._topSelectedBarNumber &gt; -1) {&#13;
            var cssClass = this._getCssClassForCheckAnswers();&#13;
&#13;
            this._removeBarCssClass(this._topSelectedBarNumber, cssClass);&#13;
            this._restoreBarInitialClassName(this._topSelectedBarNumber);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype._restoreBarInitialClassName = function (barIndex) {&#13;
        this._bars[barIndex].restoreInitialClassName();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.setState = function (userSelection) {&#13;
        this.reset();&#13;
        this._topSelectedBarNumber = (userSelection - 1);&#13;
        this._drawUserAnswer();&#13;
    };&#13;
&#13;
    presenter.columnObject.prototype.getState = function () {&#13;
        return (this._topSelectedBarNumber + 1);&#13;
    };&#13;
&#13;
&#13;
    presenter.graphObject = function ($parentDiv, axisYMaximumValue, answers, colors, descriptions, imagesDescriptions,&#13;
                                      barsWidth, backgroundColor, gridLineColor, cyclicValue, fixedValues, axisSpace,&#13;
                                      border, axisYDescription, axisXDescription, axisXImageHeight, axisXImageWidth) {&#13;
        this._axisSpace = axisSpace || 30;&#13;
        this._$parentDiv = $parentDiv;&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._answers = answers;&#13;
        this._columnsNumber = answers.length;&#13;
        this._colors = colors;&#13;
        this._descriptions = descriptions;&#13;
        this._imagesDescriptions = imagesDescriptions;&#13;
        this._barsWidth = barsWidth;&#13;
        this._backgroundColor = backgroundColor;&#13;
        this._gridLineColor = gridLineColor;&#13;
        this._$graphContainer;&#13;
        this.$view;&#13;
        this.$upperContainer;&#13;
        this.$bottomContainer;&#13;
        this._$axisYContainer;&#13;
        this._$axisXContainer;&#13;
        this._columns;&#13;
        this._width = $parentDiv.width();&#13;
        this._height = $parentDiv.height();&#13;
        this._cyclicValue = cyclicValue;&#13;
        this._fixedValues = fixedValues;&#13;
        this._axisX;&#13;
        this._axisY;&#13;
        this._isBlocked = false;&#13;
        this._border = border;&#13;
        this._columnsAtMaxOffset = 10;&#13;
        this._axisXDescription = axisXDescription;&#13;
        this._axisYDescription = axisYDescription;&#13;
        this._axisXImageHeight = axisXImageHeight;&#13;
        this._axisXImageWidth =  axisXImageWidth;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphWidth = function () {&#13;
        return (this._width - this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphHeight = function () {&#13;
        if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            return this._getIOSGraphHeight();&#13;
        } else {&#13;
            return this._getDefaultGraphHeight();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getDefaultGraphHeight = function () {&#13;
        return (this._height - this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getIOSGraphHeight = function () {&#13;
        var barHeight = this._getDefaultGraphHeight() / this._axisYMaximumValue;&#13;
&#13;
        if ((barHeight % 1) != 0) {&#13;
            return (Math.floor(barHeight) * this._axisYMaximumValue);&#13;
        }&#13;
&#13;
        return this._getDefaultGraphHeight();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisYWidth = function () {&#13;
        return this._axisSpace;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisYHeight = function () {&#13;
        return this._getGraphHeight();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getAxisXHeight = function () {&#13;
        return (this._axisXImageHeight || this._axisSpace);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createGrid = function ($graphContainer) {&#13;
        var width = $graphContainer.width();&#13;
        var height = $graphContainer.height();&#13;
        var gridStep = this._getGridLineStep(height);&#13;
&#13;
        for (var i = 0, step = 0; i &lt;= this._axisYMaximumValue; i++, step += gridStep) {&#13;
            var $grid = this._getGridLine(width);&#13;
            $grid = this._positionGridLine($grid, step);&#13;
            $graphContainer.append($grid);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._positionGridLine = function ($grid, top) {&#13;
        var topRepaired = top;&#13;
&#13;
        if(top == 0) {&#13;
            topRepaired = 0;&#13;
        }&#13;
&#13;
        $grid.css({&#13;
            'position': 'absolute',&#13;
            'top': topRepaired + 'px'&#13;
        });&#13;
&#13;
        return $grid;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGridLineStep = function (height) {&#13;
        return (height / this._axisYMaximumValue);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGridLine = function (width) {&#13;
        var gridLine = $("&lt;div&gt;&lt;/div&gt;");&#13;
&#13;
        gridLine.css({&#13;
            'border-top': '1px solid ' + this._gridLineColor,&#13;
            'width': width + "px",&#13;
            'left': 0 + "px",&#13;
            'height': 1 + "px"&#13;
        });&#13;
&#13;
        return gridLine;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createGraph = function () {&#13;
        this._$graphContainer = this._getGraphContainer(this._getGraphWidth(), this._getGraphHeight());&#13;
&#13;
        this._createGrid(this._$graphContainer);&#13;
&#13;
        this._columns = this._getColumns(this._getColumnWidth(), this._getGraphHeight());&#13;
&#13;
        this._appendColumns(this._$graphContainer, this._columns);&#13;
        this._positionColumnsInGraph();&#13;
&#13;
        return this._$graphContainer;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._positionColumnsInGraph = function () {&#13;
        var left = 0;&#13;
        var columnsMaxWidth = this._getColumnsMaxWidth();&#13;
        var rigth = columnsMaxWidth;&#13;
        for(var i = 0; i &lt; this._columns.length; i++) {&#13;
&#13;
            var middleOfSection = this._getMiddleOfColumnSection(left, rigth, this._columns[i].getWidth());&#13;
            this._columns[i].setPosition(middleOfSection);&#13;
&#13;
            left += columnsMaxWidth;&#13;
            rigth += columnsMaxWidth;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getBorderOffset = function () {&#13;
        // bars have 1px border, which creates offset for columns, and they dont fit into graph&#13;
        return (this._axisYMaximumValue - 1) * 2&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getMiddleOfColumnSection = function (left, right, columnsWidth) {&#13;
        var range = right - left;&#13;
&#13;
        if(columnsWidth == range) {&#13;
            return left;&#13;
        }&#13;
&#13;
        return ((range - columnsWidth) / 2) + left;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnsMaxWidth = function () {&#13;
        return (this._getGraphWidth() / this._columnsNumber);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnWidth = function () {&#13;
        if(this._barsWidth &gt; this._getColumnsMaxWidth()) {&#13;
            if ((this._getColumnsMaxWidth() - this._columnsAtMaxOffset) &lt; 0) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            return (this._getColumnsMaxWidth() - this._columnsAtMaxOffset);&#13;
        }&#13;
&#13;
        return this._barsWidth;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendColumns = function ($container, columnsArray) {&#13;
        columnsArray.forEach(function (element) {&#13;
            $container.append(element.$view);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphContainer = function (width, height) {&#13;
        var $graphContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $graphContainer.addClass("graph_container");&#13;
        $graphContainer.css({&#13;
            'background-color': this._backgroundColor + '',&#13;
            'height': height + "px",&#13;
            'width':  width + "px"&#13;
        });&#13;
&#13;
        this._setGraphContainerBorder($graphContainer);&#13;
&#13;
        return $graphContainer;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setGraphContainerBorder = function ($graphContainer) {&#13;
        if(this._border &gt; 0) {&#13;
            if(this._border &gt; 3) {&#13;
                $graphContainer.css({&#13;
                    "border": "3px solid black",&#13;
                    "margin": "0px",&#13;
                    "padding": "0px"&#13;
                });&#13;
            } else {&#13;
                $graphContainer.css({&#13;
                    border: this._border + "px solid black",&#13;
                    "margin": "0px",&#13;
                    "padding": "0px"&#13;
                });&#13;
            }&#13;
        } else {&#13;
            $graphContainer.css({&#13;
                border: 0 + "px solid black",&#13;
                "margin": "0px",&#13;
                "padding": "0px"&#13;
            })&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createAxisY = function () {&#13;
        var axisY = new presenter.axisYObject(this._axisYMaximumValue, this._getAxisYWidth(), this._getAxisYHeight(),&#13;
                                              this._cyclicValue, this._fixedValues, this._axisYDescription,&#13;
                                              this._gridLineColor);&#13;
        this._axisY = axisY;&#13;
&#13;
        return axisY.$view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumnsDescriptionsPositions = function () {&#13;
        var values = [];&#13;
        var columnsMaxWidth = this._getColumnsMaxWidth();&#13;
&#13;
        for(var i = 0, left = 0; i &lt; this._columnsNumber; i++, left += columnsMaxWidth) {&#13;
            values.push(left);&#13;
        }&#13;
&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createAxisX = function () {&#13;
        this._axisX = new presenter.axisXObject (&#13;
            this._getGraphWidth(), this._getAxisXHeight(), this._columnsNumber, this._descriptions, this._imagesDescriptions,&#13;
            this._getColumnsDescriptionsPositions(), this._getColumnsMaxWidth(), this._getColumnWidth(), this._axisXDescription,&#13;
            this._$graphContainer.css("border-bottom-width"), this._axisXImageWidth&#13;
        );&#13;
&#13;
        return this._axisX.$view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getGraphHasFinishedLoadingEvent = function () {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.GRAPH_HAS_FINISHED_LOADING&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.notify = function () {&#13;
        var event = this._getGraphHasFinishedLoadingEvent();&#13;
        presenter.observer.update(event);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setCallbackForAddonView = function () {&#13;
        this._$parentDiv.ready(function () {&#13;
            presenter.graph.notify();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.initializeGraph = function () {&#13;
        this.$view = this._createMainContainer();&#13;
&#13;
        this._$graphContainer = this._createGraph();&#13;
        this._appendGraph(this._$graphContainer);&#13;
&#13;
        this._$axisYContainer = this._createAxisY();&#13;
        this._appendAxisY(this._$axisYContainer);&#13;
&#13;
        this._$axisXContainer = this._createAxisX();&#13;
        this._appendAxisX(this._$axisXContainer);&#13;
&#13;
        this._$parentDiv.append(this.$view);&#13;
&#13;
        this.setCallbackForAddonView();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendAxisX = function ($axisXContainer) {&#13;
        this._setAxisXPosition($axisXContainer);&#13;
        this.$bottomContainer.append($axisXContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setAxisXPosition = function ($axisXContainer) {&#13;
        $axisXContainer.css({&#13;
            'left': this._axisSpace + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendGraph = function ($graphContainer) {&#13;
        this._setGraphPosition($graphContainer);&#13;
        this.$upperContainer.append($graphContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._createMainContainer = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $view.addClass("main_container");&#13;
        $view.css({&#13;
            'height': this._height + "px",&#13;
            'width':  this._width + "px"&#13;
        });&#13;
&#13;
        this.$upperContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$upperContainer.addClass("upper_container");&#13;
        this.$upperContainer.css({&#13;
            'width': this._width + "px",&#13;
            'height': this._getGraphHeight() + "px"&#13;
        });&#13;
&#13;
        this.$bottomContainer = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$bottomContainer.addClass("bottom_container");&#13;
        this.$bottomContainer.css({&#13;
            'width': this._width + "px",&#13;
            height: this._getAxisYWidth()&#13;
        });&#13;
&#13;
        $view.append(this.$upperContainer);&#13;
        $view.append(this.$bottomContainer);&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setGraphPosition = function ($graphContainer) {&#13;
&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._appendAxisY = function ($axisYContainer) {&#13;
        this.$upperContainer.append($axisYContainer);&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._getColumns = function (columnWidth, height) {&#13;
        var columns = [];&#13;
&#13;
        for(var index = 0; index &lt; this._columnsNumber; index++) {&#13;
            var column = new presenter.columnObject(&#13;
                this._axisYMaximumValue, this._colors[index], columnWidth, height, this._answers[index], index&#13;
            );&#13;
            columns.push(column);&#13;
        }&#13;
&#13;
        return columns;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.showAnswers = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.showAnswer();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.hideAnswers = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.hideAnswer();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.reset = function () {&#13;
        this._columns.forEach(function (element) {&#13;
            element.reset();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.block = function () {&#13;
        if (!this._isBlocked) {&#13;
            this._columns.forEach(function (element) {&#13;
                element.block();&#13;
            });&#13;
            this._isBlocked = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.unblock = function () {&#13;
        if (this._isBlocked) {&#13;
            this._columns.forEach(function (element) {&#13;
                element.unblock();&#13;
            });&#13;
&#13;
            this._isBlocked = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getMaxScore = function () {&#13;
        return this._columnsNumber;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getScore = function () {&#13;
        return this._columns.map(function (column) {&#13;
            return column.getScore();&#13;
        }).reduce(function (previousValue, nextValue) {&#13;
            return previousValue + nextValue;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getErrorCount = function () {&#13;
        if(!this.isAttempted()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return (this.getMaxScore() - this.getScore());&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setShowErrorsMode = function () {&#13;
        this._columns.forEach(function (column) {&#13;
            column.setShowErrorsMode();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setWorkMode = function () {&#13;
        this._columns.forEach(function (column) {&#13;
            column.setWorkMode();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getState = function () {&#13;
        return this._columns.map(function(column) {&#13;
            return column.getState();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.setState = function (userSelectionArray) {&#13;
        for(var i = 0; i &lt; userSelectionArray.length; i++) {&#13;
            this._columns[i].setState(userSelectionArray[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getImagesHeight = function () {&#13;
        return this.$view.find(".countGraph_image").height();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.getImagesWidth = function () {&#13;
        return this.$view.find(".countGraph_image").width();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype._setRescaledSizes = function () {&#13;
        this._axisXImageHeight = this.getImagesHeight() + this._axisSpace;&#13;
        this._axisXImageWidth = this.getImagesWidth();&#13;
&#13;
        this._height -= this._axisXImageHeight;&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.rescale = function () {&#13;
        this._setRescaledSizes();&#13;
&#13;
        var currentState = this.getState();&#13;
&#13;
        this.$view.remove();&#13;
        this.initializeGraph();&#13;
&#13;
        this.setState(currentState);&#13;
    };&#13;
&#13;
    presenter.axisYObject = function (axisYMaximumValue, width, height, cyclicValue, fixedValues, axisYDescription,&#13;
                                      axisYColor) {&#13;
        this._axisYMaximumValue = axisYMaximumValue;&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._cyclicValue = cyclicValue;&#13;
        this._fixedValues = fixedValues;&#13;
        this._axisYDescription = axisYDescription;&#13;
        this._$axisYDescription = null;&#13;
        this._axisYColor = axisYColor;&#13;
        this.$view = null;&#13;
        this._init();&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._init = function () {&#13;
        this.$view = this._createAxisYContainer();&#13;
        this._createAxisYDescription();&#13;
&#13;
        this._createTicks(this._getTicksValues());&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYDescription = function () {&#13;
        this._$axisYDescription = this._getAxisYDescription();&#13;
        this._appendAxisYDescription(this._$axisYDescription);&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getAxisYDescription = function () {&#13;
        var $div = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $div.addClass("jqplot-yaxis-label");&#13;
        $div.css({&#13;
            top: ((this._height - 30) / 2) + "px"&#13;
        });&#13;
&#13;
        $div.append(this._axisYDescription);&#13;
&#13;
        return $div;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendAxisYDescription = function ($axisDescription) {&#13;
        this.$view.append($axisDescription);&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createTicks = function (tickValues) {&#13;
        var stepsValues = this._getReversedAxisYStepsValues();&#13;
&#13;
        for(var i = 0; i &lt; tickValues.length; i++) {&#13;
            var value = tickValues[i];&#13;
            var $tick = this._getTick(value);&#13;
            this._appendTickToContainer($tick, value, stepsValues);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getReversedAxisYStepsValues = function () {&#13;
        var step = this._getAxisYStep();&#13;
        var values = [];&#13;
&#13;
        for(var i = 0; i &lt;= this._axisYMaximumValue; i++) {&#13;
            values.push((i * step));&#13;
        }&#13;
&#13;
        return values.reverse();&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getTick = function (value) {&#13;
        var $tick = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $tick.addClass("jqplot-yaxis-tick");&#13;
&#13;
        this._setTickCss($tick);&#13;
&#13;
        $tick.append(value);&#13;
&#13;
        return $tick;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._setTickCss = function ($tick) {&#13;
        $tick.css({&#13;
           width: "10px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendTickToContainer = function ($tick, value, reversedAxisYSteps) {&#13;
        this.$view.append($tick);&#13;
&#13;
        $tick.css({&#13;
            'top': (reversedAxisYSteps[value] - 7.5) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createTicksFromCyclicValue = function () {&#13;
        var ticks = [];&#13;
        var cyclicValue = this._cyclicValue[0];&#13;
&#13;
        for(var i = 0; i &lt;= this._axisYMaximumValue; i += cyclicValue) {&#13;
            ticks.push(i);&#13;
        }&#13;
&#13;
        return ticks;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getTicksValues = function () {&#13;
        if (this._fixedValues) {&#13;
            return this._fixedValues;&#13;
        } else {&#13;
            return this._createTicksFromCyclicValue();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYContainer = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $view.addClass("jqplot-axis");&#13;
        $view.addClass("jqplot-yaxis");&#13;
        $view.css({&#13;
            'background-color': "transparent",&#13;
            'height': this._height + "px",&#13;
            'width':  this._width + "px",&#13;
            'border-right-style': "solid",&#13;
            'border-width': 1 + "px",&#13;
            'border-right-color': this._axisYColor&#13;
        });&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getAxisYStep = function () {&#13;
        return (this._height) / this._axisYMaximumValue;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._createAxisYLines = function () {&#13;
        var axisStep = this._getAxisYStep();&#13;
&#13;
        var $firstDash = this._getDash();&#13;
        this._appendDashToContainer($firstDash, -0.5);&#13;
&#13;
        for(var i = 1, step = axisStep; i &lt;= this._axisYMaximumValue; i++, step += axisStep) {&#13;
            var $dash = this._getDash();&#13;
            this._appendDashToContainer($dash, step);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._getDash = function () {&#13;
        var $dash = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $dash.css({&#13;
            height: "2px",&#13;
            width: "8px",&#13;
            'background-color': "black"&#13;
        });&#13;
&#13;
        return $dash;&#13;
    };&#13;
&#13;
    presenter.axisYObject.prototype._appendDashToContainer = function ($dash, step) {&#13;
        this.$view.append($dash);&#13;
        $dash.css({&#13;
            position: "absolute",&#13;
            top: (step + 0.5) + "px",&#13;
            left: 26 + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject = function (width, height, numberOfColumns, seriesDescription, seriesImageDescriptions,&#13;
                                      columnsPositions, columnsMaxWidth, columnWidth, axisXDescription,&#13;
                                      graphContainerBorderWidth, imageLeftMargin) {&#13;
        this._width = width;&#13;
        this._height = height;&#13;
        this._numberOfColumns = numberOfColumns;&#13;
        this._seriesDescriptions = seriesDescription;&#13;
        this._seriesImageDescriptions = seriesImageDescriptions;&#13;
        this._columnsPositions = columnsPositions;&#13;
        this._columnsMaxWidth = columnsMaxWidth;&#13;
        this._columnWidth = columnWidth;&#13;
        this._axisXDescription = axisXDescription;&#13;
        this._graphContainerBorderWidth = parseInt(graphContainerBorderWidth, 10);&#13;
        this._$axisXDescription = null;&#13;
        this._imageLeftMargin = ((imageLeftMargin / 2) || 15);&#13;
        this.$view = null;&#13;
        this._initView();&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._initView = function () {&#13;
        this.$view = this._getMainContainer();&#13;
        this._createAxisXDescription();&#13;
        this._createDashes();&#13;
        this._createDescriptions();&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createAxisXDescription = function () {&#13;
        this._$axisXDescription = this._getAxisXDescription();&#13;
        this._appendAxisXDescription(this._$axisXDescription);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getAxisXDescription = function () {&#13;
        var $div = $("&lt;div&gt;&lt;/div&gt;");&#13;
&#13;
        $div.addClass("jqplot-xaxis-label");&#13;
        $div.css({&#13;
            top: (this._height - 5) + "px",&#13;
            height: 10 + "px",&#13;
            left: ((this._width - 30) / 2)  + "px"&#13;
        });&#13;
&#13;
        $div.append(this._axisXDescription);&#13;
&#13;
        return $div;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._appendAxisXDescription = function ($axisDescription) {&#13;
        this.$view.append($axisDescription);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getMainContainer = function () {&#13;
        var $mainContainer = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $mainContainer.addClass("jqplot-axis");&#13;
        $mainContainer.addClass("jqplot-xaxis");&#13;
        $mainContainer.css({&#13;
            'width': (this._width + 2) + "px",&#13;
            'height': this._height + "px",&#13;
            'background-color': "transparent"&#13;
        });&#13;
&#13;
        return $mainContainer;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createDescriptions = function () {&#13;
        for(var i = 0; i &lt; this._seriesDescriptions.length; i++) {&#13;
            var $description;&#13;
            if (this._shouldCreateTextDescription(i)) {&#13;
                $description = this._getTextDescription(i);&#13;
            } else {&#13;
                $description = this._getImageDescription(i);&#13;
            }&#13;
&#13;
            this._setDescriptionPosition($description, i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._shouldCreateTextDescription = function (index) {&#13;
        return (this._seriesDescriptions[index].length &gt; 0);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getTextDescription = function (index) {&#13;
        var $description = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $description.addClass("jqplot-xaxis-tick");&#13;
        $description.append(this._seriesDescriptions[index]);&#13;
&#13;
        return $description;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getImageDescription = function (index) {&#13;
        var $description = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $description.addClass("jqplot-xaxis-tick");&#13;
&#13;
        if (this._seriesImageDescriptions[index].length &gt; 0) {&#13;
            var $image = $("&lt;img/&gt;");&#13;
            this._setCssToImageDescription($image, index);&#13;
&#13;
            $description.append($image);&#13;
        }&#13;
&#13;
        return $description;&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._setCssToImageDescription = function ($image, index) {&#13;
        $image.addClass("countGraph_image");&#13;
        this._addLoadingEventHandler($image);&#13;
        $image.attr('src', this._seriesImageDescriptions[index]);&#13;
        $image.css({&#13;
           "margin-left": -(this._imageLeftMargin) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getImageHasFinishedLoadingEvent = function (width, height) {&#13;
        return {&#13;
            type: presenter.GRAPH_EVENT_TYPE.IMAGE_HAS_FINISHED_LOADING,&#13;
            data: {&#13;
                width: width,&#13;
                height: height&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._addLoadingEventHandler = function ($image) {&#13;
&#13;
        var callbackFunction = this._notify;&#13;
&#13;
        $image.on("load", function () {&#13;
            var event = this._getImageHasFinishedLoadingEvent($image.width(), $image.height());&#13;
            callbackFunction(event);&#13;
        }.bind(this));&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._notify = function (event) {&#13;
        presenter.observer.update(event);&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._setDescriptionPosition = function ($description, index) {&#13;
        this.$view.append($description);&#13;
&#13;
        $description.css({&#13;
            'left': (this._columnsPositions[index]) + "px",&#13;
            'width': this._columnsMaxWidth + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._createDashes = function () {&#13;
        for(var i = 0; i &lt; this._numberOfColumns + 1; i++) {&#13;
            var $dash = this._getVerticalDash();&#13;
            this.$view.append($dash);&#13;
            this._positionDash($dash, i * this._columnsMaxWidth);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._positionDash = function ($dash, position) {&#13;
        var top = 1 + this._graphContainerBorderWidth;&#13;
        $dash.css({&#13;
            'left': position + "px",&#13;
            'top': top + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.axisXObject.prototype._getVerticalDash = function () {&#13;
        var $dash = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $dash.addClass("axis_x_dash");&#13;
&#13;
        return $dash;&#13;
    };&#13;
&#13;
    presenter.graphObserver = function () {&#13;
        this._shouldGraphGetRescaled = false;&#13;
        this._imagesHeight = undefined;&#13;
        this._imagesHasFinishedLoading = false;&#13;
        this._graphHasFinishedLoading = false;&#13;
        this._graphHasBeenRescaled = false;&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.update = function (event) {&#13;
        switch(event.type) {&#13;
            case presenter.GRAPH_EVENT_TYPE.IMAGE_HAS_FINISHED_LOADING:&#13;
                this._imageHasFinishedLoadingHandler(event);&#13;
                break;&#13;
            case presenter.GRAPH_EVENT_TYPE.GRAPH_HAS_FINISHED_LOADING:&#13;
                this._graphHasFinishedLoadingHandler();&#13;
                break;&#13;
        }&#13;
&#13;
        this._updateGraph();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setGraphShouldGetRescaled = function () {&#13;
        this._shouldGraphGetRescaled = this._areGraphActionsSynchronised() &amp;&amp; this.areImagesRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._imageHasFinishedLoadingHandler = function (event) {&#13;
        if (!this._imagesHasFinishedLoading) {&#13;
            this._setObserverAfterImagesHasLoaded(event);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setObserverAfterImagesHasLoaded = function (event) {&#13;
        this._imagesHasFinishedLoading = true;&#13;
        this._imagesHeight = event.data.height;&#13;
        this._setGraphShouldGetRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._graphHasFinishedLoadingHandler = function () {&#13;
        if (!this._graphHasFinishedLoading) {&#13;
            this._setObserverAfterGraphHasLoaded();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._setObserverAfterGraphHasLoaded = function () {&#13;
        this._graphHasFinishedLoading = true;&#13;
        this._setGraphShouldGetRescaled();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._updateGraph = function () {&#13;
        var task = this._getUpdateGraphTask();&#13;
        task.execute();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._getUpdateGraphTask = function () {&#13;
        if (this._shouldCreateRescalingTask()) {&#13;
            return this._createRescalingTask();&#13;
        }&#13;
        return this._createNullTask();&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._shouldCreateRescalingTask = function () {&#13;
        return (this._shouldGraphGetRescaled &amp;&amp; !this._graphHasBeenRescaled);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.setGraphHasBeenRescaled = function (graphHasBeenRescaled) {&#13;
        this._graphHasBeenRescaled = graphHasBeenRescaled;&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._createRescalingTask = function () {&#13;
        return {&#13;
            execute: function () {&#13;
                presenter.observer.setGraphHasBeenRescaled(true);&#13;
                presenter.graph.rescale();&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._createNullTask = function () {&#13;
        return {&#13;
            execute: function () {}&#13;
        };&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._areGraphActionsSynchronised = function () {&#13;
        return (this._graphHasFinishedLoading &amp;&amp; this._imagesHasFinishedLoading);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype.areImagesRescaled = function () {&#13;
        return this._areImagesRescaled(this._imagesHeight);&#13;
    };&#13;
&#13;
    presenter.graphObserver.prototype._areImagesRescaled = function (height) {&#13;
        if (height == undefined) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return (height != 30);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.runLogic(view, model, false);&#13;
&#13;
        presenter.addEventsListeners();&#13;
    };&#13;
&#13;
    presenter.addEventsListeners = function () {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedAxisYMaximumValue = presenter.validateAxisYMaximumValue(model);&#13;
        if (!validatedAxisYMaximumValue.isValid) {&#13;
            return validatedAxisYMaximumValue;&#13;
        }&#13;
&#13;
        var validatedAxisYValues = presenter.validateAxisYValues(model, validatedAxisYMaximumValue.value);&#13;
        if (!validatedAxisYValues.isValid) {&#13;
            return validatedAxisYValues;&#13;
        }&#13;
&#13;
        var validatedBarsWidth = presenter.validateBarsWidth(model);&#13;
        if (!validatedBarsWidth.isValid) {&#13;
            return validatedBarsWidth;&#13;
        }&#13;
&#13;
        var validatedBackgroundColor = presenter.validateBackgroundColor(model);&#13;
        if (!validatedBackgroundColor.isValid) {&#13;
            return validatedBackgroundColor;&#13;
        }&#13;
&#13;
        var validatedGridLineColor = presenter.validateGridLineColor(model);&#13;
        if (!validatedGridLineColor.isValid) {&#13;
            return validatedGridLineColor;&#13;
        }&#13;
&#13;
        var validatedBorder = presenter.validateBorder(model);&#13;
        if (!validatedBorder.isValid) {&#13;
            return validatedBorder;&#13;
        }&#13;
&#13;
        var validatedAxisXData = presenter.validateAxisXData(model, validatedAxisYMaximumValue.value);&#13;
        if (!validatedAxisXData.isValid) {&#13;
            return validatedAxisXData;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            ID: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            wasFloat: {&#13;
                axisYMaximumValue: validatedAxisYMaximumValue.wasFloat,&#13;
                axisYValues: validatedAxisYValues.wasFloat,&#13;
                axisXData: validatedAxisXData.wasFloat&#13;
            },&#13;
            axisYMaximumValue: validatedAxisYMaximumValue.value,&#13;
            axisYValues: {&#13;
                fixedValues: validatedAxisYValues.fixedValues,&#13;
                cyclicValue: validatedAxisYValues.cyclicValue&#13;
            },&#13;
            barsWidth: validatedBarsWidth.value,&#13;
            backgroundColor: validatedBackgroundColor.value,&#13;
            gridLineColor: validatedGridLineColor.value,&#13;
            border: validatedBorder.value,&#13;
            answers: validatedAxisXData.answers,&#13;
            answersBeyondAxisRange: validatedAxisXData.answersBeyondAxisRange,&#13;
            columnsColors: validatedAxisXData.colors,&#13;
            columnsDescriptions: validatedAxisXData.descriptions,&#13;
            columnsDescriptionsImages: validatedAxisXData.descriptionsImages,&#13;
            columnsNumber: validatedAxisXData.columnsNumber,&#13;
            axisXDescription: model["X axis description"],&#13;
            axisYDescription: model["Y axis description"],&#13;
            isNotActivity: ModelValidationUtils.validateBoolean(model["isNotActivity"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateAxisYMaximumValue = function (model) {&#13;
        var axisYMax = model["Y axis maximum value"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(axisYMax)) {&#13;
            return presenter.getErrorObject("YAM_02");&#13;
        }&#13;
&#13;
        var wasFloat = false;&#13;
        var parsedAxisYMax = parseFloat(axisYMax);&#13;
&#13;
        if (presenter.isFloat(parsedAxisYMax)) {&#13;
            wasFloat = true;&#13;
        }&#13;
&#13;
        if(isNaN(parsedAxisYMax)) {&#13;
            return presenter.getErrorObject("YAM_02");&#13;
        }&#13;
&#13;
        if (parsedAxisYMax &lt;= 0) {&#13;
            return presenter.getErrorObject("YAM_01");&#13;
        }&#13;
&#13;
        return {isValid: true, value: parseInt(parsedAxisYMax), wasFloat: wasFloat};&#13;
    };&#13;
&#13;
    function parseCyclicValue(axisYValues, axisYMaxValue) {&#13;
        var parsedValue = parseFloat(axisYValues);&#13;
&#13;
        if (isNaN(parsedValue)) {&#13;
            return presenter.getErrorObject("YAV_01");&#13;
        }&#13;
&#13;
        if (parsedValue &lt; 1) {&#13;
            return presenter.getErrorObject("YAV_02");&#13;
        }&#13;
&#13;
        if (parsedValue &gt; axisYMaxValue) {&#13;
            return presenter.getErrorObject("YAV_04");&#13;
        }&#13;
&#13;
        return {isValid: true, cyclicValue: [parseInt(parsedValue)], wasFloat: presenter.isFloat(parsedValue)};&#13;
    }&#13;
&#13;
    function isValueNumber (value) {&#13;
        return !isNaN(value);&#13;
    }&#13;
&#13;
    function isValuePositive(value) {&#13;
        return value &gt;= 0;&#13;
    }&#13;
&#13;
    presenter.isFloat = function (value) {&#13;
        return Boolean(value % 1);&#13;
    };&#13;
&#13;
    presenter.isFloatInValues = function (valuesArray) {&#13;
        return valuesArray.filter(presenter.isFloat).length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.isRGB = function (value) {&#13;
        if (value.charAt(0) != "#") {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (value.length != 7) {&#13;
            return false;&#13;
        }&#13;
&#13;
        return value.slice(1, 7).split("").every(function (element) {&#13;
            return ("abcdefABCDEF0123456789".indexOf(element) != -1);&#13;
        })&#13;
    };&#13;
&#13;
    function isInAxisRange(value) {&#13;
        //function for map, requires axisYMax passed to thisArg&#13;
        return value &lt;= this;&#13;
    }&#13;
&#13;
    function parseValueToInt (value) {&#13;
        return parseInt(value);&#13;
    }&#13;
&#13;
    function parseFixedValues(axisYValues, axisYMaxValue) {&#13;
&#13;
        var parsedValues = axisYValues.split(";").map(function (element) {&#13;
            return element.trim();&#13;
        }).map(function (element) {&#13;
            return parseFloat(element);&#13;
        });&#13;
&#13;
        if (!parsedValues.every(isValueNumber)) {&#13;
            return presenter.getErrorObject("YAV_01");&#13;
        }&#13;
&#13;
        if (!parsedValues.every(isValuePositive)) {&#13;
            return presenter.getErrorObject("YAV_03");&#13;
        }&#13;
&#13;
        if (!parsedValues.every(isInAxisRange, axisYMaxValue)) {&#13;
            return presenter.getErrorObject("YAV_04");&#13;
        }&#13;
&#13;
        var parsedIntValues = parsedValues.map(parseValueToInt);&#13;
&#13;
        return {isValid: true, fixedValues: parsedIntValues, wasFloat: presenter.isFloatInValues(parsedValues)};&#13;
    }&#13;
&#13;
    presenter.validateAxisYValues = function (model, axisYMaxValue) {&#13;
        var axisYValues = model["Y axis values"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(axisYValues)) {&#13;
            return {isValid: true, cyclicValue: [1], wasFloat: false};&#13;
        }&#13;
&#13;
        if (axisYValues.charAt(axisYValues.length - 1) == "*") {&#13;
            return parseCyclicValue(axisYValues, axisYMaxValue);&#13;
        } else {&#13;
            return parseFixedValues(axisYValues, axisYMaxValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateBarsWidth = function (model) {&#13;
        var barsWidth = model["Bars width"].trim();&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(barsWidth)) {&#13;
            return {isValid: true, value: 1};&#13;
        }&#13;
&#13;
        var parsedBarsWidth = parseFloat(barsWidth);&#13;
&#13;
        if (isNaN(parsedBarsWidth)) {&#13;
            return presenter.getErrorObject("BW_02");&#13;
        }&#13;
&#13;
        if (parsedBarsWidth &lt; 0) {&#13;
            return presenter.getErrorObject("BW_01");&#13;
        }&#13;
&#13;
        if (parsedBarsWidth &gt;= 0 &amp;&amp; parsedBarsWidth &lt;= 1) {&#13;
            return {isValid: true, value: 1};&#13;
        }&#13;
&#13;
        return {isValid: true, value: parsedBarsWidth};&#13;
    };&#13;
&#13;
    function validateRGBColor (color, errorCode) {&#13;
        if (color.charAt(0) == "#") {&#13;
            if (!presenter.isRGB(color)) {&#13;
                return presenter.getErrorObject(errorCode);&#13;
            }&#13;
        }&#13;
&#13;
        return {isValid: true, value: color}&#13;
    }&#13;
&#13;
    presenter.validateBackgroundColor = function (model) {&#13;
        var backgroundColor = model["Background color"].trim();&#13;
        var validatedRGB = validateRGBColor(backgroundColor, "BC_01");&#13;
&#13;
        return setDefaultColorToValidatedRGB(validatedRGB, "#F5F5DC");&#13;
    };&#13;
&#13;
    presenter.validateGridLineColor = function (model) {&#13;
        var gridLineColor = model["Grid line color"].trim();&#13;
        var validatedRGB = validateRGBColor(gridLineColor, "GLC_01");&#13;
&#13;
        return setDefaultColorToValidatedRGB(validatedRGB, "black");&#13;
    };&#13;
&#13;
    function setDefaultColorToValidatedRGB (validatedRGB, color) {&#13;
        if (validatedRGB.isValid) {&#13;
            if (ModelValidationUtils.isStringEmpty(validatedRGB.value)) {&#13;
                validatedRGB.value = color;&#13;
            }&#13;
        }&#13;
&#13;
        return validatedRGB;&#13;
    }&#13;
&#13;
    presenter.validateBorder = function (model) {&#13;
        var parsedBorder = parseFloat(model["Border"].trim());&#13;
&#13;
        if (isNaN(parsedBorder)) {&#13;
            return {isValid: true, value: 0};&#13;
        }&#13;
&#13;
        if (parsedBorder &lt; 0) {&#13;
            return {isValid: true, value: 0};&#13;
        }&#13;
&#13;
        return {isValid: true, value: parsedBorder};&#13;
    };&#13;
&#13;
&#13;
    function getAttributeValueFromObject (element) {&#13;
        //function for map, requires passed object to thisArg {"attribute": "attributeString"}&#13;
        return element[this.attribute];&#13;
    }&#13;
&#13;
    function isEmptyStringInValues (valuesArray) {&#13;
        var emptyStringsArray = valuesArray.map(ModelValidationUtils.isStringEmpty).filter(function (element) {&#13;
            return element;&#13;
        });&#13;
&#13;
        return (emptyStringsArray.length &gt; 0)&#13;
    }&#13;
&#13;
    presenter.validateAxisXData = function (model, axisYMaximumValue) {&#13;
        var axisXData = model["X axis data"];&#13;
&#13;
        var answers = axisXData.map(getAttributeValueFromObject, {attribute: "Answer"});&#13;
        var colors = axisXData.map(getAttributeValueFromObject, {attribute: "Color"});&#13;
        var descriptions = axisXData.map(getAttributeValueFromObject, {attribute: "Description"});&#13;
        var descriptionsImages = axisXData.map(getAttributeValueFromObject, {attribute: "Description image"});&#13;
&#13;
        if (isEmptyStringInValues(answers)) {&#13;
            return presenter.getErrorObject("AXD_01");&#13;
        }&#13;
&#13;
        var parsedAnswers = answers.map(function (element) {&#13;
            return Number(element);&#13;
        });&#13;
&#13;
        if (!parsedAnswers.every(isValueNumber)) {&#13;
            return presenter.getErrorObject("AXD_02");&#13;
        }&#13;
&#13;
        var wasFloat = presenter.isFloatInValues(parsedAnswers);&#13;
        var areValuesInScope = parsedAnswers.every(isValuePositive) &amp;&amp; parsedAnswers.every(isInAxisRange, axisYMaximumValue);&#13;
&#13;
        var answersParsedToInt = parsedAnswers.map(parseValueToInt);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            wasFloat: wasFloat,&#13;
            answersBeyondAxisRange: !areValuesInScope,&#13;
            answers: answersParsedToInt,&#13;
            colors: colors,&#13;
            descriptions: descriptions,&#13;
            descriptionsImages: descriptionsImages,&#13;
            columnsNumber: answersParsedToInt.length&#13;
        };&#13;
    };&#13;
&#13;
    function deleteCommands () {&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
        delete presenter.setWorkMode;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.reset;&#13;
    }&#13;
&#13;
    presenter.runLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view.find("div").attr('id', presenter.configuration.ID);&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
&#13;
        presenter.observer = new presenter.graphObserver();&#13;
&#13;
        if(!isPreview) {&#13;
            initializeGraphFromConfiguration();&#13;
        } else {&#13;
            initializeGraphFromConfiguration();&#13;
            presenter.graph.block();&#13;
        }&#13;
    };&#13;
&#13;
    function initializeGraphFromConfiguration() {&#13;
        presenter.graph = new presenter.graphObject(&#13;
            presenter.$view,&#13;
            presenter.configuration.axisYMaximumValue,&#13;
            presenter.configuration.answers,&#13;
            presenter.configuration.columnsColors,&#13;
            presenter.configuration.columnsDescriptions,&#13;
            presenter.configuration.columnsDescriptionsImages,&#13;
            presenter.configuration.barsWidth,&#13;
            presenter.configuration.backgroundColor,&#13;
            presenter.configuration.gridLineColor,&#13;
            presenter.configuration.axisYValues.cyclicValue,&#13;
            presenter.configuration.axisYValues.fixedValues,&#13;
            30,&#13;
            presenter.configuration.border,&#13;
            presenter.configuration.axisYDescription,&#13;
            presenter.configuration.axisXDescription&#13;
        );&#13;
&#13;
        presenter.graph.initializeGraph();&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (isCorrect, column, change) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': (column + 1) + (change === "noChange" ? "" : " " + change),&#13;
            'value': '',&#13;
            'score': isCorrect ? '1' : '0'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.sendEventAllOk = function () {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        });&#13;
    };&#13;
&#13;
    presenter.isAllOk = function () {&#13;
        return (presenter.getScore() == presenter.getMaxScore());&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getValue': presenter.getValue,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if (presenter.errorMode) {&#13;
            presenter.graph.setWorkMode();&#13;
            presenter.errorMode = false;&#13;
        }&#13;
&#13;
        presenter.graph.block();&#13;
        presenter.graph.showAnswers();&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.configuration.isNotActivity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.graph.unblock();&#13;
        presenter.graph.hideAnswers();&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.graph.setWorkMode();&#13;
        presenter.graph.reset();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.graph.unblock();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getMaxScore();&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getScore();&#13;
    };&#13;
&#13;
    presenter.graphObject.prototype.isAttempted = function () {&#13;
        return !this._columns.every(function(column) {&#13;
            return column.getState() == 0;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.configuration.isNotActivity) return 0;&#13;
&#13;
        return presenter.graph.getErrorCount();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.graph.block();&#13;
        presenter.graph.setShowErrorsMode();&#13;
        presenter.errorMode = true;&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.configuration.isNotActivity) return;&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.graph.unblock();&#13;
        presenter.graph.setWorkMode();&#13;
        presenter.errorMode = false;&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var selected = presenter.graph.getState();&#13;
&#13;
        return JSON.stringify({&#13;
            selected: selected,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if(!stateString) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        if(presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
        presenter.graph.setState(state.selected);&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>