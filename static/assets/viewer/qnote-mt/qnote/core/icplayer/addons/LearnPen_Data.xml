<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LearnPen_Data" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="isDisable" nameLabel="LearnPen_Data_property_is_disable" type="boolean"/>
        <property name="stepsAndColors" nameLabel="LearnPen_Data_property_colors_and_steps" type="text"/>
        <property name="refreshTime" nameLabel="LearnPen_Data_property_refresh_time" type="string"/>
    </model>
<css>.row {&#13;
    height: 25%;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.sensor-a, .sensor-b, .sensor-c {&#13;
    margin-bottom: 5%;&#13;
    height: 15%;&#13;
}&#13;
&#13;
.sensor-p {&#13;
    height: 20%;&#13;
}&#13;
&#13;
.box {&#13;
    -webkit-box-sizing: border-box;&#13;
    -moz-box-sizing: border-box;&#13;
    box-sizing: border-box;&#13;
&#13;
    float: left;&#13;
&#13;
    border: 1px solid white;&#13;
&#13;
    width: 8.3%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.on-mode {&#13;
    opacity: 1;&#13;
}&#13;
</css><view>&lt;div class="sensor-a"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-b"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-c"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-p"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="sensor-a"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-b"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-c"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="sensor-p"&gt;&#13;
    &lt;div data-step="0" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="1" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="2" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="3" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="4" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="5" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="6" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="7" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="8" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="9" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="10" class="box"&gt;&lt;/div&gt;&#13;
    &lt;div data-step="11" class="box"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLearnPen_Data_create() {&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
    function getCorrectObject(val) { return { isValid: true, value: val }; }&#13;
    function getStep(col, val) { return { color: col, value: val }; }&#13;
&#13;
    Number.prototype.half = Number.prototype.half || function() {&#13;
        return Math.round(this / 2);&#13;
    };&#13;
&#13;
    var DATA_LENGTH = 12;&#13;
    var ON_MODE_CLASS = 'on-mode';&#13;
&#13;
    var isIntervalOn = false;&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    function recording(on) {&#13;
        if (on) {&#13;
            if (!isIntervalOn) {&#13;
                presenter.intervalId = setInterval(updateDataOnGraph, presenter.configuration.refreshTime);&#13;
            }&#13;
        } else {&#13;
            if (isIntervalOn) {&#13;
                clearInterval(presenter.intervalId);&#13;
            }&#13;
        }&#13;
        isIntervalOn = on;&#13;
    }&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    function getCurrentDataFromSensor() {&#13;
        function toPercent(val) { return Math.round(val / 1024 * 100); }&#13;
        var learnPenData = window.LearnPen;&#13;
&#13;
        return {&#13;
            a: learnPenData ? toPercent(learnPenData.getA()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            b: learnPenData ? toPercent(learnPenData.getB()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            c: learnPenData ? toPercent(learnPenData.getC()) : 0, // Math.round(Math.floor(Math.random() * 100)),&#13;
            p: learnPenData ? toPercent(learnPenData.getP()) : 0 // Math.round(Math.floor(Math.random() * 100))&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function colorNameToHex(color) {&#13;
        var colors = {&#13;
            "aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","gold":"#ffd700","goldenrod":"#daa520","gray":"#808080","green":"#008000","greenyellow":"#adff2f","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred ":"#cd5c5c","indigo ":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavender":"#e6e6fa","lavenderblush":"#fff0f5","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","grey":"#808080","lightgrey":"#d3d3d3","lightgreen":"#90ee90","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370d8","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#d87093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"&#13;
        };&#13;
&#13;
        if (typeof colors[color.toLowerCase()] !== 'undefined') {&#13;
            return colors[color.toLowerCase()];&#13;
        }&#13;
&#13;
        return color;&#13;
    }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        S01: 'Wrong values in Steps and colors property',&#13;
        S02: 'Wrong number of values in Steps and colors property. 12 values for every sensor',&#13;
        S03: 'Percentage values in Steps and colors property have to be in descend order',&#13;
&#13;
        T01: 'Property Refresh time cannot be lower then 50 and higher then 2000',&#13;
        T02: 'Property Refresh time has to be numeric'&#13;
    };&#13;
&#13;
    presenter.isSensorLine = function(line) {&#13;
        return line.split(';').every(function(v) {&#13;
            return /^[A-CP]$/.test(v.trim());&#13;
        });&#13;
    };&#13;
&#13;
    presenter.isValueLine = function(line) {&#13;
        // 50%;red | 90% ; blue | 3%;#111111 | 77%;#333&#13;
        return /^[0-9]{1,3}%\s*;\s*.*([a-zA-Z]|#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3})$/.test(line);&#13;
    };&#13;
&#13;
    function validateLines(lines) {&#13;
        if (lines.length % (DATA_LENGTH + 1) !== 0) return getErrorObject('S02');&#13;
&#13;
        var previous = 0;&#13;
        for (var i=0; i&lt;lines.length; i++) {&#13;
            if (i % (DATA_LENGTH + 1) === 0) {&#13;
                previous = 0;&#13;
                if (!presenter.isSensorLine(lines[i])) {&#13;
                    return getErrorObject('S01');&#13;
                }&#13;
            } else {&#13;
                if (!presenter.isValueLine(lines[i])) {&#13;
                    return getErrorObject('S02');&#13;
                }&#13;
&#13;
                var currentPercent = parseInt(lines[i].split(';')[0].trim(), 10);&#13;
                if (previous &gt; currentPercent) {&#13;
                    return getErrorObject('S03');&#13;
                }&#13;
                previous = currentPercent;&#13;
            }&#13;
        }&#13;
&#13;
        return getCorrectObject(null);&#13;
    }&#13;
&#13;
    function getDataFromLines(lines, sensor) {&#13;
        var sensorSteps = [];&#13;
&#13;
        function findSensorInLine() {&#13;
            for (var i=0; i&lt;lines.length; i++) {&#13;
                var values = lines[i].split(';');&#13;
&#13;
                if (values.indexOf(sensor) !== -1) {&#13;
                    return i;&#13;
                }&#13;
            }&#13;
            return -1;&#13;
        }&#13;
&#13;
        var firstValuePosition = findSensorInLine() + 1;&#13;
&#13;
        for (var i=firstValuePosition; i&lt;firstValuePosition+DATA_LENGTH; i++) {&#13;
            var stepAndColor = lines[i].split(';').map(function(a) { return a.trim(); });&#13;
            var value = parseInt(stepAndColor[0], 10); // removes implicitly % sign&#13;
            var color = colorNameToHex(stepAndColor[1]);&#13;
            sensorSteps.push(getStep(color, value));&#13;
        }&#13;
&#13;
        return sensorSteps;&#13;
    }&#13;
&#13;
    function validateColorsAndSteps(data) {&#13;
        if (ModelValidationUtils.isStringEmpty(data)) {&#13;
            // #ff0000 - red&#13;
            // #ffff00 - yellow&#13;
            // #008000 - green&#13;
            // #ffa500 - orange&#13;
            // #90ee90 - lightgreen&#13;
            var squeeze = [&#13;
                getStep("#ffff00", 10), getStep("#ffff00", 20), getStep("#ffff00", 30),&#13;
                getStep("#ffff00", 32),&#13;
                getStep("#008000", 33), getStep("#008000", 40), getStep("#008000", 50),&#13;
                getStep("#008000", 66),&#13;
                getStep("#ff0000", 67),&#13;
                getStep("#ff0000", 70), getStep("#ff0000", 80), getStep("#ff0000", 95)&#13;
            ];&#13;
&#13;
            return getCorrectObject({&#13;
                a: squeeze,&#13;
                b: squeeze,&#13;
                c: squeeze,&#13;
                p: squeeze&#13;
            });&#13;
        }&#13;
&#13;
        var lines = Helpers.splitLines(data).map(function(line) { return line.trim(); }).filter(function(line) { return line !== '' });&#13;
&#13;
        var validationData = validateLines(lines);&#13;
        if (!validationData.isValid) {&#13;
            return getErrorObject(validationData.errorCode);&#13;
        }&#13;
&#13;
        return getCorrectObject({&#13;
            a: getDataFromLines(lines, 'A'),&#13;
            b: getDataFromLines(lines, 'B'),&#13;
            c: getDataFromLines(lines, 'C'),&#13;
            p: getDataFromLines(lines, 'P')&#13;
        });&#13;
    }&#13;
&#13;
    function validateTime(time) {&#13;
        if (ModelValidationUtils.isStringEmpty(time)) {&#13;
            return getCorrectObject(100);&#13;
        }&#13;
&#13;
        if (!/^[0-9]+$/.test(time)) {&#13;
            return getErrorObject('T02');&#13;
        }&#13;
&#13;
        time = parseInt(time, 10);&#13;
&#13;
        if (time &lt; 50 || time &gt; 2000) {&#13;
            return getErrorObject('T01');&#13;
        }&#13;
&#13;
        return getCorrectObject(time);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedStepsAndColors = validateColorsAndSteps(model.stepsAndColors);&#13;
        if (!validatedStepsAndColors.isValid) return getErrorObject(validatedStepsAndColors.errorCode);&#13;
&#13;
        var validatedTime = validateTime(model.refreshTime);&#13;
        if (!validatedTime.isValid) return getErrorObject(validatedTime.errorCode);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isDisable: ModelValidationUtils.validateBoolean(model.isDisable),&#13;
            stepsAndColors: validatedStepsAndColors.value,&#13;
            refreshTime: validatedTime.value,&#13;
            width: parseInt(model.Width, 10),&#13;
            height: parseInt(model.Height, 10),&#13;
&#13;
            id: model.ID,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    function colorSteps(stepsAndColors) {&#13;
        function setBackGroundColor($sensor, step, color) {&#13;
            $sensor.find('div.box[data-step="' + step + '"]').css('background-color', color);&#13;
            $sensor.find('div.box[data-step="' + step + '"]').attr('data-color', color);&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
            setBackGroundColor(presenter.$a, i, stepsAndColors.a[i].color);&#13;
            setBackGroundColor(presenter.$b, i, stepsAndColors.b[i].color);&#13;
            setBackGroundColor(presenter.$c, i, stepsAndColors.c[i].color);&#13;
            setBackGroundColor(presenter.$p, i, stepsAndColors.p[i].color);&#13;
        }&#13;
    }&#13;
&#13;
    function updateDataOnGraph() {&#13;
        function setDataForSensor($sensor, steps, value) {&#13;
            var color, index;&#13;
&#13;
            for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
                if (steps[i].value &lt; value) {&#13;
                    index = i;&#13;
                }&#13;
            }&#13;
            color = $sensor.find('div.box[data-step="' + index + '"]').attr("data-color");&#13;
&#13;
            for (var i=0; i&lt;DATA_LENGTH; i++) {&#13;
                if (steps[i].value &lt; value) {&#13;
                    $sensor.find('div.box[data-step="' + i + '"]').css("background-color", color);&#13;
                } else {&#13;
                    $sensor.find('div.box[data-step="' + i + '"]').css("background-color", "white");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.find('div.' + ON_MODE_CLASS).each(function() {&#13;
            $(this).removeClass(ON_MODE_CLASS);&#13;
        });&#13;
&#13;
        var data = getCurrentDataFromSensor();&#13;
&#13;
        setDataForSensor(presenter.$a, presenter.configuration.stepsAndColors.a, data.a);&#13;
        setDataForSensor(presenter.$b, presenter.configuration.stepsAndColors.b, data.b);&#13;
        setDataForSensor(presenter.$c, presenter.configuration.stepsAndColors.c, data.c);&#13;
        setDataForSensor(presenter.$p, presenter.configuration.stepsAndColors.p, data.p);&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.$a = presenter.$view.find('div.sensor-a');&#13;
        presenter.$b = presenter.$view.find('div.sensor-b');&#13;
        presenter.$c = presenter.$view.find('div.sensor-c');&#13;
        presenter.$p = presenter.$view.find('div.sensor-p');&#13;
&#13;
        colorSteps(presenter.configuration.stepsAndColors);&#13;
&#13;
        if (!isPreview &amp;&amp; !presenter.configuration.isDisable) {&#13;
            presenter.intervalId = setInterval(updateDataOnGraph, presenter.configuration.refreshTime);&#13;
            isIntervalOn = true;&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        recording(false);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        recording(true);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        recording(false);&#13;
    };&#13;
&#13;
    presenter.setState = function(_) {&#13;
        recording(true);&#13;
    };&#13;
&#13;
//    presenter.reset = function() { };&#13;
//    presenter.getErrorCount = function() { return 0; };&#13;
//    presenter.getMaxScore = function() { return 0; };&#13;
//    presenter.getScore = function() { return 0; };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>