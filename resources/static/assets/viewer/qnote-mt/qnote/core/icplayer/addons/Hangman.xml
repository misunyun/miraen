<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hangman" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Phrases" nameLabel="Hangman_property_phrases" type="list">
			<property isLocalized="true" name="Letters" nameLabel="Hangman_property_letters" type="string"/>
			<property isLocalized="true" name="Phrase" nameLabel="Hangman_property_phrase" type="string"/>
		</property>
		<property name="Possible mistakes" nameLabel="Hangman_property_possible_mistakes" type="string"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Hangman_property_is_not_activity" type="boolean"/>
        <property displayName="Keyboard Letters Order" name="Keyboard Letters Order" nameLabel="Hangman_property_keyboard_letters_order" type="string"/>
	</model>
<css>.hangman-wrapper {&#13;
    height: 100%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hangman-letter {&#13;
    float: left;&#13;
    margin: 3px;&#13;
    padding: 3px;&#13;
    border: 1px solid black;&#13;
    border-radius: 3px;&#13;
    width: 20px;&#13;
    height: 20px;&#13;
}&#13;
&#13;
.hangman-letters,&#13;
.hangman-phrase {&#13;
    border: 2px solid black;&#13;
    border-radius: 5px;&#13;
    width: 97%;&#13;
    height: 48%;&#13;
}&#13;
&#13;
.hangman-letters {&#13;
    margin-bottom: 5px;&#13;
}&#13;
&#13;
.hangman-phrase-word {&#13;
    margin-left: 5px;&#13;
    margin-right: 10px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hangman-phrase-word .hangman-letter {&#13;
    border: none;&#13;
    border-radius: 0;&#13;
}&#13;
&#13;
.hangman-phrase-word .hangman-letter.empty {&#13;
    border-bottom: 3px solid black;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.selected {&#13;
    background-color: #dcdcdc;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.correct {&#13;
    background-color: #adff2f;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.incorrect {&#13;
    background-color: red;&#13;
}&#13;
&#13;
.hangman-letters .hangman-letter.show-answers {&#13;
    background-color: blue;&#13;
}&#13;
</css><view>&lt;div class="hangman-wrapper"&gt;&#13;
    &lt;div class="hangman-letters"&gt;&lt;/div&gt;&#13;
    &lt;div class="hangman-phrase"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="hangman-wrapper"&gt;&#13;
    &lt;div class="hangman-letters"&gt;&lt;/div&gt;&#13;
    &lt;div class="hangman-phrase"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHangman_create() {&#13;
    var presenter = function () {};&#13;
    var playerController = null;&#13;
    var eventBus;&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
        eventBus = playerController.getEventBus();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.drawElements = function (phraseNumber) {&#13;
        var lettersInOrder = presenter.getLettersInOrder(presenter.configuration.phrases[phraseNumber].letters);&#13;
        presenter.configuration.lettersInCustomOrder = lettersInOrder;&#13;
        presenter.drawLetters(lettersInOrder);&#13;
        presenter.drawPhrase(presenter.$view.find('.hangman-phrase'), presenter.configuration.phrases[phraseNumber].phrase);&#13;
    };&#13;
&#13;
    presenter.getLettersInOrder = function (letters) {&#13;
        if(presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            return presenter.changeLettersOrder(letters);&#13;
        }&#13;
&#13;
        return letters;&#13;
    };&#13;
&#13;
    presenter.getLettersFromKeyboardOrder = function (letters) {&#13;
        var lettersFromKeyboardOrder = [];&#13;
&#13;
        presenter.configuration.keyboardLettersOrder.map(function (element) {&#13;
            if (letters.indexOf(element) != -1) {&#13;
                this.push(element);&#13;
            }&#13;
        }, lettersFromKeyboardOrder);&#13;
&#13;
        return lettersFromKeyboardOrder&#13;
    };&#13;
&#13;
    presenter.getRestOfLetters = function (orderedLetters, letters) {&#13;
        return orderedLetters.concat(letters.filter(function (element) {&#13;
            return this.indexOf(element) == -1;&#13;
        }, orderedLetters));&#13;
    };&#13;
&#13;
    presenter.changeLettersOrder = function (letters) {&#13;
        var orderedLetters = presenter.getLettersFromKeyboardOrder(letters);&#13;
        return presenter.getRestOfLetters(orderedLetters, letters);&#13;
    };&#13;
&#13;
    presenter.drawElementsAndAttachMouseHandlers = function (phraseNumber, isPreview) {&#13;
        presenter.drawElements(phraseNumber);&#13;
&#13;
        if (isPreview) {&#13;
            presenter.showCorrect();&#13;
        } else {&#13;
            presenter.handleMouseActions();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.assignVariablesToPresenter = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.currentPhrase = 0;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
        presenter.$phraseContainer = $(view).find('.hangman-phrase');&#13;
        presenter.$lettersContainer = $(view).find('.hangman-letters');&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.isActivity = !(ModelValidationUtils.validateBoolean(model['isNotActivity']));&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeKeyboardLettersOrder(model);&#13;
    };&#13;
&#13;
    presenter.upgradeKeyboardLettersOrder = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model["Keyboard Letters Order"] == undefined) {&#13;
            upgradedModel["Keyboard Letters Order"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.deleteCommands = function () {&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.reset;&#13;
        delete presenter.nextPhrase;&#13;
        delete presenter.previousPhrase;&#13;
        delete presenter.isAllOk;&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.sanitizeModel(upgradedModel);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            presenter.deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.assignVariablesToPresenter(view, model);&#13;
        presenter.drawElementsAndAttachMouseHandlers(0, isPreview);&#13;
&#13;
        presenter.addMarkedLetter(isPreview);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'L_01': "Letters definition incorrect!",&#13;
        'W_01': "Words definition cannot be empty!",&#13;
        'W_02': "Words definition consist letters that are not specified!",&#13;
        'W_03': "You cannot type more than one exclamation mark next to each other!",&#13;
        'W_04': "Words definition cannot contain only exclemation marks!",&#13;
        'P_01': "At least one phrase must be specified!",&#13;
        'T_01': "Number possible mistakes incorrect!",&#13;
        'KLO_01': "Letters in property Keyboard Letters Order incorrect.",&#13;
        'KLO_02': "Letters cant duplicate in Keyboard Letters Order property."&#13;
    };&#13;
&#13;
    presenter.DEFAULT_LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',&#13;
        'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.isArrayWithLettersValid = function (arrayWithLetters) {&#13;
        for (var i = 0, length = arrayWithLetters.length; i &lt; length; i++) {&#13;
            var letter = arrayWithLetters[i].toUpperCase().trim();&#13;
            if (letter) {&#13;
                if (letter.length &gt; 1) {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    /**&#13;
     Converts string representation of list to array. Additionally trims elements, upper cases them and&#13;
     removes duplicated entries.&#13;
     @method convertStringArray&#13;
     @param {String} letters string containing comma separated, single character elements (whitespaces allowed)&#13;
     @return {Array} converted and sorted (ascending) array&#13;
     */&#13;
    presenter.convertStringArray = function (letters) {&#13;
        if (ModelValidationUtils.isStringEmpty(letters)) return presenter.DEFAULT_LETTERS;&#13;
&#13;
        var list = [];&#13;
        var lettersArray = letters.split(',');&#13;
        for (var i = 0, length = lettersArray.length; i &lt; length; i++) {&#13;
            var letter = lettersArray[i].toUpperCase().trim();&#13;
            if (letter &amp;&amp; list.indexOf(letter) === -1) {&#13;
                list.push(letter);&#13;
            }&#13;
        }&#13;
&#13;
        return list.sort();&#13;
    };&#13;
&#13;
    presenter.wordsMatchLetters = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                if (letters.indexOf(word[j].toUpperCase()) === -1 &amp;&amp; word[j] != '!')  return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isCorrectCountOfEcxlamationMarks = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
&#13;
            for (var j = 0; j &lt; word.length; j++) {&#13;
                if (word[j] == '!' &amp;&amp; word[j+1] == '!')  return false;&#13;
            }&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isOnlyExclamationMark = function(letters, words) {&#13;
        var wordsArray = words.split(' ');&#13;
&#13;
        for (var i = 0; i &lt; wordsArray.length; i++) {&#13;
            var word = wordsArray[i];&#13;
            if(word == '!') return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.sanitizePhrase = function (phrase) {&#13;
        if (ModelValidationUtils.isStringEmpty(phrase.trim())) return returnErrorObject('W_01');&#13;
&#13;
        var phraseArray = [];&#13;
        var splittedPhrase = phrase.trim().split(' ');&#13;
&#13;
        for (var i = 0; i &lt; splittedPhrase.length; i++) {&#13;
            if (splittedPhrase[i]) {&#13;
                phraseArray.push(splittedPhrase[i].toUpperCase());&#13;
            }&#13;
        }&#13;
&#13;
        return { isError: false, phrase: phraseArray };&#13;
    };&#13;
&#13;
    presenter.sanitizePhrases = function(phrases) {&#13;
        if (ModelValidationUtils.isArrayEmpty(phrases)) {&#13;
            return returnErrorObject('P_01');&#13;
        }&#13;
&#13;
        var sanitisedPhrases = [];&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            if (!presenter.isArrayWithLettersValid(phrases[i].Letters.split(","))) return returnErrorObject('L_01');&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(phrases[i].Phrase)) return returnErrorObject('W_01');&#13;
&#13;
            var letters = presenter.convertStringArray(phrases[i].Letters);&#13;
            if (!presenter.wordsMatchLetters(letters, phrases[i].Phrase)) return returnErrorObject('W_02');&#13;
            if (!presenter.isCorrectCountOfEcxlamationMarks(letters, phrases[i].Phrase)) return returnErrorObject('W_03');&#13;
            if (!presenter.isOnlyExclamationMark(letters, phrases[i].Phrase)) return returnErrorObject('W_04');&#13;
&#13;
            var sanitisedPhrase = presenter.sanitizePhrase(phrases[i].Phrase);&#13;
            if (sanitisedPhrase.isError) return sanitisedPhrase;&#13;
&#13;
            sanitisedPhrases.push({&#13;
                letters: letters,&#13;
                phrase: sanitisedPhrase.phrase,&#13;
                errorCount: 0,&#13;
                selectedLetters: []&#13;
            });&#13;
        }&#13;
&#13;
        return {isError: false, phrases: sanitisedPhrases };&#13;
    };&#13;
&#13;
    presenter.validateTrialsCount = function (model) {&#13;
        var validatedInt = ModelValidationUtils.validatePositiveInteger(model['Possible mistakes']);&#13;
        if (!validatedInt.isValid) {&#13;
            return { isValid: false, errorCode: "T_01", isError: true};&#13;
        }&#13;
&#13;
        return validatedInt;&#13;
    };&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var sanitisedPhrases = presenter.sanitizePhrases(model.Phrases);&#13;
&#13;
        if (sanitisedPhrases.isError) return sanitisedPhrases;&#13;
&#13;
        var validatedTrialsCount = presenter.validateTrialsCount(model);&#13;
        if (!validatedTrialsCount.isValid) return validatedTrialsCount;&#13;
&#13;
        var validatedKeyboardLettersOrder = presenter.validateKeyboardLettersOrder(model);&#13;
        if (validatedKeyboardLettersOrder.isError) {&#13;
            return validatedKeyboardLettersOrder;&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            phrases: sanitisedPhrases.phrases,&#13;
            trialsCount: validatedTrialsCount.value,&#13;
            addonID: model.ID,&#13;
            keyboardLettersOrder: validatedKeyboardLettersOrder.value,&#13;
            isCustomKeyboardLettersOrderSet: validatedKeyboardLettersOrder.isCustomKeyboardLettersOrderSet,&#13;
            lettersInCustomOrder: []&#13;
        };&#13;
    };&#13;
&#13;
    function isNotDuplicated(value) {&#13;
        return (this.filter(function (currentValue) {&#13;
                return (value == currentValue);&#13;
            }).length == 1&#13;
        );&#13;
    }&#13;
&#13;
    presenter.validateKeyboardLettersOrder = function (model) {&#13;
        var keyboardLettersOrder = model["Keyboard Letters Order"];&#13;
        if (ModelValidationUtils.isStringEmpty(keyboardLettersOrder.trim())) {&#13;
            return {&#13;
                isError: false,&#13;
                value: [],&#13;
                isCustomKeyboardLettersOrderSet: false&#13;
            };&#13;
        }&#13;
&#13;
        var preparedData = keyboardLettersOrder.split(",").map(function (element) {&#13;
            return element.trim().toUpperCase();&#13;
        });&#13;
&#13;
        if (!presenter.isArrayWithLettersValid(preparedData)) {&#13;
            return returnErrorObject("KLO_01");&#13;
        }&#13;
&#13;
        if (!preparedData.every(isNotDuplicated, preparedData)) {&#13;
            return returnErrorObject("KLO_02");&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            value: preparedData,&#13;
            isCustomKeyboardLettersOrderSet: true&#13;
        };&#13;
    };&#13;
&#13;
    function generateLetter() {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('hangman-letter');&#13;
        $element.text(' ');&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function generateLetterWithText(letter) {&#13;
        var $element = generateLetter();&#13;
        $element.text(letter);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    presenter.drawLetters = function (letters) {&#13;
        for (var i = 0; i &lt; letters.length; i++) {&#13;
            presenter.$lettersContainer.append(generateLetterWithText(letters[i]));&#13;
        }&#13;
    };&#13;
&#13;
    function generatePhraseWord(word) {&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('hangman-phrase-word');&#13;
&#13;
        for (var j = 0; j &lt; word.length; j++) {&#13;
            var $letter;&#13;
            if(word[j].indexOf('!') &gt; -1){&#13;
                var $elementLetter = $(document.createElement('div'));&#13;
                $elementLetter.addClass('hangman-letter');&#13;
                $elementLetter.text('!'+word[j+1]);&#13;
                $element.append($elementLetter);&#13;
            }else{&#13;
                $letter = generateLetter();&#13;
                $letter.addClass('empty');&#13;
&#13;
                $element.append($letter);&#13;
            }&#13;
        }&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    presenter.drawPhrase = function ($container, phrase) {&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            $container.append(generatePhraseWord(phrase[i]));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.disableRemainingLetters = function () {&#13;
        presenter.$lettersContainer.find('.hangman-letter').each(function (_, element) {&#13;
            if (!$(element).hasClass('selected')) {&#13;
                $(element).unbind('click');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.unbindAttachedHandlers = function ($element) {&#13;
        $element.unbind('click');&#13;
        if (presenter.$phraseContainer.find('.hangman-letter.empty').length === 0) {&#13;
            presenter.disableRemainingLetters();&#13;
        }&#13;
    };&#13;
    presenter.onLetterSelectedAction = function (letter, currentPhrase, sendEventAndCountError) {&#13;
        var findResult = presenter.findLetterInPhrase(letter, currentPhrase.phrase);&#13;
        var selectionEventData;&#13;
&#13;
        if (findResult.length === 0) {&#13;
            selectionEventData = presenter.createLetterSelectedEventData(letter, false);&#13;
&#13;
            if (sendEventAndCountError) {&#13;
                currentPhrase.errorCount++;&#13;
            }&#13;
            if (currentPhrase.errorCount &gt; presenter.configuration.trialsCount) {&#13;
                presenter.disableRemainingLetters();&#13;
            }&#13;
        } else {&#13;
            presenter.fillPhraseWithLetters(letter, findResult);&#13;
            selectionEventData = presenter.createLetterSelectedEventData(letter, true);&#13;
        }&#13;
&#13;
        if (sendEventAndCountError) {&#13;
            presenter.sendEventData(selectionEventData);&#13;
            if (presenter.isAllOK() &amp;&amp; presenter.isActivity) {&#13;
                presenter.sendAllOKEvent();&#13;
            }&#13;
        }&#13;
        if (currentPhrase.errorCount === presenter.configuration.trialsCount &amp;&amp; presenter.isActivity &amp;&amp; !currentPhrase.EndOfTrialsWasSent) {&#13;
            presenter.sendEventData(presenter.createEndOfTrialsEventData());&#13;
            currentPhrase.EndOfTrialsWasSent = true;&#13;
        } else if (currentPhrase.errorCount &gt; presenter.configuration.trialsCount &amp;&amp; presenter.isActivity &amp;&amp; !currentPhrase.endOfGame) {&#13;
            presenter.sendEndOfGameEvent();&#13;
            currentPhrase.endOfGame = true;&#13;
        }&#13;
&#13;
        presenter.unbindAttachedHandlers($(this));&#13;
    };&#13;
&#13;
    presenter.sendEndOfGameEvent = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        var eventData = presenter.createBaseEventData();&#13;
&#13;
        eventData.value = 'EOG';&#13;
        eventData.score = '';&#13;
&#13;
        presenter.sendEventData(eventData);&#13;
    };&#13;
&#13;
    presenter.letterClickHandler = function (e) {&#13;
        if(presenter.isErrorCheckingMode){&#13;
            return;&#13;
        }&#13;
&#13;
        e.stopPropagation();&#13;
        var sendEventAndCountError = !$(this).hasClass('selected');&#13;
        $(this).addClass('selected');&#13;
        var letter = $(this).text();&#13;
&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        presenter.addLetterSelectionToPhrase(currentPhrase, letter);&#13;
        presenter.onLetterSelectedAction(letter, currentPhrase, sendEventAndCountError);&#13;
    };&#13;
&#13;
    presenter.handleMouseActions = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
&#13;
        presenter.$lettersContainer.find('.hangman-letter').each(function (_, element) {&#13;
            var letter = $(element).text();&#13;
&#13;
            if (!presenter.isLetterSelected(currentPhrase, letter)) {&#13;
                $(element).click(presenter.letterClickHandler);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.findLetterInPhrase = function (letter, phrase) {&#13;
        var occurrence = [];&#13;
&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            for (var j = 0; j &lt; phrase[i].length; j++) {&#13;
                if (phrase[i][j] === letter) {&#13;
                    occurrence.push({ word: i, index: j});&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return occurrence;&#13;
    };&#13;
&#13;
    presenter.fillPhraseWithLetters = function (letter, letterOccurrence) {&#13;
        var phrase = presenter.configuration.phrases[presenter.currentPhrase].phrase;&#13;
&#13;
        for (var i = 0; i &lt; letterOccurrence.length; i++) {&#13;
            var index = presenter.calculateLetterElementIndex(phrase, letterOccurrence[i]);&#13;
&#13;
            var $letterElement = presenter.$phraseContainer.find('.hangman-letter:eq(' + index + ')');&#13;
            $letterElement.removeClass('empty');&#13;
            $letterElement.text(letter);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.calculateLetterElementIndex = function (phrase, occurrence) {&#13;
        var index = 0;&#13;
&#13;
        for (var i = 0; i &lt; occurrence.word; i++) {&#13;
            index += phrase[i].length;&#13;
        }&#13;
&#13;
        return index + occurrence.index;&#13;
    };&#13;
&#13;
    presenter.getIndexOfLetterInPhrase = function (phrase, letter) {&#13;
        var index = phrase.letters.indexOf(letter);&#13;
&#13;
        if (presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            index = presenter.configuration.lettersInCustomOrder.indexOf(letter);&#13;
        }&#13;
&#13;
        return index;&#13;
    };&#13;
&#13;
    presenter.addLetterSelectionToPhrase = function (phrase, letter) {&#13;
        var index = presenter.getIndexOfLetterInPhrase(phrase, letter);&#13;
&#13;
        phrase.selectedLetters.push(index);&#13;
    };&#13;
&#13;
    presenter.isLetterSelected = function (phrase, letter) {&#13;
        var index = presenter.getIndexOfLetterInPhrase(phrase, letter);&#13;
&#13;
        return phrase.selectedLetters.indexOf(index) !== -1;&#13;
    };&#13;
&#13;
    presenter.showCorrect = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
&#13;
            if (!presenter.isLetterSelected(currentPhrase, neededLetters[i])) {&#13;
                $letter.addClass('selected');&#13;
                if (presenter.isErrorCheckingMode) {&#13;
                    if(!$letter.hasClass('hangman-tip')){&#13;
                        $letter.addClass('incorrect');&#13;
                    }&#13;
                }&#13;
                presenter.addLetterSelectionToPhrase(currentPhrase, $letter.text());&#13;
                presenter.onLetterSelectedAction(neededLetters[i], currentPhrase, false);&#13;
            } else if (presenter.isErrorCheckingMode) {&#13;
                if(!$letter.hasClass('hangman-tip')){&#13;
                    $letter.addClass('correct');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            presenter.$lettersContainer.find('.hangman-letter.selected:not(.correct):not(.incorrect)').each(function (_, element) {&#13;
                if(!$(element).hasClass('hangman-tip')){&#13;
                    $(element).addClass('incorrect');&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCorrectInSetShowErrorsMode = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
&#13;
            if (presenter.isLetterSelected(currentPhrase, neededLetters[i])) {&#13;
                if(!$letter.hasClass('hangman-tip')){&#13;
                    $letter.addClass('correct');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$lettersContainer.find('.hangman-letter.selected:not(.correct):not(.incorrect)').each(function (_, element) {&#13;
            if(!$(element).hasClass('hangman-tip')){&#13;
                $(element).addClass('incorrect');&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.findLetterElement = function (letter) {&#13;
        var $letters = presenter.$lettersContainer.find('.hangman-letter');&#13;
&#13;
        for (var i = 0; i &lt; $letters.length; i++) {&#13;
            if ($($letters[i]).text() === letter)  return $($letters[i]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getNeededLetters = function (phrase) {&#13;
        var letters = [];&#13;
        for (var i = 0; i &lt; phrase.length; i++) {&#13;
            for (var j = 0; j &lt; phrase[i].length; j++) {&#13;
                if (letters.indexOf(phrase[i][j]) === -1) {&#13;
                    if(phrase[i][j] == '!'){&#13;
                        letters.push('!' + phrase[i][j+1]);&#13;
                    }else{&#13;
                        letters.push(phrase[i][j]);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return letters;&#13;
    };&#13;
&#13;
    presenter.nextPhrase = function () {&#13;
        presenter.switchPhrase(presenter.currentPhrase + 2);&#13;
    };&#13;
&#13;
    presenter.previousPhrase = function () {&#13;
        presenter.switchPhrase(presenter.currentPhrase);&#13;
    };&#13;
&#13;
    presenter.switchPhraseCommand = function (params) {&#13;
        var phraseNumber = parseInt(params[0], 10);&#13;
&#13;
        if (isNaN(phraseNumber) || phraseNumber &lt;= 0 || phraseNumber &gt; presenter.configuration.phrases.length) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.removeChildrenElements(presenter.$phraseContainer);&#13;
        presenter.removeChildrenElements(presenter.$lettersContainer);&#13;
&#13;
        presenter.currentPhrase = phraseNumber - 1;&#13;
        presenter.drawElementsAndAttachMouseHandlers(phraseNumber - 1, false);&#13;
        presenter.applySelection();&#13;
&#13;
        presenter.addMarkedLetter(false);&#13;
    };&#13;
&#13;
    presenter.switchPhrase = function (phraseNumber) {&#13;
        presenter.switchPhraseCommand([phraseNumber]);&#13;
    };&#13;
&#13;
    presenter.applySelection = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
&#13;
        for (var i = 0; i &lt; currentPhrase.selectedLetters.length; i++) {&#13;
            var $letter = presenter.$lettersContainer.find('.hangman-letter:eq(' + currentPhrase.selectedLetters[i] + ')');&#13;
            $letter.addClass('selected');&#13;
            presenter.onLetterSelectedAction($letter.text(), currentPhrase, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'showCorrect': presenter.showCorrect,&#13;
            'nextPhrase': presenter.nextPhrase,&#13;
            'previousPhrase': presenter.previousPhrase,&#13;
            'switchPhrase': presenter.switchPhraseCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.removeChildrenElements = function ($element) {&#13;
        $element.children().each(function (_, element) {&#13;
            $(element).remove();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        var phrases = presenter.configuration.phrases;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            phrases[i].selectedLetters = [];&#13;
            phrases[i].errorCount = 0;&#13;
            phrases[i].endOfGame = false;&#13;
        }&#13;
&#13;
        presenter.switchPhrase(1);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.addMarkedLetter(false);&#13;
        presenter.isErrorCheckingMode = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            currentPhrase: presenter.currentPhrase,&#13;
            phrases: presenter.configuration.phrases&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeStateForEndOfGame = function (parsedState) {&#13;
        if (parsedState.endOfGame == undefined) {&#13;
            parsedState.endOfGame = false;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (parsedState) {&#13;
        return presenter.upgradeStateForEndOfGame(parsedState);&#13;
    };&#13;
&#13;
    presenter.addMarkedLetter = function (isPreview) {&#13;
        presenter.$view.find('.hangman-letter:contains(!)').next().css('display', 'none');&#13;
        var exclamationLetters = [];&#13;
&#13;
        if(!isPreview){&#13;
            presenter.$view.find('.hangman-letter:contains(!)').each(function(_, element) {&#13;
                var text = $(this).text();&#13;
                var correctText = text.substring(1,2);&#13;
                exclamationLetters.push(correctText);&#13;
                $(element).text(correctText);&#13;
            });&#13;
&#13;
            for(var i = 0; i&lt; presenter.configuration.phrases[presenter.currentPhrase].letters.length; i++){&#13;
                var merge = presenter.configuration.phrases[presenter.currentPhrase].phrase.join(),&#13;
                    letter = presenter.configuration.phrases[presenter.currentPhrase].letters[i],&#13;
                    count = merge.split(letter).length - 1,&#13;
                    exclMerge = exclamationLetters.join(),&#13;
                    exclCount = exclMerge.split(letter).length - 1;&#13;
&#13;
                if(count == exclCount &amp;&amp; count &gt; 0 &amp;&amp; exclCount &gt; 0){&#13;
                    var $letter = presenter.$view.find('.hangman-letters').find('.hangman-letter:contains('+letter+')');&#13;
                    $letter.addClass('selected');&#13;
                    $letter.addClass('hangman-tip');&#13;
                    presenter.addLetterSelectionToPhrase(presenter.configuration.phrases[presenter.currentPhrase], $letter.text());&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (stringifiedState) {&#13;
        var state = JSON.parse(stringifiedState);&#13;
        var upgradedState = presenter.upgradeState(state);&#13;
&#13;
        var phrases = presenter.configuration.phrases;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            phrases[i].selectedLetters = upgradedState.phrases[i].selectedLetters;&#13;
            phrases[i].errorCount = upgradedState.phrases[i].errorCount;&#13;
            phrases[i].endOfGame = upgradedState.phrases[i].endOfGame;&#13;
        }&#13;
&#13;
        presenter.switchPhrase(upgradedState.currentPhrase + 1);&#13;
&#13;
        presenter.addMarkedLetter(false)&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if(presenter.isActivity){&#13;
            return presenter.configuration.phrases.length;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSelectionSufficient = function (neededLetters, selectedLetters) {&#13;
        if (selectedLetters.length &lt; neededLetters.length) return false;&#13;
&#13;
        var sortedNeededLetters = neededLetters.sort();&#13;
        var sortedSelectedLetters = selectedLetters.sort();&#13;
&#13;
        for (var i = 0; i &lt; sortedNeededLetters.length; i++) {&#13;
            if (sortedSelectedLetters.indexOf(sortedNeededLetters[i]) === -1) return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.getLettersIndexesForScoring = function (neededLetters, phrase) {&#13;
        var neededLettersIndexes = [];&#13;
&#13;
        if (presenter.configuration.isCustomKeyboardLettersOrderSet) {&#13;
            neededLetters.map(function (element) {&#13;
                var index = presenter.configuration.lettersInCustomOrder.indexOf(element);&#13;
                neededLettersIndexes.push(index);&#13;
            }, neededLettersIndexes);&#13;
&#13;
            return neededLettersIndexes&#13;
        } else {&#13;
&#13;
            for (var j = 0; j &lt; neededLetters.length; j++) {&#13;
                neededLettersIndexes.push(phrase.letters.indexOf(neededLetters[j]));&#13;
            }&#13;
&#13;
            return neededLettersIndexes;&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getScoring = function (phrases) {&#13;
        var neededLetters = [], neededLettersIndexes = [];&#13;
        var score = 0, errors = 0;&#13;
&#13;
        for (var i = 0; i &lt; phrases.length; i++) {&#13;
            neededLetters = presenter.getNeededLetters(phrases[i].phrase);&#13;
&#13;
            for(var k = neededLetters.length; k--;){&#13;
                if (neededLetters[k].indexOf('!') &gt; -1) neededLetters.splice(k, 1);&#13;
            }&#13;
&#13;
            neededLettersIndexes = presenter.getLettersIndexesForScoring(neededLetters, phrases[i]);&#13;
&#13;
            if (presenter.isSelectionSufficient(neededLettersIndexes, phrases[i].selectedLetters)) {&#13;
                score++;&#13;
            } else {&#13;
                errors++;&#13;
            }&#13;
        }&#13;
&#13;
        return { score: score, errors: errors };&#13;
    };&#13;
&#13;
    presenter.getPhraseForScoring = function () {&#13;
        if (presenter.isErrorCheckingMode || presenter.isShowAnswersActive) {&#13;
            return JSON.parse(presenter.workModeState).phrases;&#13;
        } else {&#13;
            return presenter.configuration.phrases;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSomethingSelected = function () {&#13;
        return presenter.$view.find('.selected').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if(presenter.isActivity){&#13;
            var phrases = presenter.getPhraseForScoring();&#13;
            return presenter.getScoring(phrases).score;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if(presenter.isActivity &amp;&amp; presenter.isSomethingSelected()){&#13;
            var phrases = presenter.getPhraseForScoring();&#13;
            return presenter.getScoring(phrases).errors;&#13;
        }else{&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if(presenter.isActivity){&#13;
            presenter.workModeState = presenter.getState();&#13;
            presenter.showCorrectInSetShowErrorsMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        if(presenter.isActivity){&#13;
            presenter.setState(presenter.workModeState);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createBaseEventData = function () {&#13;
        return {&#13;
            source: presenter.configuration.addonID,&#13;
            item: "" + (presenter.currentPhrase + 1),&#13;
            value: "",&#13;
            score: ""&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createEndOfTrialsEventData = function () {&#13;
        var eventData = presenter.createBaseEventData();&#13;
&#13;
        eventData.value = 'EOT';&#13;
        eventData.score = '';&#13;
&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.createLetterSelectedEventData = function (letter, isCorrect) {&#13;
        var eventData = presenter.createBaseEventData();&#13;
&#13;
        eventData.value = "" + letter;&#13;
        eventData.score = isCorrect ? "1" : "0";&#13;
&#13;
        return eventData;&#13;
    };&#13;
&#13;
    presenter.sendEventData = function (eventData) {&#13;
        if (playerController !== null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore();&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function (){&#13;
        return{&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendAllOKEvent = function (){&#13;
        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCorrectSA = function () {&#13;
        var currentPhrase = presenter.configuration.phrases[presenter.currentPhrase];&#13;
        var neededLetters = presenter.getNeededLetters(currentPhrase.phrase);&#13;
        var $letter;&#13;
        for (var i = 0; i &lt; neededLetters.length; i++) {&#13;
            if(neededLetters[i].indexOf('!') &gt; -1){&#13;
                $letter = $('&lt;div&gt;'+neededLetters[i]+'&lt;/div&gt;');&#13;
                $letter.addClass('hangman-letter');&#13;
            }else{&#13;
                $letter = presenter.findLetterElement(neededLetters[i]);&#13;
            }&#13;
            $letter.addClass('show-answers');&#13;
            presenter.addLetterSelectionToPhrase(currentPhrase, $letter.text());&#13;
            presenter.onLetterSelectedAction(neededLetters[i], currentPhrase, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(!presenter.isActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        if(presenter.isErrorCheckingMode){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.workModeState = JSON.stringify({&#13;
            currentPhrase: presenter.currentPhrase,&#13;
            phrases: presenter.configuration.phrases&#13;
        });&#13;
        presenter.$view.find('.hangman-letter').each(function (){&#13;
            if($(this).hasClass('selected')){&#13;
                $(this).removeClass('selected');&#13;
            }&#13;
        });&#13;
&#13;
        presenter.showCorrectSA();&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(!presenter.isActivity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
        presenter.setState(presenter.workModeState);&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>