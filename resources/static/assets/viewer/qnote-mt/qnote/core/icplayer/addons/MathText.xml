<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MathText" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="initialText" nameLabel="Mathtext_property_text" type="mathtext"/>
        <property name="correctAnswer" nameLabel="Mathtext_property_correctAnswer" type="mathanswer"/>

        <property name="type" nameLabel="Mathtext_property_type" type="{text, editor, activity}"/>
        <property name="isDisabled" nameLabel="Mathtext_property_is_disabled" type="boolean"/>
        <property displayName="Language" name="language" nameLabel="Mathtext_property_language" type="{English, Polish, French, Arabic, Spanish}"/>

        <property name="formulaColor" nameLabel="Mathtext_property_formula_color" type="string"/>
        <property name="backgroundColor" nameLabel="Mathtext_property_background_color" type="string"/>

        <property name="mathEditorInPopup" nameLabel="Mathtext_property_math_editor_in_popup" type="boolean"/>
        <property displayName="popup texts" name="popupTexts" nameLabel="Mathtext_property_popup" type="staticlist">

        <property name="cancel" nameLabel="Mathtext_property_popup_button_save" type="staticrow">
                <property name="cancel" nameLabel="Mathtext_property_popup_button_cancel" type="string"/>
        </property>
        <property name="save" nameLabel="Mathtext_property_popup_button_save" type="staticrow">
                <property name="save" nameLabel="Mathtext_property_popup_button_save" type="string"/>
        </property>

        </property>
    </model>
<css>.mathtext-editor-wrapper {&#13;
    border: 1px solid black;&#13;
}&#13;
&#13;
.mathtext-editor-wrapper.wrong {&#13;
    border: 2px solid red;&#13;
}&#13;
&#13;
.mathtext-editor-wrapper.correct {&#13;
    border: 2px solid green;&#13;
}&#13;
&#13;
.mathtext-editor-popup-wrapper {&#13;
    background: white;&#13;
    border: 1px solid;&#13;
    padding: 3px;&#13;
    width: 600px;&#13;
    position: absolute;&#13;
    display: none;&#13;
    top:0px;&#13;
    left:0px;&#13;
    padding-top:20px;&#13;
    z-index: 99999;&#13;
}&#13;
.mathtext-editor-popup-editor {&#13;
    width: 100%;&#13;
    height: 300px;&#13;
}&#13;
&#13;
.mathtext-editor-popup-buttons {&#13;
    display: flex;&#13;
    padding-top: 5px;&#13;
}&#13;
&#13;
.mathtext-editor-popup-buttons .cancel-button {&#13;
    display: inline-block;&#13;
    margin-left: auto;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.mathtext-editor-popup-buttons .save-button {&#13;
    display: inline-block;&#13;
    margin-left: 15px;&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="mathtext-editor-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
&lt;img class="loading-image" style="position: absolute; visibility: hidden; margin: auto; left: 0; right: 0; top: 0; bottom: 0; max-width: 100%; max-height: 100%; object-fit: contain;"&gt;&#13;
&lt;/img&gt;&#13;
</view><preview>&lt;div class="mathtext-editor-wrapper" style="opacity: 0.999;"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonMathText_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.state = {&#13;
        isVisible: false,&#13;
        isDisabled: false,&#13;
        isShowAnswers: false,&#13;
        isCheckAnswers: false,&#13;
        currentAnswer: presenter.EMPTY_MATHTEXT,&#13;
        wasChanged: true, // for checking if user has made changes since last answer check&#13;
        lastScore: 0,&#13;
        hasUserInteracted: false // for checking if user has interacted with addon&#13;
    };&#13;
    presenter.editor = null;&#13;
    presenter.answerObject = null;&#13;
&#13;
    presenter.TYPES_DEFINITIONS = {&#13;
        TEXT: 'text',&#13;
        EDITOR: 'editor',&#13;
        ACTIVITY: 'activity'&#13;
    };&#13;
&#13;
    presenter.WIRIS_DISABLED_MESSAGE = "This addon requires internet access and enabled Wiris to work correctly";&#13;
&#13;
    presenter.EMPTY_MATHTEXT = '&lt;math xmlns="http://www.w3.org/1998/Math/MathML"/&gt;';&#13;
    presenter.WIRIS_RENDER_URL = "https://www.wiris.net/client/editor/render?";&#13;
    presenter.ERROR_CODES = {&#13;
        'initialText_STR02': "Value provided to text property is not a valid string.",&#13;
        'correctAnswer_STR02': "Value provided to text property is not a valid string.",&#13;
        'width_INT04': "Value provided to width property must be bigger than 500px.",&#13;
        'height_INT04': "Value provided to height property must be bigger than 200px.",&#13;
        "formulaColor_RGB01": "Formula color is not valid string.",&#13;
        "formulaColor_RGB02": "Formula color is too long for hex color.",&#13;
        "formulaColor_RGB03": "Formula color is not valid hex color.",&#13;
        "backgroundColor_RGB01": "Background color is not valid string.",&#13;
        "backgroundColor_RGB02": "Background color is too long for hex color.",&#13;
        "backgroundColor_RGB03": "Background color is not valid hex color."&#13;
    };&#13;
&#13;
    presenter.run = function AddonMathText_run (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonMathText_setPlayerController (playerController) {&#13;
        presenter.playerController = playerController;&#13;
        presenter.eventBus = playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonMathText_createPreview (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.makeRequestForImage = function AddonMathText_makeRequestForImage (text) {&#13;
        var xmlhttp = new XMLHttpRequest();&#13;
        var mathMlParam = encodeURIComponent(text);&#13;
        var imgTypeParam = 'svg';&#13;
&#13;
        var url = presenter.WIRIS_RENDER_URL + "mml=" +  mathMlParam + "&amp;format=" + imgTypeParam;&#13;
&#13;
        if (presenter.loadingImageView) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc ) {&#13;
                presenter.loadingImageView.setAttribute("src", loadingSrc);&#13;
                presenter.loadingImageView.style.visibility = "visible";&#13;
            }&#13;
        }&#13;
&#13;
        xmlhttp.onreadystatechange = function() {&#13;
            if (xmlhttp.readyState == XMLHttpRequest.DONE) {&#13;
                if (xmlhttp.status === 200) {&#13;
                    var sanitizedResponse = window.xssUtils.sanitize(xmlhttp.response);&#13;
                    $(presenter.wrapper).html(sanitizedResponse);&#13;
                } else {&#13;
                    $(presenter.wrapper).html(presenter.WIRIS_DISABLED_MESSAGE);&#13;
                }&#13;
&#13;
                $(presenter.wrapper).css('color', presenter.configuration.formulaColor);&#13;
                $(presenter.wrapper).find('svg').css('fill', presenter.configuration.formulaColor);&#13;
                $(presenter.wrapper).css('background-color', presenter.configuration.backgroundColor);&#13;
&#13;
                if (presenter.loadingImageView) {&#13;
                    presenter.loadingImageView.style.visibility = "hidden";&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        xmlhttp.open("GET", url, true);&#13;
        xmlhttp.send();&#13;
    };&#13;
&#13;
    presenter.validateModel = function MathText_validateModel(model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        var mathEditorInPopup = model["mathEditorInPopup"].toLowerCase() == "true";&#13;
        var hasMinSize = (model["type"] !== presenter.TYPES_DEFINITIONS.TEXT) &amp;&amp; !mathEditorInPopup;&#13;
        // when not showing wiris editor, width/height can be any value&#13;
        var widthConfig = new ModelValidators.utils.FieldConfigGenerator(function (validatedModel) {&#13;
            return {&#13;
                minValue: hasMinSize ? 500 : 0&#13;
            };&#13;
        });&#13;
&#13;
        var heightConfig = new ModelValidators.utils.FieldConfigGenerator(function (validatedModel) {&#13;
            return {&#13;
                minValue: hasMinSize ? 200 : 0&#13;
            };&#13;
        });&#13;
&#13;
        var availableLanugagesCodes = {&#13;
            'Polish': 'pl',&#13;
            'English': 'en',&#13;
            'Spanish': 'es',&#13;
            'Arabic': 'ar',&#13;
            'French': 'fr'&#13;
        };&#13;
&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.String("ID"),&#13;
            ModelValidators.Enum("type", {"default": "activity", values: ["text", "editor", "activity"]}),&#13;
            ModelValidators.Boolean("isDisabled"),&#13;
            ModelValidators.String("initialText", {default: presenter.EMPTY_MATHTEXT}),&#13;
            ModelValidators.String("correctAnswer", {default: presenter.EMPTY_MATHTEXT}),&#13;
            ModelValidators.utils.FieldRename("Is Visible", "isVisible", ModelValidators.Boolean("isVisible")),&#13;
            ModelValidators.utils.FieldRename("Width", "width", ModelValidators.Integer("width", widthConfig)),&#13;
            ModelValidators.utils.FieldRename("Height", "height", ModelValidators.Integer("height", heightConfig)),&#13;
            ModelValidators.utils.EnumChangeValues("language", availableLanugagesCodes, ModelValidators.Enum("language", {"default": "English", values: ["Polish", "English", "Spanish", "Arabic", "French"]})),&#13;
            ModelValidators.HEXColor("formulaColor", {"default": "#000000", canBeShort: true}),&#13;
            ModelValidators.HEXColor("backgroundColor", {"default": "#FFFFFF", canBeShort: false}),&#13;
            ModelValidators.Boolean("mathEditorInPopup")&#13;
        ]);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            return validatedModel;&#13;
        }&#13;
&#13;
        presenter.setAdditionalConfigBasedOnType(validatedModel.value, validatedModel.value['type']);&#13;
        presenter.setButtonTextConfig(validatedModel.value, model);&#13;
&#13;
        return validatedModel;&#13;
    };&#13;
&#13;
    presenter.setAdditionalConfigBasedOnType = function(configuration, type) {&#13;
        // only when type is activity set isActivity to true - addon will return scores and react to commands like show/hide/check/uncheck answers&#13;
        if (type === presenter.TYPES_DEFINITIONS.TEXT) {&#13;
            configuration.isActivity = false;&#13;
            configuration.showEditor = false;&#13;
        } else if (type === presenter.TYPES_DEFINITIONS.EDITOR) {&#13;
            configuration.isActivity = false;&#13;
            configuration.showEditor = true;&#13;
        } else if (type === presenter.TYPES_DEFINITIONS.ACTIVITY){&#13;
            configuration.isActivity = true;&#13;
            configuration.showEditor = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setButtonTextConfig = function(configuration, model) {&#13;
        var buttonTexts = {&#13;
            cancel: 'CANCEL',&#13;
            save: 'SAVE'&#13;
        }&#13;
        if (model['popupTexts']) {&#13;
            var cancelText = model['popupTexts']['cancel']['cancel'];&#13;
            if (cancelText &amp;&amp; cancelText.trim().length &gt; 0) {&#13;
                buttonTexts.cancel = cancelText;&#13;
            }&#13;
            var saveText = model['popupTexts']['save']['save'];&#13;
            if (saveText &amp;&amp; saveText.trim().length &gt; 0) {&#13;
                buttonTexts.save = saveText;&#13;
            }&#13;
        }&#13;
        configuration.buttonTexts = buttonTexts;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        return presenter.addMathEditorInPopup(model);&#13;
    }&#13;
&#13;
    presenter.addMathEditorInPopup = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['mathEditorInPopup'] === undefined) {&#13;
            upgradedModel['mathEditorInPopup'] = "False";&#13;
        }&#13;
&#13;
        if (upgradedModel['popupTexts'] === undefined) {&#13;
            upgradedModel['popupTexts'] = {&#13;
                cancel: {cancel: ''},&#13;
                save: {save: ''}&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function AddonMathText_presenterLogic (view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.wrapper = presenter.view.getElementsByClassName('mathtext-editor-wrapper')[0];&#13;
        presenter.loadingImageView = presenter.view.getElementsByClassName('loading-image')[0];&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.fieldName.join("|") + "_" + validatedModel.errorCode);&#13;
            return;&#13;
        }&#13;
        presenter.configuration = validatedModel.value;&#13;
&#13;
        presenter.initializeView(isPreview);&#13;
&#13;
        // when preview, addon always should be visible, when in lesson it should depend on configuration&#13;
        presenter.setVisibility(isPreview || presenter.configuration.isVisible);&#13;
        presenter.setDisabled(presenter.configuration.isDisabled);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.addHandlers();&#13;
        }&#13;
&#13;
        // added in preview too, so it won't slow editor down&#13;
        if (presenter.configuration.showEditor) {&#13;
            presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initializeView = function AddonMathText_initializeView (isPreview) {&#13;
        presenter.wrapper.style.width = presenter.configuration.width + 'px';&#13;
        presenter.wrapper.style.height = presenter.configuration.height + 'px';&#13;
&#13;
&#13;
        if (presenter.configuration.showEditor) {&#13;
            if (presenter.configuration.mathEditorInPopup) {&#13;
                presenter.initializePopupEditor(isPreview);&#13;
            } else {&#13;
                presenter.initializeEditor(isPreview);&#13;
            }&#13;
        } else {&#13;
            presenter.initializeText();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initializeText = function AddonMathText_initializeText() {&#13;
        presenter.makeRequestForImage(presenter.configuration.initialText);&#13;
    };&#13;
&#13;
    presenter.initializationState = function AddonMathText_initializationState () {&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
    };&#13;
&#13;
    presenter.addHandlers = function AddonMathText_addHandlers () {&#13;
        if (presenter.eventBus) {&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        }&#13;
&#13;
        if (!presenter.isWirisEnabled()) return;&#13;
&#13;
        if (presenter.configuration.isActivity) {&#13;
            presenter.editorListener = {&#13;
                caretPositionChanged: function () {},&#13;
                clipboardChanged: function () {},&#13;
                styleChanged: function () {},&#13;
                transformationReceived: function () {},&#13;
                contentChanged: function (editor) {&#13;
                    // comparing texts fixes problem with userInteraction and hideAnswer&#13;
                    // when using setMathML WIRIS editor needs to make request to WIRIS API,&#13;
                    // so this callback will be called asynchronusly after request response,&#13;
                    // but after state.isShowAnswers was already changed in normal execution&#13;
                    var currentText = editor.getMathML();&#13;
                    if (presenter.editor.isReady() &amp;&amp;&#13;
                        !presenter.state.isShowAnswers &amp;&amp;&#13;
                        !presenter.state.isCheckAnswers &amp;&amp;&#13;
                        currentText !== presenter.state.currentAnswer&#13;
                    ) {&#13;
                        presenter.state.wasChanged = true;&#13;
                        presenter.state.hasUserInteracted = true;&#13;
                    }&#13;
                }&#13;
            };&#13;
&#13;
            presenter.editor.getEditorModel().addEditorListener(presenter.editorListener);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonMathText_removeHandler (event) {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.editor.getEditorModel().removeEditorListener(presenter.editorListener);&#13;
            presenter.removeWIRISEditor();&#13;
        }&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.removeWIRISEditor = function () {&#13;
        window.com.wiris.jsEditor.JsEditor.removeInstance(presenter.wrapper);&#13;
    };&#13;
&#13;
    presenter.getWIRISEditor = function() {&#13;
        return window.com.wiris.jsEditor.JsEditor.getInstance(presenter.wrapper);&#13;
    };&#13;
&#13;
    presenter.isWirisEnabled = function() {&#13;
        return window.hasOwnProperty('com') &amp;&amp; window.com.hasOwnProperty('wiris');&#13;
    };&#13;
&#13;
    presenter.initializeEditor = function AddonMathText_initializeEditor (isPreview) {&#13;
        if (!presenter.isWirisEnabled()) {&#13;
            $(presenter.wrapper).html(presenter.WIRIS_DISABLED_MESSAGE);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.editor = createWirisEditor();&#13;
        presenter.editor.insertInto(presenter.wrapper);&#13;
&#13;
        if (isPreview) {&#13;
            presenter.$view.find('.wrs_focusElementContainer').css('display', 'none');&#13;
            presenter.$view.find('.wrs_handWrapper').css('display', 'none');&#13;
        } else {&#13;
            var builder = window.com.wiris.quizzes.api.QuizzesBuilder.getInstance();&#13;
            presenter.answerObject = builder.readQuestion(presenter.configuration.correctAnswer);&#13;
&#13;
            // when initial text is correct answer&#13;
            presenter.state.lastScore = presenter.checkIfAnswerIsCorrect(presenter.configuration.initialText) ? 1 : 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initializePopupEditor = function AddonMathText_initializePopupEditor (isPreview) {&#13;
        if (!presenter.isWirisEnabled()) {&#13;
            $(presenter.wrapper).html(presenter.WIRIS_DISABLED_MESSAGE);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.createWirisPopup(isPreview);&#13;
        presenter.editor.insertInto(presenter.editorPopupEditor);&#13;
        presenter.wrapper.addEventListener('click', presenter.showPopup);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.resetPopupPosition();&#13;
            var builder = window.com.wiris.quizzes.api.QuizzesBuilder.getInstance();&#13;
            presenter.answerObject = builder.readQuestion(presenter.configuration.correctAnswer);&#13;
            presenter.state.lastScore = presenter.checkIfAnswerIsCorrect(presenter.configuration.initialText) ? 1 : 0;&#13;
        }&#13;
        presenter.makeRequestForImage(presenter.configuration.initialText);&#13;
    };&#13;
&#13;
    presenter.createWirisPopup = function AddonMathText_createWirisPopup (isPreview) {&#13;
        presenter.editor = createWirisEditor();&#13;
&#13;
        presenter.editorPopupWrapper = document.createElement('div');&#13;
        presenter.editorPopupWrapper.classList.add('mathtext-editor-popup-wrapper');&#13;
        presenter.editorPopupEditor = document.createElement('div');&#13;
        presenter.editorPopupEditor.classList.add('mathtext-editor-popup-editor');&#13;
&#13;
        var editorPopupButtons = document.createElement('div');&#13;
        editorPopupButtons.classList.add('mathtext-editor-popup-buttons');&#13;
        presenter.editorPopupCancel = document.createElement('div');&#13;
        presenter.editorPopupCancel.classList.add('cancel-button');&#13;
        presenter.editorPopupCancel.innerText = presenter.configuration.buttonTexts.cancel;&#13;
        presenter.editorPopupSave = document.createElement('div');&#13;
        presenter.editorPopupSave.classList.add('save-button');&#13;
        presenter.editorPopupSave.innerText = presenter.configuration.buttonTexts.save;&#13;
        editorPopupButtons.appendChild(presenter.editorPopupCancel);&#13;
        editorPopupButtons.appendChild(presenter.editorPopupSave);&#13;
&#13;
        presenter.editorPopupSave.addEventListener('click', presenter.onSavePopup);&#13;
        presenter.editorPopupCancel.addEventListener('click', presenter.onCancelPopup);&#13;
&#13;
        presenter.editorPopupWrapper.appendChild(presenter.editorPopupEditor);&#13;
        presenter.editorPopupWrapper.appendChild(editorPopupButtons);&#13;
        presenter.view.appendChild(presenter.editorPopupWrapper);&#13;
        $(presenter.editorPopupWrapper).draggable({&#13;
            cancel: '.mathtext-editor-popup-editor,.cancel-button,.save-button'&#13;
        });&#13;
    }&#13;
&#13;
    function createWirisEditor(isPreview) {&#13;
        return window.com.wiris.jsEditor.JsEditor.newInstance(&#13;
            {&#13;
                'language': presenter.configuration.language,&#13;
                'mml': presenter.configuration.initialText,&#13;
                'readOnly': isPreview,&#13;
                'color': presenter.configuration.formulaColor,&#13;
                'backgroundColor': presenter.configuration.backgroundColor&#13;
            }&#13;
        );&#13;
    }&#13;
&#13;
    presenter.onSavePopup = function AddonMathText_onSavePopup () {&#13;
        presenter.state.currentAnswer = presenter.editor.getMathML();&#13;
        presenter.makeRequestForImage(presenter.state.currentAnswer);&#13;
        presenter.hidePopup();&#13;
        presenter.resetPopupPosition();&#13;
    }&#13;
&#13;
     presenter.onCancelPopup = function AddonMathText_onCancelPopup () {&#13;
        if (presenter.state.currentAnswer &amp;&amp; presenter.state.currentAnswer !== presenter.EMPTY_MATHTEXT) {&#13;
            presenter.editor.setMathML(presenter.state.currentAnswer);&#13;
        } else {&#13;
            presenter.editor.setMathML(presenter.configuration.initialText);&#13;
        }&#13;
        presenter.hidePopup();&#13;
        presenter.resetPopupPosition();&#13;
    }&#13;
&#13;
    presenter.resetPopupPosition = function AddonMathText_resetPopupPosition () {&#13;
        presenter.editorPopupWrapper.style.visibility = 'hidden';&#13;
        var oldDisplayValue = presenter.editorPopupWrapper.style.display;&#13;
        presenter.editorPopupWrapper.style.display = 'block';&#13;
        var pageElement = $(presenter.view).closest('.ic_page_panel')[0];&#13;
        var offsetLeft = Math.floor((pageElement.offsetWidth - presenter.editorPopupWrapper.offsetWidth)/2) - presenter.view.offsetLeft;&#13;
        presenter.editorPopupWrapper.style.left = offsetLeft + "px";&#13;
        presenter.editorPopupWrapper.style.top = '';&#13;
        presenter.editorPopupWrapper.style.display = oldDisplayValue;&#13;
        presenter.editorPopupWrapper.style.visibility = '';&#13;
    }&#13;
&#13;
    presenter.showPopup = function AddonMathText_showPopup () {&#13;
        if (!presenter.state.isShowAnswers &amp;&amp; !presenter.state.isCheckAnswers &amp;&amp; !presenter.state.isDisabled) {&#13;
            presenter.editorPopupWrapper.style.display = "block";&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hidePopup = function AddonMathText_hidePopup () {&#13;
        presenter.editorPopupWrapper.style.display = "none";&#13;
    }&#13;
&#13;
    presenter.showAnswers = function AddonMathText_showAnswers () {&#13;
        if (presenter.state.isCheckAnswers) {&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        if (presenter.configuration.showEditor &amp;&amp; !presenter.state.isShowAnswers &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.state.isShowAnswers = true;&#13;
            presenter.$view.find('input').attr('disabled', true);&#13;
            presenter.editor.setToolbarHidden(true);&#13;
&#13;
            if (presenter.configuration.isActivity) {&#13;
                if (presenter.configuration.mathEditorInPopup) {&#13;
                    presenter.hidePopup();&#13;
                    presenter.makeRequestForImage(presenter.answerObject.getCorrectAnswer(0));&#13;
                } else {&#13;
                    presenter.state.currentAnswer = presenter.editor.getMathML();&#13;
                    presenter.editor.setMathML(presenter.answerObject.getCorrectAnswer(0));&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function AddonMathText_hideAnswers () {&#13;
        if (presenter.configuration.showEditor &amp;&amp; presenter.state.isShowAnswers &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.editor.setToolbarHidden(false);&#13;
            presenter.$view.find('input').removeAttr('disabled');&#13;
&#13;
            if (presenter.configuration.isActivity) {&#13;
                if (presenter.configuration.mathEditorInPopup) {&#13;
                    if (!presenter.state.currentAnswer || presenter.state.currentAnswer === presenter.EMPTY_MATHTEXT) {&#13;
                        presenter.makeRequestForImage(presenter.configuration.initialText);&#13;
                    } else {&#13;
                        presenter.makeRequestForImage(presenter.state.currentAnswer);&#13;
                    }&#13;
                } else {&#13;
                    presenter.editor.setMathML(presenter.state.currentAnswer);&#13;
                }&#13;
            }&#13;
&#13;
            presenter.state.isShowAnswers = false;&#13;
            presenter.setDisabled(presenter.state.isDisabled);&#13;
        }&#13;
    };&#13;
&#13;
     presenter.setShowErrorsMode = function AddonMathText_setShowErrorsMode () {&#13;
        if (presenter.state.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (presenter.configuration.showEditor &amp;&amp; !presenter.state.isCheckAnswers &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.state.isCheckAnswers = true;&#13;
            presenter.$view.find('input').attr('disabled', true);&#13;
            presenter.editor.setToolbarHidden(true);&#13;
&#13;
            if (presenter.configuration.isActivity) {&#13;
&#13;
                if (!presenter.configuration.mathEditorInPopup) {&#13;
                    presenter.state.currentAnswer = presenter.editor.getMathML();&#13;
                }&#13;
&#13;
                if (presenter.state.hasUserInteracted) {&#13;
                    var score = presenter.getScore();&#13;
&#13;
                    if (score === 1) {&#13;
                        presenter.wrapper.classList.add('correct');&#13;
                    } else {&#13;
                        presenter.wrapper.classList.add('wrong');&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function AddonMathText_setWorkMode () {&#13;
        if (presenter.state.isCheckAnswers) {&#13;
            presenter.wrapper.classList.remove('correct');&#13;
            presenter.wrapper.classList.remove('wrong');&#13;
&#13;
            if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
                presenter.$view.find('input').removeAttr('disabled');&#13;
                presenter.editor.setToolbarHidden(false);&#13;
            }&#13;
&#13;
            presenter.state.isCheckAnswers = false;&#13;
            presenter.setDisabled(presenter.state.isDisabled);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.state.isCheckAnswers = false;&#13;
        presenter.state.isShowAnswers = false;&#13;
&#13;
        presenter.wrapper.classList.remove('correct');&#13;
        presenter.wrapper.classList.remove('wrong');&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.setDisabled(presenter.configuration.isDisabled);&#13;
&#13;
        presenter.state.wasChanged = true;&#13;
        presenter.state.hasUserInteracted = false;&#13;
&#13;
        if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.state.currentAnswer = presenter.configuration.initialText;&#13;
            presenter.editor.setMathML(presenter.configuration.initialText);&#13;
            if (presenter.configuration.mathEditorInPopup) {&#13;
                presenter.makeRequestForImage(presenter.configuration.initialText);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function AddonMathText_onEventReceived (eventName) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        else if (eventName === "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkIfAnswerIsCorrect = function(userText) {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // special case - user defined empty text as correct answer and userText is string equal to empty mathml&#13;
        var correctAnswerText = presenter.answerObject.getCorrectAnswer(0);&#13;
        if (correctAnswerText === '' &amp;&amp; userText === presenter.EMPTY_MATHTEXT) {&#13;
            return true;&#13;
        } else if (correctAnswerText === null) { // correct answer isn't defined&#13;
            return false;&#13;
        }&#13;
&#13;
        return presenter.requestForQuizzesCorrectness(correctAnswerText, userText);&#13;
    };&#13;
&#13;
    presenter.requestForQuizzesCorrectness = function (correctAnwser, userText) {&#13;
        var builder = window.com.wiris.quizzes.api.QuizzesBuilder.getInstance();&#13;
&#13;
        var request = builder.newEvalRequest(correctAnwser, userText, presenter.answerObject, null);&#13;
        var service = builder.getQuizzesService();&#13;
        var response = service.execute(request);&#13;
        // Get the response into this useful object.&#13;
        var instance = builder.newQuestionInstance();&#13;
        instance.update(response);&#13;
        // Ask for the correctness of the 0th response.&#13;
        return instance.isAnswerCorrect(0);&#13;
    };&#13;
&#13;
     presenter.setVisibility = function AddonMathText_setVisibility (isVisible) {&#13;
         presenter.state.isVisible = isVisible;&#13;
         presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
     presenter.setDisabled = function(value) {&#13;
         presenter.state.isDisabled = value;&#13;
&#13;
         // that means input is disabled, and toolbar is hidden&#13;
         if (presenter.state.isShowAnswers || presenter.state.isCheckAnswers) {&#13;
             return;&#13;
         }&#13;
&#13;
         if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
             if (value) {&#13;
                 presenter.$view.find('input').attr('disabled', true);&#13;
             } else {&#13;
                 presenter.$view.find('input').removeAttr('disabled');&#13;
             }&#13;
&#13;
             presenter.editor.setToolbarHidden(value);&#13;
         }&#13;
    };&#13;
&#13;
     presenter.setState = function (state) {&#13;
         var parsedState = JSON.parse(state);&#13;
         if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
            presenter.editor.setMathML(parsedState.text);&#13;
            presenter.state.currentAnswer = parsedState.text;&#13;
            if (presenter.configuration.mathEditorInPopup) {&#13;
                presenter.makeRequestForImage(parsedState.text);&#13;
            }&#13;
         }&#13;
&#13;
         presenter.state.hasUserInteracted = parsedState.hasUserInteracted;&#13;
         presenter.setVisibility(parsedState.isVisible);&#13;
         presenter.setDisabled(parsedState.isDisabled)&#13;
     };&#13;
&#13;
&#13;
    presenter.getState = function() {&#13;
        var currentText = presenter.configuration.initialText;&#13;
&#13;
        if (presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
            if (!presenter.configuration.mathEditorInPopup) {&#13;
                currentText = presenter.editor.getMathML();&#13;
            } else {&#13;
                if (presenter.state.currentAnswer) {&#13;
                    currentText = presenter.state.currentAnswer;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'text': currentText,&#13;
            'isVisible': presenter.state.isVisible,&#13;
            'hasUserInteracted': presenter.state.hasUserInteracted,&#13;
            'isDisabled': presenter.state.isDisabled&#13;
        })&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.state.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var score = 0;&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.configuration.showEditor &amp;&amp; presenter.isWirisEnabled()) {&#13;
            if (presenter.state.wasChanged) {&#13;
                var mml = '';&#13;
                if (presenter.configuration.mathEditorInPopup) {&#13;
                    mml = presenter.state.currentAnswer;&#13;
                } else {&#13;
                    mml = presenter.editor.getMathML();&#13;
                }&#13;
                score = presenter.checkIfAnswerIsCorrect(mml) ? 1 : 0;&#13;
                presenter.state.wasChanged = false;&#13;
                presenter.state.lastScore = score;&#13;
                presenter.sendScoreChangedEvent(score);&#13;
            } else {&#13;
                score = presenter.state.lastScore;&#13;
            }&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.configuration.isActivity &amp;&amp; presenter.state.hasUserInteracted) {&#13;
            return 1 - presenter.getScore();&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return presenter.configuration.isActivity ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.sendScoreChangedEvent = function (score) {&#13;
        var eventData = {&#13;
                source: presenter.configuration.ID,&#13;
                item: '0',&#13;
                value: 1,&#13;
                score: score&#13;
        };&#13;
&#13;
        presenter.sendValueChangedEvent(eventData);&#13;
    };&#13;
&#13;
    presenter.sendValueChangedEvent = function (eventData) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.setDisabled(true);&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.setDisabled(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>