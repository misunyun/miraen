<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Points_To_Plot" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="false" name="Source" nameLabel="Points_To_Plot_property_source" type="string"/>
		<property name="Points to plot" nameLabel="Points_To_Plot_property_points_to_plot" type="list">
			<property isLocalized="false" name="plot id" nameLabel="Points_To_Plot_property_plot_id" type="string"/>
			<property isLocalized="false" name="points" nameLabel="Points_To_Plot_property_points" type="int"/>
			<property isLocalized="false" name="strict points" nameLabel="Points_To_Plot_property_strict_points" type="string"/>
		</property>
		<property isLocalized="false" name="Decimal separator" nameLabel="Points_To_Plot_property_decimal_separator" type="string"/>
	</model>
<css/><view/><preview/><presenter>function AddonPoints_To_Plot_create() {&#13;
&#13;
    var presenter = function() {&#13;
    };&#13;
    var eventBus; // Modules communication&#13;
    var addonID;&#13;
    presenter.data = {&#13;
        pointsOnPlot: [],&#13;
        selectedPoints: []&#13;
    };&#13;
    presenter.STATE_CORRECT = 1;&#13;
    presenter.STATE_INCORRECT = 0;&#13;
    presenter.VERSION = '1.0.2';&#13;
    presenter.run = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        addonID = model.ID;&#13;
&#13;
        presenter._allDoneState = false;&#13;
        presenter.initialize(model);&#13;
    };&#13;
    presenter.initialize = function(model) {&#13;
        this.source = model['Source'];&#13;
        this.decimalSeparator = (model['Decimal separator'] === undefined || model['Decimal separator'] == '') ? '.' : model['Decimal separator'];&#13;
        if(presenter.decimalSeparator != '.' &amp;&amp; presenter.decimalSeparator != ',') {&#13;
            presenter.decimalSeparator = '.';&#13;
        };&#13;
        $.each(model['Points to plot'], function(idx, val) {&#13;
            if(val !== undefined) {&#13;
                el = {&#13;
                    plotId: val['plot id'],&#13;
                    pointsToSelect: parseInt(val['points']),&#13;
                    strictPoints: val['strict points'] !== '' ? presenter.parseStrictPoints(val['strict points']) : [],&#13;
                    collectedPoints: []&#13;
                };&#13;
                presenter.data.pointsOnPlot.push(el);&#13;
            }&#13;
        });&#13;
        this.data.selectedPoints = [];&#13;
    };&#13;
    presenter.parseStrictPoints = function(str) {&#13;
        var pairs;&#13;
        if(this.decimalSeparator == ',') {&#13;
            pairs = str.match(/((-?[0-9]+(,?[0-9]+)?){1};{1}(-?[0-9]+(,?[0-9]+)?){1})/g);&#13;
        } else {&#13;
            pairs = str.match(/((-?[0-9]+(\.?[0-9]+)?){1},{1}(-?[0-9]+(\.?[0-9]+)?){1})/g);&#13;
        }&#13;
        var points = [];&#13;
        $.each(pairs, function(idx, val) {&#13;
            var tmp = val.split(presenter.getSeparatorByDecimalSeparator());&#13;
            points.push({x: presenter.toDotSeparator(tmp[0]), y: presenter.toDotSeparator(tmp[1])});&#13;
        });&#13;
&#13;
        return points;&#13;
    };&#13;
    presenter.setShowErrorsMode = function() {&#13;
        var sourceModule = this.getSourceModule();&#13;
        sourceModule.enableUI(false);&#13;
        //check every point&#13;
        $.each(this.data.selectedPoints, function(idx, val){&#13;
            //if point belongs to any plot mark as correct&#13;
            if(val.belongsTo.length &gt; 0) {&#13;
                sourceModule.markPointAsCorrect(val.x, val.y);&#13;
            } else {&#13;
                sourceModule.markPointAsError(val.x, val.y);&#13;
            }&#13;
        });&#13;
    };&#13;
    presenter.setWorkMode = function() {&#13;
        var sourceModule = this.getSourceModule();&#13;
        sourceModule.removePointsStateMarks();&#13;
        sourceModule.enableUI(true);&#13;
    };&#13;
    presenter.reset = function() {&#13;
        this._allDoneState = false;&#13;
        this.data.selectedPoints = [];&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            val.collectedPoints = [];&#13;
        });&#13;
    };&#13;
    presenter.getErrorCount = function() {&#13;
        var errors = 0;&#13;
        $.each(this.data.selectedPoints, function(idx, val){&#13;
            //point belongs to any plot&#13;
            if(val.belongsTo.length === 0) {&#13;
                errors++;&#13;
            }&#13;
        });&#13;
        return errors;&#13;
    };&#13;
    presenter.getMaxScore = function() {&#13;
        var todo = 0;&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            todo += val.pointsToSelect;&#13;
        });&#13;
        return todo;&#13;
    };&#13;
    presenter.getScore = function() {&#13;
        var done = 0;&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            done += val.collectedPoints.length &lt;= val.pointsToSelect ? val.collectedPoints.length : val.pointsToSelect;&#13;
        });&#13;
        return done;&#13;
    };&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
    presenter.getState = function() {&#13;
        var state = JSON.stringify({&#13;
            version: 1,&#13;
            points: presenter.data.selectedPoints,&#13;
            plots: presenter.data.pointsOnPlot&#13;
            });&#13;
        return state;&#13;
    };&#13;
    presenter.setState = function(state) {&#13;
        if(state !== '' &amp;&amp; state !== undefined) {&#13;
            state = JSON.parse(state);&#13;
            presenter.data.selectedPoints = state.points;&#13;
            presenter.data.pointsOnPlot = state.plots;&#13;
        }&#13;
    };&#13;
    presenter.executeCommand = function(name, params) {&#13;
    };&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
    presenter.onEvent = function(evt, data) {&#13;
        switch(evt) {&#13;
            case "ValueChanged":&#13;
                if(data.item.match(/point_/)) {&#13;
                    this.processPointEvent(data);&#13;
                }&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.processPointEvent = function(data) {&#13;
        var els = data.item.split('_');&#13;
        var x = this.toDotSeparator(els[1]);&#13;
        var y = this.toDotSeparator(els[2]);&#13;
        var state = data.value == 1 ? true : false;&#13;
        if(state) {&#13;
            presenter.selectPoint(x,y);&#13;
        } else {&#13;
            presenter.deselectPoint(x,y);&#13;
        }&#13;
    };&#13;
    presenter.selectPoint = function(x, y) {&#13;
        var hasPoint = false;&#13;
        $.each(this.data.selectedPoints, function(k, v) {&#13;
            if (v.x == x &amp;&amp; v.y == y) {&#13;
                hasPoint = true;&#13;
                return false;&#13;
            }&#13;
        });&#13;
        if (!hasPoint) {&#13;
            var el = {&#13;
                x: x,&#13;
                y: y,&#13;
                belongsTo: presenter.getPointOnPlots(x, y)&#13;
            };&#13;
            this.data.selectedPoints.push(el);&#13;
            this.updatePlotCollectedPoints();&#13;
            this.updatePlotsState();&#13;
            presenter.stateChanged({&#13;
                item: 'point_' + x + '_' + y,&#13;
                value: 1,&#13;
                score: el.belongsTo.length &gt; 0 ? presenter.STATE_CORRECT : presenter.STATE_INCORRECT&#13;
            });&#13;
        }&#13;
    };&#13;
    presenter.deselectPoint = function(x, y) {&#13;
        $.each(this.data.selectedPoints, function(k, v) {&#13;
            if (v.x == x &amp;&amp; v.y == y) {&#13;
                presenter.data.selectedPoints.splice(k, 1);&#13;
                presenter.updatePlotCollectedPoints();&#13;
                presenter.updatePlotsState();&#13;
                return false;&#13;
            }&#13;
        });&#13;
        presenter.stateChanged({&#13;
            item: 'point_' + x + '_' + y,&#13;
            value: 0,&#13;
            score: presenter.STATE_INCORRECT&#13;
        });&#13;
    };&#13;
    /**&#13;
     * Checks if point belongs to any plot&#13;
     *&#13;
     * @param float x - point's x&#13;
     * @param float y - point's y&#13;
     * @returns Array - list of plots where point belongs to&#13;
     */&#13;
    presenter.getPointOnPlots = function(x, y) {&#13;
        var sourceModule = this.getSourceModule();&#13;
        var belongsTo = [];&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            // any point&#13;
            if (val.strictPoints.length === 0) {&#13;
                // check if point belongs to plot&#13;
                var res = sourceModule.getPlot().isPointOnPlot(val.plotId, x, y);&#13;
                if (res) {&#13;
                    belongsTo.push(val.plotId);&#13;
                }&#13;
            } else {&#13;
                // check if point is one of strict points&#13;
                $.each(val.strictPoints, function(spIdx, spVal) {&#13;
                    if (spVal.x == x &amp;&amp; spVal.y == y) {&#13;
                        belongsTo.push(val.plotId);&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
        });&#13;
&#13;
        return belongsTo;&#13;
    };&#13;
    /**&#13;
     * Update plot's list of correct points&#13;
     *&#13;
     * @returns void&#13;
     */&#13;
    presenter.updatePlotCollectedPoints = function() {&#13;
        //remove all collected points for each plot&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            val.collectedPoints = [];&#13;
        });&#13;
        //set new collected points&#13;
        $.each(this.data.selectedPoints, function(pidx, pval) {&#13;
            $.each(pval.belongsTo, function(btIdx, btVal) {&#13;
                presenter.addCollectedPoint(btVal, pval.x, pval.y);&#13;
            });&#13;
        });&#13;
    };&#13;
    /**&#13;
     * Adds point to plot's collected points&#13;
     *&#13;
     * @param string plotId - id of plot&#13;
     * @param float x - point's x&#13;
     * @param float y - point's y&#13;
     * @returns void&#13;
     */&#13;
    presenter.addCollectedPoint = function(plotId, x, y) {&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
           if(val.plotId == plotId) {&#13;
               val.collectedPoints.push({x: x, y: y});&#13;
               return false;&#13;
           }&#13;
        });&#13;
    };&#13;
    presenter.updatePlotsState = function() {&#13;
        $.each(this.data.pointsOnPlot, function(idx, val) {&#13;
            res = val.collectedPoints.length &lt; val.pointsToSelect ? false : true;&#13;
            presenter.stateChanged({&#13;
                item: 'plot_' + val.plotId,&#13;
                value: '',&#13;
                score: res ? presenter.STATE_CORRECT : presenter.STATE_INCORRECT&#13;
            });&#13;
        });&#13;
    };&#13;
    presenter.getSourceModule = function() {&#13;
        return this.playerController.getModule(this.source);&#13;
    };&#13;
    presenter.stateChanged = function(data) {&#13;
        if(data) {&#13;
            //chained events when data is array&#13;
            if(!(data instanceof Array)) {&#13;
                //become chain with single event&#13;
                data = [data];&#13;
            }&#13;
&#13;
            //call chained events&#13;
            for(var t=0;t&lt;data.length;t++) {&#13;
                data[t].source = addonID;&#13;
                data[t].item = data[t].item.toString();&#13;
                if(data[t].item.substring(0,6) == 'point_') {&#13;
                    data[t].item = presenter.convertValueToDisplay(data[t].item);&#13;
                }&#13;
                data[t].value = data[t].value.toString();&#13;
                data[t].score = data[t].score === null ? null : data[t].score.toString();&#13;
                eventBus.sendEvent('ValueChanged', data[t]);&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.isAllOK()) {&#13;
            if (!presenter._allDoneState) {&#13;
                presenter._allDoneState = true;&#13;
                presenter.sendAllOKEvent();&#13;
            }&#13;
        } else {&#13;
            presenter._allDoneState = false;&#13;
        }&#13;
    };&#13;
    presenter.sendAllOKEvent = function() {&#13;
        var eventData = {&#13;
            'source': addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    presenter.toDotSeparator = function(value) {&#13;
        return (value + '').replace(this.decimalSeparator, '.');&#13;
    };&#13;
    presenter.getSeparatorByDecimalSeparator = function() {&#13;
        return this.decimalSeparator == '.' ? ',' : ';';&#13;
    };&#13;
    presenter.convertValueToDisplay = function(value) {&#13;
        return (value + '').replace(new RegExp('\\.', 'g'), presenter.decimalSeparator);&#13;
    };&#13;
    presenter.getDecimalSeparator = function() {&#13;
        return presenter.decimalSeparator;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>