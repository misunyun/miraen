<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="TrueFalse" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="TrueFalse_property_is_not_activity" type="boolean"/>
		<property name="Multi" nameLabel="TrueFalse_property_multi" type="boolean"/>
		<property isDefault="true" name="Questions" nameLabel="TrueFalse_property_questions" type="list">
			<property isLocalized="true" name="Question" nameLabel="TrueFalse_property_question" type="html"/>
			<property name="Answer" nameLabel="TrueFalse_property_answer" type="string"/>
		</property>
		<property name="Choices" nameLabel="TrueFalse_property_choices" type="list">
			<property isLocalized="true" name="Choice" nameLabel="TrueFalse_property_choice" type="html"/>
		</property>
		<property name="Lang attribute" nameLabel="TrueFalse_property_lang_attribute" type="string"/>
		<property name="Speech texts" nameLabel="TrueFalse_property_speech_texts" type="staticlist">
			<property displayName="selected" name="Selected" type="staticrow">
                <property name="selected" nameLabel="TrueFalse_property_selected" type="string"/>
            </property>
			<property displayName="deselected" name="Deselected" type="staticrow">
                <property name="deselected" nameLabel="TrueFalse_property_deselected" type="string"/>
            </property>
			<property displayName="correct" name="Correct" type="staticrow">
                <property name="correct" nameLabel="TrueFalse_property_correct" type="string"/>
            </property>
			<property displayName="incorrect" name="Incorrect" type="staticrow">
                <property name="incorrect" nameLabel="TrueFalse_property_incorrect" type="string"/>
            </property>
		</property>
		<property displayName="Is disabled" name="isDisabled" nameLabel="TrueFalse_property_is_disabled" type="boolean"/>
		<property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
		<property name="isSplitInPrintBlocked" nameLabel="printable_block_split_label" type="boolean"/>
	</model>
<css>.ic_page{&#13;
    direction:ltr;&#13;
}&#13;
&#13;
#container * {&#13;
    direction:inherit;&#13;
}&#13;
&#13;
.tf_radio,&#13;
.tf_checkbox {&#13;
    margin:0 0 1em 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    text-align:left;&#13;
    position: absolute;&#13;
    left: 0;&#13;
    top: 0;&#13;
    border-spacing:0 5px;&#13;
}&#13;
&#13;
.tf_radio_row,&#13;
.tf_checkbox_row {&#13;
}&#13;
&#13;
.tf_radio_image,&#13;
.tf_checkbox_image {&#13;
    cursor:pointer;&#13;
    border-collapse: separate;&#13;
    width:70px;&#13;
    min-width:70px;&#13;
    height:26px;&#13;
    min-height:26px;&#13;
    border-bottom:1px solid #111;&#13;
    border-top:1px solid #111;&#13;
&#13;
}&#13;
&#13;
.tf_radio_image.last,&#13;
.tf_checkbox_image.last {&#13;
    border-radius: 0 10px 10px 0;&#13;
    -moz-border-radius: 0 10px 10px 0;&#13;
    border-right:1px solid #111;&#13;
}&#13;
&#13;
.tf_radio_text,&#13;
.tf_checkbox_text {&#13;
    margin:5px 0 0 4px;&#13;
    width:70px;&#13;
    min-width:70px;&#13;
    height:26px;&#13;
    min-height:26px;&#13;
    text-align:center;&#13;
}&#13;
&#13;
.tf_radio_question.first,&#13;
.tf_checkbox_question.first {&#13;
    border:0;&#13;
}&#13;
&#13;
.tf_radio_question,&#13;
.tf_checkbox_question {&#13;
    margin-top:5px;&#13;
    border-bottom:1px solid #111;&#13;
    border-top:1px solid #111;&#13;
    border-left:1px solid #111;&#13;
    padding:10px;&#13;
    border-radius: 10px 0 0 10px;&#13;
    -moz-border-radius: 10px 0 0 10px;&#13;
}&#13;
&#13;
.tf_radio_image.up div {&#13;
    background-image: url('resources/tf-radio-image-up.png');&#13;
}&#13;
&#13;
.tf_radio_image.up.disabled div {&#13;
    background-image: url('resources/tf-radio-image-up-disabled.png');&#13;
}&#13;
&#13;
.tf_radio_image.down div {&#13;
    background-image: url('resources/tf-radio-image-down.png');&#13;
}&#13;
&#13;
.tf_radio_image.down.correct div,&#13;
.tf_radio_image.down.correct-answer div{&#13;
    background-image: url('resources/tf-radio-image-down-correct.png');&#13;
}&#13;
&#13;
.tf_radio_image.down.wrong div {&#13;
    background-image: url('resources/tf-radio-image-down-wrong.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.up div {&#13;
    background-image: url('resources/tf-checkbox-image-up.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.up.disabled div {&#13;
    background-image: url('resources/tf-checkbox-image-up-disabled.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down div {&#13;
    background-image: url('resources/tf-checkbox-image-down.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down.correct div,&#13;
.tf_checkbox_image.down.correct-answer div{&#13;
    background-image: url('resources/tf-checkbox-image-down-correct.png');&#13;
}&#13;
&#13;
.tf_checkbox_image.down.wrong div {&#13;
    background-image: url('resources/tf-checkbox-image-down-wrong.png');&#13;
}&#13;
&#13;
.tf_checkbox_image div,&#13;
.tf_radio_image div {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background: no-repeat left center;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container,&#13;
.printable_addon_TrueFalse .checkbox-container {&#13;
    position: relative;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container input,&#13;
.printable_addon_TrueFalse .checkbox-container input {&#13;
    position: absolute;&#13;
    visibility: hidden;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container span {&#13;
    display: block;&#13;
    width: 0.8em;&#13;
    height: 0.8em;&#13;
    border: solid 1px;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .checkbox-container span {&#13;
    display: block;&#13;
    width: 0.8em;&#13;
    height: 0.8em;&#13;
    border: solid 1px;&#13;
    border-radius: 2px;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container span:after,&#13;
.printable_addon_TrueFalse .checkbox-container span:after {&#13;
    display: none;&#13;
    content: "";&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container input:checked ~ span:after,&#13;
.printable_addon_TrueFalse .checkbox-container input:checked ~ span:after {&#13;
    display: block;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .radio-container span:before {&#13;
    position: relative;&#13;
    top: 18.5%;&#13;
    left: 18.5%;&#13;
    width: 12%;&#13;
    height: 12%;&#13;
    border: solid black;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.printable_addon_TrueFalse .checkbox-container span:before {&#13;
    position: relative;&#13;
    width: 0.5em;&#13;
    height: 0.5em;&#13;
    border: solid black;&#13;
}&#13;
&#13;
.correctAnswerMark::after {&#13;
    content: "\2714";&#13;
}&#13;
&#13;
.incorrectAnswerMark::after {&#13;
    content: "\2716";&#13;
}&#13;
</css><view/><preview/><presenter>function AddonTrueFalse_create() {&#13;
&#13;
    function getTextVoiceObject (text, lang) { return {text: text, lang: lang}; }&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.type = "";&#13;
    presenter.lastEvent = null;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
    presenter.keyboardNavigationActive = false;&#13;
    presenter.keyboardNavigationCurrentElement = null;&#13;
    presenter.keyboardNavigationElements = [];&#13;
    presenter.keyboardNavigationElementsLen = 0;&#13;
    presenter.printableState = null;&#13;
    presenter.didUserRespond = false;&#13;
&#13;
    var possibleChoices = [];&#13;
    var multi = false;&#13;
    var isNotActivity = false;&#13;
    var questions = [];&#13;
    var playerController;&#13;
    var eventBus; // Modules communication&#13;
    var textParser = null; // Links to Glossary Addon&#13;
    var tts;&#13;
    var selectedSpeechText = "selected";&#13;
    var deselectedSpeechText = "deselected";&#13;
    var correctSpeechText = "correct";&#13;
    var incorrectSpeechText = "incorrect";&#13;
&#13;
    var QUESTION_AND_CHOICES_REQUIRED = "At least 1 question and 2 choices are required.";&#13;
    var INDEX_OUT_OF_RANGE = "Index is out of range.";&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.isSelectionCorrect = function (question, selection) {&#13;
        var answers = question.Answer.split(',');&#13;
&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            if (parseInt(answers[i], 10) === selection) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    var score = function () {&#13;
        var score = { 'score': 0, 'maxScore': 0, 'errorCount': 0 };&#13;
        for (var i = 0; i &lt; questions.length + 1; i++) {&#13;
            var j = 0;&#13;
            var row = presenter.$view.find('#' + i);&#13;
            if (i &gt; 0) {&#13;
                var values = (questions[i - 1].Answer).split(',');&#13;
                score.maxScore += values.length;&#13;
                row.children().each(function () {&#13;
                    if (isCorrectAnswer($(this), values, j)) {&#13;
                        score.score += 1;&#13;
                    } else if (isWrongAnswer($(this), values, j)) {&#13;
                        score.errorCount += 1;&#13;
                    }&#13;
                    j++;&#13;
                });&#13;
            }&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    var workMode = function (reset) {&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            var image = $(this);&#13;
            image.removeClass("disabled wrong correct correct-answer");&#13;
            if (reset) {&#13;
                image.removeClass("down").addClass("up");&#13;
            }&#13;
        });&#13;
&#13;
        presenter.$view.find('.tf_radio_question').each(function() {&#13;
            $(this).removeClass('disabled');&#13;
        });&#13;
    };&#13;
&#13;
    var markElements = function () {&#13;
        for (var i = 0; i &lt; questions.length + 1; i++) {&#13;
            var j = 0;&#13;
            var row = presenter.$view.find('#' + i);&#13;
            if (i &gt; 0) {&#13;
                var values = (questions[i - 1].Answer).split(',');&#13;
                row.children().each(function () {&#13;
                    if ($(this).hasClass("disabled") &amp;&amp; j &gt; 0) return;&#13;
                    $(this).addClass("disabled");&#13;
                    if (isCorrectAnswer($(this), values, j)) {&#13;
                        $(this).addClass("correct");&#13;
                    } else if (isWrongAnswer($(this), values, j)) {&#13;
                        $(this).addClass("wrong");&#13;
                    }&#13;
                    j++;&#13;
                });&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function whichQuestion(row, table) {&#13;
        var questionNumber = 0;&#13;
&#13;
        $(table).find('tr').each(function (index) {&#13;
            if ($(this)[0] == $(row)[0]) {&#13;
                questionNumber = index;&#13;
&#13;
                return false;&#13;
            }&#13;
        });&#13;
&#13;
        return questionNumber;&#13;
    }&#13;
&#13;
    function whichAnswer(element, row) {&#13;
        var answerNumber = 0;&#13;
        $(row).find('.tf_' + presenter.type + '_image').each(function (index) {&#13;
            if ($(this)[0] == $(element)[0]) {&#13;
                answerNumber = index + 1; // Answers are counted from 1 to n&#13;
&#13;
                return false;&#13;
            }&#13;
&#13;
            return true;&#13;
        });&#13;
&#13;
        return answerNumber;&#13;
    }&#13;
&#13;
    presenter.createEventData = function (item, wasSelected, isSelectionCorrect) {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': item,&#13;
            'value': wasSelected ? '0' : '1',&#13;
            'score': isSelectionCorrect ? '1' : '0'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createAllOKEventData = function () {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createRowOKEventData = function (row) {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': row + '-all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        }&#13;
    };&#13;
&#13;
    function clickLogic(element) {&#13;
        var sendEvent = true;&#13;
        var wasSelected = false;&#13;
        if (presenter.isDisabled) return;&#13;
&#13;
        if (!$(element).hasClass("disabled")) {&#13;
            if (multi) {&#13;
                if ($(element).hasClass("down")) {&#13;
                    wasSelected = true;&#13;
                    $(element).removeClass("down").addClass("up");&#13;
                } else {&#13;
                    $(element).removeClass("up").addClass("down");&#13;
                }&#13;
            } else {&#13;
                sendEvent = !$(element).hasClass("down");&#13;
&#13;
                $(element).parent().children(".tf_" + presenter.type + "_image").each(function () {&#13;
                    $(this).removeClass("down").addClass("up");&#13;
                });&#13;
&#13;
                $(element).removeClass("up").addClass("down");&#13;
            }&#13;
&#13;
            if (sendEvent) {&#13;
                var selectedQuestion = whichQuestion($(element).parent(), $(element).parent().parent());&#13;
                var selectedAnswer = whichAnswer($(element), $(element).parent());&#13;
                var itemStr = selectedQuestion.toString() + '-' + selectedAnswer.toString();&#13;
                var isSelectionCorrect = presenter.isSelectionCorrect(questions[selectedQuestion - 1], parseInt(selectedAnswer, 10));&#13;
&#13;
                var eventData = presenter.createEventData(itemStr, wasSelected, isSelectionCorrect);&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
                if (multi &amp;&amp; presenter.isRowOK(selectedQuestion)) {&#13;
                    var rowOKEventData = presenter.createRowOKEventData(selectedQuestion);&#13;
                    eventBus.sendEvent('ValueChanged', rowOKEventData);&#13;
&#13;
                }&#13;
&#13;
                if (presenter.isAllOK()) {&#13;
                    var allOKEventData = presenter.createAllOKEventData();&#13;
                    eventBus.sendEvent('ValueChanged', allOKEventData);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function handleClickActions(view) {&#13;
        if(presenter.isDisabled) return;&#13;
&#13;
&#13;
        var $elements = $(view).find(".tf_" + presenter.type + "_image");&#13;
        &#13;
        if (!MobileUtils.isMobileUserAgent(window.navigator.userAgent)){&#13;
            $elements.hover(function(){&#13;
                $(this).addClass('mouse-hover');&#13;
                }, function(){&#13;
                $(this).removeClass('mouse-hover');&#13;
            });&#13;
        }&#13;
        &#13;
        $elements.on('touchstart', function (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        $elements.on('touchend', function (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
&#13;
            if (presenter.lastEvent.type != e.type) {&#13;
                clickLogic($(e.target).parent());&#13;
            }&#13;
        });&#13;
&#13;
        $elements.click(function (e) {&#13;
            e.stopPropagation();&#13;
            clickLogic(this);&#13;
        });&#13;
    }&#13;
&#13;
    presenter.addTabindex = function (element, value) {&#13;
        element.attr("tabindex", value);&#13;
    };&#13;
&#13;
    function generatePossibleChoicesRow(row) {&#13;
        row.append('&lt;td class="tf_' + presenter.type + '_question first" role="gridcell"&gt;&amp;nbsp;&lt;/td&gt;');&#13;
&#13;
        for (var k = 0; k &lt; possibleChoices.length; k++) {&#13;
            var td = $('&lt;td class="tf_' + presenter.type + '_text" role="gridcell"&gt;' + possibleChoices[k].Choice + '&lt;/td&gt;');&#13;
&#13;
            if (presenter.isTabindexEnabled) {&#13;
                presenter.addTabindex(td, 0);&#13;
            }&#13;
&#13;
            row.append(td);&#13;
        }&#13;
    }&#13;
&#13;
    function generateQuestionElement(row, rowID) {&#13;
        var question = questions[rowID - 1].Question;&#13;
&#13;
        if (textParser !== null) { // Actions performed only in Player mode&#13;
            question = textParser.parse(question);&#13;
        }&#13;
        var td = $('&lt;td class="tf_' + presenter.type + '_question" role="gridcell"&gt;' + question + '&lt;/td&gt;');&#13;
&#13;
        if (presenter.isTabindexEnabled) {&#13;
            presenter.addTabindex(td, 0);&#13;
        }&#13;
&#13;
        row.append(td);&#13;
    }&#13;
&#13;
    function generateRowContent(row, rowID) {&#13;
        generateQuestionElement(row, rowID);&#13;
&#13;
        for (var i = 0; i &lt; possibleChoices.length; i++) {&#13;
            if (i === (possibleChoices.length - 1)) {&#13;
                row.append('&lt;td class="tf_' + presenter.type + '_image up last"&gt;&lt;/td&gt;');&#13;
            } else {&#13;
                row.append('&lt;td class="tf_' + presenter.type + '_image up"&gt;&lt;/td&gt;');&#13;
            }&#13;
            var innerElement = document.createElement('div');&#13;
            $(innerElement).css('color','rgba(0,0,0,0.0)');&#13;
            $(innerElement).css('font-size','0px');&#13;
            var text = $("&lt;div&gt;" + possibleChoices[i].Choice + "&lt;/div&gt;").text();&#13;
            var altText = document.createTextNode(text);&#13;
            $(innerElement).append(altText);&#13;
            innerElement.setAttribute('role', 'gridcell');&#13;
&#13;
            if (presenter.isTabindexEnabled) {&#13;
                presenter.addTabindex($(innerElement), 0);&#13;
            }&#13;
&#13;
            $(row).find('td:last-child').append(innerElement);&#13;
        }&#13;
    }&#13;
&#13;
    function rowIndexed () {&#13;
        var count = possibleChoices.length + 1;&#13;
        return questions.reduce(function (acc, q, index) {&#13;
            acc.push({&#13;
                start: (index * count),&#13;
                end: ((index + 1) * count) - 1&#13;
            });&#13;
            return acc;&#13;
        }, []);&#13;
    }&#13;
&#13;
    presenter.generateTableContent = function AddonTrueFalse_generateTableContent(table, view) {&#13;
        table.setAttribute('role', 'table');&#13;
        for (var rowID = 0; rowID &lt; questions.length + 1; rowID++) {&#13;
            $(table).append('&lt;tr class="tf_' + presenter.type + '_row" id=' + rowID + ' role="row"&gt;&lt;/tr&gt;');&#13;
            var row = $(view).find('#' + rowID);&#13;
&#13;
            if (rowID === 0) {&#13;
                generatePossibleChoicesRow(row);&#13;
            } else {&#13;
                var answers = (questions[rowID - 1].Answer).split(',');&#13;
                for (var m = 0; m &lt; answers.length; m++) {&#13;
                    var answer = parseInt(answers[m]);&#13;
                    if (answer &gt; possibleChoices.length || answer &lt;= 0) {&#13;
                        $(view).html(INDEX_OUT_OF_RANGE);&#13;
&#13;
                        break;&#13;
                    }&#13;
                }&#13;
&#13;
                generateRowContent(row, rowID);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getSpeechTexts(model) {&#13;
        var speechTexts = model['Speech texts'];&#13;
&#13;
        if (speechTexts['Selected']['selected'] !== '' &amp;&amp; speechTexts['Selected']['selected'] !== undefined) {&#13;
            selectedSpeechText = speechTexts['Selected']['selected'];&#13;
        }&#13;
&#13;
        if (speechTexts['Deselected']['deselected'] !== '' &amp;&amp; speechTexts['Deselected']['deselected'] !== undefined) {&#13;
            deselectedSpeechText = speechTexts['Deselected']['deselected'];&#13;
        }&#13;
&#13;
        if (speechTexts['Correct']['correct'] !== '' &amp;&amp; speechTexts['Correct']['correct'] !== undefined) {&#13;
            correctSpeechText = speechTexts['Correct']['correct'];&#13;
        }&#13;
&#13;
        if (speechTexts['Incorrect']['incorrect'] !== '' &amp;&amp; speechTexts['Incorrect']['incorrect'] !== undefined) {&#13;
            incorrectSpeechText = speechTexts['Incorrect']['incorrect'];&#13;
        }&#13;
    }&#13;
&#13;
    var makeView = function (view, model, isPreview) {&#13;
        possibleChoices = model['Choices'];&#13;
        questions = model['Questions'];&#13;
        presenter.langAttribute = model['Lang attribute'];&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isDisabled = false; // At start addon is always enabled, so we need to reset flag and set correct value.&#13;
        presenter.isDisabledByDefault = ModelValidationUtils.validateBoolean(model["isDisabled"]);&#13;
        presenter.$view.attr('lang', presenter.langAttribute);&#13;
&#13;
        getSpeechTexts(model);&#13;
&#13;
        if (notAllRequiredParameters(questions, possibleChoices)) {&#13;
            return $(view).html(QUESTION_AND_CHOICES_REQUIRED);&#13;
        }&#13;
&#13;
        multi = model['Multi'] === 'True';&#13;
&#13;
        if (model['isNotActivity'] != undefined){&#13;
            isNotActivity = (model['isNotActivity'] === 'True');&#13;
        }&#13;
        else {&#13;
            isNotActivity = false;&#13;
        }&#13;
&#13;
        presenter.type = multi ? "checkbox" : "radio";&#13;
        var table = document.createElement('table');&#13;
&#13;
        $(table).addClass('tf_' + presenter.type);&#13;
        $(table).attr("cellspacing", 0).attr("cellpadding", 0);&#13;
        $(view).append(table);&#13;
&#13;
        presenter.generateTableContent(table, view);&#13;
&#13;
        if (!isPreview) {&#13;
            handleClickActions(view);&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
&#13;
            if (presenter.isDisabledByDefault) {&#13;
                presenter.disable();&#13;
            } else {&#13;
                presenter.enable();&#13;
            }&#13;
        }&#13;
&#13;
        if (textParser !== null) { // Actions performed only in Player mode&#13;
            textParser.connectLinks($(view));&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.$view.find('.tf_' + presenter.type + '_image' + ',.tf_' + presenter.type + '_question:not(.first)').each(function(index, element){&#13;
                presenter.keyboardNavigationElements[index] = $(element);&#13;
            });&#13;
&#13;
            presenter.keyboardNavigationElementsLen = presenter.keyboardNavigationElements.length;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setEventBus = function (wrappedEventBus) {&#13;
        eventBus = wrappedEventBus;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        if (model['Speech texts'] === undefined) {&#13;
            model['Speech texts'] = {&#13;
                'Selected': {&#13;
                    'selected': ''&#13;
                },&#13;
&#13;
                'Deselected': {&#13;
                    'deselected': ''&#13;
                },&#13;
&#13;
                'Correct': {&#13;
                    'correct': ''&#13;
                },&#13;
&#13;
                'Incorrect': {&#13;
                    'incorrect': ''&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        presenter.isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.$view = $(view);&#13;
        textParser = new TextParserProxy(playerController.getTextParser());&#13;
&#13;
        presenter.validateModel(model);&#13;
&#13;
        presenter.addonID = model.ID;&#13;
        makeView(view, model, false);&#13;
&#13;
        var events = ['ShowAnswers', 'HideAnswers', 'GradualShowAnswers', 'GradualHideAnswers'];&#13;
&#13;
        if (!eventBus) { return; }&#13;
&#13;
        for (var i = 0; i &lt; events.length; i++) {&#13;
            eventBus.addEventListener(events[i], this);&#13;
        }&#13;
    };&#13;
&#13;
    function isCorrectAnswer(element, values, index) {&#13;
        return values.indexOf(index.toString()) &gt;= 0 &amp;&amp; element.hasClass("down");&#13;
    }&#13;
&#13;
    function isWrongAnswer(element, values, index) {&#13;
        return values.indexOf(index.toString()) &lt; 0 &amp;&amp; element.hasClass("down");&#13;
    }&#13;
&#13;
    function notAllRequiredParameters(questions, possibleChoices) {&#13;
        return !questions[0].Question || possibleChoices.length &lt; 2 || !possibleChoices[0].Choice || !possibleChoices[1].Choice;&#13;
    }&#13;
&#13;
    function getSelectedElements() {&#13;
        var selectedElements = [];&#13;
        var i = 0;&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            selectedElements[i] = $(this).hasClass("down");&#13;
            i++;&#13;
        });&#13;
        return selectedElements;&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.$view = $(view);&#13;
        makeView(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        function getStateBase(selectedElements) {&#13;
            return {&#13;
            selectedElements: selectedElements,&#13;
            isVisible: presenter.isVisible,&#13;
            isDisabled: presenter.isDisabled&#13;
            }&#13;
        }&#13;
&#13;
        var state = {};&#13;
        if (presenter.isShowAnswers()) {&#13;
            state = getStateBase(presenter.currentState); // This is saved on ShowAnswers&#13;
        } else {&#13;
            state = getStateBase(getSelectedElements());&#13;
        }&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var i = 0;&#13;
        var selectedElements;&#13;
        var parsedState = JSON.parse(state);&#13;
        if(typeof parsedState.isVisible !== "undefined"){&#13;
            selectedElements = parsedState.selectedElements;&#13;
            presenter.setVisibility(parsedState.isVisible);&#13;
            presenter.isVisible = parsedState.isVisible;&#13;
        }else{&#13;
            selectedElements = parsedState;&#13;
        }&#13;
&#13;
        presenter.$view.find(".tf_" + presenter.type + "_image").each(function () {&#13;
            if (selectedElements[i] == true) {&#13;
                $(this).addClass("down");&#13;
                $(this).removeClass("up");&#13;
            }&#13;
            i++;&#13;
        });&#13;
&#13;
        //  For backward compatibility in old lessons&#13;
        if (parsedState.isDisabled === undefined) {&#13;
            parsedState.isDisabled = false;&#13;
        }&#13;
&#13;
        if(!presenter.isShowAnswersActive) {&#13;
            if (parsedState.isDisabled) {&#13;
                presenter.disable();&#13;
            } else {&#13;
                presenter.enable();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
        presenter.didUserRespond = true;&#13;
        presenter.printableState = JSON.parse(state);&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        markElements();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        workMode(false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.isGradualShowAnswersActive = false;&#13;
&#13;
        if (presenter.currentState) {&#13;
            delete presenter.currentState;&#13;
        }&#13;
&#13;
        workMode(true);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
&#13;
        if (presenter.isDisabledByDefault) {&#13;
            presenter.disable();&#13;
        } else {&#13;
            presenter.enable();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswers()) {&#13;
            return presenter.currentScore.errorCount;&#13;
        }&#13;
&#13;
        return score().errorCount;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswers()) {&#13;
            return presenter.currentScore.maxScore;&#13;
        }&#13;
&#13;
        return score().maxScore;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (isNotActivity) return 0;&#13;
&#13;
        if (presenter.isShowAnswers()) {&#13;
            return presenter.currentScore.score;&#13;
        }&#13;
&#13;
        return score().score;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isSelected': presenter.isSelectedCommand,&#13;
            'markAsCorrect': presenter.markAsCorrectCommand,&#13;
            'markAsWrong': presenter.markAsWrongCommand,&#13;
            'markAsEmpty': presenter.markAsEmptyCommand,&#13;
            'removeMark': presenter.removeMarkCommand,&#13;
            'isAttempted' : presenter.isAttemptedCommand,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'reset' : presenter.reset,&#13;
            'showAnswers' : presenter.showAnswers,&#13;
            'hideAnswers' : presenter.hideAnswers,&#13;
            'enable' : presenter.enable,&#13;
            'disable' : presenter.disable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isRowOK = function (selectedQuestion) {&#13;
        var correctAnswersLength = 0;&#13;
        var rowAnswers = questions[selectedQuestion - 1].Answer.split(',');&#13;
        var row = presenter.$view.find('#' + selectedQuestion);&#13;
&#13;
        for (var i = 0; i &lt; row.children('.down').length; i++) {&#13;
            var selectedAnswer = $(row.children('.down')[i]).index();&#13;
            var isSelectionCorrect = presenter.isSelectionCorrect(questions[selectedQuestion - 1], parseInt(selectedAnswer, 10));&#13;
            if (isSelectionCorrect) {&#13;
                correctAnswersLength++;&#13;
            }&#13;
        }&#13;
&#13;
        return rowAnswers.length === correctAnswersLength;&#13;
    };&#13;
&#13;
    presenter.isSelected = function (rowIndex, answerIndex) {&#13;
        if (answerIndex &lt; 1) return false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        var el = row.children()[answerIndex];&#13;
        return $(el).hasClass("down");&#13;
    };&#13;
&#13;
&#13;
    presenter.markAsCorrect = function (rowIndex, answerIndex) {&#13;
        if(presenter.isDisabled) return;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
            $(el).addClass("correct");&#13;
         }&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function (rowIndex, answerIndex) {&#13;
        if(presenter.isDisabled) return;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
            $(el).addClass("wrong");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function (rowIndex, answerIndex) {&#13;
        if(presenter.isDisabled) return;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).addClass("disabled");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeMark = function (rowIndex, answerIndex) {&#13;
        if(presenter.isDisabled) return;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var row = presenter.$view.find('#' + rowIndex);&#13;
        if (rowIndex &gt; 0) {&#13;
            var el = row.children()[answerIndex];&#13;
            $(el).removeClass("wrong").removeClass("correct");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (isNotActivity) return true;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var isAttempted = false;&#13;
        for (var rowIndex = 0; rowIndex &lt; questions.length + 1; rowIndex++) {&#13;
            var answerIndex = 0;&#13;
            var row = presenter.$view.find('#' + rowIndex);&#13;
            if (rowIndex &gt; 0) {&#13;
                row.children().each(function () {&#13;
                    if (presenter.isSelected(rowIndex, answerIndex)) {&#13;
                        isAttempted = true;&#13;
                        return false; // break;&#13;
                    }&#13;
                    answerIndex++;&#13;
                    return true;&#13;
                });&#13;
            }&#13;
        }&#13;
        return isAttempted;&#13;
    };&#13;
&#13;
    presenter.isSelectedCommand = function (params) {&#13;
        presenter.isSelected(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.isAttemptedCommand = function () {&#13;
         return presenter.isAttempted();&#13;
    };&#13;
&#13;
    presenter.markAsEmptyCommand = function (params) {&#13;
        presenter.markAsEmpty(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.markAsWrongCommand = function (params) {&#13;
        presenter.markAsWrong(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.removeMarkCommand = function (params) {&#13;
        presenter.removeMark(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.markAsCorrectCommand = function (params) {&#13;
        presenter.markAsCorrect(parseInt(params[0], 10), parseInt(params[1], 10));&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName === "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        } else if (eventName === "GradualShowAnswers") {&#13;
            if (!presenter.isGradualShowAnswersActive) {&#13;
                presenter.currentScore = score();&#13;
                presenter.currentState = getSelectedElements();&#13;
                presenter.isGradualShowAnswersActive = true;&#13;
            }&#13;
            if (data.moduleID === presenter.addonID) {&#13;
                workMode(true);&#13;
                presenter.gradualShowAnswers(parseInt(data.item, 10));&#13;
            }&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.gradualHideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.gradualShowAnswers = function (itemIndex) {&#13;
        presenter.setCorrectAnswers(itemIndex + 1); // don't ask&#13;
    }&#13;
&#13;
    presenter.gradualHideAnswers = function () {&#13;
        presenter.isGradualShowAnswersActive = false;&#13;
        workMode(true);&#13;
&#13;
        var state = JSON.stringify({&#13;
            "selectedElements": presenter.currentState,&#13;
            "isVisible": presenter.isVisible&#13;
        });&#13;
&#13;
        presenter.setState(state);&#13;
&#13;
        delete presenter.currentState;&#13;
    }&#13;
&#13;
    presenter.isShowAnswers = function () {&#13;
        return presenter.isShowAnswersActive || presenter.isGradualShowAnswersActive;&#13;
    }&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        return questions.length;&#13;
    }&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isDisabled = true;&#13;
        presenter.$view.addClass("disabled");&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isDisabled = false;&#13;
        presenter.$view.removeClass("disabled");&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (isNotActivity || presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.currentScore = score();&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.currentState = getSelectedElements();&#13;
        presenter.isErrorMode = false;&#13;
        workMode(true);&#13;
&#13;
        presenter.setCorrectAnswers(questions.length)&#13;
    };&#13;
&#13;
    presenter.setCorrectAnswers = function (length) {&#13;
       for (var i = 1; i &lt; length + 1; i++) {&#13;
            var $row = presenter.$view.find('#' + i);&#13;
            var correctValues = (questions[i - 1].Answer).split(',');&#13;
&#13;
            var trueFalseImages = $row.find(".tf_" + presenter.type + "_image");&#13;
            trueFalseImages.addClass('disabled');&#13;
&#13;
            for (var j = 0; j &lt; correctValues.length; j++) {&#13;
                // empty string split by separator will return array with empty element&#13;
                if (correctValues[j].length &gt; 0) {&#13;
                    var index = parseInt(correctValues[j], 10) + 1;&#13;
                    var $element = $row.find(".tf_" + presenter.type + "_image:nth-child(" + index + ")");&#13;
&#13;
                    $element.addClass('down correct-answer');&#13;
                    $element.removeClass('up');&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (isNotActivity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        workMode(true);&#13;
&#13;
        var state = JSON.stringify({&#13;
            "selectedElements": presenter.currentState,&#13;
            "isVisible": presenter.isVisible&#13;
        });&#13;
&#13;
        presenter.setState(state);&#13;
&#13;
        delete presenter.currentState;&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    function getTextToSpeech () {&#13;
        if (tts) {&#13;
            return tts;&#13;
        }&#13;
&#13;
        tts = playerController.getModule('Text_To_Speech1');&#13;
        return tts;&#13;
    }&#13;
&#13;
    function getActivatedElement () {&#13;
        return presenter.$view.find('.keyboard_navigation_active_element');&#13;
    }&#13;
&#13;
    function getElementIndex(element) {&#13;
        var div = element.parent(),&#13;
            parent = div.parent(),&#13;
            list = parent.find('td');&#13;
&#13;
        return $(list).index(div);&#13;
    }&#13;
&#13;
    function getChoice(index) {&#13;
        var $topRowElement = presenter.$view.find('#0');&#13;
        var $choiceElement = $topRowElement.children().eq(index);&#13;
        return window.TTSUtils.getTextVoiceArrayFromElement($choiceElement,presenter.langAttribute);&#13;
    }&#13;
&#13;
    function readOption(readSelection) {&#13;
        var tts = getTextToSpeech();&#13;
        if (tts) {&#13;
            var $active = getActivatedElement(),&#13;
                elementIndex = getElementIndex($active),&#13;
                choiceArray = getChoice(elementIndex);&#13;
            &#13;
            if ($active.hasClass('tf_' + presenter.type + '_question')) {&#13;
                speak(window.TTSUtils.getTextVoiceArrayFromElement($active,presenter.langAttribute));&#13;
                return;&#13;
            }&#13;
&#13;
            if (!readSelection) {&#13;
                if ($active.parent().hasClass('down')) {&#13;
                    if (presenter.isErrorMode) {&#13;
                        if ($active.parent().hasClass('correct')) {&#13;
                            speak(choiceArray.concat([getTextVoiceObject(selectedSpeechText + " " + correctSpeechText, "")]))&#13;
                        }&#13;
                        if($active.parent().hasClass('wrong')) {&#13;
                            speak(choiceArray.concat([getTextVoiceObject(selectedSpeechText + " " + incorrectSpeechText, "")]))&#13;
                        }&#13;
                    } else {&#13;
                        speak(choiceArray.concat([getTextVoiceObject(selectedSpeechText, "")]))&#13;
                    }&#13;
                } else {&#13;
                    speak(choiceArray);&#13;
                }&#13;
            } else {&#13;
                if ($active.parent().hasClass('down')) {&#13;
                    speak([getTextVoiceObject(selectedSpeechText, "")]);&#13;
                } else {&#13;
                    speak([getTextVoiceObject(deselectedSpeechText, "")]);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = getTextToSpeech();&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        event.preventDefault();&#13;
        presenter.shiftPressed = event.shiftKey;&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ESCAPE: 27,&#13;
            SPACE: 32,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40,&#13;
            TAB: 9&#13;
        };&#13;
&#13;
        function mark_current_element(new_position_index){&#13;
            if (presenter.keyboardNavigationCurrentElement) {&#13;
                if(presenter.keyboardNavigationCurrentElement.find('div').length &gt; 0) {&#13;
                    presenter.keyboardNavigationCurrentElement.find('div').removeClass('keyboard_navigation_active_element');&#13;
                } else {&#13;
                    presenter.keyboardNavigationCurrentElement.removeClass('keyboard_navigation_active_element');&#13;
                }&#13;
            }&#13;
            presenter.keyboardNavigationCurrentElementIndex = new_position_index;&#13;
            presenter.keyboardNavigationCurrentElement = presenter.keyboardNavigationElements[new_position_index];&#13;
            if(presenter.keyboardNavigationCurrentElement.find('div').length &gt; 0) {&#13;
                presenter.keyboardNavigationCurrentElement.find('div').addClass('keyboard_navigation_active_element');&#13;
            } else {&#13;
                presenter.keyboardNavigationCurrentElement.addClass('keyboard_navigation_active_element');&#13;
            }&#13;
        }&#13;
&#13;
        var enter = function (){&#13;
            if (isShiftKeyDown) {&#13;
                if (presenter.keyboardNavigationActive){&#13;
                    escape();&#13;
                    presenter.isKeyboardOpened = false;&#13;
                }&#13;
                return;&#13;
            }&#13;
&#13;
            if (!presenter.keyboardNavigationActive) {&#13;
                presenter.keyboardNavigationActive = true;&#13;
                mark_current_element(0);&#13;
                readOption(false);&#13;
            } else {&#13;
                readOption(false);&#13;
            }&#13;
        };&#13;
&#13;
        function swicht_element(move, checkDirection){&#13;
            var rows = rowIndexed();&#13;
&#13;
            var currentRow = rows.filter(function (row) {&#13;
                return row.start &lt;= presenter.keyboardNavigationCurrentElementIndex &amp;&amp; row.end &gt;= presenter.keyboardNavigationCurrentElementIndex;&#13;
            })[0];&#13;
&#13;
            var new_position_index = presenter.keyboardNavigationCurrentElementIndex + move;&#13;
&#13;
            if(checkDirection &amp;&amp; currentRow &amp;&amp; (new_position_index &lt; currentRow.start || new_position_index &gt; currentRow.end)) {&#13;
                return;&#13;
            }&#13;
&#13;
            if (new_position_index &gt;= presenter.keyboardNavigationElementsLen) {&#13;
                new_position_index = new_position_index - move;&#13;
            } else if (new_position_index &lt; 0) {&#13;
                new_position_index = presenter.keyboardNavigationCurrentElementIndex;&#13;
            }&#13;
            mark_current_element(new_position_index);&#13;
        }&#13;
&#13;
        var next_element = function (){&#13;
            swicht_element(1, true);&#13;
            readOption(false);&#13;
        };&#13;
&#13;
        var previous_element = function (){&#13;
            swicht_element(-1, true);&#13;
            readOption(false);&#13;
        };&#13;
&#13;
        var next_question = function () {&#13;
            swicht_element(possibleChoices.length + 1, false);&#13;
            readOption(false);&#13;
        };&#13;
&#13;
        var previous_question = function () {&#13;
            swicht_element(-(possibleChoices.length + 1), false);&#13;
            readOption(false);&#13;
        };&#13;
&#13;
        var mark = function (){&#13;
            if (presenter.isErrorMode) {&#13;
                return;&#13;
            }&#13;
            presenter.keyboardNavigationCurrentElement.click();&#13;
            readOption(true);&#13;
        };&#13;
&#13;
        var escape = function (){&#13;
            if (!presenter.keyboardNavigationActive){&#13;
                return;&#13;
            }&#13;
            presenter.keyboardNavigationActive = false;&#13;
            presenter.keyboardNavigationCurrentElement.find('div').removeClass('keyboard_navigation_active_element');&#13;
            presenter.keyboardNavigationCurrentElement.removeClass('keyboard_navigation_active_element');&#13;
            presenter.keyboardNavigationCurrentElement = null;&#13;
        };&#13;
&#13;
        function tabHandler() {&#13;
            swicht_element(isShiftKeyDown ? -1 : 1, true);&#13;
            readOption(false);&#13;
        }&#13;
&#13;
        var mapping = {};&#13;
        mapping[keys.ENTER] = enter;&#13;
        mapping[keys.ESCAPE] = escape;&#13;
        mapping[keys.SPACE] = mark;&#13;
        mapping[keys.ARROW_LEFT] = previous_element;&#13;
        mapping[keys.ARROW_UP] = previous_question;&#13;
        mapping[keys.ARROW_RIGHT] = next_element;&#13;
        mapping[keys.ARROW_DOWN] = next_question;&#13;
        mapping[keys.TAB] = tabHandler;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        var model = presenter.upgradeModel(model);&#13;
        var isMulti = model.Multi === 'True';&#13;
        var userAnswers = getUserResponses();&#13;
        var choiceLength = model.Choices.length&#13;
&#13;
        var $view = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $view.attr('id', model.ID);&#13;
        $view.addClass('printable_addon_TrueFalse');&#13;
        $view.css("max-width", model["Width"]+"px");&#13;
        var $table = $("&lt;table&gt;&lt;/table&gt;");&#13;
        var $tbody = $("&lt;tbody&gt;&lt;/tbody&gt;");&#13;
&#13;
        //Header row&#13;
        var $trHead = $("&lt;tr&gt;&lt;/tr&gt;");&#13;
        $trHead.append("&lt;td&gt;&lt;/td&gt;");&#13;
        for (var i = 0; i &lt; choiceLength; i++) {&#13;
            var choice = model.Choices[i];&#13;
            var $td = $("&lt;td&gt;&lt;/td&gt;");&#13;
            $td.html(choice.Choice);&#13;
            if (isMulti &amp;&amp; showAnswers &amp;&amp; presenter.didUserRespond) {&#13;
                $td.attr('colspan', '2');&#13;
            } else if (!isMulti &amp;&amp; showAnswers &amp;&amp; presenter.didUserRespond &amp;&amp; i === (choiceLength - 1)) {&#13;
                $td.attr('colspan', '2');&#13;
            }&#13;
            $trHead.append($td);&#13;
        }&#13;
        $tbody.append($trHead);&#13;
&#13;
        //Question rows&#13;
        for (var i = 0; i &lt; model.Questions.length; i++) {&#13;
            var question = model.Questions[i];&#13;
            var $tr = $("&lt;tr&gt;&lt;/tr&gt;");&#13;
&#13;
            var $questionCell = $("&lt;td&gt;&lt;/td&gt;");&#13;
            $questionCell.html(window.TTSUtils.parsePreviewAltText(question.Question));&#13;
            $tr.append($questionCell);&#13;
&#13;
            var answers = [];&#13;
            if (showAnswers) answers = question.Answer.split(',');&#13;
            var boxType = isMulti ? "checkbox" : "radio";&#13;
&#13;
            for (var j = 0; j &lt; choiceLength; j++) {&#13;
                var $td = $("&lt;td&gt;&lt;/td&gt;");&#13;
&#13;
                $td.addClass(`${boxType}-container`);&#13;
                $td.addClass(`${boxType}-${i+1}-${j+1}`);&#13;
                var $inputDiv = $("&lt;div&gt;&lt;/div&gt;");&#13;
                $inputDiv.addClass("placeholder");&#13;
                $td.append($inputDiv);&#13;
                var $checkbox = $("&lt;input type=\"checkbox\"&gt;");&#13;
                var userAnswerIndex = i * choiceLength + j;&#13;
                var $checkboxSpan = $("&lt;span&gt;&lt;/span&gt;");&#13;
&#13;
                if (presenter.didUserRespond &amp;&amp; userAnswers[userAnswerIndex]) {&#13;
                    $checkbox.attr("checked", "checked");&#13;
                    $checkboxSpan.css('background', 'black');&#13;
                } else if (showAnswers &amp;&amp; answers.indexOf((j+1).toString()) != -1 &amp;&amp; !presenter.didUserRespond) {&#13;
                    $checkbox.attr("checked", "checked");&#13;
                    $checkboxSpan.css('background', 'darkgray');&#13;
                }&#13;
&#13;
                $td.append($checkbox);&#13;
&#13;
                $td.append($checkboxSpan);&#13;
                $tr.append($td);&#13;
&#13;
                if (showAnswers &amp;&amp; isMulti &amp;&amp; userAnswers[userAnswerIndex]) {&#13;
                    var $markCell = $("&lt;td&gt;&lt;/td&gt;");&#13;
                    var $markDiv = $("&lt;div&gt;&lt;/div&gt;");&#13;
                    isAnswerCorrect(answers, userAnswers, i, j, choiceLength) ? $markDiv.addClass("correctAnswerMark") : $markDiv.addClass("incorrectAnswerMark");&#13;
                    $markCell.append($markDiv);&#13;
                    $tr.append($markCell);&#13;
                } else if (showAnswers &amp;&amp; presenter.didUserRespond &amp;&amp; isMulti) {&#13;
                    addCell(answers, userAnswers, $tr, i, choiceLength);&#13;
                }&#13;
            }&#13;
            if (showAnswers &amp;&amp; !isMulti &amp;&amp; didUserRespondOnQuestion(userAnswers, i, choiceLength)) {&#13;
                addCell(answers, userAnswers, $tr, i, choiceLength, true);&#13;
            }&#13;
            $tbody.append($tr);&#13;
        }&#13;
&#13;
        $table.append($tbody);&#13;
        $view.append($table);&#13;
        return $view[0].outerHTML;&#13;
    };&#13;
&#13;
    presenter.getScoreWithMetadata = function() {&#13;
        var scores = [];&#13;
        var allAnswers = [];&#13;
        var selectedElements = getSelectedElements();&#13;
        for (var i = 0; i &lt; possibleChoices.length; i++) {&#13;
            allAnswers.push(possibleChoices[i].Choice.trim());&#13;
        }&#13;
        for (var i = 0; i &lt; questions.length; i++) {&#13;
            var score = {&#13;
                userAnswer: "",&#13;
                allAnswers: allAnswers,&#13;
                isCorrect: false,&#13;
            };&#13;
            var correctAnswers = questions[i].Answer.split(',');&#13;
            firstChoiceIndex = i * possibleChoices.length;&#13;
            for (var j = 0; j &lt; possibleChoices.length; j++) {&#13;
                if (selectedElements[firstChoiceIndex + j]) {&#13;
                    score.userAnswer = allAnswers[j];&#13;
                    if (correctAnswers.indexOf((j + 1) + "") != -1) {&#13;
                        score.isCorrect = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
            scores.push(score);&#13;
        }&#13;
        return scores;&#13;
    }&#13;
&#13;
    function getUserResponses() {&#13;
        if (presenter.printableState &amp;&amp; presenter.printableState.hasOwnProperty('selectedElements')) {&#13;
            return presenter.printableState['selectedElements']&#13;
        }&#13;
        return [];&#13;
    }&#13;
&#13;
    function addCell(answers, userAnswers, $tableRow, i, choiceLength, shouldAddMark = false) {&#13;
        var $td = $("&lt;td&gt;&lt;/td&gt;");&#13;
        var $markDiv = $("&lt;div&gt;&lt;/div&gt;");&#13;
        if (shouldAddMark) {&#13;
            areAnswersCorrect(answers, userAnswers, i, choiceLength) ? $markDiv.addClass("correctAnswerMark")&#13;
                : $markDiv.addClass("incorrectAnswerMark");&#13;
        }&#13;
        $td.append($markDiv);&#13;
        $tableRow.append($td);&#13;
    }&#13;
&#13;
    function didUserRespondOnQuestion(userAnswers, i, choiceLength) {&#13;
        return userAnswers.slice(i * choiceLength, (i + 1) * choiceLength).some(answer =&gt; answer);&#13;
    }&#13;
&#13;
    function areAnswersCorrect(correctAnswer, userAnswer, i, choiceLength) {&#13;
        var areCorrect = false;&#13;
        correctAnswer.forEach(answer =&gt; {&#13;
            var index = +answer - 1;&#13;
            if (userAnswer[i * choiceLength + index]) {&#13;
                areCorrect = true;&#13;
            }&#13;
        });&#13;
        return areCorrect;&#13;
    }&#13;
&#13;
    function isAnswerCorrect(correctAnswers, userAnswer, i, j, choiceLength) {&#13;
        return correctAnswers.indexOf((j + 1).toString()) !== -1 &amp;&amp; userAnswer[i * choiceLength + j];&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>