<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Score_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Display Mode" name="DisplayMode" nameLabel="Page_Score_Counter_property_display_mode" type="{Fraction (Score/Max Score),Score,Max Score}"/>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
    </model>
<css>.addon_Page_Score_Counter {&#13;
    color: green;&#13;
}&#13;
&#13;
.page-score-counter-wrapper &gt; div.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.page-score-counter-wrapper &gt; div {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_page-score-counter-wrapper &gt; div {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.page-score-counter-wrapper .fraction &gt; div {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
&#13;
.printable_page-score-counter-wrapper .printable_fraction &gt; div {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
</css><view>&lt;div class="page-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction"&gt;&#13;
        &lt;div class="score"&gt;&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="page-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            6&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            13&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        6&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        13&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Score_Counter_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.printableController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.isVisible = true;&#13;
    presenter.isScoreVisible = false;&#13;
    presenter.currentScore = 0;&#13;
    presenter.maxScore = 0;&#13;
    presenter.printableState = null;&#13;
    presenter.printableStateMode = null;&#13;
&#13;
    presenter.DISPLAY_MODE = {&#13;
        FRACTION: 1,&#13;
        SCORE: 2,&#13;
        MAX_SCORE: 3&#13;
    };&#13;
&#13;
    presenter.PRINTABLE_STATE_MODE = {&#13;
        EMPTY: 0,&#13;
        SHOW_RESULTS: 1&#13;
    };&#13;
&#13;
    presenter.CSS_CLASSES = {&#13;
        PRINTABLE_ADDON: "printable_addon_Page_Score_Counter",&#13;
        PRINTABLE_WRAPPER: "printable_page-score-counter-wrapper",&#13;
        PRINTABLE_FRACTION: "printable_fraction",&#13;
        PRINTABLE_SCORE: "printable_score",&#13;
        PRINTABLE_SEPARATOR: "printable_separator",&#13;
        PRINTABLE_MAX_SCORE: "printable_max-score"&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
&#13;
        var presentation = presenter.playerController.getPresentation();&#13;
        presenter.page = presentation.getPage(presenter.playerController.getCurrentPageIndex());&#13;
    };&#13;
&#13;
    presenter.setPrintableController = function (controller) {&#13;
        presenter.printableController = controller;&#13;
    };&#13;
&#13;
    presenter.createEventData = function (score) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': 'pageScore',&#13;
            'value' : '',&#13;
            'score': score&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model['ID'],&#13;
            'displayMode' : getDisplayMode(model['DisplayMode'])&#13;
        }&#13;
    };&#13;
&#13;
    function getDisplayMode(rawDisplayMode) {&#13;
        if (rawDisplayMode == 'Fraction (Score/Max Score)' || rawDisplayMode == '') { // when dropdown hasn't been changed it gives you empty string&#13;
            return presenter.DISPLAY_MODE.FRACTION;&#13;
        } else if (rawDisplayMode == 'Score'){&#13;
            return presenter.DISPLAY_MODE.SCORE;&#13;
        } else if (rawDisplayMode == 'Max Score') {&#13;
            return presenter.DISPLAY_MODE.MAX_SCORE;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.attachEventHandler = function () {&#13;
        if (presenter.page.isReportable()) {&#13;
            presenter.eventBus.addEventListener('ValueChanged', this);&#13;
            presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        presenter.isPreview = isPreview;&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        presenter.$fractionWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .fraction');&#13;
        presenter.$scoreWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .score');&#13;
        presenter.$maxScoreWrapper = presenter.$view.find('.page-score-counter-wrapper &gt; .max-score');&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.attachEventHandler();&#13;
        } else {&#13;
            toggleBoxesVisibility();&#13;
        }&#13;
    }&#13;
&#13;
    function toggleBoxesVisibility() {&#13;
        if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION) {&#13;
            toggleBoxVisibility(presenter.$fractionWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE) {&#13;
            toggleBoxVisibility(presenter.$scoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE) {&#13;
            toggleBoxVisibility(presenter.$maxScoreWrapper);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "ValueChanged" &amp;&amp; eventData.source != presenter.configuration.addonID) {&#13;
            if(eventData.item != 'pageScore'){&#13;
                presenter.countScore();&#13;
                updateView();&#13;
                presenter.sendEvent('ValueChanged', presenter.createEventData(presenter.currentScore));&#13;
            }&#13;
        }&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.countScore();&#13;
            updateView();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.countScore = function () {&#13;
        var scoreService = presenter.playerController.getScore(),&#13;
            pageScore = scoreService.getPageScoreById(presenter.page.getId());&#13;
&#13;
        presenter.currentScore = pageScore.score;&#13;
        presenter.maxScore = pageScore.maxScore;&#13;
    };&#13;
&#13;
    function updateView() {&#13;
        if (!presenter.isScoreVisible) {&#13;
            toggleBoxesVisibility();&#13;
            presenter.isScoreVisible = true;&#13;
        }&#13;
&#13;
        presenter.$fractionWrapper.find('.score').html(presenter.currentScore);&#13;
        presenter.$fractionWrapper.find('.max-score').html(presenter.maxScore);&#13;
        presenter.$scoreWrapper.html(presenter.currentScore);&#13;
        presenter.$maxScoreWrapper.html(presenter.maxScore);&#13;
    }&#13;
&#13;
    function toggleBoxVisibility($element) {&#13;
        presenter.$view.find('.page-score-counter-wrapper &gt; div').addClass('hidden');&#13;
        $element.removeClass('hidden');&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
       runLogic(view, model, false);&#13;
&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION){&#13;
            presenter.$fractionWrapper.find('.score').text('0');&#13;
            presenter.$fractionWrapper.find('.max-score').html('0');&#13;
        }&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE){&#13;
            presenter.$scoreWrapper.text('0');&#13;
            presenter.$scoreWrapper.removeClass('hidden');&#13;
            presenter.$view.find('.separator').css('display', 'none');&#13;
        }&#13;
        if(presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE){&#13;
            presenter.$maxScoreWrapper.text('0');&#13;
            presenter.$maxScoreWrapper.removeClass('hidden');&#13;
            presenter.$view.find('.separator').css('display', 'none');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.currentScore = 0;&#13;
        updateView();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'getPageScore' : presenter.getPageScore,&#13;
            'getPageMaxScore' : presenter.getPageMaxScore&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getPageScore = function() {&#13;
        return presenter.currentScore;&#13;
    };&#13;
&#13;
    presenter.getPageMaxScore = function() {&#13;
        return presenter.maxScore;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.isVisible,&#13;
            'isScoreVisible': presenter.isScoreVisible,&#13;
            'score' : presenter.currentScore,&#13;
            'maxScore' : presenter.maxScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.currentScore = parsedState.score;&#13;
        presenter.maxScore = parsedState.maxScore;&#13;
&#13;
        if (parsedState.isScoreVisible) {&#13;
            updateView();&#13;
        }&#13;
&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
        presenter.printableState = JSON.parse(state);&#13;
    };&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        chosePrintableStateMode(showAnswers);&#13;
        const configuration = presenter.validateModel(model);&#13;
&#13;
        const view = createPrintableBaseView(model);&#13;
        const wrapper = createPrintableWrapper();&#13;
        view.append(wrapper);&#13;
&#13;
        switch (configuration.displayMode) {&#13;
            case presenter.DISPLAY_MODE.FRACTION:&#13;
                wrapper.append(createPrintableFraction());&#13;
                break;&#13;
            case presenter.DISPLAY_MODE.SCORE:&#13;
                wrapper.append(createPrintableScore());&#13;
                break;&#13;
            case presenter.DISPLAY_MODE.MAX_SCORE:&#13;
                wrapper.append(createPrintableMaxScore());&#13;
                break;&#13;
        }&#13;
&#13;
        presenter.printableStateMode = null;&#13;
        return view.outerHTML;&#13;
    };&#13;
&#13;
    function chosePrintableStateMode(showAnswers) {&#13;
        if (presenter.printableState &amp;&amp; showAnswers) {&#13;
            presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_RESULTS;&#13;
        } else {&#13;
            presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
        }&#13;
    }&#13;
&#13;
    function isInPrintableShowResultsStateMode() {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_RESULTS;&#13;
    }&#13;
&#13;
    function createPrintableBaseView(model) {&#13;
        const element = document.createElement("div");&#13;
        element.id = model.ID;&#13;
        element.classList.add(presenter.CSS_CLASSES.PRINTABLE_ADDON);&#13;
        return element;&#13;
    }&#13;
&#13;
    function createPrintableWrapper() {&#13;
        const wrapper = document.createElement("div");&#13;
        wrapper.classList.add(presenter.CSS_CLASSES.PRINTABLE_WRAPPER);&#13;
        return wrapper;&#13;
    }&#13;
&#13;
    function createPrintableFraction() {&#13;
        const element = document.createElement("div");&#13;
        element.classList.add(presenter.CSS_CLASSES.PRINTABLE_FRACTION);&#13;
        element.append(createPrintableScore());&#13;
        element.append(createPrintableSeparator());&#13;
        element.append(createPrintableMaxScore());&#13;
        return element;&#13;
    }&#13;
&#13;
    function createPrintableScore() {&#13;
        const element = document.createElement("div");&#13;
        element.classList.add(presenter.CSS_CLASSES.PRINTABLE_SCORE);&#13;
        element.innerHTML = isInPrintableShowResultsStateMode()&#13;
            ? "" + presenter.printableState.score&#13;
            : "&amp;nbsp;";&#13;
        return element;&#13;
    }&#13;
&#13;
    function createPrintableSeparator() {&#13;
        const element = document.createElement("div");&#13;
        element.classList.add(presenter.CSS_CLASSES.PRINTABLE_SEPARATOR);&#13;
        element.innerText = "/";&#13;
        return element;&#13;
    }&#13;
&#13;
    function createPrintableMaxScore() {&#13;
        const element = document.createElement("div");&#13;
        element.classList.add(presenter.CSS_CLASSES.PRINTABLE_MAX_SCORE);&#13;
        element.innerText = presenter.printableController.getPageMaxScore();&#13;
        return element;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>