<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PieChart" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isDefault="true" name="Items" nameLabel="PieChart_property_items" type="list">
            <property name="Name" nameLabel="PieChart_property_name" type="string"/>
            <property name="Color" nameLabel="PieChart_property_color" type="string"/>
            <property name="Starting percent" nameLabel="PieChart_property_starting_percent" type="string"/>
            <property name="Answer" nameLabel="PieChart_property_answer" type="string"/>
        </property>
        <property name="Step" nameLabel="PieChart_property_step" type="string"/>
        <property name="Show values" nameLabel="PieChart_property_show_values" type="boolean"/>
        <property name="Show names" nameLabel="PieChart_property_show_names" type="boolean"/>
        <property name="Is Activity" nameLabel="PieChart_property_is_activity" type="boolean"/>
        <property name="Is Disabled" nameLabel="PieChart_property_is_disabled" type="boolean"/>
        <property displayName="Radius size" name="Radius" nameLabel="PieChart_property_radius" type="string"/>
		<property displayName="Percents positions" name="Percents" nameLabel="PieChart_property_percents" type="string"/>
    </model>
<css>.addon_PieChart{&#13;
    -ms-touch-action: none;&#13;
}&#13;
.piechart {&#13;
    border: 3px solid #ccc;&#13;
    float: left;&#13;
}&#13;
.disabled {&#13;
    opacity: 0.5;&#13;
}&#13;
.correct {&#13;
    border: 3px solid green;&#13;
}&#13;
.wrong {&#13;
    border: 3px solid red;&#13;
}&#13;
.graph {&#13;
    stroke: #000;&#13;
    stroke-width: 2px;&#13;
    fill-opacity: 0;&#13;
}&#13;
.line {&#13;
    stroke-width: 20px;&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0;&#13;
}&#13;
.item {&#13;
    fill: red;&#13;
    background: red;&#13;
}&#13;
.item1 {&#13;
    fill: #ffaaff;&#13;
    background: #ffaaff;&#13;
}&#13;
.item2 {&#13;
    fill: #ffaaaa;&#13;
    background: #ffaaaa;&#13;
}&#13;
.item3 {&#13;
    fill: #00aaaa;&#13;
    background: #00aaaa;&#13;
}&#13;
.legend {&#13;
    border:1px solid #000;&#13;
    padding: 5px;&#13;
    float: left;&#13;
    margin: 10px;&#13;
}&#13;
.legendItem {&#13;
    padding-bottom:2px;&#13;
}&#13;
.legendSquare {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin-right: 10px;&#13;
    display: inline-block;&#13;
}&#13;
.legendText {&#13;
    display: inline;&#13;
}&#13;
.percentsValues{&#13;
    fill: blue;&#13;
}&#13;
</css><view>&lt;div class="piechart"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="piechart"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonPieChart_create(){&#13;
    var presenter = function(){};&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    var i, ii, j, tmp1, tmp2, tmp3, tmp4;&#13;
    presenter.move = false;&#13;
    presenter.isMoved = false;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.isLineInMove = false;&#13;
    presenter.ERROR_CODES = {&#13;
        'WrongStep' : 'The step is wrong!',&#13;
        'WrongStart' : 'Wrong starting data!',&#13;
        'WrongAnswer' : 'Wrong answers!',&#13;
        'WrongName' : 'Define the names!',&#13;
        'WrongColor' : 'Wrong color!',&#13;
        'WrongSize' : 'Wrong Radius size, choose a number beetween 0 and 1!',&#13;
        'WrongPosition' : 'Wrong Percents positions, choose a number beetween 0 and 1!'&#13;
    };&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isOK'.toLowerCase():&#13;
                presenter.isOK(params[0]);&#13;
                break;&#13;
            case 'getPercent'.toLowerCase():&#13;
                presenter.getPercent(params[0]);&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!presenter.activity || presenter.isMoved) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.isOK = function(item) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.activity &amp;&amp; presenter.currentPercents[item-1] == presenter.items[item-1]['Answer']) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
    presenter.getPercent = function(item) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return presenter.currentPercents[item-1];&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        (presenter.isVisible) ?	presenter.show() : presenter.hide();&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = true;&#13;
        presenter.$view.find('.piechart').addClass('disabled');&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.piechart').removeClass('disabled');&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : '',&#13;
            value : '',&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerLineEvent = function(line, state, score) {&#13;
        var eventData = presenter.createEventData(line, state, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    presenter.validateColor = function(colour){&#13;
        if (colour === '#28e32a') {&#13;
            return true;&#13;
        }&#13;
        var rgb = $('&lt;div style="color:#28e32a"&gt;');&#13;
        var valid_rgb = "rgb(40, 227, 42)";&#13;
        rgb.css("color", colour);&#13;
        if(rgb.css('color') == valid_rgb &amp;&amp; colour != ':#28e32a' &amp;&amp; colour.replace(/ /g,"") != valid_rgb.replace(/ /g,"") &amp;&amp; colour !== '') {&#13;
            return false;&#13;
        } else {&#13;
            return true;&#13;
        }&#13;
    };&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.piechart = presenter.$view.find('.piechart');&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is Activity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['Is Disabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        if (presenter.disabled) presenter.disable();&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.values = ModelValidationUtils.validateBoolean(presenter.model['Show values']);&#13;
        presenter.names = ModelValidationUtils.validateBoolean(presenter.model['Show names']);&#13;
        presenter.step = presenter.model['Step'];&#13;
        presenter.items = presenter.model['Items'];&#13;
        presenter.radiusSize = presenter.model['Radius'];&#13;
        presenter.percentsPosition = presenter.model['Percents'];&#13;
        presenter.numberOfItems = presenter.items.length;&#13;
        tmp1 = 0;&#13;
        tmp2 = 0;&#13;
        if (presenter.radiusSize === '' &amp;&amp; presenter.values) {&#13;
            presenter.radiusSize = 0.7;&#13;
        } else if (presenter.radiusSize === '') {&#13;
            presenter.radiusSize = 1;&#13;
        } else if (isNaN(presenter.radiusSize) || presenter.radiusSize &lt;= 0 ||	presenter.radiusSize &gt; 1) {&#13;
            presenter.error = 'WrongSize';&#13;
            return false;&#13;
        }&#13;
        if (presenter.percentsPosition == '') {&#13;
            presenter.percentsPosition = 0.85;&#13;
        } else if (isNaN(presenter.percentsPosition) || presenter.percentsPosition &lt;= 0 ||	presenter.percentsPosition &gt; 1) {&#13;
            presenter.error = 'WrongPosition';&#13;
            return false;&#13;
        }&#13;
        (presenter.step == '') ? (presenter.step = parseFloat(1)) : (presenter.step = parseFloat(presenter.step));&#13;
        if (presenter.step &lt; 0 || presenter.step &gt;=100 || isNaN(presenter.step)) {&#13;
            presenter.error = 'WrongStep';&#13;
            return false;&#13;
        }&#13;
        presenter.startingLines = new Array(presenter.numberOfItems);&#13;
        presenter.angles = new Array(presenter.numberOfItems);&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (!presenter.validateColor(presenter.items[i]['Color'])) {&#13;
                presenter.error = 'WrongColor';&#13;
                return false;&#13;
            }&#13;
            if (isNaN(presenter.items[i]['Starting percent']) || presenter.items[i]['Starting percent'] === '') {&#13;
                presenter.error = 'WrongStart';&#13;
                return false;&#13;
            }&#13;
            if (isNaN(presenter.items[i]['Answer']) || (presenter.activity &amp;&amp; presenter.items[i]['Starting percent'] === '')) {&#13;
                presenter.error = 'WrongAnswer';&#13;
                return false;&#13;
            }&#13;
            if (presenter.names &amp;&amp; presenter.items[i]['Name'] === '') {&#13;
                presenter.error = 'WrongName';&#13;
                return false;&#13;
            }&#13;
            tmp1 += parseFloat(presenter.items[i]['Starting percent']);&#13;
            tmp2 += parseFloat(presenter.items[i]['Answer']);&#13;
            if((Math.abs(presenter.items[i]['Starting percent'] - presenter.items[i]['Answer']) % presenter.step) !== 0 &amp;&amp; presenter.activity) {&#13;
                presenter.error = 'WrongStep';&#13;
                return false;&#13;
            }&#13;
        }&#13;
        if (tmp1 !== 100) {&#13;
            presenter.error = 'WrongStart';&#13;
            return false;&#13;
        }&#13;
        if (tmp2 !== 100 &amp;&amp; presenter.activity) {&#13;
            presenter.error = 'WrongAnswer';&#13;
            return false;&#13;
        }&#13;
        return true;&#13;
    };&#13;
    presenter.drawGraph = function(type) {&#13;
        var wrapper = presenter.piechart.parent();&#13;
        var graphSize = Math.min(wrapper.width(),wrapper.height());&#13;
        presenter.center = Math.floor(graphSize / 2);&#13;
        presenter.radius = presenter.center * presenter.radiusSize-5;&#13;
        presenter.piechart.css({'width' : graphSize, 'height' : graphSize});&#13;
        var x1, x2, y1, y2, x3, y3, angle, angle2, lines, percents;&#13;
        var $svg = '&lt;svg height="'+graphSize+'" width="'+graphSize+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="chart'&#13;
        if (type == 'showAnswers') $svg += '-show-answers';&#13;
        $svg += '"&gt;';&#13;
        angle = 0;&#13;
        lines = '';&#13;
        percents = '';&#13;
        var parameter;&#13;
        if (type != 'showAnswers') {&#13;
            presenter.currentPercents = new Array(presenter.numberOfItems);&#13;
            presenter.startingItems = new Array(presenter.numberOfItems);&#13;
        }&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (type == 'showAnswers') {&#13;
                parameter = parseFloat(presenter.items[i]['Answer']);&#13;
            } else {&#13;
                parameter = parseFloat(presenter.items[i]['Starting percent']);&#13;
            }&#13;
            x1 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y1 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            angle2 = angle + 0.5*(parameter)/50 * Math.PI;&#13;
            angle += (parameter)/50 * Math.PI;&#13;
            x2 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y2 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            x3 = parseFloat(presenter.center + Math.sin(angle2)*(presenter.center * presenter.percentsPosition));&#13;
            y3 = parseFloat(presenter.center - Math.cos(angle2)*(presenter.center * presenter.percentsPosition));&#13;
            $svg += '&lt;path id="item'+(i+1)+'" class="item item'+(i+1)+'" d="';&#13;
            ItemData = 'M '+presenter.center+' '+presenter.center+' L '+x1+' '+y1+' A '+presenter.radius+' '+presenter.radius+' 0 ';&#13;
            ((parameter) &gt; 50) ? (ItemData += '1') : (ItemData += '0');&#13;
            ItemData += ' 1 '+x2+' '+y2+' L '+presenter.center+' '+presenter.center+' Z';&#13;
            if (type != 'showAnswers') presenter.startingItems[i] = ItemData;&#13;
            $svg += ItemData + '" stroke-width="0"';&#13;
            if (presenter.items[i]['Color'] !== '') {&#13;
                $svg += 'style="fill: '+presenter.items[i]['Color']+';"';&#13;
            }&#13;
            $svg += '&gt;&lt;/path&gt;';&#13;
            if (type != 'showAnswers')&#13;
                presenter.currentPercents[i] = (parameter);&#13;
            if (presenter.values) {&#13;
                percents += presenter.drawPercent(i,x3,y3,parameter);&#13;
            }&#13;
            if (type != 'showAnswers') {&#13;
                presenter.angles[i] = ((angle/Math.PI*180-180)+360)%360;&#13;
                presenter.startingLines[i] = presenter.angles[i];&#13;
            }&#13;
            lines += '&lt;rect id="'+(i+1)+'" class ="line" height="'+presenter.radius+'" width="2" y="'+presenter.center+'" x="'+(presenter.center-1)+'" transform="rotate('+ (((angle/Math.PI*180-180)+360)%360) +', '+presenter.center+', '+presenter.center+')"&gt;&lt;/rect&gt;';&#13;
        }&#13;
        $svg += '&lt;circle class="graph';&#13;
        $svg += '" r="'+presenter.radius+'" cy="'+presenter.center+'" cx="'+presenter.center+'"&gt;&lt;/circle&gt;';&#13;
        $svg += lines;&#13;
        $svg += percents;&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.piechart.prepend($svg);&#13;
    };&#13;
    presenter.drawPercent = function(i,x,y,value) {&#13;
        var tmp = '&lt;text id="Text'+(i+1)+'" class="percentsValues" x="'+x+'" y="'+y+'" text-anchor="middle"&gt;'+value+'%&lt;/text&gt;';&#13;
        return tmp;&#13;
    };&#13;
    presenter.drawLegend = function() {&#13;
        var $legend = '&lt;div class = "legend"&gt;', colorItem = '';&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            if (presenter.items[i]['Color'] !== '') {&#13;
                colorItem = 'style="background: '+presenter.items[i]['Color']+';"';&#13;
            }&#13;
            $legend += '&lt;div class="legendItem"&gt;&lt;div class="legendSquare item'+(i+1)+' item"'+colorItem+'&gt;&lt;/div&gt;&lt;div class="legendText"&gt;'+ presenter.items[i]['Name']+'&lt;/div&gt;&lt;/div&gt;';&#13;
            colorItem = '';&#13;
        }&#13;
        $legend += '&lt;/div';&#13;
        presenter.$view.find('.piechart').parent().append($legend);&#13;
    };&#13;
    presenter.run = function(view, model){&#13;
        var x, y, angle, k, angle2, percent, angleTmp, previousItem, nextItem;&#13;
        if (!presenter.initiate(view, model)) {&#13;
            presenter.piechart.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return false;&#13;
        }&#13;
        presenter.updateVisibility();&#13;
        var Width = presenter.piechart.width();&#13;
        var Height = presenter.piechart.height();&#13;
        presenter.drawGraph();&#13;
        if (presenter.names) {&#13;
            presenter.drawLegend();&#13;
        }&#13;
        presenter.$view.find('.line')&#13;
            .mousedown(function(e) {&#13;
                e.stopImmediatePropagation();&#13;
                e.preventDefault();&#13;
                i = parseInt($(this).attr('id'),10);&#13;
                e.stopPropagation();&#13;
                presenter.isLineInMove = true;&#13;
            });&#13;
        presenter.$view&#13;
            .click(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mouseup(function(e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mouseleave(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                    if (!presenter.activity) score ='';&#13;
                    presenter.triggerLineEvent(score);&#13;
                }&#13;
                presenter.isLineInMove = false;&#13;
            })&#13;
            .mousemove(function(e) {&#13;
                e.preventDefault();&#13;
                e.stopPropagation();&#13;
                if (presenter.isLineInMove 	&amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isMoved = true;&#13;
                    x = e.originalEvent.pageX - presenter.piechart.offset().left - presenter.center;&#13;
                    y = presenter.piechart.offset().top - e.originalEvent.pageY + presenter.center;&#13;
                    //	alert("x: "+x+"   y:"+y);&#13;
                    for (k = 1; k &lt;= presenter.numberOfItems; k++) {&#13;
                        if (presenter.currentPercents[k-1] === 100) {&#13;
                            i = k;&#13;
                        }&#13;
                    }&#13;
                    presenter.doTheMove(i,x,y);&#13;
                }&#13;
            });&#13;
        presenter.$view.find('.line').on('touchstart', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            i = parseInt($(this).attr('id'),10);&#13;
            presenter.isLineInMove = true;&#13;
        });&#13;
        presenter.$view.find('.piechart').on('touchend', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.isLineInMove &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                if (!presenter.activity) score ='';&#13;
                presenter.triggerLineEvent(score);&#13;
            }&#13;
            presenter.isLineInMove = false;&#13;
        });&#13;
        presenter.$view.find('.piechart').on('touchmove', function (e) {&#13;
            var scale = presenter.playerController.getScaleInformation();&#13;
            var center_scaled = presenter.center * scale.scaleX;&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            x = (parseInt(e.originalEvent.touches[0].pageX, 10) / scale.scaleX - presenter.piechart.offset().left / scale.scaleX - presenter.center);&#13;
            y = (presenter.piechart.offset().top / scale.scaleY - parseInt(e.originalEvent.touches[0].pageY, 10) / scale.scaleY + presenter.center);&#13;
            if (presenter.isLineInMove &amp;&amp; (x &lt; -center_scaled || y &lt; -center_scaled || x &gt; center_scaled || y &gt; center_scaled) &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isLineInMove = false;&#13;
                (presenter.isAllOK()) ? (score=1) : (score=0);&#13;
                if (!presenter.activity) score ='';&#13;
                presenter.triggerLineEvent(score);&#13;
            }&#13;
            if (presenter.isLineInMove 	&amp;&amp; !presenter.disabled &amp;&amp; !presenter.isErrorCheckingMode &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                presenter.isMoved = true;&#13;
                for (k = 1; k &lt;= presenter.numberOfItems; k++) {&#13;
                    if (presenter.currentPercents[k-1] === 100) {&#13;
                        i = k;&#13;
                    }&#13;
                }&#13;
                presenter.doTheMove(i,x,y);&#13;
            }&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
    presenter.doTheMove = function(i,x,y) {&#13;
        var scale = presenter.playerController.getScaleInformation();&#13;
        var angle, angle2, angleTmp, previousItem, nextItem, smallerAngle, isAcute, greaterAngle, isAcTwo;&#13;
&#13;
        if (i === presenter.numberOfItems) {&#13;
            nextItem = 1;&#13;
        } else {&#13;
            nextItem = i+1;&#13;
        }&#13;
        if (i === 1) {&#13;
            previousItem = presenter.numberOfItems;&#13;
        } else {&#13;
            previousItem = i-1;&#13;
        }&#13;
        angle = Math.atan((x)/(y))*180/Math.PI;&#13;
        if (y &gt;= 0) {&#13;
            angle = 180 + angle;&#13;
        }&#13;
        presenter.move = false;&#13;
        angle = (angle + 360) % 360;&#13;
        smallerAngle = (presenter.angles[i-1] + presenter.step * (1/scale.scaleX)/100*360 + 1)%360 - 1 ;&#13;
        isAcute = (angle - presenter.angles[i-1] +360)%360;&#13;
        greaterAngle = (presenter.angles[i-1] - presenter.step * (1/scale.scaleX)/100*360 + 359) % 360+1 ;&#13;
        isAcTwo = (presenter.angles[i-1] -angle + 360)%360;&#13;
        if (isAcute &lt; 90 &amp;&amp; ((angle &gt;= smallerAngle ) || angle &lt;= greaterAngle)){&#13;
            angle = presenter.angles[i-1] + presenter.step/100*360;&#13;
            presenter.move = 'plus';&#13;
        } else if ((isAcTwo &lt; 90) &amp;&amp; ((angle &gt;= smallerAngle ) || angle &lt;= greaterAngle)){&#13;
            angle = presenter.angles[i-1] - presenter.step/100*360;&#13;
            presenter.move = 'minus';&#13;
        }&#13;
        angle = (angle + 360) % 360;&#13;
        if ((presenter.move == 'plus' &amp;&amp; presenter.currentPercents[nextItem-1]-presenter.step &lt; 0) || (presenter.move == 'minus' &amp;&amp; presenter.currentPercents[i-1]-presenter.step &lt; 0)) {&#13;
            presenter.move = false;&#13;
        }&#13;
        if (presenter.move !== false) {&#13;
            angle = (angle + 360) % 360;&#13;
            presenter.$view.find('#'+i).attr("transform", "rotate(" + angle + ", "+presenter.center+", "+presenter.center+")");&#13;
            presenter.angles[i-1] = angle;&#13;
            angle = (angle + 180) /180 * Math.PI;&#13;
            x1 = parseFloat(presenter.center + presenter.radius * Math.sin(angle));&#13;
            y1 = parseFloat(presenter.center - presenter.radius * Math.cos(angle));&#13;
            tmp1 = presenter.$view.find('#item'+(i)).attr('d');&#13;
            tmp4 = " 1 "+x1+" "+y1+" L";&#13;
            tmp3 = tmp1.replace(/ 1 \d+\.?\d* \d+\.?\d* L/, tmp4);&#13;
            tmp1 = presenter.$view.find('#item'+(nextItem)).attr('d');&#13;
            tmp2 = tmp1.replace(/L \d+\.?\d* \d+\.?\d* A/, "L "+x1+" "+y1+" A");&#13;
            angle2 = (Math.round((presenter.angles[i-1] - presenter.angles[previousItem-1])*100)/100+360)%360;&#13;
            if (angle2 &gt; 180 || (angle2 &lt;0 &amp;&amp; angle2 &gt; -180)) {&#13;
                tmp3 = tmp3.replace(" 0 0 1 "," 0 1 1 ");&#13;
            } else {&#13;
                tmp3 = tmp3.replace(" 0 1 1 "," 0 0 1 ");&#13;
            }&#13;
            angleTmp = presenter.angles[previousItem-1] + 0.5*angle2-180;&#13;
            angle2 = (Math.round((presenter.angles[nextItem-1] - presenter.angles[i-1])*100)/100+360)%360;&#13;
            if (angle2 &gt; 180 || (angle2 &lt;0 &amp;&amp; angle2 &gt; -180)) {&#13;
                tmp2 = tmp2.replace(" 0 0 1 "," 0 1 1 ");&#13;
            } else {&#13;
                tmp2 = tmp2.replace(" 0 1 1 "," 0 0 1 ");&#13;
            }&#13;
            if (presenter.move == 'plus') {&#13;
                presenter.currentPercents[i-1]+=presenter.step;&#13;
                presenter.currentPercents[nextItem-1]-=presenter.step;&#13;
            } else {&#13;
                presenter.currentPercents[i-1]-=presenter.step;&#13;
                presenter.currentPercents[nextItem-1]+=presenter.step;&#13;
            }&#13;
            presenter.$view.find('#item'+(i)).attr("d", tmp3);&#13;
            angle = 0;&#13;
            if (presenter.currentPercents[i-1] === 100) {&#13;
                if (presenter.items[i-1]['Color'] != '') {&#13;
                    presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i-1]['Color']+"; fill-opacity:1;");&#13;
                } else {&#13;
                    presenter.$view.find('.graph').attr("class","graph item item"+i);&#13;
                    presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                }&#13;
                angleTmp += 180;&#13;
            } else if (presenter.currentPercents[nextItem-1] === 100) {&#13;
                if (presenter.items[nextItem-1]['Color'] != '') {&#13;
                    presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[nextItem-1]['Color']+"; fill-opacity:1;");&#13;
                } else {&#13;
                    presenter.$view.find('.graph').attr("class","graph item item"+nextItem);&#13;
                    presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                }&#13;
                angle = 180;&#13;
            } else {&#13;
                presenter.$view.find('.graph').attr("style", "fill-opacity:0");&#13;
                presenter.$view.find('.graph').attr("class","graph");&#13;
            }&#13;
            presenter.$view.find('#item'+(nextItem)).attr("d", tmp2);&#13;
            presenter.changePercent(i, angleTmp);&#13;
            angleTmp = presenter.angles[i-1] + 0.5*angle2-180 + angle;&#13;
            presenter.changePercent(nextItem, angleTmp);&#13;
        }&#13;
    };&#13;
    presenter.changePercent = function(id, angle) {&#13;
        presenter.$view.find('#Text'+id).attr("x", (parseFloat(presenter.center + Math.sin(angle/180 * Math.PI)*(presenter.center * presenter.percentsPosition))));&#13;
        presenter.$view.find('#Text'+id).attr("y", (parseFloat(presenter.center - Math.cos(angle/180 * Math.PI)*(presenter.center * presenter.percentsPosition))));&#13;
        presenter.$view.find('#Text'+id)[0].textContent = presenter.currentPercents[id-1]+'%';&#13;
    };&#13;
    presenter.createPreview = function(view, model) {&#13;
        if (!presenter.initiate(view, model)) {&#13;
            presenter.piechart.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return false;&#13;
        }&#13;
        presenter.drawGraph();&#13;
        if (presenter.names) {&#13;
            presenter.currentPercents = new Array(presenter.numberOfItems);&#13;
            for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                presenter.currentPercents[i] = parseFloat(presenter.items[i]['Starting percent']);&#13;
            }&#13;
            presenter.drawLegend();&#13;
        }&#13;
    };&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if (!presenter.activity)&#13;
            return 0;&#13;
        if (presenter.getErrorCount() &gt; 0) {&#13;
            presenter.$view.find('.piechart').addClass('wrong');&#13;
        } else if (presenter.getScore() &gt; 0) {&#13;
            presenter.$view.find('.piechart').addClass('correct');&#13;
        }&#13;
    };&#13;
    presenter.setWorkMode = function(){&#13;
        presenter.isErrorCheckingMode = false;&#13;
        presenter.$view.find('.piechart').removeClass('wrong');&#13;
        presenter.$view.find('.piechart').removeClass('correct');&#13;
    };&#13;
    presenter.reset = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var angle, angle2, angleTmp, x1, y1;&#13;
        presenter.isMoved = false;&#13;
        if (!presenter.error) {&#13;
            presenter.disabled = presenter.initDisabled;&#13;
            presenter.disabled ? presenter.disable() : presenter.enable();&#13;
            presenter.isVisible = presenter.initIsVisible;&#13;
            presenter.updateVisibility();&#13;
            for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                ii = (i===0) ? (presenter.numberOfItems-1) : i-1;&#13;
                presenter.$view.find('#'+(i+1)).attr("transform", "rotate(" + presenter.startingLines[i] + ", "+presenter.center+", "+presenter.center+")");&#13;
                presenter.$view.find('#item'+(i+1)).attr("d", presenter.startingItems[i]);&#13;
                angle = (Math.round((presenter.startingLines[i] - presenter.startingLines[ii])*100)/100+360)%360;&#13;
                angleTmp = presenter.startingLines[ii] + 0.5*angle + 180;&#13;
                presenter.angles[i] = presenter.startingLines[i];&#13;
                presenter.currentPercents[i] = parseFloat(presenter.items[i]['Starting percent']);&#13;
                if (parseFloat(presenter.items[i]['Starting percent']) === 100) {&#13;
                    if (presenter.items[i]['Color'] != '') {&#13;
                        presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i]['Color']+"; fill-opacity:1;");&#13;
                    } else {&#13;
                        presenter.$view.find('.graph').attr("class","graph item item"+(i+1));&#13;
                        presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                    }&#13;
                    angleTmp += 180;&#13;
                }&#13;
                if (presenter.values) presenter.changePercent((i+1), angleTmp);&#13;
            }&#13;
        }&#13;
        presenter.setWorkMode();&#13;
    };&#13;
    presenter.getErrorCount = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.isMoved &amp;&amp; presenter.activity) {&#13;
            for(var i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                if (!(presenter.currentPercents[i] == presenter.items[i]['Answer'])) return 1;&#13;
            }&#13;
        }&#13;
        return 0;&#13;
    };&#13;
    presenter.getMaxScore = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.activity &amp;&amp; !presenter.error) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
    presenter.getScore = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!presenter.error) {&#13;
            if (presenter.activity) {&#13;
                for(var i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                    if (!(presenter.currentPercents[i] == presenter.items[i]['Answer'])) return 0;&#13;
                }&#13;
                return 1;&#13;
            } else {&#13;
                return 0; //if not activity always score 0&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.getState = function(){&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.itemsData = new Array(presenter.numberOfItems);&#13;
        for (i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
            presenter.itemsData[i] = presenter.$view.find('#item'+(i+1)).attr('d');&#13;
        }&#13;
        return JSON.stringify({&#13;
            isMoved : presenter.isMoved,&#13;
            currentPercents : presenter.currentPercents,&#13;
            angles : presenter.angles,&#13;
            itemsData : presenter.itemsData,&#13;
            disabled : presenter.disabled,&#13;
            isVisible : presenter.isVisible&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state){&#13;
        var angle, angle2, angleTmp, x1, y1;&#13;
        if (!presenter.error) {&#13;
            presenter.isMoved = JSON.parse(state).isMoved;&#13;
            presenter.currentPercents = JSON.parse(state).currentPercents;&#13;
            presenter.angles = JSON.parse(state).angles;&#13;
            presenter.itemsData = JSON.parse(state).itemsData;&#13;
            presenter.isVisible = JSON.parse(state).isVisible;&#13;
            presenter.updateVisibility();&#13;
            presenter.disabled = JSON.parse(state).disabled;&#13;
            presenter.disabled ? presenter.disable() : presenter.enable();&#13;
            for(i = 0; i &lt; presenter.numberOfItems; i++) {&#13;
                ii = (i===0) ? (presenter.numberOfItems-1) : i-1;&#13;
                presenter.$view.find('#'+(i+1)).attr("transform", "rotate(" + presenter.angles[i] + ", "+presenter.center+", "+presenter.center+")");&#13;
                presenter.$view.find('#item'+(i+1)).attr("d", presenter.itemsData[i]);&#13;
                angle = (Math.round((presenter.angles[i] - presenter.angles[ii])*100)/100+360)%360;&#13;
                angleTmp = presenter.angles[ii] + 0.5*angle + 180;&#13;
                if (presenter.currentPercents[i] === 100) {&#13;
                    if (presenter.items[i]['Color'] != '') {&#13;
                        presenter.$view.find('.graph').attr("style", "fill:"+presenter.items[i]['Color']+"; fill-opacity:1;");&#13;
                    } else {&#13;
                        presenter.$view.find('.graph').attr("class","graph item item"+(i+1));&#13;
                        presenter.$view.find('.graph').attr("style", "fill-opacity:1");&#13;
                    }&#13;
                    angleTmp += 180;&#13;
                }&#13;
                if (presenter.values) presenter.changePercent((i+1), angleTmp);&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.chart').css("visibility", "hidden");&#13;
            presenter.drawGraph('showAnswers');&#13;
        }&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity &amp;&amp; presenter.isShowAnswersActive) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.chart-show-answers').remove();&#13;
            presenter.$view.find('.chart').css("visibility", "visible");&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>