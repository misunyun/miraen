<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Speechace" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="CourseId" nameLabel="Speechace_course_id" type="string"/>
	</model>
<css>.speechace-iframe {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: none;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.speechace-message {&#13;
    display: none;&#13;
    position: absolute;&#13;
    justify-content: center;&#13;
    align-items: center;&#13;
    z-index: 9999;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background: rgba(0, 0, 0, 0.6);&#13;
}&#13;
&#13;
.speechace-message-text {&#13;
    color: white;&#13;
    font-size: 30px;&#13;
}&#13;
</css><view>&lt;div class="speechace-container"&gt;&#13;
    &lt;div class="speechace-message"&gt;&#13;
        &lt;div class="speechace-message-text"&gt;Fetching score...Don't leave page&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;iframe class="speechace-iframe"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="speechace-container"&gt;&#13;
    &lt;iframe class="speechace-iframe"&gt;&#13;
    &lt;/iframe&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSpeechace_create() {&#13;
    var presenter = function (){};&#13;
&#13;
    var errorCodes = {&#13;
        "V_01": "Course ID is missing",&#13;
        "V_02": "Error occurred while fetching data",&#13;
        "V_03": "Missing configuration params in context metadata",&#13;
        "V_04": "Cannot load context metadata - setting default URLs"&#13;
    };&#13;
&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.DEFAULTS = {&#13;
        JWTSessionTokenURL: "/api/v2/jwt/session_token",&#13;
        speechaceCourseURL: "/speechace/url/",&#13;
        collectionId: 0&#13;
    };&#13;
&#13;
    presenter.JWTSessionTokenURL = "";&#13;
    presenter.speechaceCourseURL = "";&#13;
    presenter.isFetchingScore = false;&#13;
&#13;
    presenter.presenterLogic = function AddonSpeechace_presenterLogic (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
        presenter.isPreview = isPreview;&#13;
&#13;
        const upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.createErrorView(presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.setIframe(view);&#13;
&#13;
        if (!presenter.isPreview) {&#13;
            const iterations = presenter.isMauthor() ? 1 : 10;&#13;
            presenter.runLogic(iterations);&#13;
            presenter.registerEvents();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isMauthor = function AddonSpeechace_isMauthor () {&#13;
        const names = ["lorepo", "mauthor"];&#13;
        const origin = window.origin;&#13;
        return names.some((name) =&gt; origin.includes(name));&#13;
    };&#13;
&#13;
    presenter.run = function AddonSpeechace_run (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonSpeechace_createPreview (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.runLogic = function AddonSpeechace_runLogic (iterationsLeft) {&#13;
        const context = presenter.playerController &amp;&amp; presenter.playerController.getContextMetadata();&#13;
        if (context != null) {&#13;
            if ("JWTSessionTokenURL" in context) {&#13;
                presenter.JWTSessionTokenURL = context["JWTSessionTokenURL"];&#13;
            }&#13;
&#13;
            if ("speechaceCourseURL" in context) {&#13;
                presenter.speechaceCourseURL = context["speechaceCourseURL"];&#13;
            }&#13;
&#13;
            presenter.collectionID = "collectionID" in context ? context["collectionID"] : presenter.DEFAULTS.collectionId;&#13;
&#13;
            if (presenter.JWTSessionTokenURL.length &amp;&amp; presenter.speechaceCourseURL.length) {&#13;
                presenter.handleURLLogic();&#13;
            } else {&#13;
                presenter.createErrorView("V_03");&#13;
            }&#13;
        } else {&#13;
            if (iterationsLeft &gt; 0) {&#13;
                window.setTimeout(function(){presenter.runLogic(iterationsLeft-1)}, 500);&#13;
            } else {&#13;
                console.warn(errorCodes["V_04"]);&#13;
                console.warn("Setting default URLs - no context metadata was set");&#13;
                presenter.JWTSessionTokenURL = presenter.DEFAULTS.JWTSessionTokenURL;&#13;
                presenter.speechaceCourseURL = presenter.DEFAULTS.speechaceCourseURL;&#13;
                presenter.collectionID = presenter.DEFAULTS.collectionId;&#13;
                presenter.handleURLLogic();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonSpeechace_setVisibility (isVisible) {&#13;
        presenter.$view.css("display", isVisible ? "" : "none");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonSpeechace_upgradeModel (model) {&#13;
        return presenter.upgradeCourseId(model);&#13;
    };&#13;
&#13;
    presenter.upgradeAttribute = function AddonSpeechace_upgradeAttribute (model, attrName, defaultValue) {&#13;
        const upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model[attrName] === undefined) {&#13;
            upgradedModel[attrName] = defaultValue;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeCourseId = function AddonSpeechace_upgradeCourseId (model) {&#13;
        return presenter.upgradeAttribute(model, "CourseId", "");&#13;
    };&#13;
&#13;
    presenter.validateModel = function AddonSpeechace_validateModel (model) {&#13;
        const validatedCourseId = presenter.validateCourseId(model["CourseId"]);&#13;
        if (!validatedCourseId.isValid) {&#13;
            return {isValid: false, errorCode: validatedCourseId.errorCode};&#13;
        }&#13;
&#13;
        return {&#13;
            addonID: model.ID,&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            courseId: validatedCourseId.value,&#13;
            maxScore: 100&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateCourseId = function AddonSpeechace_validateCourseId (courseId) {&#13;
        if (!courseId || !courseId.trim()) {&#13;
            return {isValid: false, errorCode: 'V_01'};&#13;
        }&#13;
&#13;
        return {isValid: true, value: courseId.trim()};&#13;
    };&#13;
&#13;
    presenter.createErrorView = function AddonSpeechace_createErrorView (errorCode) {&#13;
        presenter.$view.html(errorCodes[errorCode]);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonSpeechace_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.setIframe = function AddonSpeechace_setIframe (view) {&#13;
        presenter.iframe = $(view).find("iframe");&#13;
        presenter.iframe.attr("allow","microphone");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function AddonSpeechace_executeCommand (name, params) {&#13;
        if (!presenter.configuration.isValid) return;&#13;
&#13;
        const commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.handleURLLogic = function AddonSpeechace_handleURLLogic () {&#13;
        presenter.fetchSessionJWTToken()&#13;
            .then((response) =&gt; response.json())&#13;
            .then((data) =&gt; presenter.getCourseURL(data.token))&#13;
            .then((response) =&gt; response.json())&#13;
            .then((data) =&gt; presenter.handleDataReceived(data))&#13;
            .catch((error) =&gt; {&#13;
                presenter.createErrorView("V_02");&#13;
                console.error(`Error fetching data: ${error}`)&#13;
            });&#13;
    };&#13;
&#13;
    presenter.fetchSessionJWTToken = function() {&#13;
        return fetch(presenter.JWTSessionTokenURL, {method: 'GET'});&#13;
    };&#13;
&#13;
    presenter.getCourseURL = function AddonSpeechace_getCourseURL (token) {&#13;
        let url = `${presenter.speechaceCourseURL}?course_key=${presenter.configuration.courseId}`;&#13;
        if (presenter.collectionID) {&#13;
            url += `&amp;collection_id=${presenter.collectionID}`;&#13;
        }&#13;
        const config = {&#13;
            method: 'GET',&#13;
            headers: { 'Authorization': `JWT ${token}` }&#13;
        };&#13;
&#13;
        return fetch(url, config);&#13;
    };&#13;
&#13;
    presenter.handleDataReceived = function AddonSpeechace_handleDataReceived (data) {&#13;
        presenter.iframe.attr("src", data.course_url);&#13;
        presenter.speechaceToken = data.token;&#13;
        presenter.speechaceUrl = data.speechace_url;&#13;
    };&#13;
&#13;
    presenter.registerEvents = function AddonSpeechace_registerEvents () {&#13;
        window.addEventListener("message", presenter.handleMessageReceived, false);&#13;
        presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.handleMessageReceived = function AddonSpeechace_handleMessageReceived (event) {&#13;
        if (event.data === "speechaceActivityComplete") {&#13;
            presenter.requestScore();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonSpeechace_destroy (event) {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        window.removeEventListener("message", presenter.handleMessageReceived);&#13;
    };&#13;
&#13;
    presenter.getState = function AddonSpeechace_getState () {&#13;
        if (!presenter.configuration.isValid) return "";&#13;
&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            averageScore: presenter.averageScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonSpeechace_setState (state) {&#13;
        if (!state) return;&#13;
&#13;
        const parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.updateScore(parsedState.averageScore);&#13;
    };&#13;
&#13;
    presenter.showMessageDialog = function AddonSpeechace_showMessageDialog () {&#13;
        const messageElement = presenter.$view.find(".speechace-message");&#13;
        messageElement.css("display", "flex");&#13;
    };&#13;
&#13;
    presenter.hideMessageDialog = function AddonSpeechace_hideMessageDialog () {&#13;
        const messageElement = presenter.$view.find(".speechace-message");&#13;
        messageElement.css("display", "none");&#13;
    };&#13;
&#13;
    presenter.requestScore = function AddonSpeechace_requestScore() {&#13;
        presenter.isFetchingScore = true;&#13;
        window.setTimeout(function(){&#13;
            if (presenter.isFetchingScore) {&#13;
                presenter.showMessageDialog();&#13;
            }}, 1000);&#13;
&#13;
        const url = presenter.generateScoreUrl();&#13;
        fetch(url, {method: 'GET'})&#13;
            .then((response) =&gt; response.json())&#13;
            .then((data) =&gt; presenter.saveScore(data))&#13;
            .catch((error) =&gt; {&#13;
                console.error(`Error fetching data: ${error}`);&#13;
                presenter.isFetchingScore = false;&#13;
                presenter.hideMessageDialog();&#13;
                presenter.onScoreFetchError();&#13;
            });&#13;
    };&#13;
&#13;
    presenter.generateScoreUrl = function AddonSpeechace_generateScoreUrl() {&#13;
        const unixTimestamp = Math.round((new Date()).getTime() / 1000);&#13;
        const coreUrl = presenter.speechaceUrl;&#13;
        const courseId = presenter.configuration.courseId;&#13;
        const token = presenter.speechaceToken;&#13;
&#13;
        return `${coreUrl}/embed/api/${courseId}/report?speechace_token=${token}&amp;session_start_time=${unixTimestamp}`;&#13;
    };&#13;
&#13;
    presenter.saveScore = function AddonSpeechace_saveScore(data) {&#13;
        const status = data["status"];&#13;
        if (status !== "success") {&#13;
            console.error("Fetching score failed - status: error");&#13;
            console.error("Detailed message:");&#13;
            console.error(data["detail_message"]);&#13;
            presenter.onScoreFetchError();&#13;
            return;&#13;
        }&#13;
&#13;
        let score = parseInt(data["report"]["averageScore"], 10);&#13;
        score = isNaN(score) ? 0 : score;&#13;
        presenter.updateScore(score);&#13;
&#13;
        presenter.isFetchingScore = false;&#13;
        presenter.hideMessageDialog();&#13;
    };&#13;
&#13;
    presenter.updateScore = function AddonSpeechace_updateScore (score) {&#13;
        presenter.averageScore = score;&#13;
        presenter.sendScoreUpdateEvent();&#13;
    };&#13;
&#13;
    presenter.onScoreFetchError = function AddonSpeechace_onScoreFetchError () {&#13;
        const messageElement = presenter.$view.find(".speechace-message-text")[0];&#13;
        const prevMessage = messageElement.innerHTML;&#13;
        messageElement.innerHTML = "Error saving the score. Try again.";&#13;
&#13;
        presenter.showMessageDialog();&#13;
&#13;
        window.setTimeout(function(){&#13;
            presenter.hideMessageDialog();&#13;
            messageElement.innerHTML = prevMessage;&#13;
            }, 5000);&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function AddonSpeechace_getMaxScore () {&#13;
        return presenter.configuration.maxScore;&#13;
    };&#13;
&#13;
    presenter.getScore = function AddonSpeechace_getScore () {&#13;
        return presenter.averageScore || 0;&#13;
    };&#13;
&#13;
    presenter.sendScoreUpdateEvent = function AddonSpeechace_sendValueChangedEvent () {&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createEventData());&#13;
    };&#13;
&#13;
    presenter.createEventData = function AddonSpeechace_createEventData () {&#13;
        return {&#13;
            'source' : presenter.configuration.addonID,&#13;
            'item' : '',&#13;
            'value' : '',&#13;
            'score' : presenter.averageScore || 0&#13;
        };&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>