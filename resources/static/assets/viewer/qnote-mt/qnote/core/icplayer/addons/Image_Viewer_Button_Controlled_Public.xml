<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Viewer_Button_Controlled_Public" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Image" nameLabel="Image_Viewer_Button_Controlled_Public_property_image" type="image"/>
		<property name="Frames" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		<property name="Frame size" nameLabel="Image_Viewer_Button_Controlled_Public_property_frame_size" type="{Original, Keep aspect ratio, Stretch}"/>
		<property name="Sounds" nameLabel="Image_Viewer_Button_Controlled_Public_property_sounds" type="list">
			<property name="MP3 sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_mp3_sound" type="audio"/>
			<property name="OGG sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_ogg_sound" type="audio"/>
			<property name="AAC sound" nameLabel="Image_Viewer_Button_Controlled_Public_property_aac_sound" type="audio"/>
		</property>
		<property name="Frame names" nameLabel="Image_Viewer_Button_Controlled_Public_property_frame_names" type="list">
			<property name="name" nameLabel="Image_Viewer_Button_Controlled_Public_property_name" type="string"/>
			<property name="frame" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		</property>
		<property name="isClickDisabled" nameLabel="Image_Viewer_Button_Controlled_Public_property_is_click_disabled" type="boolean"/>
		<property name="Labels" nameLabel="Image_Viewer_Button_Controlled_Public_property_labels" type="list">
			<property isLocalized="true" name="Text" nameLabel="Image_Viewer_Button_Controlled_Public_property_text" type="string"/>
			<property name="Top" nameLabel="Image_Viewer_Button_Controlled_Public_property_top" type="string"/>
			<property name="Left" nameLabel="Image_Viewer_Button_Controlled_Public_property_left" type="string"/>
			<property name="Frames" nameLabel="Image_Viewer_Button_Controlled_Public_property_frames" type="string"/>
		</property>
		<property name="Show frame" nameLabel="Image_Viewer_Button_Controlled_Public_property_show_frame" type="string"/>
	</model>
<css>.image-viewer {&#13;
    border: none;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    float: left;&#13;
    overflow: hidden;&#13;
    background: no-repeat 0 0;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper audio {&#13;
    display: inherit;&#13;
}&#13;
&#13;
.image-viewer-hidden-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-loading-image {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
    z-index: 10;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.image-viewer-label {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class='image-viewer'&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
</view><preview>&lt;div class='image-viewer'&gt;&#13;
    &lt;!-- Here goes the image --&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonImage_Viewer_Button_Controlled_Public_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    var viewerElement;&#13;
    var loadingScreen = {&#13;
        element: null,&#13;
        counter: 0&#13;
    };&#13;
    var audioElements = [];&#13;
&#13;
    presenter.lastMovePosition = null;&#13;
    presenter.totalPercentage = 0;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isMouseDown = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'I_01': "Image must be uploaded to display Addon!",&#13;
        'FN_01': "Frame name cannot be empty!",&#13;
        'FN_02': "Frame number must be set to properly display Addon",&#13;
        'FN_03': "Frame number is not a number!",&#13;
        'FN_04': "Frame number must be a positive integer!",&#13;
        'FN_05': "Frame names - frame number must be between 1 and frames count",&#13;
        'L_01': "Label text cannot be empty!",&#13;
        'L_02': "Label top value incorrect!",&#13;
        'L_03': "Label left value incorrect!",&#13;
        'L_04': "All label fields must be filled correctly!",&#13;
        'FL_01': "Label must be assigned to at least one frame!",&#13;
        'FL_02': "Frames list syntax incorrect! Check for separators!",&#13;
        'FL_03': "Frame number is not a number!",&#13;
        'FL_04': "Frame number must be positive integer!",&#13;
        'FL_05': "Frame number cannot be higher than Frames!",&#13;
        'FL_06': "Frame number missing inside list!",&#13;
        'FL_07': "Frame numbers range incorrect!"&#13;
    };&#13;
&#13;
    presenter.FRAME_SIZE = {&#13;
        ORIGINAL: 0,&#13;
        SCALED: 1,&#13;
        STRETCHED: 2&#13;
    };&#13;
&#13;
    function setContainerDimensions(width, height) {&#13;
        var viewerDimensions = DOMOperationsUtils.getOuterDimensions(viewerElement);&#13;
        var viewerDistances = DOMOperationsUtils.calculateOuterDistances(viewerDimensions);&#13;
        var viewerWidth = width - viewerDistances.horizontal;&#13;
        var viewerHeight = height - viewerDistances.vertical;&#13;
&#13;
        $(viewerElement).css({&#13;
            width: viewerWidth,&#13;
            height: viewerHeight&#13;
        });&#13;
&#13;
        presenter.configuration.containerDimensions = {&#13;
            width: viewerWidth,&#13;
            height: viewerHeight&#13;
        };&#13;
    }&#13;
&#13;
    function loadSounds(){&#13;
        // Check for browser audio tag support&#13;
        if (!buzz.isSupported()) {&#13;
            return;&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
        showLoadingScreen();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.frames; i++) {&#13;
            if ((i &gt; presenter.configuration.sounds.length - 1 ) || presenter.configuration.sounds[i].isEmpty) {&#13;
                audioElements[i] = null;&#13;
            } else {&#13;
                if (presenter.configuration.sounds[i].MP3 !== "" &amp;&amp; buzz.isMP3Supported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].MP3);&#13;
                } else if (presenter.configuration.sounds[i].OGG !== "" &amp;&amp; buzz.isOGGSupported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].OGG);&#13;
                } else {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].AAC);&#13;
                }&#13;
&#13;
                audioElements[i].load();&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
    }&#13;
&#13;
&#13;
    function getDirection(type, touch) {&#13;
        var direction = null;&#13;
&#13;
        if(type == 'touchstart') {&#13;
            presenter.lastMovePosition = touch.pageX;&#13;
            return false;&#13;
        } else if(presenter.lastMovePosition == touch.pageX) {&#13;
            return false;&#13;
        } else {&#13;
            direction = presenter.lastMovePosition &gt; touch.pageX ? 'left' : 'right';&#13;
            presenter.lastMovePosition = touch.pageX;&#13;
        }&#13;
&#13;
        if(type == 'touchend') {&#13;
            presenter.lastMovePosition = null;&#13;
            return false;&#13;
        }&#13;
&#13;
        return direction;&#13;
    }&#13;
&#13;
    function getMouseDirection(evt) {&#13;
        var direction = null;&#13;
        if(presenter.lastMovePosition &gt; evt.pageX) {&#13;
            direction = 'left';&#13;
        } else if(presenter.lastMovePosition &lt; evt.pageX){&#13;
            direction = 'right';&#13;
        } else {&#13;
            direction = null;&#13;
        }&#13;
&#13;
        presenter.lastMovePosition = evt.pageX;&#13;
        return direction;&#13;
    }&#13;
&#13;
    function setTotalPercentage(percentage, direction) {&#13;
        if(direction == 'right') {&#13;
            presenter.totalPercentage += percentage;&#13;
        } else {&#13;
            presenter.totalPercentage -= percentage;&#13;
        }&#13;
    }&#13;
&#13;
    function calculateShift() {&#13;
        return (presenter.configuration.frameWidthPercentage / 100) * 30;&#13;
    }&#13;
&#13;
    function shouldChangeFrame(shiftValue) {&#13;
        return (Math.abs(presenter.totalPercentage) &gt;= shiftValue) &amp;&amp;&#13;
            (presenter.lastReceivedEvent == 'touchend' || presenter.lastReceivedEvent == 'mouseup')&#13;
    }&#13;
&#13;
    function shouldMoveBackToDefaultPosition() {&#13;
        return (presenter.lastReceivedEvent == 'touchend' || presenter.lastReceivedEvent == 'mouseup');&#13;
    }&#13;
&#13;
    function changeFrameDependingOnShiftValue(shiftValue) {&#13;
        if(presenter.totalPercentage &lt;= shiftValue) {&#13;
            presenter.next();&#13;
        } else {&#13;
            presenter.previous();&#13;
        }&#13;
        presenter.totalPercentage = 0;&#13;
    }&#13;
&#13;
    function moveBackToDefaultPosition() {&#13;
        $(viewerElement).css({&#13;
            'background-position' : presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage + '%'&#13;
        });&#13;
        presenter.totalPercentage = 0;&#13;
    }&#13;
&#13;
    function calculateBackgroundPosition() {&#13;
        var base = (presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage);&#13;
        return base - presenter.totalPercentage;&#13;
    }&#13;
&#13;
    function isTap(evt) {&#13;
        return presenter.lastReceivedEvent == 'touchstart' &amp;&amp; evt.type == 'touchend';&#13;
    }&#13;
&#13;
    function isClick(evt) {&#13;
        return presenter.lastReceivedEvent == 'mousedown' &amp;&amp; evt.type == 'mouseup';&#13;
    }&#13;
&#13;
    function setMouseDown(evt) {&#13;
        if(evt.type == 'mousedown') {&#13;
            presenter.isMouseDown = true;&#13;
            presenter.lastMovePosition = evt.pageX;&#13;
            viewerElement.unbind('click');&#13;
        } else if(evt.type == 'mouseup') {&#13;
            presenter.isMouseDown = false;&#13;
            presenter.lastMovePosition = null;&#13;
        }&#13;
    }&#13;
&#13;
    function handleClickAction() {&#13;
        viewerElement.click(function(e) {&#13;
            e.stopPropagation();&#13;
&#13;
            presenter.configuration.currentFrame = presenter.configuration.currentFrame === presenter.configuration.frames - 1 ? 0 : presenter.configuration.currentFrame + 1;&#13;
&#13;
            presenter.changeFrame(this, presenter.configuration, true);&#13;
        });&#13;
    }&#13;
&#13;
&#13;
    function handleMouseDragActions(shiftValue, percentage) {&#13;
        viewerElement.on('mousedown mousemove mouseup', function(evt) {&#13;
            evt.preventDefault();&#13;
            setMouseDown(evt);&#13;
&#13;
            if(isClick(evt)) {&#13;
                handleClickAction();&#13;
                presenter.lastReceivedEvent = null;&#13;
            } else {&#13;
                presenter.lastReceivedEvent = evt.type;&#13;
            }&#13;
&#13;
            if(evt.type != 'mousemove') {&#13;
                if(shouldChangeFrame(shiftValue)) {&#13;
                    changeFrameDependingOnShiftValue(shiftValue)&#13;
                } else if(shouldMoveBackToDefaultPosition()) {&#13;
                    moveBackToDefaultPosition();&#13;
                }&#13;
            }&#13;
&#13;
            if(presenter.isMouseDown) {&#13;
                var direction = getMouseDirection(evt);&#13;
                if(direction) {&#13;
                    setTotalPercentage(percentage, direction);&#13;
                    $(this).css({&#13;
                        'background-position' : calculateBackgroundPosition() + '%'&#13;
                    })&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function handleTouchAction(shiftValue, percentage) {&#13;
&#13;
        viewerElement.on('touchstart touchmove touchend', function(evt){&#13;
            evt.preventDefault();&#13;
            evt.stopPropagation();&#13;
&#13;
            if(isTap(evt)) {&#13;
                presenter.lastReceivedEvent = null;&#13;
                viewerElement.trigger('click');&#13;
            } else {&#13;
                presenter.lastReceivedEvent = evt.type;&#13;
            }&#13;
&#13;
            var touch = event.touches[0] || event.changedTouches[0];&#13;
            var direction = getDirection(evt.type, touch);&#13;
&#13;
            if(shouldChangeFrame(shiftValue)) {&#13;
                changeFrameDependingOnShiftValue(shiftValue)&#13;
            } else if(shouldMoveBackToDefaultPosition()) {&#13;
                moveBackToDefaultPosition();&#13;
            }&#13;
&#13;
            if(direction){&#13;
                setTotalPercentage(percentage, direction);&#13;
                $(this).css({&#13;
                    'background-position' : calculateBackgroundPosition() + '%'&#13;
                });&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    // Calculate scale for image containing element depending on frame aspect ratio&#13;
    presenter.calculateContainerDimensions = function(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal;&#13;
        var vertical;&#13;
&#13;
        if (imageRatio &gt;= containerRatio) {&#13;
            horizontal = containerWidth;&#13;
            vertical = containerWidth / imageRatio;&#13;
        } else {&#13;
            vertical = containerHeight;&#13;
            horizontal = containerHeight * imageRatio;&#13;
        }&#13;
&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    };&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size, framesCount) {&#13;
        var cssValue;&#13;
&#13;
        switch(size) {&#13;
            case presenter.FRAME_SIZE.SCALED:&#13;
            case presenter.FRAME_SIZE.STRETCHED:&#13;
                cssValue = framesCount * 100;&#13;
                cssValue += '% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function loadImage(preview) {&#13;
        var tempImageElement = document.createElement('img');&#13;
        $(tempImageElement).addClass('image-viewer-hidden-image');&#13;
        $(tempImageElement).attr('src', presenter.configuration.imageSrc);&#13;
        $(presenter.$view).append(tempImageElement);&#13;
&#13;
        $(tempImageElement).load(function() {&#13;
            var containerWidth = presenter.configuration.containerDimensions.width;&#13;
            var containerHeight = presenter.configuration.containerDimensions.height;&#13;
            var containerDimensions = presenter.calculateContainerDimensions($(this).width() / presenter.configuration.frames, $(this).height(), containerWidth, containerHeight);&#13;
            var backgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.frames);&#13;
&#13;
            var elementWidth;&#13;
            var elementHeight;&#13;
&#13;
            switch (presenter.configuration.frameSize) {&#13;
                case presenter.FRAME_SIZE.ORIGINAL:&#13;
                    elementWidth = $(tempImageElement).width() / presenter.configuration.frames;&#13;
                    elementHeight = $(tempImageElement).height();&#13;
                    break;&#13;
                case presenter.FRAME_SIZE.SCALED:&#13;
                    elementWidth = containerDimensions.horizontal;&#13;
                    elementHeight = containerDimensions.vertical;&#13;
                    break;&#13;
                case presenter.FRAME_SIZE.STRETCHED:&#13;
                    elementWidth = containerWidth;&#13;
                    elementHeight = containerHeight;&#13;
                    break;&#13;
            }&#13;
&#13;
            viewerElement.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px',&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')"&#13;
            });&#13;
&#13;
            if (backgroundSize) {&#13;
                $(viewerElement).css('background-size', backgroundSize);&#13;
            }&#13;
&#13;
            $(this).remove();&#13;
            presenter.changeFrame(viewerElement, presenter.configuration, false);&#13;
&#13;
            hideLoadingScreen();&#13;
            presenter.$view.trigger("onLoadImageEnd", [preview]);&#13;
        });&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(loadingScreen.element).css({&#13;
            top: ((containerHeight - $(loadingScreen.element).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(loadingScreen.element).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(loadingScreen.element).show();&#13;
        loadingScreen.counter++;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        loadingScreen.counter--;&#13;
        if (loadingScreen.counter === 0) {&#13;
            $(loadingScreen.element).hide();&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Creates label SPAN element and appends it to Addon space&#13;
     *&#13;
     * @param label&#13;
     * @return newly created element DOM reference&#13;
     */&#13;
    function createLabelElement(label) {&#13;
        var labelElement = document.createElement('span');&#13;
&#13;
        $(labelElement).addClass('image-viewer-label');&#13;
        $(labelElement).html(label.text);&#13;
        $(labelElement).css({&#13;
            top: label.top + 'px',&#13;
            left: label.left + 'px',&#13;
            visibility: 'hidden'&#13;
        });&#13;
&#13;
        $(presenter.$view).append(labelElement);&#13;
&#13;
        return labelElement;&#13;
    }&#13;
&#13;
    function loadLabels() {&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            presenter.configuration.labels[i].element = createLabelElement(presenter.configuration.labels[i]);&#13;
        }&#13;
    }&#13;
&#13;
    function hideLabels() {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
    }&#13;
&#13;
    /**&#13;
     * Displays labels that are assigned to given frame.&#13;
     *&#13;
     * @param frame frame number counted from 1 to n&#13;
     */&#13;
    function displayLabels(frame) {&#13;
        hideLabels();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            var label = presenter.configuration.labels[i];&#13;
            for (var j = 0; j &lt; label.frames.length; j++) {&#13;
                if (frame === label.frames[j]) {&#13;
                    $(label.element).css('visibility', 'visible');&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function loadImagesCallback(isPreview) {&#13;
        if (!isPreview) {&#13;
            loadSounds();&#13;
&#13;
            if (!presenter.configuration.isClickDisabled) {&#13;
                var shiftValue = calculateShift();&#13;
                var percentage = (viewerElement.width() / presenter.configuration.frames) / 100;&#13;
                handleClickAction();&#13;
                handleTouchAction(shiftValue, percentage);&#13;
                handleMouseDragActions(shiftValue, percentage);&#13;
            }&#13;
&#13;
            presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
        }&#13;
&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
    }&#13;
&#13;
    function loadImageEndCallback() {&#13;
        var configuration = presenter.configuration;&#13;
&#13;
        presenter.setVisibility(presenter.configuration.currentVisibility);&#13;
        presenter.changeFrame(viewerElement, configuration, true);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
        viewerElement = presenter.$view.find('.image-viewer:first');&#13;
        loadingScreen.element = presenter.$view.find('.image-viewer-loading-image:first')[0];&#13;
&#13;
        if (!preview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(loadingScreen.element).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        } else {&#13;
            showLoadingScreen();&#13;
            presenter.configuration.frameWidthPercentage = 100 / (presenter.configuration.frames - 1);&#13;
            presenter.configuration.flags = [];&#13;
&#13;
            if (preview) {&#13;
                presenter.configuration.currentFrame = presenter.configuration.showFrame &lt;= presenter.configuration.frames ? presenter.configuration.showFrame - 1 : 0;&#13;
            } else {&#13;
                presenter.configuration.currentFrame = 0;&#13;
            }&#13;
&#13;
            setContainerDimensions(model.Width, model.Height);&#13;
            prepareLoadingScreen(model.Width, model.Height);&#13;
            loadLabels();&#13;
&#13;
            presenter.$view.bind("onLoadImageEnd", function (event, isPreview) {&#13;
                loadImagesCallback(isPreview);&#13;
            });&#13;
&#13;
            loadImage(preview);&#13;
            if (presenter.configuration.currentVisibility) {&#13;
                displayLabels(0);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.changeFlag = function (flag) {&#13;
        var frame, element = presenter.$view.find('.image-viewer:first')[0];&#13;
        flag = parseInt(flag, 10);&#13;
&#13;
        if (!isNaN(flag) &amp;&amp; flag &gt; 0) {&#13;
            var oldFlag = presenter.configuration.flags[flag];&#13;
            presenter.configuration.flags[flag] = (!oldFlag || oldFlag == 0) ? 1 : 0;&#13;
&#13;
            frame = 0;&#13;
            for (var i in presenter.configuration.flags) {&#13;
                if (presenter.configuration.flags[i] == 1) {&#13;
                    frame += Math.pow(2, i - 1);&#13;
                }&#13;
            }&#13;
&#13;
            if (frame &gt;= 0 &amp;&amp; frame &lt;= presenter.configuration.frames - 1) {&#13;
                presenter.configuration.currentFrame = frame;&#13;
                presenter.changeFrame(element, presenter.configuration, true);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        var currentFrame = presenter.configuration.currentFrame;&#13;
        var framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.currentFrame = currentFrame === framesCount - 1 ? 0 : currentFrame + 1;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        var currentFrame = presenter.configuration.currentFrame;&#13;
        var framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.currentFrame = currentFrame === 0 ? framesCount - 1 : currentFrame - 1;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
    };&#13;
&#13;
    presenter.changeFlagCommand = function (params) {&#13;
        presenter.changeFlag(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToFrame = function (frame) {&#13;
        var element = presenter.$view.find('.image-viewer:first')[0];&#13;
        frame = parseInt(frame, 10);&#13;
&#13;
        if (!isNaN(frame) &amp;&amp; frame &gt; 0 &amp;&amp; frame &lt;= presenter.configuration.frames) {&#13;
            presenter.configuration.currentFrame = frame - 1;&#13;
            presenter.changeFrame(element, presenter.configuration, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommand = function (params) {&#13;
        presenter.moveToFrame(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToFrameName = function (frameName) {&#13;
        if (ModelValidationUtils.isStringEmpty(frameName) || presenter.configuration.frameNamesEmpty) {&#13;
            return;&#13;
        }&#13;
&#13;
        var element = presenter.$view.find('.image-viewer:first')[0], frame, isFrameFound;&#13;
&#13;
        isFrameFound = false;&#13;
        for (var i = 0; i &lt; presenter.configuration.frameNames.length; i++) {&#13;
            if (presenter.configuration.frameNames[i].name == frameName) {&#13;
                frame = presenter.configuration.frameNames[i].frame;&#13;
                isFrameFound = true;&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (isFrameFound) {&#13;
            presenter.configuration.currentFrame = frame - 1;&#13;
            presenter.changeFrame(element, presenter.configuration, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameNameCommand = function (params) {&#13;
        presenter.moveToFrameName(params[0]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'changeFlag': presenter.changeFlagCommand,&#13;
            'moveToFrame': presenter.moveToFrameCommand,&#13;
            'moveToFrameName': presenter.moveToFrameNameCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.currentVisibility = true;&#13;
        displayLabels(presenter.configuration.currentFrame + 1);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.currentVisibility = false;&#13;
        hideLabels();&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.validateFrameSize = function(frameSize) {&#13;
        var result;&#13;
&#13;
        switch (frameSize) {&#13;
            case "Keep aspect ratio":&#13;
                result = presenter.FRAME_SIZE.SCALED;&#13;
                break;&#13;
            case "Stretch":&#13;
                result = presenter.FRAME_SIZE.STRETCHED;&#13;
                break;&#13;
            default:&#13;
                result = presenter.FRAME_SIZE.ORIGINAL;&#13;
                break;&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    /**&#13;
     * Function returns errorCode if any of this errors occurs:&#13;
     * FN_02 - frame number empty&#13;
     * FN_03 - frame number is not a number&#13;
     * FN_04 - frame number negative&#13;
     *&#13;
     * @return errorCode&#13;
     */&#13;
    presenter.validateFramesCount = function(frames) {&#13;
        if (!frames) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FN_02"&#13;
            };&#13;
        } else {&#13;
            var parsedFrames = parseInt(frames, 10);&#13;
            if (isNaN(parsedFrames)) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FN_03"&#13;
                };&#13;
            } else if (parsedFrames &lt; 1 ) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FN_04"&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frames : parsedFrames&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateSound = function(soundsArray) {&#13;
        var sounds = [];&#13;
&#13;
        if (soundsArray &amp;&amp; $.isArray(soundsArray)) {&#13;
            for (var i = 0; i &lt; soundsArray.length; i++) {&#13;
                var isMP3Empty = soundsArray[i]['MP3 sound'] === "" || soundsArray[i]['MP3 sound'] === "/file/";&#13;
                var isAACEmpty = soundsArray[i]['AAC sound'] === "" || soundsArray[i]['AAC sound'] === "/file/";&#13;
                var isOGGEmpty = soundsArray[i]['OGG sound'] === "" || soundsArray[i]['OGG sound'] === "/file/";&#13;
                var isEmpty = isMP3Empty &amp;&amp; isAACEmpty &amp;&amp; isOGGEmpty;&#13;
&#13;
                sounds.push({&#13;
                    AAC : isAACEmpty ? "" : soundsArray[i]['AAC sound'],&#13;
                    OGG : isOGGEmpty ? "" : soundsArray[i]['OGG sound'],&#13;
                    MP3 : isMP3Empty ? "" : soundsArray[i]['MP3 sound'],&#13;
                    isEmpty : isEmpty&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            sounds : sounds&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Function returns errorCode if any of this errors occurs:&#13;
     * FN_01 - frame name empty&#13;
     * FN_02 - frame number empty&#13;
     * FN_03 - frame number is not a number&#13;
     * FN_04 - frame number negative&#13;
     * FN_05 - frame number out of bounds&#13;
     *&#13;
     * @return errorCode&#13;
     */&#13;
    presenter.validateFrameNames = function(frameNames, frames) {&#13;
        var frameNamesArray = [];&#13;
&#13;
        var frameNamesEmpty = false;&#13;
        if (frameNames &amp;&amp; $.isArray(frameNames)) {&#13;
            var firstName = frameNames[0].name;&#13;
            var firstFrame = frameNames[0].frame;&#13;
            if (firstFrame === "" &amp;&amp; firstName === "") {&#13;
                frameNamesEmpty = true;&#13;
            } else {&#13;
                for (var j = 0; j &lt; frameNames.length; j++) {&#13;
                    var frame = frameNames[j]['frame'];&#13;
                    var name = frameNames[j]['name'];&#13;
&#13;
                    if (!name || name === null || name === "") return { isError: true, errorCode: "FN_01" };&#13;
                    if (!frame || frame === "") return { isError: true, errorCode: "FN_02" };&#13;
&#13;
                    frame = parseInt(frame, 10);&#13;
                    if (isNaN(frame)) return { isError: true, errorCode: "FN_03" };&#13;
                    if (frame &lt;= 0) return { isError: true, errorCode: "FN_04" };&#13;
                    if (frame &gt; frames) return { isError: true, errorCode: "FN_05" };&#13;
&#13;
                    frameNamesArray.push({ name: name, frame: frame });&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frameNames: frameNamesArray,&#13;
            frameNamesEmpty: frameNamesEmpty&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * This function validates and converts number from string representation to integer value&#13;
     */&#13;
    presenter.sanitizePosition = function (position) {&#13;
        if (!position) return { isError:true };&#13;
&#13;
        var parsedPosition = parseInt(position, 10);&#13;
        if (isNaN(parsedPosition)) return { isError:true };&#13;
        if (parsedPosition &lt; 0) return { isError:true };&#13;
&#13;
        return { isError:false, position:parseInt(position, 10) };&#13;
    };&#13;
&#13;
    /**&#13;
     * Removes duplicates from sorted array of numbers&#13;
     *&#13;
     * @param array sorted array of numbers&#13;
     * @return array with removed duplicates&#13;
     */&#13;
    presenter.removeDuplicatesFromArray = function(array) {&#13;
        if (array.length === 0) {&#13;
            return [];&#13;
        }&#13;
&#13;
        var results = [];&#13;
&#13;
        for (var i = 0; i &lt; array.length - 1; i++) {&#13;
            if (array[i + 1] !== array[i]) {&#13;
                results.push(array[i]);&#13;
            }&#13;
        }&#13;
&#13;
        results.push(array[array.length - 1]);&#13;
&#13;
        return results;&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates frames numbers list separated with commas&#13;
     *&#13;
     * @param frames string representation of frames list&#13;
     * @param count frames count&#13;
     *&#13;
     * @return array of frames numbers counted from 1 to n&#13;
     * @returns FL_01 if list is empty or undefined&#13;
     * @returns FL_02 if list is incorrectly constructed&#13;
     * @returns FL_03 if frame number is not a number&#13;
     * @returns FL_04 if frame number is not positive integer&#13;
     * @returns FL_05 if frame number higher than frames count&#13;
     * @returns FL_06 if frame number is missing (inside list)&#13;
     * @returns FL_07 if frame numbers range is incorrect&#13;
     */&#13;
    presenter.validateFramesList = function (frames, count) {&#13;
        var list = [];&#13;
&#13;
        if (!frames || frames.length === 0) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_01"&#13;
            };&#13;
        }&#13;
&#13;
        var regExp = new RegExp('[0-9a-zA-Z\,\-]+'); // Only digits and commas are allowed in slides list&#13;
        var matchResult = frames.match(regExp);&#13;
        if (matchResult === null || frames.length !== matchResult[0].length) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_02"&#13;
            };&#13;
        }&#13;
&#13;
        var splittedFrames = frames.split(',');&#13;
        for (var i = 0; i &lt; splittedFrames.length; i++) {&#13;
            if (splittedFrames[i] === "") {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_06"&#13;
                };&#13;
            }&#13;
&#13;
            var indexOfRange = splittedFrames[i].search('-');&#13;
            if (indexOfRange !== -1) {&#13;
                var rangeStart = parseInt(splittedFrames[i].split('-')[0], 10);&#13;
                var rangeEnd = parseInt(splittedFrames[i].split('-')[1], 10);&#13;
&#13;
&#13;
                var isRangeError = isNaN(rangeStart) || isNaN(rangeEnd);&#13;
                isRangeError = isRangeError || rangeStart &lt; 1;&#13;
                isRangeError = isRangeError || rangeEnd &lt; 1;&#13;
                isRangeError = isRangeError || rangeStart &gt; rangeEnd;&#13;
                isRangeError = isRangeError || rangeStart &gt; count;&#13;
                isRangeError = isRangeError || rangeEnd &gt; count;&#13;
                if (isRangeError) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_07"&#13;
                    };&#13;
                }&#13;
&#13;
                for (var frameNumber = rangeStart; frameNumber &lt;= rangeEnd; frameNumber++) {&#13;
                    list.push(frameNumber);&#13;
                }&#13;
&#13;
                continue;&#13;
            }&#13;
&#13;
            var frame = parseInt(splittedFrames[i]);&#13;
&#13;
            if (isNaN(frame)) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_03"&#13;
                };&#13;
            }&#13;
&#13;
            if (frame &lt; 1) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_04"&#13;
                };&#13;
            }&#13;
&#13;
            if (frame &gt; count) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_05"&#13;
                };&#13;
            }&#13;
&#13;
            list.push(frame);&#13;
        }&#13;
&#13;
        list = list.sort();&#13;
        list = presenter.removeDuplicatesFromArray(list);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            list: list&#13;
        };&#13;
    };&#13;
&#13;
    /** If validation error occurs then one of the following error codes are returned&#13;
     * @returns L_01 if text is empty&#13;
     * @returns L_02 if top value is invalid&#13;
     * @returns L_03 if left value is invalid&#13;
     * @returns L_04 if empty label and labels count &gt; 0&#13;
     * @returns FL_** if there was problem with frames property&#13;
     */&#13;
    presenter.validateLabels = function (labelsArray, framesCount) {&#13;
        var labels = [];&#13;
&#13;
        // Ugly fix for Editor problems&#13;
        if (!labelsArray) return { isError:false, labels:labels };&#13;
&#13;
        for (var i = 0; i &lt; labelsArray.length; i++) {&#13;
            var frames = labelsArray[i].Frames;&#13;
            var topPosition = labelsArray[i].Top;&#13;
            var leftPosition = labelsArray[i].Left;&#13;
&#13;
            if (labelsArray[i].Text == "" &amp;&amp; topPosition == "" &amp;&amp; leftPosition == "" &amp;&amp; frames == "") {&#13;
                if (labelsArray.length == 1) {&#13;
                    labels = [];&#13;
                    break;&#13;
                } else return { isError:true, errorCode:"L_04" };&#13;
            }&#13;
&#13;
            if (!labelsArray[i].Text || labelsArray[i].Text === "") return { isError:true, errorCode:"L_01" };&#13;
&#13;
            var validatedFramesList = presenter.validateFramesList(frames, framesCount);&#13;
            if (validatedFramesList.isError) return { isError:true, errorCode: validatedFramesList.errorCode };&#13;
&#13;
            var sanitizedTopPosition = presenter.sanitizePosition(topPosition);&#13;
            if (sanitizedTopPosition.isError) return { isError:true, errorCode:"L_02" };&#13;
&#13;
            var sanitizedLeftPosition = presenter.sanitizePosition(leftPosition);&#13;
            if (sanitizedLeftPosition.isError)  return { isError:true, errorCode:"L_03" };&#13;
&#13;
            var text = {&#13;
                text:labelsArray[i].Text,&#13;
                frames:validatedFramesList.list,&#13;
                top:sanitizedTopPosition.position,&#13;
                left:sanitizedLeftPosition.position&#13;
            };&#13;
&#13;
            labels.push(text);&#13;
        }&#13;
&#13;
        return { isError:false, labels:labels };&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates string representation of integer. Only positive integer values are allowed. If both (value and default) are&#13;
     * undefined then isError property is set to true.&#13;
     */&#13;
    presenter.validatePositiveInteger = function (value, defaultValue) {&#13;
        var isValueDefined = value != undefined &amp;&amp; value !== "";&#13;
        var isDefaultDefined = defaultValue != undefined &amp;&amp; !isNaN(defaultValue);&#13;
&#13;
        if (!isValueDefined &amp;&amp; !isDefaultDefined) return { isError: true };&#13;
&#13;
        if (!isValueDefined &amp;&amp; isDefaultDefined) return { isError: false, value: defaultValue };&#13;
&#13;
        var parsedSize = parseInt(value, 10);&#13;
        if (isNaN(parsedSize) || parsedSize &lt; 1) return { isError: true };&#13;
&#13;
        return { isError: false, value: parsedSize };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        if (ModelValidationUtils.isStringEmpty(model.Image)) return { isError: true, errorCode: "I_01" };&#13;
&#13;
        var validatedFrames = presenter.validateFramesCount(model.Frames);&#13;
        if (validatedFrames.isError) return { isError: true, errorCode: validatedFrames.errorCode };&#13;
&#13;
        var validatedFrameNames = presenter.validateFrameNames(model["Frame names"], validatedFrames.frames);&#13;
        if (validatedFrameNames.isError) return { isError: true, errorCode: validatedFrameNames.errorCode };&#13;
&#13;
        var validatedLabels = presenter.validateLabels(model.Labels, validatedFrames.frames);&#13;
        if (validatedLabels.isError) return { isError: true, errorCode: validatedLabels.errorCode };&#13;
&#13;
        var showFrame = 1;&#13;
        var validatedShowFrame = presenter.validatePositiveInteger(model["Show frame"], 1);&#13;
        if (!validatedShowFrame.isError) {&#13;
            showFrame = validatedShowFrame.value;&#13;
        }&#13;
&#13;
        var defaultVisibility = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            imageSrc : model.Image,&#13;
            frames : validatedFrames.frames,&#13;
            sounds : presenter.validateSound(model.Sounds).sounds,&#13;
            frameNames: validatedFrameNames.frameNames,&#13;
            frameNamesEmpty: validatedFrameNames.frameNamesEmpty,&#13;
            isClickDisabled: ModelValidationUtils.validateBoolean(model.isClickDisabled),&#13;
            frameSize: presenter.validateFrameSize(model["Frame size"]),&#13;
            labels: validatedLabels.labels,&#13;
            showFrame: showFrame,&#13;
            defaultVisibility: defaultVisibility,&#13;
            currentVisibility: defaultVisibility&#13;
        };&#13;
    };&#13;
&#13;
    // Frames are counted from 0 to (frameCount - 1)&#13;
    presenter.changeFrame = function(element, configuration, playAudio) {&#13;
        $(element).css('backgroundPosition', configuration.currentFrame * configuration.frameWidthPercentage + '% ' + ' 0%');&#13;
        if (presenter.configuration.currentVisibility) {&#13;
            displayLabels(configuration.currentFrame + 1);&#13;
        }&#13;
&#13;
        if (configuration.currentFrame !== 0 &amp;&amp; playAudio) {&#13;
            presenter.playAudio(presenter.$view, configuration);&#13;
        } else if (configuration.currentFrame === 0) {&#13;
            stopAllAudio();&#13;
        }&#13;
    };&#13;
&#13;
    function stopAllAudio() {&#13;
        for (var i = 0; i &lt; audioElements.length; i++) {&#13;
            if (audioElements[i] !== null) {&#13;
                stopAudio(audioElements[i]);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function stopAudio(audio) {&#13;
        audio.pause();&#13;
        audio.setTime(0);&#13;
    }&#13;
&#13;
    presenter.playAudio = function(viewContainer, configuration) {&#13;
        stopAllAudio();&#13;
&#13;
        var audio = audioElements[configuration.currentFrame - 1];&#13;
        if (audio) {&#13;
            audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            "currentFrame" : this.configuration.currentFrame,&#13;
            "currentVisibility" : this.configuration.currentVisibility,&#13;
            "flags": presenter.configuration.flags&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var savedState = JSON.parse(state);&#13;
&#13;
        var configuration = presenter.configuration;&#13;
        configuration.currentFrame = savedState["currentFrame"];&#13;
        configuration.currentVisibility = savedState["currentVisibility"];&#13;
        configuration.flags = savedState["flags"];&#13;
&#13;
        $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        stopAllAudio();&#13;
        presenter.configuration.flags = [];&#13;
        presenter.configuration.currentFrame = 0;&#13;
        presenter.changeFrame(viewerElement, presenter.configuration, true);&#13;
        displayLabels(1);&#13;
        presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>