<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Completion_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="Turn off automatic counting" nameLabel="Completion_Progress_property_turn_off_automatic_counting" type="boolean"/>
    </model>
<css>.addon_Completion_Progress {&#13;
    padding: 2px;&#13;
    width: 130px;&#13;
    height: 25px;&#13;
    border-radius: 5px;&#13;
    border: 2px solid black;&#13;
}&#13;
&#13;
.addon_Completion_Progress .progress-bar {&#13;
    background-color: #FA8805;&#13;
    border-radius: 5px;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.addon_Completion_Progress .progress-text {&#13;
    color: #000000;&#13;
    font-size: 18px;&#13;
    position: absolute;&#13;
    width: 10%;&#13;
    left: 45%;&#13;
    height: 50%;&#13;
    top: 25%;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="progress-bar" style="width: 0;"&gt;&lt;/div&gt;&#13;
&lt;div class="progress-text"&gt;0%&lt;/div&gt;&#13;
</view><preview>&lt;div class="progress-bar" style="width: 45%;"&gt;&lt;/div&gt;&#13;
&lt;div class="progress-text"&gt;45%&lt;/div&gt;&#13;
</preview><presenter>function AddonCompletion_Progress_create() {&#13;
    var presenter = function () { };&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.currentProgress = 0;&#13;
    presenter.modules = [];&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        eventBus = controller.getEventBus();&#13;
        eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        presenter.page = controller.getPresentation().getPage(controller.getCurrentPageIndex());&#13;
    };&#13;
&#13;
    presenter.updateProgress = function () {&#13;
//        console.log("AddonCompletion_Progress_create updateProgress : " + presenter.modules.length);&#13;
        if (presenter.modules.length == 0) {&#13;
            presenter.currentProgress = 0;&#13;
        } else {&#13;
            var attemptedCount = 0;&#13;
&#13;
            for (var i = 0; i &lt; presenter.modules.length; i++) {&#13;
//                console.log("AddonCompletion_Progress_create", presenter.modules[i], presenter.modules[i].isActivity(), presenter.modules[i].isAttempted());&#13;
&#13;
                if (presenter.modules[i].isAttempted()) {&#13;
                    attemptedCount++;&#13;
                }&#13;
            }&#13;
&#13;
//            console.log("AddonCompletion_Progress_create attemptedCount", attemptedCount, presenter.modules.length);&#13;
            presenter.currentProgress = Math.floor((attemptedCount / presenter.modules.length) * 100);&#13;
        }&#13;
&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
&#13;
    // 이석웅 수정&#13;
    // 모듈내에 있는 자식 gap 포함&#13;
//    presenter.updateProgress = function () {&#13;
////        console.log("AddonCompletion_Progress_create updateProgress : " + presenter.modules.length);&#13;
//        if (presenter.modules.length == 0) {&#13;
//            presenter.currentProgress = 0;&#13;
//        } else {&#13;
//            var attemptedCount = 0;&#13;
//&#13;
//            for (var i = 0; i &lt; presenter.modules.length; i++) {&#13;
////                console.log("AddonCompletion_Progress_create isAttempted", presenter.modules[i].isAttempted());&#13;
//&#13;
//                try{&#13;
////                    console.log("AddonCompletion_Progress_create isAttemptedAtLeastOne", presenter.modules[i].isAttemptedAtLeastOne());&#13;
//                    if (presenter.modules[i].isAttemptedAtLeastOne()) {&#13;
//                        try{&#13;
//                            var gapAttempedCount = presenter.modules[i].getAttempedCount();&#13;
//                            attemptedCount += gapAttempedCount;&#13;
//                        }catch(e){&#13;
//&#13;
//                            if (presenter.modules[i].isAttempted()) {&#13;
//                                attemptedCount++;&#13;
//                            }&#13;
//                        }&#13;
//                    }&#13;
//                }catch(e){&#13;
////                    console.log("updateProgress e", e);&#13;
//                    if (presenter.modules[i].isAttempted()) {&#13;
//                        attemptedCount++;&#13;
//                    }&#13;
//                }&#13;
//            }&#13;
//&#13;
////            console.log("AddonCompletion_Progress_create attemptedCount", attemptedCount, presenter.totalInputCount());&#13;
//            presenter.currentProgress = Math.floor((attemptedCount / presenter.totalInputCount()) * 100);&#13;
//        }&#13;
//&#13;
//        presenter.updateProgressUI(presenter.currentProgress);&#13;
//    };&#13;
&#13;
    presenter.loadModules = function () {&#13;
        if (!presenter.page.isReportable()) {&#13;
            return;&#13;
        }&#13;
&#13;
        var modules = presenter.page.getModulesAsJS(),&#13;
            module, loadedModules = [];&#13;
&#13;
        for (var i = 0; i &lt; modules.length; i++) {&#13;
            module = playerController.getModule(modules[i]);&#13;
&#13;
            if (module &amp;&amp; module.isAttempted !== undefined) {&#13;
                loadedModules.push(module);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.modules = loadedModules;&#13;
    };&#13;
&#13;
    // 이석웅 추가&#13;
     presenter.totalInputCount = function () {&#13;
        if (!presenter.page.isReportable()) {&#13;
            return;&#13;
        }&#13;
&#13;
        var inputCnt = 0;&#13;
        var modules = presenter.page.getModulesAsJS(),&#13;
            module, loadedModules = [];&#13;
&#13;
        for (var i = 0; i &lt; modules.length; i++) {&#13;
            module = playerController.getModule(modules[i]);&#13;
//            console.log("module", module);&#13;
            if (module &amp;&amp; module.isAttempted !== undefined) {&#13;
                try{&#13;
                    //자식 input이 있는 경우&#13;
                   inputCnt += module.getGapCnt();&#13;
                }catch(e){&#13;
                   inputCnt += 1;&#13;
                }&#13;
&#13;
//                console.log("module",module, inputCnt);&#13;
            }&#13;
        }&#13;
&#13;
        return inputCnt;&#13;
    };&#13;
&#13;
    // 이석웅 추가&#13;
    presenter.getProgress = function () {&#13;
        return presenter.currentProgress;&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        return {&#13;
            automaticCounting: !ModelValidationUtils.validateBoolean(model['Turn off automatic counting']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible'])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        if (!isPreview &amp;&amp; presenter.configuration.automaticCounting) {&#13;
            eventBus.addEventListener('ValueChanged', this);&#13;
            presenter.pageLoaded.then(function() {&#13;
                presenter.loadModules();&#13;
                presenter.updateProgress();&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ValueChanged") {&#13;
            presenter.updateProgress();&#13;
        }&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            currentProgress: presenter.currentProgress&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
       if (!state) return;&#13;
&#13;
//        console.log("AddonCompletion_Progress_create setState", state);&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        presenter.currentProgress = parsedState.currentProgress;&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'setProgress': presenter.setProgressCommand,&#13;
            'getProgress': presenter.getProgress&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.updateProgressUI = function (progress) {&#13;
        presenter.$view.find('.progress-bar').css('width', progress + '%');&#13;
        presenter.$view.find('.progress-text').text(progress + '%');&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.currentProgress = 0;&#13;
&#13;
        presenter.updateProgressUI(0);&#13;
    };&#13;
&#13;
    presenter.getProgress = function () {&#13;
        return presenter.currentProgress;&#13;
    };&#13;
&#13;
    presenter.setProgress = function (progress) {&#13;
//        console.log("AddonCompletion_Progress_create setProgress", progress);&#13;
        var validatedProgress = ModelValidationUtils.validateIntegerInRange(progress, 100);&#13;
&#13;
        if (!validatedProgress.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.currentProgress = validatedProgress.value;&#13;
        presenter.updateProgressUI(presenter.currentProgress);&#13;
    };&#13;
&#13;
    presenter.setProgressCommand = function (params) {&#13;
        presenter.setProgress(params[0]);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>