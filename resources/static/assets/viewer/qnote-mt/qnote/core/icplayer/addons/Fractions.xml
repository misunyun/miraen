<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Fractions" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Figure" nameLabel="Fractions_property_figure" type="{---,Rectangular,Circle,Square}"/>
		<property displayName="Rectangular horizontal parts" name="RectHorizontal" nameLabel="Fractions_property_rect_horizontal" type="string"/>
		<property displayName="Rectangular vertical parts" name="RectVertical" nameLabel="Fractions_property_rect_vertical" type="string"/>
		<property displayName="Circle parts" name="CircleParts" nameLabel="Fractions_property_circle_parts" type="string"/>
		<property displayName="Square parts" name="SquareParts" nameLabel="Fractions_property_square_parts" type="string"/>
		<property displayName="Number of correct parts" name="Correct" nameLabel="Fractions_property_correct" type="string"/>
		<property displayName="Selected parts" name="selectedParts" nameLabel="Fractions_property_selected_parts" type="string"/>
		<property displayName="Selection color" name="selectionColor" nameLabel="Fractions_property_selection_color" type="string"/>
		<property displayName="Empty color" name="emptyColor" nameLabel="Fractions_property_empty_color" type="string"/>
		<property displayName="Stroke color" name="strokeColor" nameLabel="Fractions_property_stroke_color" type="string"/>
		<property displayName="Stroke width" name="strokeWidth" nameLabel="Fractions_property_stroke_width" type="string"/>
		<property name="isNotActivity" nameLabel="Fractions_property_is_not_activity" type="boolean"/>
		<property name="isDisable" nameLabel="Fractions_property_is_disable" type="boolean"/>
        <property displayName="Image for deselected parts" name="imageDeselect" nameLabel="Fractions_property_is_deselect" type="image"/>
        <property displayName="Image for selected parts" name="imageSelect" nameLabel="Fractions_property_is_select" type="image"/>
	</model>
<css>.FractionsWrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
</css><view>&lt;p class="FractionsCommandsViewer" style="position: absolute;"&gt;Choose the figure.&lt;/p&gt;&#13;
&lt;div class="FractionsWrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;p class="FractionsCommandsViewer" style="position: absolute;"&gt;Choose the figure.&lt;/p&gt;&#13;
&lt;div class="FractionsWrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonFractions_create(){&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.currentSelected = function(){};&#13;
    var Counter = 0;&#13;
    presenter.isErrorCheckingMode = false;&#13;
    presenter.currentSelected.item = [];&#13;
    presenter.isVisible = '';&#13;
    presenter.wasVisible = '';&#13;
    presenter.playerController = null;&#13;
    presenter.isDrawn = false;&#13;
    presenter.initialMarks = 0;&#13;
    presenter.validate = false;&#13;
    presenter.isDisable = false;&#13;
    presenter.wasDisable = false;&#13;
    presenter.imageBackgroundTable = ["0"];&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        "Z01": "None",&#13;
        "C01": "Incorrect selectionColor.",&#13;
        "C02": "Incorrect strokeColor.",&#13;
        "C03": "Incorrect emptyColor.",&#13;
        "C04": "Incorrect strokeWidth.",&#13;
        "P01": 'Incorrect horizontal rectangular parts.',&#13;
        "P02": 'Incorrect vertical rectangular parts.',&#13;
        "P03": 'Choose rectangular parts less than 30.',&#13;
        "P04": 'Incorrect circle parts.',&#13;
        "P05": 'Choose circle parts less than 100.',&#13;
        "P06": 'Enter valid square parts value.',&#13;
        "P07": 'Square parts value must be a power of 2.',&#13;
        "A01": 'Incorrect value for "Number of correct parts" property.',&#13;
        "A02": 'Fill the "Number of correct parts", or check isNotActivity.',&#13;
        "F01": 'Wrong figure name'&#13;
    };&#13;
&#13;
    presenter.FIGURES = {&#13;
        CIRCLE: 1,&#13;
        RECTANGULAR: 2,&#13;
        SQUARE: 3&#13;
    };&#13;
&#13;
    presenter.configuration = {&#13;
        modelIsValid: false,&#13;
        errorCode: "Z01"&#13;
    };&#13;
&#13;
    function displayText() {&#13;
        var textToDisplay = presenter.model['Text to be displayed'],&#13;
            isTextColored = presenter.model['Color text'] === 'True',&#13;
            $textContainer = presenter.$view.find('.some-text-container');&#13;
&#13;
        $textContainer.text(textToDisplay);&#13;
        if (isTextColored) {&#13;
            $textContainer.css('color', 'red');&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.hideAnswers();&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.hideAnswers();&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.disable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = true;&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('disable');&#13;
&#13;
    };&#13;
&#13;
    presenter.enable = function(){&#13;
        presenter.hideAnswers();&#13;
        presenter.isDisable = false;&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.isAttempted = function(){&#13;
        if(!presenter.configuration.isAnswer) {&#13;
            return true;&#13;
        }&#13;
        return Counter === (presenter.initialMarks)/2 ? false : true;&#13;
    };&#13;
&#13;
    function getDefaultImageURL(isPreview) {&#13;
        var urlPrefix = isPreview ? '/media/iceditor/' : presenter.playerController.getStaticFilesPath();&#13;
&#13;
        return urlPrefix + "addons/resources/fractions-default-image.png"&#13;
    }&#13;
&#13;
    function generateValidationError(code) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: code&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateColors = function (model) {&#13;
        var selectionColor = '#7FFFD4';&#13;
        var strokeColor= '#838B8B';&#13;
        var emptyColor = '#eeeeee';&#13;
        var strokeWidth = undefined;&#13;
&#13;
        if(model.selectionColor.length &gt; 0) {&#13;
            selectionColor = model.selectionColor;&#13;
        }&#13;
&#13;
        if(model.strokeColor.length &gt; 0) {&#13;
            strokeColor = model.strokeColor;&#13;
        }&#13;
&#13;
        if(model.emptyColor.length &gt; 0) {&#13;
            emptyColor = model.emptyColor;&#13;
        }&#13;
&#13;
        if(model.strokeWidth.length &gt; 0 ) {&#13;
            strokeWidth = model.strokeWidth;&#13;
        }&#13;
&#13;
        if(!(presenter.checkColor(selectionColor))) {&#13;
            return generateValidationError("C01");&#13;
        }&#13;
        else if(!(presenter.checkColor(strokeColor))) {&#13;
            return generateValidationError("C02");&#13;
        }&#13;
        else if(!(presenter.checkColor(emptyColor))) {&#13;
            return generateValidationError("C03");&#13;
        }&#13;
        else if (isNaN(parseInt(strokeWidth))) {&#13;
            if (strokeWidth === undefined) {&#13;
                strokeWidth = 1;&#13;
            } else {&#13;
                return generateValidationError("C04");&#13;
            }&#13;
        }&#13;
&#13;
        return  {&#13;
            isValid: true,&#13;
            selectionColor: selectionColor,&#13;
            strokeColor: strokeColor,&#13;
            emptyColor: emptyColor,&#13;
            strokeWidth: strokeWidth&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateRectangleParts = function (model) {&#13;
        if(parseFloat(model.RectHorizontal) == 0 || parseFloat(model.RectHorizontal) != parseInt(model.RectHorizontal)) {&#13;
            return generateValidationError("P01");&#13;
        }&#13;
&#13;
        if (parseFloat(model.RectVertical) == 0 || parseFloat(model.RectVertical) != parseInt(model.RectVertical)) {&#13;
            return generateValidationError("P02");&#13;
        }&#13;
&#13;
        if(parseFloat(model.RectHorizontal) &gt; 30 || parseFloat(model.RectVertical) &gt; 30){&#13;
            return generateValidationError("P03");&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            rectHorizontal: parseInt(model.RectHorizontal),&#13;
            rectVertical: parseInt(model.RectVertical)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateCircleParts = function (model) {&#13;
        if(parseInt(model.CircleParts) != parseFloat(model.CircleParts) || parseFloat(model.CircleParts) &lt;= 0 || isNaN(model.CircleParts)) {&#13;
            return generateValidationError("P04");&#13;
        }&#13;
        if(parseFloat(model.CircleParts) &gt; 100){&#13;
            return generateValidationError("P05");&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            circleParts: parseInt(model.CircleParts)&#13;
        };&#13;
    };&#13;
&#13;
    function log2(number) {&#13;
        return Math.log(number) / Math.log(2);&#13;
    }&#13;
&#13;
    presenter.validateSquareParts = function (model) {&#13;
        if (parseInt(model.SquareParts) &lt;= 0 || isNaN(model.SquareParts)) {&#13;
            return generateValidationError("P06");&#13;
        }&#13;
&#13;
        if (log2(parseInt(model.SquareParts)) % 1 != 0) {&#13;
            return generateValidationError("P07");&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            squareParts: parseInt(model.SquareParts)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateParts = function (model, figure) {&#13;
        var validatedRectangleParts = presenter.validateRectangleParts(model);&#13;
        if (figure == presenter.FIGURES.RECTANGULAR) {&#13;
            if (!validatedRectangleParts.isValid) {&#13;
                return validatedRectangleParts;&#13;
            }&#13;
        }&#13;
&#13;
        var validatedCircleParts = presenter.validateCircleParts(model);&#13;
        if (figure == presenter.FIGURES.CIRCLE) {&#13;
            if (!validatedCircleParts.isValid) {&#13;
                return validatedCircleParts;&#13;
            }&#13;
        }&#13;
&#13;
        var validatedSquareParts = presenter.validateSquareParts(model);&#13;
        if (figure == presenter.FIGURES.SQUARE) {&#13;
            if (!validatedSquareParts.isValid) {&#13;
                return validatedSquareParts;&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            rectHorizontal: validatedRectangleParts.rectHorizontal || 0,&#13;
            rectVertical: validatedRectangleParts.rectVertical || 0,&#13;
            circleParts: validatedCircleParts.circleParts || 0,&#13;
            squareParts: validatedSquareParts.squareParts || 0&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateCorrectAnswer = function (model) {&#13;
        var isNotActivity = ModelValidationUtils.validateBoolean(model.isNotActivity);&#13;
&#13;
        if (isNotActivity) {&#13;
            return {&#13;
                isValid: true,&#13;
                isAnswer: false&#13;
            };&#13;
        }&#13;
&#13;
        var correctAnswer = model.Correct;&#13;
        if (correctAnswer.length &gt; 0) {&#13;
            if (&#13;
                isNaN(correctAnswer)&#13;
                || parseFloat(correctAnswer) != Math.round(correctAnswer)&#13;
                || parseFloat(correctAnswer) &lt;= 0&#13;
                || parseFloat(correctAnswer) &gt; parseInt(model.RectHorizontal, 10) * parseInt(model.RectVertical, 10)&#13;
                || parseFloat(correctAnswer) &gt; parseInt(model.SquareParts, 10)&#13;
                || parseFloat(correctAnswer) &gt; parseInt(model.CircleParts, 10)) {&#13;
&#13;
                return generateValidationError("A01");&#13;
            }&#13;
&#13;
            return {&#13;
                isValid: true,&#13;
                isAnswer: true,&#13;
                correctAnswer: parseInt(correctAnswer)&#13;
            };&#13;
        } else {&#13;
            if (!isNotActivity) {&#13;
                return generateValidationError("A02")&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateFigure = function (model) {&#13;
        var figure = model.Figure;&#13;
        var figureCode = presenter.FIGURES[figure.toUpperCase()];&#13;
        if (figureCode === undefined) {&#13;
            return generateValidationError("F01");&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            figure: figureCode&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model, isPreview) {&#13;
&#13;
        var imageSelectChecker = false;&#13;
        var imageDeselectChecker = false;&#13;
        var imageSelect = undefined;&#13;
        var imageDeselect = undefined;&#13;
&#13;
        var selected = {&#13;
            selectedString: undefined,&#13;
            haveSelectedElements: false&#13;
        };&#13;
&#13;
        if(model.selectedParts.length &gt; 0) {&#13;
            selected.selectedString = model.selectedParts;&#13;
            selected.haveSelectedElements = true;&#13;
        }&#13;
        else {&#13;
            selected.selectedString = '';&#13;
        }&#13;
&#13;
        if (model['imageSelect'] == undefined || model['imageSelect'].length == 0) {&#13;
            imageSelect = getDefaultImageURL(isPreview);&#13;
        } else {&#13;
            imageSelectChecker = true;&#13;
            imageSelect = model.imageSelect;&#13;
        }&#13;
&#13;
        if (model['imageDeselect'] == undefined || model['imageDeselect'].length == 0) {&#13;
            imageDeselect = getDefaultImageURL(isPreview);&#13;
        } else{&#13;
            imageDeselectChecker = true;&#13;
            imageDeselect = model.imageDeselect;&#13;
        }&#13;
&#13;
        var validatedColors = presenter.validateColors(model);&#13;
        if (!validatedColors.isValid) {&#13;
            return validatedColors;&#13;
        }&#13;
&#13;
        var validatedFigure = presenter.validateFigure(model);&#13;
        if (!validatedFigure.isValid) {&#13;
            return validatedFigure;&#13;
        }&#13;
&#13;
        var validatedParts = presenter.validateParts(model, validatedFigure.figure);&#13;
        if (!validatedParts.isValid) {&#13;
            return validatedParts;&#13;
        }&#13;
&#13;
        var validatedAnswer = presenter.validateCorrectAnswer(model);&#13;
        if (!validatedAnswer.isValid) {&#13;
            return validatedAnswer;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            imageSelect: imageSelect,&#13;
            imageDeselect: imageDeselect,&#13;
            imageSelectChecker: imageSelectChecker,&#13;
            imageDeselectChecker: imageDeselectChecker,&#13;
            selected: selected,&#13;
            selectionColor: validatedColors.selectionColor,&#13;
            strokeColor: validatedColors.strokeColor,&#13;
            emptyColor: validatedColors.emptyColor,&#13;
            strokeWidth: parseFloat(validatedColors.strokeWidth),&#13;
            rectHorizontal: validatedParts.rectHorizontal,&#13;
            rectVertical: validatedParts.rectVertical,&#13;
            circleParts: validatedParts.circleParts,&#13;
            squareParts: validatedParts.squareParts,&#13;
            isAnswer: validatedAnswer.isAnswer,&#13;
            correctAnswer: validatedAnswer.correctAnswer,&#13;
            figure: validatedFigure.figure,&#13;
            addonWidth: parseInt(model.Width, 10),&#13;
            addonHeight: parseInt(model.Height, 10),&#13;
            addonId: model.ID&#13;
        };&#13;
    };&#13;
&#13;
    presenter.init = function(view, model, isPreview){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        var radius = 0;&#13;
        var circOX = 0;&#13;
        var circOY = 0;&#13;
&#13;
        var config = presenter.configuration;&#13;
        var myDiv =  $(view).find('.FractionsWrapper')[0];&#13;
&#13;
        var i = 0;&#13;
&#13;
        if(presenter.configuration.figure == presenter.FIGURES.RECTANGULAR) {&#13;
            for(i = 0; i &lt; config.rectHorizontal * config.rectVertical + 1; i++){&#13;
                presenter.currentSelected.item[i] = false;&#13;
            }&#13;
            presenter.currentSelected.item[0] = model.ID;&#13;
&#13;
            var figureRect = presenter.drawRect();&#13;
            $(myDiv).append(figureRect);&#13;
            $(myDiv).addClass('rect');&#13;
            presenter.isDrawn = true;&#13;
            presenter.validate = true;&#13;
        }&#13;
&#13;
        if(presenter.configuration.figure == presenter.FIGURES.CIRCLE) {&#13;
            for(i = 0; i &lt; config.circleParts + 1; i++){&#13;
                presenter.currentSelected.item[i] = false;&#13;
            }&#13;
            presenter.currentSelected.item[0] = model.ID;&#13;
&#13;
            if(config.addonHeight &gt;= config.addonWidth){&#13;
                radius = Math.round((config.addonWidth - 2 * config.strokeWidth) * 50) / 100;&#13;
                circOX = radius + config.strokeWidth;&#13;
                circOY = radius + config.strokeWidth;&#13;
            }&#13;
            else {&#13;
                radius = Math.round((config.addonHeight - 2 * config.strokeWidth) * 50) / 100;&#13;
                circOX = radius + config.strokeWidth;&#13;
                circOY = radius + config.strokeWidth;&#13;
            }&#13;
&#13;
            var figureCirc = presenter.drawArcs(circOX,circOY, radius);&#13;
            $(myDiv).append(figureCirc);&#13;
            $(myDiv).addClass('circ');&#13;
            presenter.isDrawn = true;&#13;
            presenter.validate = true;&#13;
&#13;
        }&#13;
&#13;
        if (presenter.configuration.figure == presenter.FIGURES.SQUARE) {&#13;
            presenter.buildSquare(model, view);&#13;
        }&#13;
&#13;
        if(model.isDisable == 'True') {&#13;
            presenter.isDisable = true;&#13;
            presenter.wasDisable = true;&#13;
            $(myDiv).addClass('disable');&#13;
        }&#13;
&#13;
        presenter.clear();&#13;
&#13;
        if (presenter.configuration.selected.haveSelectedElements) {&#13;
            presenter.selected(presenter.configuration.selected.selectedString);&#13;
        }&#13;
&#13;
        displayText();&#13;
&#13;
    };&#13;
&#13;
    presenter.buildSquare = function (model, view) {&#13;
        var config = presenter.configuration;&#13;
        var parts = config.squareParts;&#13;
        var addonWidth = config.addonWidth;&#13;
        var addonHeight = config.addonHeight;&#13;
        var squareSize = Math.min(addonWidth, addonHeight);&#13;
        var i;&#13;
&#13;
        for(i = 0; i &lt; parts + 1; i++){&#13;
            presenter.currentSelected.item[i] = false;&#13;
        }&#13;
&#13;
        presenter.currentSelected.item[0] = model.ID;&#13;
&#13;
        var d = '&lt;svg xmlns="http://www.w3.org/2000/svg" ' +&#13;
            'version="1.1"  ' +&#13;
            'width="' + squareSize + '" ' +&#13;
            'height="' + squareSize + '"&gt;';&#13;
&#13;
        var elements = [new SquareShapeElement(addonWidth, addonHeight, 0,0, 1, config.addonId)];&#13;
&#13;
        //Cut elements to half Log2(n) times&#13;
        for (i = 1; i &lt;= log2(parts); i++) {&#13;
            var elementsBuff = [];&#13;
            for (var elementIndex = 0; elementIndex &lt; elements.length; elementIndex++) {&#13;
                elementsBuff = elementsBuff.concat(elements[elementIndex].cutToHalf(addonWidth, addonHeight));&#13;
            }&#13;
            elements = elementsBuff;&#13;
        }&#13;
        d += '&lt;rect ' +&#13;
            'id="myBorder" ' +&#13;
            'height="'+(squareSize - (2 * config.strokeWidth)) + '" ' +&#13;
            'width="'+ (squareSize - (2 * config.strokeWidth)) + '" ' +&#13;
            'y="' + config.strokeWidth + '" ' +&#13;
            'x="' + config.strokeWidth + '" ' +&#13;
            'stroke-width="' + config.strokeWidth + '" ' +&#13;
            'stroke="' + config.strokeColor+'" ' +&#13;
            'style="fill: ' + config.strokeColor + '"/&gt;';&#13;
&#13;
        for (i = 0; i &lt; elements.length; i++) {&#13;
            elements[i].calculateValues(addonWidth, addonHeight);&#13;
            d += elements[i].getSVGString(i + 1);&#13;
        }&#13;
&#13;
        d += '&lt;/svg&gt;';&#13;
&#13;
        var myDiv =  $(view).find('.FractionsWrapper')[0];&#13;
        $(myDiv).append(d);&#13;
        $(myDiv).addClass('rect');&#13;
        presenter.isDrawn = true;&#13;
        presenter.validate = true;&#13;
    };&#13;
&#13;
    presenter.checkColor = function(color) {&#13;
&#13;
        var regExp = new RegExp("^#[0-9a-fA-F]{6}$");&#13;
        var colorMatch;&#13;
        colorMatch = color.match(regExp);&#13;
&#13;
        if(colorMatch === null) {&#13;
            return false;&#13;
        }&#13;
        else {&#13;
            return true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'setSelectionColor'.toLowerCase():&#13;
                presenter.setSelectionColorButton(params);&#13;
                break;&#13;
            case 'getCurrentNumber'.toLowerCase():&#13;
                presenter.getCurrentNumber();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsEmpty'.toLowerCase():&#13;
                presenter.markAsEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'showElementsSA'.toLowerCase():&#13;
                presenter.showElementsSA(params[0]);&#13;
                break;&#13;
            case 'hideElementsSA'.toLowerCase():&#13;
                presenter.hideElementsSA();&#13;
                break;&#13;
            case 'allElements'.toLowerCase():&#13;
                presenter.allElements();&#13;
                break;&#13;
            case 'isErrorCheckMode'.toLowerCase():&#13;
                presenter.isErrorCheckMode(params[0]);&#13;
                break;&#13;
            case 'addShowAnswersClass'.toLowerCase():&#13;
                presenter.addShowAnswersClass();&#13;
                break;&#13;
            case 'removeShowAnswersClass'.toLowerCase():&#13;
                presenter.removeShowAnswersClass();&#13;
                break;&#13;
            case 'getCurrentNumberSA'.toLowerCase():&#13;
                presenter.getCurrentNumberSA();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.allElements = function(){&#13;
        return presenter.allElementsCount;&#13;
    };&#13;
&#13;
    presenter.addShowAnswersClass = function(){&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.removeShowAnswersClass = function(){&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).removeClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.isErrorCheckMode = function(value){&#13;
        presenter.isErrorCheckingMode = value;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).addClass('correct');&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = true;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).addClass('incorrect');&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function(){&#13;
        presenter.hideAnswers();&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('incorrect');&#13;
        $($myDiv).removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.setSelectionColor = function(color){&#13;
        presenter.hideAnswers();&#13;
        presenter.configuration.selectionColor = color;&#13;
    };&#13;
&#13;
    presenter.setSelectionColorButton = function(color){&#13;
        presenter.hideAnswers();&#13;
        presenter.configuration.selectionColor = color[0];&#13;
    };&#13;
&#13;
    presenter.getCurrentNumber = function(){&#13;
        presenter.hideAnswers();&#13;
        return Counter;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function(){&#13;
        presenter.hideAnswers();&#13;
&#13;
        if(!presenter.configuration.isAnswer) {&#13;
            return true;&#13;
        }&#13;
        return Counter == presenter.configuration.correctAnswer ? true : false;&#13;
    };&#13;
&#13;
    presenter.getCurrentNumberSA = function(){&#13;
        return Counter;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        var $counter = undefined;&#13;
&#13;
        $.extend(presenter.configuration, presenter.validateModel(model, false));&#13;
        if (!presenter.configuration.isValid) {&#13;
            $counter = $(view).find('.FractionsCommandsViewer');&#13;
            $counter.text(presenter.ERROR_CODES[presenter.configuration.errorCode]);&#13;
        } else {&#13;
            $counter = $(view).find('.FractionsCommandsViewer');&#13;
            $counter.text('');&#13;
&#13;
            presenter.init(view, model, false);&#13;
            if (model.Figure == 'Rectangular') {&#13;
                presenter.allElementsCount = model.RectHorizontal * model.RectVertical;&#13;
            }&#13;
&#13;
            if (model.Figure == 'Circle') {&#13;
                presenter.allElementsCount = model.CircleParts;&#13;
            }&#13;
&#13;
            presenter.isVisible = model["Is Visible"] == 'True';&#13;
            presenter.wasVisible = model["Is Visible"] == 'True';&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
&#13;
            presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
            $(view).find('path').click(function (e) {&#13;
                presenter.markElementAsClicked(this);&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            jQuery(function ($) {&#13;
                $(view).find('path').on("mouseenter", function () {&#13;
                    var classString = $(this).attr('class');&#13;
                    var newClass = classString + " mouse-hover";&#13;
                    $(this).attr('class', newClass);&#13;
                });&#13;
            });&#13;
&#13;
            jQuery(function ($) {&#13;
                $(view).find('path').on("mouseleave", function () {&#13;
                    var classString = $(this).attr('class');&#13;
                    var mouseLeaveClass = classString.replace(' mouse-hover', '');&#13;
                    $(this).attr("class", mouseLeaveClass);&#13;
                });&#13;
&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        var $myDiv =  presenter.$view.find('path');&#13;
        if(presenter.isDrawn) $($myDiv).remove();&#13;
&#13;
        $.extend(presenter.configuration, presenter.validateModel(model, true));&#13;
        if (presenter.configuration.isValid === false) {&#13;
            var $counter = $(view).find('.FractionsCommandsViewer');&#13;
            $counter.text(presenter.ERROR_CODES[presenter.configuration.errorCode]);&#13;
        } else {&#13;
            var $counter = $(view).find('.FractionsCommandsViewer');&#13;
            $counter.text('');&#13;
            presenter.init(view, model, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clear = function(){&#13;
        var $myDiv, i;&#13;
        if(presenter.imageBackgroundTable[0] == 0){&#13;
&#13;
            for(i = 0; i &lt; presenter.currentSelected.item.length - 1; i++){&#13;
                presenter.imageBackgroundTable[i] = presenter.$view.find('"#'+presenter.currentSelected.item[0]+'imageBackground' +  (i+1) + '"');&#13;
            }&#13;
        }&#13;
        if(presenter.configuration.imageSelectChecker || presenter.configuration.imageDeselectChecker){&#13;
            for(i = 0; i &lt; presenter.currentSelected.item.length - 1; i++){&#13;
                $myDiv =  presenter.$view.find('"#' + presenter.currentSelected.item[0] + (i+1) + '"');&#13;
                jQuery($myDiv).css('fill', presenter.configuration.emptyColor);&#13;
                jQuery($myDiv).removeClass("selected");&#13;
                presenter.imageBackgroundTable[i].attr("xlink:href", presenter.configuration.imageDeselect);&#13;
            }&#13;
        }else {&#13;
            for(i = 0; i &lt; presenter.currentSelected.item.length;i++){&#13;
                $myDiv = presenter.$view.find('path')[i];&#13;
                $($myDiv).removeClass("selected");&#13;
                $($myDiv).css('fill', presenter.configuration.emptyColor);&#13;
            }&#13;
&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.selected = function(selectedString){&#13;
&#13;
        if(presenter.validate){&#13;
            presenter.clear();&#13;
            if(selectedString.indexOf(',') !== -1){&#13;
                var selectedStringBufor = selectedString;&#13;
                while(selectedStringBufor.indexOf(',') !== -1) {&#13;
                    var position = selectedStringBufor.indexOf(',');&#13;
                    var toSelect = selectedStringBufor.slice(0, position);&#13;
                    selectedStringBufor = selectedStringBufor.slice(position + 1, selectedStringBufor.length);&#13;
&#13;
                    if(!(toSelect.isNaN) &amp;&amp; parseFloat(toSelect) === Math.round(toSelect)){&#13;
                        presenter.markElementAsSelected(toSelect);&#13;
                        presenter.currentSelected.item[toSelect] = true;&#13;
                        Counter++;&#13;
                        presenter.initialMarks++;&#13;
                    } else {&#13;
                        presenter.selectRange(toSelect);&#13;
                    }&#13;
                }&#13;
                var toSelect1 = selectedStringBufor;&#13;
                if(!(toSelect1.isNaN) &amp;&amp; parseFloat(toSelect1) === Math.round(toSelect1)){&#13;
                    presenter.markElementAsSelected(toSelect1);&#13;
                    presenter.currentSelected.item[toSelect1] = true;&#13;
                    Counter++;&#13;
                    presenter.initialMarks++;&#13;
                } else {&#13;
                    presenter.selectRange(toSelect1);&#13;
                }&#13;
            } else {&#13;
                var toSelect2 = selectedString;&#13;
                if(!(toSelect2.isNaN) &amp;&amp; parseFloat(toSelect2) === Math.round(toSelect2)){&#13;
                    presenter.markElementAsSelected(toSelect2);&#13;
                    presenter.currentSelected.item[toSelect2] = true;&#13;
                    Counter++;&#13;
                    presenter.initialMarks++;&#13;
                } else {&#13;
                    presenter.selectRange(toSelect2);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.selectRange = function(selectedString){&#13;
&#13;
        var toSelect3 = 1;&#13;
        if(selectedString.indexOf('-') !== -1){&#13;
            var selectedStringBufor = selectedString;&#13;
            var position1 = selectedStringBufor.indexOf('-');&#13;
            var toSelect1 = selectedStringBufor.slice(0, position1);&#13;
&#13;
            selectedStringBufor = selectedStringBufor.slice(position1 + 1, selectedStringBufor.length);&#13;
&#13;
            if(selectedStringBufor.indexOf('-') !== -1){&#13;
                var position2 = selectedStringBufor.indexOf('-');&#13;
                var toSelect2 = selectedStringBufor.slice(0, position2);&#13;
                selectedStringBufor = selectedStringBufor.slice(position2 + 1, selectedStringBufor.length);&#13;
                toSelect3 = selectedStringBufor;&#13;
            } else {&#13;
                var toSelect2 = selectedStringBufor.slice(0, selectedStringBufor.length);&#13;
            }&#13;
&#13;
            if(!(toSelect1.isNaN) &amp;&amp; parseFloat(toSelect1) === Math.round(toSelect1) &amp;&amp; !(toSelect2.isNaN) &amp;&amp; parseFloat(toSelect2) === Math.round(toSelect2) &amp;&amp; !(toSelect3.isNaN) &amp;&amp; parseFloat(toSelect3) === Math.round(toSelect3))&#13;
            {&#13;
                if(parseFloat(toSelect1) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect1 = presenter.currentSelected.item.length;&#13;
                }&#13;
                if(parseFloat(toSelect2) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect2 = presenter.currentSelected.item.length;&#13;
                }&#13;
                if(parseFloat(toSelect3) &gt; presenter.currentSelected.item.length) {&#13;
                    toSelect3 = presenter.currentSelected.item.length;&#13;
                }&#13;
&#13;
                if(presenter.validate){&#13;
                    for(var i = parseFloat(toSelect1); i &lt; parseFloat(toSelect2) + 1;i+=parseFloat(toSelect3)){&#13;
                        presenter.markElementAsSelected(i);&#13;
                        presenter.currentSelected.item[i] = true;&#13;
                        Counter++;&#13;
                        presenter.initialMarks++;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.markElementAsClicked = function(element){&#13;
        var correctAnswer = presenter.configuration.correctAnswer;&#13;
        var clickedElementID = element.id;&#13;
        if(presenter.isErrorCheckingMode === false &amp;&amp; presenter.isDisable === false)&#13;
        {&#13;
            if(presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] === false)&#13;
            {&#13;
                element.style.fill = presenter.configuration.selectionColor;&#13;
                $(element).addClass("selected");&#13;
                Counter++;&#13;
                if(presenter.configuration.imageDeselectChecker || presenter.configuration.imageSelectChecker){&#13;
                    presenter.imageBackgroundTable[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length) - 1].attr("xlink:href", presenter.configuration.imageSelect);&#13;
                }&#13;
                presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] = true;&#13;
                presenter.triggerFrameChangeEvent(clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length),1,Counter == correctAnswer ? 1 : 0);&#13;
            } else   {&#13;
                element.style.fill = presenter.configuration.emptyColor;&#13;
                $(element).removeClass("selected");&#13;
                presenter.currentSelected.item[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length)] = false;&#13;
                Counter--;&#13;
                presenter.triggerFrameChangeEvent(clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length),0,Counter == correctAnswer ? 1 : 0);&#13;
&#13;
                if(presenter.configuration.imageDeselectChecker || presenter.configuration.imageSelectChecker){&#13;
                    presenter.imageBackgroundTable[clickedElementID.slice(presenter.currentSelected.item[0].length,clickedElementID.length) - 1].attr("xlink:href", presenter.configuration.imageDeselect);&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markElementAsSelected = function(element){&#13;
        var $myDiv =  presenter.$view.find('"#' +  presenter.currentSelected.item[0] + element + '"');&#13;
        jQuery($myDiv).css('fill', presenter.configuration.selectionColor);&#13;
        presenter.initialMarks++;&#13;
        jQuery($myDiv).addClass("selected");&#13;
        if(presenter.configuration.imageSelectChecker || presenter.configuration.imageDeselectChecker){&#13;
            presenter.imageBackgroundTable[element - 1].attr("xlink:href", presenter.configuration.imageSelect);&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.drawRect = function() {&#13;
        var config = presenter.configuration;&#13;
&#13;
        var id = config.addonId;&#13;
        var addonWidth = config.addonWidth;&#13;
        var addonHeight = config.addonHeight;&#13;
        var partsHorizontally = config.rectHorizontal;&#13;
        var partsVertically = config.rectVertical;&#13;
&#13;
        var elementHeight = parseFloat(addonHeight) - (2 * config.strokeWidth);&#13;
        var elementWidth = parseFloat(addonWidth) - (2 * config.strokeWidth);&#13;
&#13;
        var stepX = (addonWidth - (2 * config.strokeWidth)) /partsHorizontally;&#13;
        var stepY = (addonHeight - (2 * config.strokeWidth)) /partsVertically;&#13;
&#13;
        var fig = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="' + addonWidth+'" height="' + addonHeight+'"&gt;';&#13;
        fig += '&lt;rect ' +&#13;
            'id="myBorder" ' +&#13;
            'height="'+ elementHeight + '" ' +&#13;
            'width="' + elementWidth + '" ' +&#13;
            'y="' + config.strokeWidth + '" ' +&#13;
            'x="' + config.strokeWidth + '" ' +&#13;
            'stroke-width="' + config.strokeWidth + '" ' +&#13;
            'stroke="' + config.strokeColor+'" ' +&#13;
            'style="fill: none"/&gt;';&#13;
&#13;
        var k =1;&#13;
&#13;
        for(var j=0;j&lt;partsVertically ;j++) {&#13;
            for(var i=0;i&lt;partsHorizontally ;i++) {&#13;
                fig += '&lt;path ' +&#13;
                        'id="'+ id + k +'" ' +&#13;
                        'class="' + id + '" ' +&#13;
                        'd="M' + (config.strokeWidth + i * stepX) + ',' + (config.strokeWidth + j * stepY) + 'h' + stepX + ' v' +stepY + ' h' + (-stepX) +' v' + (-stepY) +'" ' +&#13;
                        'stroke-width="' + config.strokeWidth + '" ' +&#13;
                        'style="stroke: '+ config.strokeColor + '; fill: ' + config.emptyColor + ';" /&gt;';&#13;
&#13;
                if(config.imageDeselectChecker || config.imageSelectChecker){&#13;
                    fig += '&lt;defs&gt;';&#13;
&#13;
                    fig += '&lt;mask ' +&#13;
                        'id="' + id + 'mask' + k + '" ' +&#13;
                        'x="0" ' +&#13;
                        'y="0" ' +&#13;
                        'patternUnits="userSpaceOnUse" ' +&#13;
                        'height="100" ' +&#13;
                        'width="100"&gt;';&#13;
&#13;
                    fig += '&lt;path ' +&#13;
                        'id="' + id + 'maskPath' + k + '" ' +&#13;
                        'class="image-path" ' +&#13;
                        'd="M' + (config.strokeWidth + i * stepX)+',' + (config.strokeWidth + j * stepY) + 'h' + stepX +'  v' + stepY + ' h' + (-stepX) +' v' + (-stepY) + '" ' +&#13;
                        'stroke-width="' + config.strokeWidth + '" ' +&#13;
                        'style="pointer-events:none;fill:#ffffff;" /&gt;';&#13;
                    fig += '&lt;/mask&gt;';&#13;
                    fig += '&lt;/defs&gt;';&#13;
                    fig += '&lt;image ' +&#13;
                        'y="' + j * stepY + '" ' +&#13;
                        'x="' + i * stepX + '" ' +&#13;
                        'id="' + id + 'imageBackground' + k + '" ' +&#13;
                        'class="image-background" ' +&#13;
                        'xlink:href="' + config.imageDeselect + '" ' +&#13;
                        'height="'+stepY+'" width="'+stepX+'" ' +&#13;
                        'style="pointer-events:none;"  mask="url(#' + id + 'mask' + k + ')"/&gt;';&#13;
&#13;
                }&#13;
                k++;&#13;
            }&#13;
        }&#13;
        fig += '&lt;/svg&gt;';&#13;
&#13;
        return fig;&#13;
    };&#13;
&#13;
&#13;
    presenter.drawArcs = function(centerX,centerY,radius){&#13;
        var parts = presenter.configuration.circleParts;&#13;
        var id = presenter.configuration.addonId;&#13;
        var addonWidth = presenter.configuration.addonWidth;&#13;
        var addonHeight = presenter.configuration.addonHeight;&#13;
&#13;
        var step = parseInt(parts, 10) + 1;&#13;
        var sectorAngle = Math.round(360 / parts * 100) / 100;&#13;
        var angle = 360 - sectorAngle;&#13;
&#13;
        if(parts == 1) {&#13;
            var d = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="' + addonWidth + '" height="' + addonHeight + '"&gt;';&#13;
            d += '&lt;path ' +&#13;
                'id="' + id + '1" ' +&#13;
                'd=" M ' + centerX + ', ' +centerY + 'm '+ (-radius) + ', 0 a ' + radius + ',' + radius + ' 0 1,0 ' + (2*radius)+ ',0 a ' + radius+ ',' + radius + ' 0 1,0 '+ (-2 * radius) + ',0" ' +&#13;
                'fill="' + presenter.configuration.emptyColor + '" ' +&#13;
                'stroke="' + presenter.configuration.strokeColor + '" ' +&#13;
                'stroke-width="' + presenter.configuration.strokeWidth + '" ' +&#13;
                'stroke-linejoin="round" /&gt;';&#13;
            d += '&lt;/svg&gt;';&#13;
&#13;
            return d;&#13;
        } else{&#13;
            var d = '&lt;svg xmlns="http://www.w3.org/2000/svg" version="1.1"  width="' + addonWidth + '" height="' + addonHeight+'"&gt;';&#13;
            var x1 = Math.round((centerX + radius * Math.cos(Math.PI * angle / 180)) * 100) / 100;&#13;
            var y1 = Math.round((centerY + radius * Math.sin(Math.PI * angle / 180)) * 100) / 100;&#13;
            var x2 = Math.round((centerX + radius * Math.cos(Math.PI * angle / 180)) * 100) / 100;&#13;
            var y2 = Math.round((centerY + radius * Math.sin(Math.PI * angle / 180)) * 100) / 100;&#13;
            angle -= sectorAngle;&#13;
            d += '&lt;path ' +&#13;
                'id="' + id + '1" ' +&#13;
                'class="' + id + '" ' +&#13;
                'd="M' + centerX + ',' + centerY + 'l ' + radius + ', 0 A' + radius + ',' + radius + ' 0 0, 0 ' + (x1) + ',' + (y1) + ' z" ' +&#13;
                'fill="' + presenter.configuration.emptyColor + '" ' +&#13;
                'stroke="' + presenter.configuration.strokeColor + '" ' +&#13;
                'stroke-width="' + presenter.configuration.strokeWidth + '" ' +&#13;
                'stroke-linejoin="round" /&gt;';&#13;
&#13;
            for(var j=2; j &lt; step ; j++){&#13;
                x1 = x2;&#13;
                y1 = y2;&#13;
                x2 = Math.round((centerX + radius*Math.cos(Math.PI * angle / 180)) * 100) / 100;&#13;
                y2 = Math.round((centerY + radius*Math.sin(Math.PI * angle / 180)) * 100) / 100;&#13;
&#13;
                var stepX = x1 - centerX;&#13;
                var stepY = y1 - centerY;&#13;
&#13;
                d += '&lt;path ' +&#13;
                    'id="' + id + j +'" ' +&#13;
                    'class="' + id + '" ' +&#13;
                    'd="M' + centerX + ',' + centerY + 'l ' + stepX + ',' + stepY +' A' + radius + ',' + radius + ' 0 0, 0 ' + (x2) + ',' + (y2) + ' z" ' +&#13;
                    'fill="' + presenter.configuration.emptyColor + '" ' +&#13;
                    'stroke="' + presenter.configuration.strokeColor + '" ' +&#13;
                    'stroke-width="' + presenter.configuration.strokeWidth + '" ' +&#13;
                    'stroke-linejoin="round" /&gt;';&#13;
&#13;
                angle -= sectorAngle;&#13;
            }&#13;
            d += '&lt;/svg&gt;';&#13;
            return d;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        presenter.isErrorCheckingMode = false;&#13;
        var currentItems = presenter.currentSelected.item;&#13;
        var visible = presenter.isVisible;&#13;
        var initialMarks = presenter.initialMarks;&#13;
        var wasDisable = presenter.wasDisable;&#13;
        var isDisable = presenter.isDisable;&#13;
        return JSON.stringify({&#13;
            Counter: Counter,&#13;
            currentItems: currentItems,&#13;
            visible: visible,&#13;
            initialMarks: initialMarks,&#13;
            wasDisable: wasDisable,&#13;
            isDisable: isDisable&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state),&#13;
            $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isVisible = parsedState.visible;&#13;
        Counter = parsedState.Counter;&#13;
        presenter.wasDisable = parsedState.wasDisable;&#13;
        presenter.isDisable = parsedState.isDisable;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.currentSelected.item = JSON.parse(state).currentItems;&#13;
        presenter.clear();&#13;
&#13;
        for(var j = 1; j &lt; presenter.currentSelected.item.length; j++) {&#13;
            if(presenter.currentSelected.item[j] === true) {&#13;
                presenter.markElementAsSelected(j);&#13;
            }&#13;
        }&#13;
        presenter.initialMarks = parsedState.initialMarks;&#13;
        presenter.isDisable === true ?  $($myDiv).addClass('disable') : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if(parseInt(presenter.initialMarks, 10) / 2 === presenter.configuration.correctAnswer) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if(presenter.configuration.isAnswer) {&#13;
            return 1;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.neutralOption = function(){&#13;
        return (Counter === (presenter.initialMarks) / 2) ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if(parseInt(presenter.initialMarks, 10) / 2 === presenter.configuration.correctAnswer) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if(presenter.configuration.isAnswer) {&#13;
            return (Counter == presenter.configuration.correctAnswer) ? 1 : 0;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if(presenter.configuration.isAnswer) {&#13;
            if(parseInt(presenter.initialMarks,10)/2 === presenter.configuration.correctAnswer &amp;&amp; presenter.configuration.correctAnswer != Counter) {&#13;
                return 1;&#13;
            }&#13;
&#13;
            if(presenter.neutralOption() == 1) {&#13;
                return 0;&#13;
            }&#13;
            else {&#13;
                return presenter.getMaxScore() - presenter.getScore();&#13;
            }&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.hideAnswers();&#13;
        presenter.isErrorCheckingMode = true;&#13;
&#13;
        if(presenter.configuration.isAnswer) {&#13;
            var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
&#13;
            if(presenter.neutralOption() === 0) {&#13;
                if (presenter.getScore() === presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0) {&#13;
                    $($myDiv).addClass('correct');&#13;
                } else {&#13;
                    $($myDiv).addClass('incorrect');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('correct');&#13;
        $($myDiv).removeClass('incorrect');&#13;
&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.setWorkMode();&#13;
        for(var i = 1; i&lt; presenter.currentSelected.item.length; i++) {&#13;
            presenter.currentSelected.item[i] = false;&#13;
        }&#13;
        presenter.isErrorCheckingMode = false;&#13;
        Counter = 0;&#13;
        presenter.initialMarks = 0;&#13;
        presenter.selected(presenter.configuration.selected.selectedString);&#13;
        presenter.setVisibility(presenter.wasVisible);&#13;
        presenter.isDisable = presenter.wasDisable;&#13;
        presenter.isDisable === true ?  $($myDiv).addClass('disable') : $($myDiv).removeClass('disable');&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setEventBus = function(eventBus) {&#13;
        presenter.eventBus = eventBus;&#13;
    };&#13;
&#13;
    presenter.createEventData = function(partNumber,clickValue,checkScore) {&#13;
        return {&#13;
            source : presenter.currentSelected.item[0],&#13;
            item : "" + partNumber,&#13;
            value : '' + clickValue,&#13;
            score : '' + checkScore&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(partNumber,clickValue,checkScore,element) {&#13;
        var eventData = presenter.createEventData(partNumber,clickValue,checkScore);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.markCorrectAnswerAsSelected = function(element){&#13;
        var $myDiv =  presenter.$view.find('"#' +  presenter.currentSelected.item[0] + element + '"');&#13;
        jQuery($myDiv).css('fill', presenter.configuration.selectionColor);&#13;
        jQuery($myDiv).addClass("selected");&#13;
&#13;
        if(presenter.configuration.imageSelectChecker || presenter.configuration.imageDeselectChecker){&#13;
            presenter.imageBackgroundTable[element - 1].attr("xlink:href", presenter.configuration.imageSelect);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isErrorCheckingMode == true){&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.isErrorCheckingMode = true; //blokowanie na check&#13;
&#13;
        if(presenter.configuration.isAnswer) {&#13;
            if(presenter.configuration.correctAnswer != Counter){&#13;
                if(presenter.clear()){&#13;
                    if(Counter &lt; presenter.configuration.correctAnswer){&#13;
                        var k = 0;&#13;
                        for(var j = 1; j &lt; presenter.currentSelected.item.length; j++){&#13;
                            if(presenter.currentSelected.item[j] === true) {&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                            }&#13;
                            if(presenter.currentSelected.item[j] === false &amp;&amp; k != presenter.configuration.correctAnswer - Counter){&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                                k++;&#13;
                            }&#13;
                        }&#13;
                    } else{&#13;
                        var k = 0;&#13;
                        for(var j = 1;j &lt; presenter.currentSelected.item.length; j++){&#13;
                            if(presenter.currentSelected.item[j] === true) {&#13;
                                if(k != presenter.configuration.correctAnswer){&#13;
                                    presenter.markCorrectAnswerAsSelected(j);&#13;
                                    k++;&#13;
                                }&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
            var $myDiv =  presenter.$view.find('.FractionsWrapper')[0];&#13;
            $($myDiv).addClass('showAnswers');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
&#13;
        var $myDiv = presenter.$view.find('.FractionsWrapper')[0];&#13;
        presenter.isErrorCheckingMode = false;&#13;
        $($myDiv).removeClass('showAnswers');&#13;
        presenter.clear();&#13;
&#13;
        for(var j = 1; j &lt; presenter.currentSelected.item.length; j++){&#13;
            if(presenter.currentSelected.item[j] === true) {&#13;
                presenter.markCorrectAnswerAsSelected(j);&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.showElementsSA = function(element){&#13;
&#13;
        var correctAnswerSA = element;&#13;
        presenter.isErrorCheckingMode = true;&#13;
        if(correctAnswerSA != Counter){&#13;
            if(presenter.clear()){&#13;
                if(Counter &lt; correctAnswerSA){&#13;
                    var k = 0;&#13;
                    for(var j = 1; j &lt; presenter.currentSelected.item.length; j++){&#13;
                        if(presenter.currentSelected.item[j] === true) {&#13;
                            presenter.markCorrectAnswerAsSelected(j);&#13;
                        }&#13;
                        if(presenter.currentSelected.item[j] === false &amp;&amp; k != correctAnswerSA - Counter){&#13;
                            presenter.markCorrectAnswerAsSelected(j);&#13;
                            k++;&#13;
                        }&#13;
                    }&#13;
                } else{&#13;
                    var k = 0;&#13;
                    for(var j = 1; j &lt; presenter.currentSelected.item.length; j++){&#13;
                        if(presenter.currentSelected.item[j] === true) {&#13;
                            if(k != correctAnswerSA){&#13;
                                presenter.markCorrectAnswerAsSelected(j);&#13;
                                k++;&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var $myDiv = presenter.$view.find('.FractionsWrapper')[0];&#13;
        $($myDiv).addClass('showAnswers');&#13;
    };&#13;
&#13;
    presenter.hideElementsSA = function(item){&#13;
        presenter.hideAnswers();&#13;
    };&#13;
&#13;
    var SquareShapeElement = function (width, height, x, y, currentCutIndex, id) {&#13;
        this.width = Math.min(width, height);&#13;
        this.height = Math.min(width, height);&#13;
        this.x = x;&#13;
        this.y = y;&#13;
        this.currentCutIndex = currentCutIndex;&#13;
        this.id = id;&#13;
    };&#13;
&#13;
    SquareShapeElement.prototype = {&#13;
        calculateValues: function (maxWidth, maxHeight) {&#13;
            var stroke = presenter.configuration.strokeWidth;&#13;
            var originY = this.y + this.height;&#13;
            if (this.x == 0) {&#13;
                this.x += stroke;&#13;
                this.width -= stroke;&#13;
            } else {&#13;
                this.width -= stroke;&#13;
            }&#13;
&#13;
            if (this.y == 0) {&#13;
                this.y += stroke;&#13;
                this.height -= stroke;&#13;
            }&#13;
            if (originY == maxWidth) {&#13;
                this.height -= stroke;&#13;
            }&#13;
        },&#13;
&#13;
        cutToHalf: function (maxWidth, maxHeight) {&#13;
            if (this.currentCutIndex == 1) {&#13;
                return this.cutToVerticallyHalf();&#13;
            } else if (this.currentCutIndex == 2) {&#13;
                return this.cutToHorizontallyHalf();&#13;
            } else {&#13;
                return this.cutToTriangleHalf(maxWidth, maxHeight);&#13;
            }&#13;
        },&#13;
&#13;
        cutToVerticallyHalf: function () {&#13;
            var elements = [];&#13;
            var newWidth = this.width / 2;&#13;
            var newHeight = this.height;&#13;
            elements.push(new RectangleShapeElement(newWidth, newHeight, this.x, this.y, this.currentCutIndex + 1, this.id));&#13;
            elements.push(new RectangleShapeElement(newWidth, newHeight, this.x + newWidth, this.y, this.currentCutIndex + 1, this.id));&#13;
&#13;
            return elements;&#13;
        },&#13;
&#13;
        cutToHorizontallyHalf: function () {&#13;
            var elements = [];&#13;
            var newWidth = this.width;&#13;
            var newHeight = this.height / 2;&#13;
            elements.push(new RectangleShapeElement(newWidth, newHeight, this.x, this.y, this.currentCutIndex + 1, this.id));&#13;
            elements.push(new RectangleShapeElement(newWidth, newHeight, this.x, this.y + newHeight, this.currentCutIndex + 1, this.id));&#13;
&#13;
            return elements;&#13;
        },&#13;
&#13;
        cutToTriangleHalf: function (maxWidth, maxHeight) {&#13;
            var size = Math.min(maxWidth, maxHeight);&#13;
            var xCenter = size / 2;&#13;
            var yCenter = size / 2;&#13;
&#13;
            var x1 = this.x;&#13;
            var y1 = this.y;&#13;
&#13;
            if (x1 != 0) {&#13;
                x1 = size;&#13;
            }&#13;
&#13;
            if (y1 != 0) {&#13;
                y1 = size;&#13;
            }&#13;
&#13;
&#13;
            var elements = [];&#13;
            elements.push(new TriangleShapeElement(this.width, this.height, x1,y1, xCenter, y1, xCenter, yCenter, this.currentCutIndex + 1, this.id));&#13;
            elements.push(new TriangleShapeElement(this.width, this.height, x1,y1, x1, yCenter, xCenter, yCenter, this.currentCutIndex + 1, this.id));&#13;
            return elements;&#13;
        },&#13;
&#13;
        getSVGString: function (id) {&#13;
            var width = this.width;&#13;
            var height = this.height;&#13;
            return '&lt;path ' +&#13;
                'id="' + this.id + id + '" ' +&#13;
                'class="' + this.id + '" ' +&#13;
                'd="M' + (this.x) + ',' + (this.y) + 'h' + (width) + ' v' + (height) + ' h' + (-width) + ' v' + (-height) + '" ' +&#13;
                'stroke-width="' + presenter.configuration.strokeWidth + '" ' +&#13;
                'style="stroke: ' + presenter.configuration.strokeColor + '; ' +&#13;
                'fill: ' + presenter.configuration.emptyColor + ';" /&gt;';&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    var RectangleShapeElement = function (width, height, x, y, currentCutIndex, id) {&#13;
        this.width = width;&#13;
        this.height = height;&#13;
        this.x = x;&#13;
        this.y = y;&#13;
        this.currentCutIndex = currentCutIndex;&#13;
        this.id = id;&#13;
    };&#13;
    RectangleShapeElement.prototype = Object.create(SquareShapeElement.prototype);&#13;
&#13;
    var TriangleShapeElement = function (width, height, x1, y1, x2, y2, x3, y3, currentCutIndex, id) {&#13;
        this.width = width;&#13;
        this.height = height;&#13;
        this.x1 = x1;&#13;
        this.y1 = y1;&#13;
&#13;
        this.x2 = x2;&#13;
        this.y2 = y2;&#13;
&#13;
        this.x3 = x3;&#13;
        this.y3 = y3;&#13;
        this.currentCutIndex = currentCutIndex;&#13;
        this.id = id;&#13;
    };&#13;
    TriangleShapeElement.prototype = Object.create(SquareShapeElement.prototype);&#13;
&#13;
    TriangleShapeElement.prototype.getSVGString = function (id) {&#13;
        return '&lt;path ' +&#13;
            'id="' + this.id + id + '" ' +&#13;
            'class="' + this.id + '" ' +&#13;
            'd="M' + this.x1 + ',' + this.y1 + ',' + this.x2 + ',' + this.y2 + ',' + this.x3 + ',' + this.y3 + 'Z" ' +&#13;
            'stroke-width="' + presenter.configuration.strokeWidth + '" ' +&#13;
            'style="stroke: ' + presenter.configuration.strokeColor + '; ' +&#13;
            'fill: ' + presenter.configuration.emptyColor + ';" /&gt;';&#13;
    };&#13;
&#13;
    TriangleShapeElement.prototype.calculateValues = function(maxWidth, maxHeight) {&#13;
        var stroke = presenter.configuration.strokeWidth;&#13;
        if (this.x1 == 0) {&#13;
            this.x1 += stroke / 2;&#13;
        }&#13;
&#13;
        if (this.x1 == maxWidth) {&#13;
            this.x1 -= stroke / 2;&#13;
        }&#13;
&#13;
        if (this.x2 == 0) {&#13;
            this.x2 += stroke / 2;&#13;
        }&#13;
&#13;
        if (this.x2 == maxWidth) {&#13;
            this.x2 -= stroke / 2;&#13;
        }&#13;
&#13;
        if (this.y1 == 0) {&#13;
            this.y1 += stroke / 2;&#13;
        }&#13;
&#13;
        if (this.y2 == 0) {&#13;
            this.y2 += stroke / 2;&#13;
        }&#13;
&#13;
        if (this.y1 == maxWidth) {&#13;
            this.y1 -= stroke / 2;&#13;
        }&#13;
&#13;
        if (this.y2 == maxWidth) {&#13;
            this.y2 -= stroke / 2;&#13;
        }&#13;
    };&#13;
&#13;
    TriangleShapeElement.prototype.cutToHalf = function (maxWidth, maxHeight) {&#13;
        var elements = [];&#13;
        var maxSize = Math.min(maxWidth, maxHeight);&#13;
        if ((this.x1 == 0 &amp;&amp; this.x2 == 0) || (this.x1 == maxSize &amp;&amp; this.x2 == maxSize)) {&#13;
            elements.push(new TriangleShapeElement(this.width, this.height / 2, this.x1, this.y1, this.x2, (this.y1 + this.y2) / 2, this.x3, this.y3, this.currentCutIndex + 1, this.id));&#13;
            elements.push(new TriangleShapeElement(this.width, this.height / 2, this.x1, (this.y1 + this.y2) / 2, this.x2, this.y2, this.x3, this.y3, this.currentCutIndex + 1, this.id));&#13;
        } else {&#13;
            elements.push(new TriangleShapeElement(this.width / 2, this.height, this.x1, this.y1, (this.x2 + this.x1) / 2, this.y2, this.x3, this.y3, this.currentCutIndex + 1, this.id));&#13;
            elements.push(new TriangleShapeElement(this.width / 2, this.height, (this.x2 + this.x1) / 2, this.y2, this.x2, this.y2, this.x3, this.y3, this.currentCutIndex + 1, this.id));&#13;
        }&#13;
        return elements;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>