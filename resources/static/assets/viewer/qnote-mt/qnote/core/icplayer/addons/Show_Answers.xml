<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Show_Answers" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isLocalized="true" name="Text" nameLabel="Show_Answers_property_text" type="string"/>
        <property isLocalized="true" name="Text selected" nameLabel="Show_Answers_property_text_selected" type="string"/>
        <property name="Increment check counter" nameLabel="Show_Answers_property_increment_check_counter" type="boolean"/>
        <property name="Increment mistake counter" nameLabel="Show_Answers_property_increment_mistake_counter" type="boolean"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="choice_speech_texts" type="staticlist">

            <property name="Selected" nameLabel="choice_item_selected" type="staticrow">
                <property name="Selected" nameLabel="choice_item_selected" type="string"/>
            </property>

            <property name="Block edit" nameLabel="check_answers_button_edit_block" type="staticrow">
                <property name="Block edit" nameLabel="check_answers_button_edit_block" type="string"/>
            </property>

            <property name="No block edit" nameLabel="check_answers_button_no_edit_block" type="staticrow">
                <property name="No block edit" nameLabel="check_answers_button_no_edit_block" type="string"/>
            </property>

        </property>
    </model>
<css>.show-answers-wrapper,&#13;
.show-answers-wrapper .show-answers-container,&#13;
.show-answers-wrapper .show-answers-container .show-answers-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.show-answers-wrapper .show-answers-container .show-answers-button {&#13;
    background: url('resources/show-answers-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="show-answers-wrapper"&gt;&#13;
    &lt;div class="show-answers-container"&gt;&#13;
        &lt;div class="show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="show-answers-wrapper"&gt;&#13;
    &lt;div class="show-answers-container"&gt;&#13;
        &lt;div class="show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonShow_Answers_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    var isWCAGOn = false;&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function getTextVoiceObject (text, lang) {&#13;
        return {&#13;
            text: text,&#13;
            lang: lang&#13;
        };&#13;
    }&#13;
&#13;
    presenter.EVENTS = {&#13;
        SHOW_ANSWERS: 'ShowAnswers',&#13;
        HIDE_ANSWERS: 'HideAnswers'&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftDown, event) {&#13;
        if (keycode == window.KeyboardControllerKeys.SPACE ||&#13;
            keycode == window.KeyboardControllerKeys.ARROW_UP ||&#13;
            keycode == window.KeyboardControllerKeys.ARROW_DOWN ||&#13;
            keycode == window.KeyboardControllerKeys.ESC)&#13;
        {&#13;
            event.preventDefault();&#13;
        }&#13;
&#13;
        if (keycode === window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.$button.click();&#13;
            if(isWCAGOn) {&#13;
                if (presenter.configuration.isSelected) {&#13;
                    speak([getTextVoiceObject(presenter.speechTexts.editBlock)]);&#13;
                } else {&#13;
                    speak([getTextVoiceObject(presenter.speechTexts.noEditBlock)]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName) {&#13;
        var source = presenter.configuration.addonID;&#13;
        if (eventName === presenter.EVENTS.SHOW_ANSWERS) {&#13;
            presenter.playerController.getCommands().showAnswers(source);&#13;
        } else if (eventName === presenter.EVENTS.HIDE_ANSWERS) {&#13;
            presenter.playerController.getCommands().hideAnswers(source);&#13;
        } else {&#13;
            var eventData = {&#13;
                'source': source&#13;
            };&#13;
            // fallback - but it should use commands for proper work with different modes&#13;
            presenter.eventBus.sendEvent(eventName, eventData);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        return {&#13;
            'text' : model.Text,&#13;
            'textSelected' : model['Text selected'],&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model.ID,&#13;
            'isSelected': false,&#13;
            'enableCheckCounter': ModelValidationUtils.validateBoolean(model["Increment check counter"]),&#13;
            'enableMistakeCounter': ModelValidationUtils.validateBoolean(model["Increment mistake counter"]),&#13;
            'isTabindexEnabled': ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts){&#13;
        presenter.speechTexts = {&#13;
            selected: 'Selected',&#13;
            editBlock: 'Page edition is blocked',&#13;
            noEditBlock: 'Page edition is not blocked'&#13;
        };&#13;
&#13;
        if(!speechTexts){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            selected: getSpeechTextProperty(speechTexts['Selected']['Selected'], presenter.speechTexts.selected),&#13;
            editBlock: getSpeechTextProperty(speechTexts['Block edit']['Block edit'], presenter.speechTexts.editBlock),&#13;
            noEditBlock: getSpeechTextProperty(speechTexts['No block edit']['No block edit'], presenter.speechTexts.noEditBlock)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        if (model["Increment mistake counter"] === undefined) {&#13;
            model = presenter.upgradeIncrementMistakeCounter(model);&#13;
        }&#13;
        return model;&#13;
    };&#13;
&#13;
     presenter.upgradeIncrementMistakeCounter = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel["Increment mistake counter"] === undefined) {&#13;
            upgradedModel["Increment mistake counter"] = "false";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.handleClick = function () {&#13;
        var text, eventName;&#13;
&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
&#13;
        if (presenter.configuration.isSelected) {&#13;
            text = presenter.configuration.textSelected;&#13;
            eventName = presenter.EVENTS.SHOW_ANSWERS;&#13;
            presenter.$wrapper.addClass('selected');&#13;
&#13;
            if (presenter.configuration.enableCheckCounter) {&#13;
                presenter.playerController.getCommands().incrementCheckCounter();&#13;
            }&#13;
&#13;
            if (presenter.configuration.enableMistakeCounter) {&#13;
                presenter.playerController.getCommands().increaseMistakeCounter();&#13;
            }&#13;
        } else {&#13;
            text = presenter.configuration.text;&#13;
            eventName = presenter.EVENTS.HIDE_ANSWERS;&#13;
            presenter.$wrapper.removeClass('selected');&#13;
        }&#13;
&#13;
        presenter.$button.text(text);&#13;
        presenter.sendEvent(eventName);&#13;
        presenter.onClick();&#13;
    };&#13;
&#13;
    presenter.onClick = function () {&#13;
     };&#13;
&#13;
    presenter.connectClickAction = function () {&#13;
        presenter.$button.on('click', function (eventData) {&#13;
            eventData.stopPropagation();&#13;
            presenter.handleClick();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.connectKeyDownAction = function () {&#13;
        presenter.$view.on('keydown', function (eventData) {&#13;
            if(eventData.which === 13) {&#13;
                eventData.stopPropagation();&#13;
                presenter.handleClick();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        presenter.$button = presenter.$view.find('.show-answers-button');&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper = presenter.$view.find('.show-answers-wrapper');&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            presenter.$wrapper.attr('tabindex', '0');&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.connectClickAction();&#13;
            presenter.connectKeyDownAction();&#13;
            presenter.eventBus.addEventListener('ShowAnswers', presenter);&#13;
            presenter.eventBus.addEventListener('HideAnswers', presenter);&#13;
            presenter.eventBus.addEventListener('LimitedHideAnswers', presenter);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.presenterLogic(view, model, false);&#13;
&#13;
        presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        presenter.$button.off();&#13;
        presenter.$view.off();&#13;
&#13;
        presenter.$button = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "LimitedHideAnswers") {&#13;
            presenter.reset();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.reset();&#13;
        }&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.$button.text(presenter.configuration.textSelected);&#13;
            presenter.$wrapper.addClass('selected');&#13;
            presenter.configuration.isSelected = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.setVisibility(JSON.parse(state).isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper.removeClass('selected');&#13;
        presenter.configuration.isSelected = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    presenter.getTitlePostfix = function () {&#13;
        if(presenter.configuration.isSelected) {&#13;
            return presenter.speechTexts.selected;&#13;
        } else {&#13;
            return ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>