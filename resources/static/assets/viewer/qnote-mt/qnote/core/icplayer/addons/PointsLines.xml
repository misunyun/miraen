<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PointsLines" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Points' coordinates" name="Points" nameLabel="PointsLines_property_points" type="text"/>
		<property displayName="Points' indexes" name="Indexes" nameLabel="PointsLines_property_indexes" type="text"/>
		<property displayName="Starting lines" name="Starting lines" nameLabel="PointsLines_property_starting_lines" type="text"/>
		<property displayName="Answer" name="Lines" nameLabel="PointsLines_property_lines" type="text"/>
		<property name="Is activity" nameLabel="PointsLines_property_is_activity" type="boolean"/>
		<property displayName="Show all answers in gradual show answers mode" name="showAllAnswersInGradualShowAnswersMode" nameLabel="Points_Lines_property_show_all_answers_in_gradual_show_answers_mode" type="boolean"/>
		<property name="Is disabled" nameLabel="PointsLines_property_is_disabled" type="boolean"/>
        <property name="Blocked lines" nameLabel="PointsLines_property_blocked_lines" type="text"/>
        <property name="Block wrong answers" nameLabel="PointsLines_property_block_wrong_answers" type="boolean"/>
        <property displayName="Single Connection" name="Single" nameLabel="PointsLines_property_single_connection" type="boolean"/>
        <property displayName="Alternative texts" name="alternativeTexts" nameLabel="PointsLines_property_alternative_texts" type="text"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="PointsLines_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="PointsLines_property_speech_texts" type="staticlist">
            <property name="Point" nameLabel="PointsLines_property_speech_text_point" type="staticrow">
                <property name="Point" nameLabel="PointsLines_property_speech_text_point" type="string"/>
            </property>
            <property name="Connected" nameLabel="PointsLines_property_speech_text_connected" type="staticrow">
                <property name="Connected" nameLabel="PointsLines_property_speech_text_connected" type="string"/>
            </property>
            <property name="Disconnected" nameLabel="PointsLines_property_speech_text_disconnected" type="staticrow">
                <property name="Disconnected" nameLabel="PointsLines_property_speech_text_disconnected" type="string"/>
            </property>
            <property name="ConnectedTo" nameLabel="PointsLines_property_speech_text_connected_to" type="staticrow">
                <property name="ConnectedTo" nameLabel="PointsLines_property_speech_text_connected_to" type="string"/>
            </property>
            <property name="Selected" nameLabel="PointsLines_property_speech_text_selected" type="staticrow">
                <property name="Selected" nameLabel="PointsLines_property_speech_text_selected" type="string"/>
            </property>
            <property name="Deselected" nameLabel="PointsLines_property_speech_text_deselected" type="staticrow">
                <property name="Deselected" nameLabel="PointsLines_property_speech_text_deselected" type="string"/>
            </property>
            <property name="Correct" nameLabel="PointsLines_property_speech_text_correct" type="staticrow">
                <property name="Correct" nameLabel="PointsLines_property_speech_text_correct" type="string"/>
            </property>
            <property name="Wrong" nameLabel="PointsLines_property_speech_text_wrong" type="staticrow">
                <property name="Wrong" nameLabel="PointsLines_property_speech_text_wrong" type="string"/>
            </property>
        </property>
	</model>
<css>.addon_PointsLines .pointslines {&#13;
    border: 3px solid #ccc;&#13;
    position:absolute;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
.addon_PointsLines .disabled {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    background-color: gray;&#13;
    opacity: 0.3;&#13;
    position:absolute;&#13;
}&#13;
&#13;
.addon_PointsLines .correct {&#13;
    border: 3px solid green;&#13;
}&#13;
&#13;
.addon_PointsLines .wrong {&#13;
    border: 3px solid red;&#13;
}&#13;
&#13;
.addon_PointsLines .point_container {&#13;
    position: absolute;&#13;
    /*min-height: 25px;&#13;
    min-width: 25px;*/&#13;
    min-height: 75px;&#13;
    min-width: 75px;&#13;
}&#13;
&#13;
.addon_PointsLines .point {&#13;
    position: relative;&#13;
    height: 16px;&#13;
    width: 16px;&#13;
    background-color: gray;&#13;
    border-radius: 8px;&#13;
    float: left;&#13;
    /*left:-8px;&#13;
    top: -8px;*/&#13;
    left:17px;&#13;
    top: 17px;&#13;
    margin-bottom: -5px;&#13;
}&#13;
&#13;
.addon_PointsLines .selected {&#13;
    background-color: blue;&#13;
}&#13;
&#13;
.addon_PointsLines .line {&#13;
    position: absolute;&#13;
    height:3px;&#13;
    background-color: blue;&#13;
}&#13;
&#13;
.addon_PointsLines .line-show-answer {&#13;
    position: absolute;&#13;
    height:3px;&#13;
    background-color: gray;&#13;
}&#13;
&#13;
.addon_PointsLines .noremovable {&#13;
    background-color: black;&#13;
}&#13;
&#13;
.addon_PointsLines .correctLine {&#13;
    background-color: green;&#13;
}&#13;
&#13;
.addon_PointsLines .wrongLine {&#13;
    background-color: red;&#13;
}&#13;
&#13;
.addon_PointsLines .point_index {&#13;
    color: black;&#13;
    cursor: default;&#13;
}&#13;
</css><view>&lt;div class="pointslines"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="pointslines"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonPointsLines_create() {&#13;
    var presenter = function() {};&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
    presenter.answersNumber = 0;&#13;
&#13;
    presenter.altTexts = [];&#13;
    presenter.langTag = '';&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.speechTexts = null;&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'PE' : 'Points coordinates incorrect!',&#13;
        'PO' : 'Points outside the addon!',&#13;
        'NP' : 'Define the points!',&#13;
        'IE' : 'Indexes incorrect!',&#13;
        'LE' : 'Starting lines incorrect!',&#13;
        'BL' : 'Blocked lines incorrect!',&#13;
        'AE' : 'Answer incorrect!',&#13;
        'AT' : 'Alternative texts incorrect!'&#13;
    };&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        POINT: "Point",&#13;
        CONNECTED: "Connected",&#13;
        DISCONNECTED: "Disconnected",&#13;
        CONNECTED_TO: "Connected to",&#13;
        SELECTED: "Selected",&#13;
        DESELECTED: "Deselected",&#13;
        WRONG: "Wrong",&#13;
        CORRECT: "Correct",&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsNeutral'.toLowerCase():&#13;
                presenter.markAsNeutral();&#13;
                break;&#13;
            case 'isEmpty'.toLowerCase():&#13;
                presenter.isEmpty();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'isConnected'.toLowerCase():&#13;
                presenter.isConnected(params[0],params[1]);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return (!(presenter.activity) || (presenter.getScore() !== 0) || (presenter.getErrorCount() !== 0));&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
        presenter.$view.find('.pointslines').addClass('correct');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').addClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsNeutral = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.isConnected = function(i,j) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var lineIndex = presenter.currentLines[Math.min(i-1,j-1)][Math.max(i-1,j-1)];&#13;
        if (lineIndex == 1 || lineIndex == 2) {&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isEmpty = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        var i, j;&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (j = i; j &lt; numberOfPoints; j++) {&#13;
                if (presenter.startingLines[i][j] !== presenter.currentLines[i][j]) {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return ((presenter.getScore() == presenter.getMaxScore()) &amp;&amp; (presenter.getErrorCount() === 0));&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id', 'disabled_' + presenter.addonID);&#13;
            div.attr('class', 'disabled');&#13;
            presenter.$view.find('.pointslines').append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').remove();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        const events = ['ShowAnswers', 'HideAnswers', 'GradualShowAnswers', 'GradualHideAnswers'];&#13;
        for (const event of events) {&#13;
            presenter.eventBus.addEventListener(event, this);&#13;
        }&#13;
    };&#13;
    presenter.createEventData = function(line, state, score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : line,&#13;
            value : state,&#13;
            score : score&#13;
        };&#13;
    };&#13;
&#13;
    function uncheckLine(line) {&#13;
        var splittedLine = line.split("_"),&#13;
            point1 = splittedLine[1],&#13;
            point2 = splittedLine[2];&#13;
&#13;
        presenter.$view.find('#line_'+(point1)+'_'+(point2)).remove();&#13;
        presenter.currentLines[point1][point2] = 0;&#13;
&#13;
        presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
        presenter.selectedPoint = -1;&#13;
    }&#13;
&#13;
    presenter.triggerLineEvent = function(line, state, score) {&#13;
        var eventData = presenter.createEventData(line, state, score);&#13;
        if(parseInt(score, 10) === 0 &amp;&amp; presenter.blockWrongAnswers) {&#13;
            uncheckLine(line);&#13;
            if(presenter.singleMode) {&#13;
                var splittedLine = line.split("_"),&#13;
                    point1 = splittedLine[1],&#13;
                    point2 = splittedLine[2];&#13;
                presenter.pointsConnected[point1] = 0;&#13;
                presenter.pointsConnected[point2] = 0;&#13;
            }&#13;
        }&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    function checkIndexes(indexes, numberOfPoints) {&#13;
        indexes = indexes.replace(/\s/g, '');&#13;
        var pointsIndexes = new Array(numberOfPoints);&#13;
        var i;&#13;
        if (indexes == '') {&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = '';&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else {&#13;
            pointsIndexes = indexes.split(',');&#13;
            if (pointsIndexes.length != numberOfPoints) {&#13;
                presenter.error = 'IE';&#13;
                return false;&#13;
            } else {&#13;
                return pointsIndexes;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getPoint(con, coords) {&#13;
        coords = coords.replace(/\s/g, '');&#13;
        if (coords == '') {&#13;
            presenter.error = 'NP';&#13;
            return false;&#13;
        } else {&#13;
            var points = coords.split(']');&#13;
            var numberOfPoints = points.length - 1;&#13;
            var pointsCoordinates = new Array(numberOfPoints);&#13;
            var tmp_dane;&#13;
            if (points[numberOfPoints] != '') {&#13;
                presenter.error = 'PE';&#13;
                return false;&#13;
            }&#13;
            var i;&#13;
            for (i = 0; i &lt; points.length - 1; i++) {&#13;
                tmp_dane = points[i].split(',');&#13;
                pointsCoordinates[i] = new Array(2);&#13;
                if (tmp_dane[0][0] != '[') {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][0] = tmp_dane[0].substring(1);&#13;
                pointsCoordinates[i][1] = tmp_dane[1];&#13;
                if (isNaN(pointsCoordinates[i][0]) || isNaN(pointsCoordinates[i][1])) {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                } else if (pointsCoordinates[i][0] &gt;= (con.width()) || pointsCoordinates[i][0] &lt;= 0 || pointsCoordinates[i][1] &lt;= 0 || pointsCoordinates[i][1] &gt;= (con.height())) {&#13;
                    presenter.error = 'PO';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][1] = parseInt(pointsCoordinates[i][1], 10);&#13;
                pointsCoordinates[i][0] = parseInt(pointsCoordinates[i][0], 10);&#13;
            }&#13;
        }&#13;
        return pointsCoordinates;&#13;
    }&#13;
&#13;
    function getLines(dataLines, numberOfPoints, type) {&#13;
        if (dataLines == undefined) dataLines='';&#13;
        dataLines = dataLines.replace(/\s/g, '');&#13;
        var Lines = new Array(numberOfPoints);&#13;
        var i, j, tmp_dane, point1, point2;&#13;
&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            Lines[i] = new Array(numberOfPoints);&#13;
            for (j = i; j &lt; numberOfPoints; j++) {&#13;
                Lines[i][j] = 0;&#13;
            }&#13;
        }&#13;
&#13;
        if (dataLines == '') {&#13;
            return Lines;&#13;
        }&#13;
        var addLine = dataLines.split(',');&#13;
        for (i = 0; i &lt; addLine.length; i++) {&#13;
            tmp_dane = addLine[i].split('-');&#13;
            if (tmp_dane[0] == '' || tmp_dane[1] == '') {&#13;
                presenter.error = 'LE';&#13;
                return false;&#13;
            }&#13;
            if (!isNaN(tmp_dane[0]) &amp;&amp; tmp_dane[0] &lt;= numberOfPoints &amp;&amp; (!isNaN(tmp_dane[1])) &amp;&amp; tmp_dane[1] &lt;= numberOfPoints) {&#13;
                point1 = Math.min(parseInt(tmp_dane[1],10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                point2 = Math.max(parseInt(tmp_dane[1],10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                Lines[point1][point2] = 1;&#13;
            } else if (type == 1 &amp;&amp; !isNaN(tmp_dane[0]) &amp;&amp; parseInt(tmp_dane[0], 10) &lt;= numberOfPoints &amp;&amp; !isNaN(tmp_dane[1].substring(0, tmp_dane[1].length - 1)) &amp;&amp; (tmp_dane[1].substring(tmp_dane[1].length - 1)) === '*' &amp;&amp; parseInt(tmp_dane[1].substring(0, tmp_dane[1].length - 1), 10) &lt;= numberOfPoints) {&#13;
                point1 = Math.min(parseInt(tmp_dane[1].substring(0,tmp_dane[1].length-1),10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                point2 = Math.max(parseInt(tmp_dane[1].substring(0,tmp_dane[1].length-1),10)-1,parseInt(tmp_dane[0],10)-1);&#13;
                Lines[point1][point2] = 2;&#13;
            } else {&#13;
                if (type == 1) {&#13;
                    presenter.error = 'LE';&#13;
                } else if (type == 2) {&#13;
                    presenter.error = 'AE';&#13;
                } else {&#13;
                    presenter.error = 'BL';&#13;
                }&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return Lines;&#13;
    }&#13;
&#13;
    function getAlternativeTexts(configurationText) {&#13;
        configurationText = window.xssUtils.sanitize(configurationText);&#13;
        let texts = configurationText.split(/\r?\n/);&#13;
        texts.forEach((text, index) =&gt; {&#13;
            texts[index] = text.replace(/\s/g, '');&#13;
        })&#13;
&#13;
        if (texts.length &gt; presenter.points.length) {&#13;
            presenter.error = 'AT';&#13;
            return false;&#13;
        }&#13;
        return texts;&#13;
    }&#13;
&#13;
    presenter.drawPoints = function() {&#13;
        for ( var i = 0; i &lt; (presenter.points).length; i++) {&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id', 'point_container_' + presenter.addonID + '_' + i);&#13;
            div.attr('class', 'point_container');&#13;
            div.attr('order_value', i + 1);&#13;
            // 왼쪽 하단으로 치우쳐진 터치영역 보정&#13;
            div.attr('style', 'left: ' + parseInt(parseInt(presenter.points[i][0])-28) + 'px; top: ' + parseInt(parseInt(presenter.points[i][1])-28) + 'px;');&#13;
            presenter.$view.find('.pointslines').append(div);&#13;
            div = $('&lt;div class="point"&gt;&lt;/div&gt;');&#13;
            div.attr('id', 'point_' + presenter.addonID + '_' + i);&#13;
            presenter.$view.find('#point_container_' + presenter.addonID + '_' + i).append(div);&#13;
            div = $('&lt;div class="point_index"&gt;' + presenter.indexes[i] + '&lt;/div&gt;');&#13;
            presenter.$view.find('#point_container_' + presenter.addonID + '_' + i).append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawLine = function(i, j, showAnswers) {&#13;
        if (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0 || showAnswers) {&#13;
            var m, angle, d, transform, id, line;&#13;
            x1 = parseInt(presenter.points[i][0], 10);&#13;
            y1 = parseInt(presenter.points[i][1], 10);&#13;
            x2 = parseInt(presenter.points[j][0], 10);&#13;
            y2 = parseInt(presenter.points[j][1], 10);&#13;
            m = (y2 - y1) / (x2 - x1);&#13;
            angle = (Math.atan(m)) * 180 / (Math.PI);&#13;
            d = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));&#13;
            if (x2 &gt;= x1) {&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            div = $('&lt;div&gt;');&#13;
            if (!showAnswers) {&#13;
                id = 'line_' + i + '_' + j;&#13;
            } else {&#13;
                id = 'line_show_answer_' + i + '_' + j;&#13;
            }&#13;
            div.attr('id', id);&#13;
            div.attr('point1', i);&#13;
            div.attr('point2', j);&#13;
            if (!showAnswers) {&#13;
                div.attr('class', 'line');&#13;
            } else {&#13;
                div.attr('class', 'line-show-answer');&#13;
            }&#13;
            div.attr('style', 'left: ' + x1 + 'px; top: ' + y1 + 'px');&#13;
            presenter.$view.find('.pointslines').prepend(div);&#13;
            presenter.$view.find('#'+id).css({&#13;
                'left' : x1,&#13;
                'top' : y1,&#13;
                'width' : d,&#13;
                'transform' : 'rotate(' + transform + 'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate(' + transform + 'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
            if (presenter.startingLines[i][j] == 2) {&#13;
                presenter.$view.find('#line_' + i + '_' + j).addClass('noremovable');&#13;
            }&#13;
            if (presenter.keyboardControllerObject) {&#13;
                presenter.keyboardControllerObject.readConnected();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawTempLine = function (i, x, y) {&#13;
        var scaledPoint = scalePoint({x: x, y: y});&#13;
        x = scaledPoint.x;&#13;
        y = scaledPoint.y;&#13;
&#13;
        if (presenter.draw !== false) {&#13;
            if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                presenter.$view.find('#line_tmp').remove();&#13;
            }&#13;
            var m, angle, d, transform, id, line;&#13;
            x1 = parseInt(presenter.points[i][0],10);&#13;
            y1 = parseInt(presenter.points[i][1],10);&#13;
            m = (y-y1)/(x-x1);&#13;
            angle = (Math.atan(m))*180/(Math.PI);&#13;
            d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
            if (x &gt;= x1){&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            div = $('&lt;div&gt;');&#13;
            div.attr('id','line_tmp');&#13;
            div.attr('class','line');&#13;
            div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
            presenter.$view.find('.pointslines').prepend(div);&#13;
            presenter.$view.find('#line_tmp').css({&#13;
                'left': x1,&#13;
                'top': y1,&#13;
                'width': d,&#13;
                'transform' : 'rotate('+transform+'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate('+transform+'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate('+transform+'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate('+transform+'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initiate = function(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        var coords = presenter.model['Points'];&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is activity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['Is disabled']);&#13;
        presenter.singleMode = ModelValidationUtils.validateBoolean(presenter.model['Single']);&#13;
        presenter.langTag = model['langAttribute'];&#13;
        presenter.showAllAnswersInGradualShowAnswersMode = ModelValidationUtils.validateBoolean(presenter.model['showAllAnswersInGradualShowAnswersMode']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        var startingLines = presenter.model['Starting lines'];&#13;
        var blockedLines = presenter.model['Blocked lines'];&#13;
        presenter.blockWrongAnswers = ModelValidationUtils.validateBoolean(presenter.model['Block wrong answers']);&#13;
        var con = presenter.$view.find('.pointslines').parent();&#13;
        presenter.$view.find('.pointslines').css({&#13;
            'width' : con.width(),&#13;
            'height' : con.height()&#13;
        });&#13;
        presenter.points = getPoint(con, coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
        presenter.altTexts = getAlternativeTexts(model["alternativeTexts"]);&#13;
        if (presenter.points === false || presenter.indexes === false || presenter.altTexts === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        presenter.drawPoints();&#13;
        numberOfPoints = presenter.points.length;&#13;
        if (presenter.singleMode) presenter.pointsConnected =  new Array(numberOfPoints);&#13;
        presenter.startingLines = getLines(startingLines, numberOfPoints, 1);&#13;
        if (presenter.startingLines === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        presenter.currentLines = getLines(startingLines, numberOfPoints, 1);&#13;
        presenter.blockedLines = getLines(blockedLines, numberOfPoints, 3);&#13;
        if (presenter.blockedLines === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
        if (presenter.singleMode) {&#13;
            for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
                presenter.pointsConnected[i] = 0;&#13;
            }&#13;
        }&#13;
        for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for ( var j = i; j &lt; numberOfPoints; j++) {&#13;
                if (presenter.currentLines[i][j] == 1 || presenter.currentLines[i][j] == 2) {&#13;
                    presenter.drawLine(i, j);&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[i] = 1;&#13;
                        presenter.pointsConnected[j] = 1;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        var answer = presenter.model['Lines'];&#13;
        presenter.answer = getLines(answer, numberOfPoints, 2);&#13;
        if (presenter.answer === false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
            return;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.doClick = function(i) {&#13;
        if (presenter.selectedPoint == i) {&#13;
            presenter.$view.find('#point_'+presenter.addonID+'_'+i).removeClass('selected');&#13;
            presenter.selectedPoint = -1;&#13;
        } else if (presenter.selectedPoint !== -1) {&#13;
            point1 = Math.min(parseInt(presenter.selectedPoint,10),parseInt(i,10));&#13;
            point2 = Math.max(parseInt(presenter.selectedPoint,10),parseInt(i,10));&#13;
            if (presenter.currentLines[point1][point2] === 0 &amp;&amp; presenter.blockedLines[point1][point2] != 1) {&#13;
                if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[point1]== 1 || presenter.pointsConnected[point2] == 1)) {&#13;
                } else {&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[point1] = 1;&#13;
                        presenter.pointsConnected[point2] = 1;&#13;
                    };&#13;
                    presenter.drawLine(point1,point2);&#13;
                    presenter.currentLines[point1][point2] = 1;&#13;
                    line = 'line_'+(point1)+'_'+(point2);&#13;
                    if (presenter.startingLines[point1][point2] === 0 &amp;&amp; presenter.answer[point1][point2] == 1) {&#13;
                        score = 1;&#13;
                    } else {&#13;
                        score = 0;&#13;
                    }&#13;
                    presenter.triggerLineEvent(line,1,score);&#13;
                    line = 'all';&#13;
                    score = '';&#13;
                    if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                        presenter.triggerLineEvent(line,score,score);&#13;
                    }&#13;
                    presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                    presenter.selectedPoint = -1;&#13;
                }&#13;
            } else if (presenter.currentLines[point1][point2] == 1) {&#13;
                presenter.$view.find('#line_'+(point1)+'_'+(point2)).remove();&#13;
                if (presenter.keyboardControllerObject) {&#13;
                    presenter.keyboardControllerObject.readDisconnected();&#13;
                }&#13;
                presenter.currentLines[point1][point2] = 0;&#13;
                if (presenter.singleMode) {&#13;
                    presenter.pointsConnected[point1] = 0;&#13;
                    presenter.pointsConnected[point2] = 0;&#13;
                };&#13;
                line = 'line_'+(point1)+'_'+(point2);&#13;
                if (presenter.startingLines[point1][point2] == 1 &amp;&amp; presenter.answer[point1][point2] === 0) {&#13;
                    score = 1;&#13;
                } else {&#13;
                    score = 0;&#13;
                }&#13;
                presenter.triggerLineEvent(line,0,score);&#13;
                line = 'all';&#13;
                score = '';&#13;
                if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                    presenter.triggerLineEvent(line,score,score);&#13;
                }&#13;
                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                presenter.selectedPoint = -1;&#13;
            } else {&#13;
                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                presenter.selectedPoint = -1;&#13;
            }&#13;
        } else {&#13;
            presenter.$view.find('#point_'+presenter.addonID+'_'+i).addClass('selected');&#13;
            presenter.selectedPoint = i;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        let upgradedModel = presenter.upgradeShowAllAnswersInGSAMode(model);&#13;
        upgradedModel = presenter.upgradeAlternativeTexts(upgradedModel);&#13;
        upgradedModel = presenter.upgradeLangTag(upgradedModel);&#13;
        upgradedModel = presenter.upgradeSpeechText(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeShowAllAnswersInGSAMode = function (model) {&#13;
        let upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!upgradedModel.hasOwnProperty('showAllAnswersInGradualShowAnswersMode')) {&#13;
            upgradedModel['showAllAnswersInGradualShowAnswersMode'] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeAlternativeTexts = function (model) {&#13;
        let upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!upgradedModel.hasOwnProperty('alternativeTexts')) {&#13;
            upgradedModel['alternativeTexts'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeLangTag = function (model) {&#13;
        let upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('langAttribute')) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechText = function (model) {&#13;
        let upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('speechTexts')) {&#13;
            upgradedModel['speechTexts'] = {};&#13;
        }&#13;
&#13;
        const speechTextProperties = [&#13;
            'Point', 'Connected', 'Disconnected', 'ConnectedTo',&#13;
            'Selected', 'Deselected', 'Correct', 'Wrong'&#13;
        ];&#13;
        speechTextProperties.forEach((propertyName) =&gt; {&#13;
            if (!upgradedModel['speechTexts'].hasOwnProperty(propertyName)) {&#13;
                let property = {};&#13;
                property[propertyName] = "";&#13;
                upgradedModel['speechTexts'][propertyName] = property;&#13;
            }&#13;
        });&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            point: presenter.DEFAULT_TTS_PHRASES.POINT,&#13;
            connected: presenter.DEFAULT_TTS_PHRASES.CONNECTED,&#13;
            disconnected: presenter.DEFAULT_TTS_PHRASES.DISCONNECTED,&#13;
            connectedTo: presenter.DEFAULT_TTS_PHRASES.CONNECTED_TO,&#13;
            selected: presenter.DEFAULT_TTS_PHRASES.SELECTED,&#13;
            deselected: presenter.DEFAULT_TTS_PHRASES.DESELECTED,&#13;
            correct: presenter.DEFAULT_TTS_PHRASES.CORRECT,&#13;
            wrong: presenter.DEFAULT_TTS_PHRASES.WRONG,&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            point: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Point.Point,&#13;
                presenter.speechTexts.point),&#13;
            connected: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Connected.Connected,&#13;
                presenter.speechTexts.connected),&#13;
            disconnected: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Disconnected.Disconnected,&#13;
                presenter.speechTexts.disconnected),&#13;
            connectedTo: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.ConnectedTo.ConnectedTo,&#13;
                presenter.speechTexts.connectedTo),&#13;
            selected: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Selected.Selected,&#13;
                presenter.speechTexts.selected),&#13;
            deselected: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Deselected.Deselected,&#13;
                presenter.speechTexts.deselected),&#13;
            correct: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Correct.Correct,&#13;
                presenter.speechTexts.correct),&#13;
            wrong: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Wrong.Wrong,&#13;
                presenter.speechTexts.wrong),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.initiate(view, model);&#13;
        presenter.setSpeechTexts(model["speechTexts"]);&#13;
        if (!presenter.error) {&#13;
            var $div = presenter.$view.find('.pointslines');&#13;
            var Width = $div.width();&#13;
            var Height = $div.height();&#13;
            var i, j;&#13;
            var line, score;&#13;
            var point1, point2, distance;&#13;
            presenter.selectedPoint = -1;&#13;
            presenter.draw = false;&#13;
            var timeClick = true;&#13;
            if (presenter.disabled) presenter.disable();&#13;
&#13;
&#13;
            presenter.$view.find('.point_container').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.draw = parseInt($(this).attr('order_value'),10)-1;&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.$view.on('mousemove',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.drawTempLine(presenter.draw,presenter.mouseSX,presenter.mouseSY);&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.point_container').on('mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.draw !== false &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                    }&#13;
                    j = parseInt($(this).attr('order_value'),10)-1;&#13;
                    if (presenter.draw !== j &amp;&amp; presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.blockedLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] != 1) {&#13;
                        if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[j]== 1 || presenter.pointsConnected[presenter.draw] == 1)) {&#13;
                        } else {&#13;
                            if(presenter.singleMode) {&#13;
                                presenter.pointsConnected[j] = 1;&#13;
                                presenter.pointsConnected[presenter.draw] = 1;&#13;
                            }&#13;
                            presenter.drawLine(Math.min(presenter.draw,j),Math.max(presenter.draw,j));&#13;
                            presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] = 1;&#13;
                            line = 'line_'+(Math.min(presenter.draw,j))+'_'+(Math.max(presenter.draw,j));&#13;
                            if (presenter.selectedPoint !== -1) {&#13;
                                presenter.$view.find('#point_'+presenter.addonID+'_'+i).removeClass('selected');&#13;
                                presenter.selectedPoint = -1;&#13;
                            }&#13;
                            if (presenter.startingLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.answer[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 1) {&#13;
                                score = 1;&#13;
                            } else {&#13;
                                score = 0;&#13;
                            }&#13;
                            presenter.triggerLineEvent(line,1,score);&#13;
                            line = 'all';&#13;
                            score = '';&#13;
                            if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                                presenter.triggerLineEvent(line,score,score);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                presenter.draw = false;&#13;
            });&#13;
&#13;
            presenter.$view.on('mouseup mouseleave',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = false;&#13;
&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.point_container').on('touchstart', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.mouseSX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseSY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                    presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                    presenter.draw = parseInt($(this).attr('order_value'),10)-1;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.pointslines').on('touchmove', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                if (presenter.mouseX &gt;  Width || presenter.mouseY &gt; Height || presenter.mouseX &lt; 0 || presenter.mouseY &lt; 0) {&#13;
                    presenter.draw = false;&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                    }&#13;
                }&#13;
                if (presenter.draw !== false) {&#13;
                    presenter.drawTempLine(presenter.draw,presenter.mouseX,presenter.mouseY);&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('touchend', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (Math.abs(presenter.mouseSX - presenter.mouseX) + Math.abs(presenter.mouseSY - presenter.mouseY) &lt; 15 &amp;&amp; presenter.draw !== false) {&#13;
                    if (timeClick) presenter.doClick(presenter.draw);&#13;
                    timeClick = false;&#13;
                    setTimeout(function(){timeClick = true;},310);&#13;
                    //			presenter.doClick(presenter.draw);&#13;
                } else  if (presenter.draw !== false){&#13;
                    j = -1;&#13;
                    var scaledPoint = scalePoint({x: presenter.mouseX, y: presenter.mouseY});&#13;
                    presenter.mouseX = scaledPoint.x;&#13;
                    presenter.mouseY = scaledPoint.y;&#13;
&#13;
                    for (i = 0; i &lt; (presenter.points).length; i++) {&#13;
                        distance = Math.abs(presenter.mouseX - parseInt(presenter.points[i][0], 10)) + Math.abs(presenter.mouseY - parseInt(presenter.points[i][1], 10));&#13;
                        if (distance &lt; 25) {&#13;
                            j = i;&#13;
                        }&#13;
                    }&#13;
                    if (j !== -1 &amp;&amp; presenter.draw !== j &amp;&amp; presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0  &amp;&amp; presenter.blockedLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] != 1) {&#13;
                        if(presenter.singleMode &amp;&amp; (presenter.pointsConnected[j]== 1 || presenter.pointsConnected[presenter.draw] == 1)) {&#13;
                        } else {&#13;
                            if(presenter.singleMode) {&#13;
                                presenter.pointsConnected[j] = 1;&#13;
                                presenter.pointsConnected[presenter.draw] = 1;&#13;
                            }&#13;
                            presenter.drawLine(Math.min(presenter.draw,j),Math.max(presenter.draw,j));&#13;
                            presenter.currentLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] = 1;&#13;
                            line = 'line_'+(Math.min(presenter.draw,j))+'_'+(Math.max(presenter.draw,j));&#13;
                            if (presenter.selectedPoint !== -1) {&#13;
                                presenter.$view.find('#point_'+presenter.addonID+'_'+presenter.selectedPoint).removeClass('selected');&#13;
                                presenter.selectedPoint = -1;&#13;
                            }&#13;
&#13;
                            if (presenter.startingLines[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 0 &amp;&amp; presenter.answer[Math.min(presenter.draw,j)][Math.max(presenter.draw,j)] === 1) {&#13;
                                score = 1;&#13;
                            } else {&#13;
                                score = 0;&#13;
                            }&#13;
                            presenter.triggerLineEvent(line,1,score);&#13;
                            if (presenter.isAllOK() &amp;&amp; presenter.activity) {&#13;
                                line = 'all';&#13;
                                score = '';&#13;
                                presenter.triggerLineEvent(line,score,score);&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                presenter.draw = false;&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
            presenter.$view.find('.point_container').click(function(event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; timeClick) {&#13;
                    i = parseInt($(this).attr('order_value'), 10) - 1;&#13;
                    presenter.doClick(i);&#13;
                }&#13;
            });&#13;
        }&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (eventName == "GradualShowAnswers") {&#13;
            if (!presenter.isGradualShowAnswersActive) {&#13;
                presenter.isGradualShowAnswersActive = true;&#13;
            }&#13;
            if (data.moduleID === presenter.addonID) {&#13;
                presenter.gradualShowAnswers(parseInt(data.item, 10));&#13;
            }&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.gradualHideAnswers();&#13;
        }&#13;
    }&#13;
&#13;
    function getMousePositionOnCanvas(e) {&#13;
        var rect = presenter.canvas.getBoundingClientRect(), client = {&#13;
            x : e.clientX,&#13;
            y : e.clientY&#13;
        };&#13;
&#13;
        return {&#13;
            x : parseInt(client.x - rect.left, 10),&#13;
            y : parseInt(client.y - rect.top, 10)&#13;
        };&#13;
    }&#13;
&#13;
    function scalePoint({x, y}) {&#13;
        var scaledPoint = {x: x, y: y};&#13;
        if (!presenter.playerController)&#13;
            return scaledPoint;&#13;
&#13;
        var scale = presenter.playerController.getScaleInformation();&#13;
        if (scale.scaleX !== 1.0 || scale.scaleY !== 1.0) {&#13;
            scaledPoint.x = Math.floor(scaledPoint.x / scale.scaleX);&#13;
            scaledPoint.y = Math.floor(scaledPoint.y / scale.scaleY);&#13;
        }&#13;
        return scaledPoint;&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.initiate(view, model);&#13;
        var canvasElement = $('&lt;canvas&gt;&lt;/canvas&gt;'),&#13;
            ctx = canvasElement[0].getContext('2d');&#13;
&#13;
        canvasElement.attr('width', presenter.$view.find('.pointslines').parent().width());&#13;
        canvasElement.attr('height', presenter.$view.find('.pointslines').parent().height());&#13;
&#13;
        presenter.canvasWidth = presenter.$view.find('.pointslines').parent().width;&#13;
        presenter.canvasHeight = presenter.$view.find('.pointslines').parent().height;&#13;
        presenter.canvas = canvasElement[0];&#13;
&#13;
        presenter.$view.find('.pointslines').append(canvasElement);&#13;
        presenter.canvasOffset = canvasElement.offset();&#13;
&#13;
        var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
            xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
            yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
            coloringWrapper = presenter.$view.find('.pointslines');&#13;
&#13;
        coordinatesContainer.css({&#13;
            'width' : 35,&#13;
            'height' : 22,&#13;
            'border' : '1px solid #696969',&#13;
            'borderRadius' : '3px',&#13;
            'position' : 'absolute',&#13;
            'top' : 3,&#13;
            'left' : 3,&#13;
            'fontSize' : '9px',&#13;
            'padding' : '5px',&#13;
            'lineHeight' : '11px'&#13;
        });&#13;
&#13;
        coordinatesContainer.append(xContainer).append(yContainer);&#13;
&#13;
        coloringWrapper.append(coordinatesContainer);&#13;
        coloringWrapper.css({&#13;
            'position' : 'relative',&#13;
            'minHeight' : presenter.canvasHeight,&#13;
            'minWidth' : presenter.canvasWidth&#13;
        });&#13;
&#13;
        function setCalculatedPosition(e) {&#13;
            xContainer.find('.value').html(getMousePositionOnCanvas(e).x);&#13;
            yContainer.find('.value').html(getMousePositionOnCanvas(e).y);&#13;
        }&#13;
&#13;
        var doesElementExist = function() {&#13;
            var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
            if ($moduleSelector.length &gt; 0) {&#13;
                $moduleSelector.on('mousemove', function(e) {&#13;
                    setCalculatedPosition(e);&#13;
                });&#13;
&#13;
                clearInterval(interval);&#13;
            }&#13;
        };&#13;
&#13;
        var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
        canvasElement.on('mousemove', function(e) {&#13;
            setCalculatedPosition(e);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var numberOfPoints = presenter.points.length;&#13;
        if (presenter.singleMode) {&#13;
            for ( var i = 0; i &lt; numberOfPoints; i++) {&#13;
                presenter.pointsConnected[i] = 0;&#13;
            }&#13;
        };&#13;
        for (i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                presenter.currentLines[i][j] = presenter.startingLines[i][j];&#13;
                if (presenter.startingLines[i][j] == 1 || presenter.startingLines[i][j] == 2) {&#13;
                    if (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0)&#13;
                        presenter.drawLine(i, j);&#13;
                    if (presenter.singleMode) {&#13;
                        presenter.pointsConnected[i] = 1;&#13;
                        presenter.pointsConnected[j] = 1;&#13;
                    }&#13;
                } else if (presenter.startingLines[i][j] === 0 &amp;&amp; presenter.$view.find('#line_' + (i) + '_' + (j)).length == 1) {&#13;
                    presenter.$view.find('#line_' + (i) + '_' + (j)).remove();&#13;
                }&#13;
            }&#13;
        }&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.selectedPoint = -1;&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        if (presenter.disabled) {&#13;
            presenter.disable();&#13;
        } else {&#13;
            presenter.enable();&#13;
        }&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateVisibility();&#13;
        presenter.setWorkMode();&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return JSON.stringify({&#13;
            currentLines : presenter.currentLines,&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            single : presenter.pointsConnected&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.currentLines = JSON.parse(state).currentLines;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.pointsConnected = JSON.parse(state).single;&#13;
        if (presenter.error == false) {&#13;
            if (presenter.disabled) {&#13;
                presenter.disable();&#13;
            } else {&#13;
                presenter.enable();&#13;
            }&#13;
            presenter.isVisible = JSON.parse(state).visible;&#13;
            presenter.updateVisibility();&#13;
            var numberOfPoints = presenter.points.length;&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                    if ((presenter.currentLines[i][j] == 1 || presenter.currentLines[i][j] == 2) &amp;&amp; (presenter.$view.find('#line_' + (i) + '_' + (j)).length &lt;= 0)) {&#13;
                        presenter.drawLine(i, j);&#13;
                    } else {&#13;
                        if (presenter.currentLines[i][j] === 0 &amp;&amp; presenter.$view.find('#line_' + (i) + '_' + (j)).length == 1) {&#13;
                            presenter.$view.find('#line_' + (i) + '_' + (j)).remove();&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        const isShowAnswersActive = presenter.isShowAnswersActive;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var score = 0;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return score;&#13;
        }&#13;
&#13;
        var numberOfPoints = presenter.points.length;&#13;
        for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                if ((presenter.startingLines[i][j] === 0 &amp;&amp; presenter.answer[i][j] == 1)&#13;
                    || (presenter.startingLines[i][j] == 1 &amp;&amp; presenter.answer[i][j] === 0)&#13;
                ) {&#13;
                    score++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (isShowAnswersActive) {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getScore = function(view, model) {&#13;
        const isShowAnswersActive = presenter.isShowAnswersActive;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var score = 0;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return score;&#13;
        }&#13;
&#13;
        var numberOfPoints = presenter.points.length;&#13;
        for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                if (isCorrctConnected(i, j)) {&#13;
                    score++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
        if (isShowAnswersActive) {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        const isShowAnswersActive = presenter.isShowAnswersActive;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var errors = 0;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return errors;&#13;
        }&#13;
&#13;
        var numberOfPoints = presenter.points.length;&#13;
        for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                if (isWrongConnected(i, j)) {&#13;
                    errors++;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (isShowAnswersActive) {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        return errors;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
        if (!presenter.activity || (presenter.error !== false)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var numberOfPoints = presenter.points.length;&#13;
        for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
            for (var j = i; j &lt; numberOfPoints; j++) {&#13;
                var lineId = '#line_' + i + '_' + j;&#13;
                if (isCorrctConnected(i, j)) {&#13;
                    presenter.$view.find(lineId).addClass('correctLine');&#13;
                } else if (isWrongConnected(i, j)) {&#13;
                    presenter.$view.find(lineId).addClass('wrongLine');&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.getErrorCount() === 0 &amp;&amp; !(presenter.isEmpty())) {&#13;
            presenter.$view.find('.pointslines').addClass('correct');&#13;
        } else if (presenter.getScore() === 0 &amp;&amp; presenter.getErrorCount() === 0) {&#13;
        } else {&#13;
            presenter.$view.find('.pointslines').addClass('wrong');&#13;
        }&#13;
    };&#13;
&#13;
    function isCorrctConnected(point1Index, point2Index) {&#13;
        if (point1Index &gt; point2Index) {&#13;
            let temp = point1Index;&#13;
            point1Index = point2Index;&#13;
            point2Index = temp;&#13;
        }&#13;
        return ((presenter.startingLines[point1Index][point2Index] === 0&#13;
                &amp;&amp; presenter.answer[point1Index][point2Index] == 1&#13;
                &amp;&amp; presenter.currentLines[point1Index][point2Index] == 1)&#13;
            || (presenter.startingLines[point1Index][point2Index] == 1&#13;
                &amp;&amp; presenter.answer[point1Index][point2Index] === 0&#13;
                &amp;&amp; presenter.currentLines[point1Index][point2Index] === 0)&#13;
        )&#13;
    }&#13;
&#13;
    function isWrongConnected(point1Index, point2Index) {&#13;
        if (point1Index &gt; point2Index) {&#13;
            let temp = point1Index;&#13;
            point1Index = point2Index;&#13;
            point2Index = temp;&#13;
        }&#13;
        return ((presenter.startingLines[point1Index][point2Index] === 0&#13;
                &amp;&amp; presenter.answer[point1Index][point2Index] === 0&#13;
                &amp;&amp; presenter.currentLines[point1Index][point2Index] == 1)&#13;
            || (presenter.startingLines[point1Index][point2Index] == 1&#13;
                &amp;&amp; presenter.answer[point1Index][point2Index] == 1&#13;
                &amp;&amp; presenter.currentLines[point1Index][point2Index] === 0)&#13;
        )&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.wrongLine').removeClass('wrongLine');&#13;
        presenter.$view.find('.correctLine').removeClass('correctLine');&#13;
        presenter.$view.find('.pointslines').removeClass('correct');&#13;
        presenter.$view.find('.pointslines').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.gradualShowAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.line').not('.noremovable').css("visibility", "hidden");&#13;
            var showingAnswer = presenter.answersNumber;&#13;
            var numberOfPoints = presenter.points.length;&#13;
            var i, j;&#13;
            if (presenter.showAllAnswersInGradualShowAnswersMode) {&#13;
                for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                    for (j = i; j &lt; numberOfPoints; j++) {&#13;
                        if (presenter.answer[i][j] === 1) {&#13;
                            presenter.drawLine(i,j,true);&#13;
                        }&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                    for (j = i; j &lt; numberOfPoints; j++) {&#13;
                        if (presenter.answer[i][j] === 1) {&#13;
                            if (showingAnswer === 0) {&#13;
                                presenter.drawLine(i,j,true);&#13;
                                presenter.answersNumber++;&#13;
                            }&#13;
                            showingAnswer--;&#13;
                        }&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        if (!presenter.showAllAnswersInGradualShowAnswersMode) {&#13;
            var lineCounter = 0;&#13;
            var numberOfPoints = presenter.points.length;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.answer[i][j] === 1) {&#13;
                        lineCounter++;&#13;
                    }&#13;
                }&#13;
            }&#13;
            return lineCounter;&#13;
        }&#13;
        return 1;&#13;
    };&#13;
&#13;
    presenter.gradualHideAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            presenter.answersNumber = 0;&#13;
            presenter.isGradualShowAnswersActive = false;&#13;
            presenter.$view.find('.line-show-answer').remove();&#13;
            presenter.$view.find('.line').css("visibility", "inherit");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.$view.find('.line').not('.noremovable').css("visibility", "hidden");&#13;
            var numberOfPoints = presenter.points.length;&#13;
            var i, j;&#13;
            for (i = 0; i &lt; numberOfPoints; i++) {&#13;
                for (j = i; j &lt; numberOfPoints; j++) {&#13;
                    if (presenter.answer[i][j] == 1) {&#13;
                        presenter.drawLine(i,j,true);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity &amp;&amp; presenter.isShowAnswersActive) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.line-show-answer').remove();&#13;
            presenter.$view.find('.line').css("visibility", "inherit");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isShowingAnswers = function () {&#13;
        return presenter.isGradualShowAnswersActive || presenter.isShowAnswersActive;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject&#13;
            = new PointsLinesKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        return presenter.$view.find(`.point`);&#13;
    };&#13;
&#13;
    function PointsLinesKeyboardController(elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    presenter.isTTS = function () {&#13;
        return presenter.isWCAGOn &amp;&amp; presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype = Object.create(KeyboardController.prototype);&#13;
    PointsLinesKeyboardController.prototype.constructor = PointsLinesKeyboardController;&#13;
&#13;
    PointsLinesKeyboardController.prototype.getCurrentElement = function () {&#13;
        return this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.switchElement = function (move) {&#13;
        let newPositionIndex = this.keyboardNavigationCurrentElementIndex + move;&#13;
        if (newPositionIndex &gt;= this.keyboardNavigationElementsLen) {&#13;
            newPositionIndex = this.keyboardNavigationCurrentElementIndex;&#13;
        } else if (newPositionIndex &lt; 0) {&#13;
            newPositionIndex = 0;&#13;
        }&#13;
        this.markCurrentElement(newPositionIndex);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.select = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        if (!this.isSelectEnabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        const wasSelected = this.getCurrentElement().hasClass('selected');&#13;
&#13;
        this.selectAction();&#13;
&#13;
        const isSelected = this.getCurrentElement().hasClass('selected');&#13;
        if (!wasSelected &amp;&amp; isSelected) {&#13;
            this.readSelected();&#13;
        } else if (wasSelected &amp;&amp; !isSelected) {&#13;
            this.readDeselected();&#13;
        }&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.enter = function (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.readCurrentElement = function () {&#13;
        if (!presenter.isTTS()) {&#13;
            return;&#13;
        }&#13;
&#13;
        let textVoices = [];&#13;
        const $currentPoint = this.getCurrentElement();&#13;
        const currentPointIndex = parseInt($currentPoint.parent().attr('order_value'), 10) - 1;&#13;
        textVoices.push(this.createTextVoiceForPoint(currentPointIndex));&#13;
&#13;
        if ($currentPoint.hasClass('selected') &amp;&amp; !presenter.isShowingAnswers()) {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selected));&#13;
        }&#13;
&#13;
        const connectedPointsIndexes = getConnectedPointsIndexes(currentPointIndex);&#13;
        if (connectedPointsIndexes.length !== 0) {&#13;
            textVoices.push(this.createTextVoiceWithLanguageFromLesson(presenter.speechTexts.connectedTo));&#13;
            connectedPointsIndexes.forEach(pointIndex =&gt; {&#13;
                textVoices.push(this.createTextVoiceForPoint(pointIndex));&#13;
                if (!presenter.isErrorMode) {&#13;
                    return;&#13;
                }&#13;
&#13;
                if (isCorrctConnected(currentPointIndex, pointIndex)) {&#13;
                    textVoices.push(this.createTextVoiceWithLanguageFromLesson(presenter.speechTexts.correct));&#13;
                } else if (isWrongConnected(currentPointIndex, pointIndex)) {&#13;
                    textVoices.push(this.createTextVoiceWithLanguageFromLesson(presenter.speechTexts.wrong));&#13;
                }&#13;
            })&#13;
        }&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
    &#13;
    function getConnectedPointsIndexes (rootPointIndex) {&#13;
        let connectedPointsIndexes = [];&#13;
        if (presenter.isShowingAnswers()) {&#13;
            const linesForShowAnswers = presenter.view.querySelectorAll(`.line-show-answer`);&#13;
            const attribute1Name = `point1`;&#13;
            const attribute2Name = `point2`;&#13;
            linesForShowAnswers.forEach(line =&gt; {&#13;
                let attribute1Value = parseInt(line.getAttribute(attribute1Name), 10);&#13;
                if (attribute1Value === rootPointIndex) {&#13;
                    let attribute2Value = parseInt(line.getAttribute(attribute2Name), 10);&#13;
                    connectedPointsIndexes.push(attribute2Value);&#13;
                } else {&#13;
                    let attribute2Value = parseInt(line.getAttribute(attribute2Name), 10);&#13;
                    if (attribute2Value === rootPointIndex) {&#13;
                        connectedPointsIndexes.push(attribute1Value);&#13;
                    }&#13;
                }&#13;
            })&#13;
            connectedPointsIndexes = [...new Set(connectedPointsIndexes)];&#13;
        } else {&#13;
            let connections = presenter.currentLines[rootPointIndex];&#13;
            for (let i = 0; i &lt; rootPointIndex; i++) {&#13;
                connections[i] = presenter.currentLines[i][rootPointIndex];&#13;
            }&#13;
            connections.forEach((value, index) =&gt; {&#13;
                if (!value) return;&#13;
                connectedPointsIndexes.push(index);&#13;
            })&#13;
        }&#13;
        connectedPointsIndexes.sort();&#13;
        return connectedPointsIndexes;&#13;
    }&#13;
&#13;
    PointsLinesKeyboardController.prototype.readSelected = function () {&#13;
        if (!presenter.isTTS()) {&#13;
            return;&#13;
        }&#13;
&#13;
        let textVoices = [];&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.selected));&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.readDeselected = function () {&#13;
        if (!presenter.isTTS()) {&#13;
            return;&#13;
        }&#13;
&#13;
        let textVoices = [];&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.deselected));&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.readConnected = function () {&#13;
        if (!presenter.isTTS()) {&#13;
            return;&#13;
        }&#13;
&#13;
        let textVoices = [];&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.connected));&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.readDisconnected = function () {&#13;
        if (!presenter.isTTS()) {&#13;
            return;&#13;
        }&#13;
&#13;
        let textVoices = [];&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.disconnected));&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.createTextVoiceForPoint = function (pointIndex) {&#13;
        let message;&#13;
        if (presenter.altTexts &amp;&amp; presenter.altTexts[pointIndex]) {&#13;
            message = presenter.altTexts[pointIndex];&#13;
        } else {&#13;
            const isIndexExist = presenter.indexes &amp;&amp; presenter.indexes[pointIndex];&#13;
            const index = isIndexExist ? presenter.indexes[pointIndex] : pointIndex + 1;&#13;
            const commaToSeparateIndex = ','&#13;
            message = `${presenter.speechTexts.point}${commaToSeparateIndex} ${index}`;&#13;
        }&#13;
        return this.createTextVoiceWithLanguageFromPresenter(message);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.createTextVoiceWithLanguageFromLesson = function (message) {&#13;
        return window.TTSUtils.getTextVoiceObject(message);&#13;
    };&#13;
&#13;
    PointsLinesKeyboardController.prototype.createTextVoiceWithLanguageFromPresenter = function (message) {&#13;
        return window.TTSUtils.getTextVoiceObject(message, presenter.langTag);&#13;
    };&#13;
&#13;
    presenter.speak = function (data) {&#13;
        let tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>