<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Score_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
<model>
    <property displayName="Display Mode" name="DisplayMode" nameLabel="Lesson_Score_Counter_property_display_mode" type="{Fraction (Score/Max Score),Score,Max Score,Percentage}"/>
</model>
<css>.lesson-score-counter-wrapper {&#13;
&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper &gt; div.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper &gt; div {&#13;
    border: 1px solid #002266;&#13;
    border-radius: 4px;&#13;
    background-color: #fafafa;&#13;
    box-shadow: 1px 1px 1px #005599;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
    text-align: center;&#13;
    line-height: 50px;&#13;
    font-size: 12px;&#13;
}&#13;
&#13;
.lesson-score-counter-wrapper .fraction &gt; div {&#13;
    text-align: left;&#13;
    display: inline-block;&#13;
}&#13;
</css><view>&lt;div class="lesson-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="percentage hidden"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="lesson-score-counter-wrapper"&gt;&#13;
    &lt;div class="fraction hidden"&gt;&#13;
        &lt;div class="score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
        &lt;div class="separator"&gt;&#13;
            /&#13;
        &lt;/div&gt;&#13;
        &lt;div class="max-score"&gt;&#13;
            0&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
    &lt;div class="max-score hidden"&gt;&#13;
        0&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLesson_Score_Counter_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.isVisible = true;&#13;
    presenter.score = 0;&#13;
    presenter.maxScore = 0;&#13;
&#13;
    presenter.DISPLAY_MODE = {&#13;
        FRACTION: 1,&#13;
        SCORE: 2,&#13;
        MAX_SCORE: 3,&#13;
        PERCENTAGE: 4&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
    };&#13;
&#13;
    presenter.createEventData = function (score) {&#13;
    };&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        presenter.eventBus.sendEvent(eventName, eventData);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            'isVisible' : ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            'addonID' : model['ID'],&#13;
            'displayMode' : getDisplayMode(model['DisplayMode'])&#13;
        }&#13;
    };&#13;
&#13;
    function getDisplayMode(rawDisplayMode) {&#13;
        if (rawDisplayMode == 'Fraction (Score/Max Score)' || rawDisplayMode == '') { // when dropdown hasn't been changed it gives you empty string&#13;
            return presenter.DISPLAY_MODE.FRACTION;&#13;
        } else if (rawDisplayMode == 'Score'){&#13;
            return presenter.DISPLAY_MODE.SCORE;&#13;
        } else if (rawDisplayMode == 'Max Score') {&#13;
            return presenter.DISPLAY_MODE.MAX_SCORE;&#13;
        } else if (rawDisplayMode == 'Percentage') {&#13;
            return presenter.DISPLAY_MODE.PERCENTAGE;&#13;
        }&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
        presenter.$fractionWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .fraction');&#13;
        presenter.$scoreWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .score');&#13;
        presenter.$maxScoreWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .max-score');&#13;
        presenter.$percentageWrapper = presenter.$view.find('.lesson-score-counter-wrapper &gt; .percentage');&#13;
&#13;
        if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.FRACTION) {&#13;
            toggleBoxVisibility(presenter.$fractionWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.SCORE) {&#13;
            toggleBoxVisibility(presenter.$scoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.MAX_SCORE) {&#13;
            toggleBoxVisibility(presenter.$maxScoreWrapper);&#13;
        } else if (presenter.configuration.displayMode == presenter.DISPLAY_MODE.PERCENTAGE) {&#13;
            toggleBoxVisibility(presenter.$percentageWrapper);&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            updateValue();&#13;
        }&#13;
    }&#13;
&#13;
    function updateValue(scoreValue, maxScoreValue) {&#13;
        if (presenter.playerController) {&#13;
            var score = scoreValue == undefined ? 0 : scoreValue,&#13;
                maxScore = maxScoreValue == undefined ? 0 : maxScoreValue;&#13;
&#13;
            var scoreService = presenter.playerController.getScore();&#13;
&#13;
            var score = scoreService.getTotalScore(),&#13;
                maxScore = scoreService.getMaxScore();&#13;
&#13;
            if (maxScore &gt; 0) {&#13;
                presenter.$percentageWrapper.html(parseInt(((score/maxScore) * 100), 10) + '%');&#13;
            }&#13;
            presenter.$fractionWrapper.find('.score').html(score);&#13;
            presenter.$fractionWrapper.find('.max-score').html(maxScore);&#13;
            presenter.$scoreWrapper.html(score);&#13;
            presenter.$maxScoreWrapper.html(maxScore);&#13;
            presenter.score = score;&#13;
            presenter.maxScore = maxScore;&#13;
        }&#13;
    }&#13;
&#13;
    function toggleBoxVisibility($element) {&#13;
        presenter.$view.find('.lesson-score-counter-wrapper &gt; div').addClass('hidden');&#13;
        $element.removeClass('hidden');&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {};&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            'isVisible' : presenter.isVisible,&#13;
            'score' : presenter.score,&#13;
            'maxScore' : presenter.maxScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var parsed = JSON.parse(state);&#13;
        presenter.isVisible = parsed.isVisible;&#13;
&#13;
        updateValue(parsed.score, parsed.maxScore);&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>