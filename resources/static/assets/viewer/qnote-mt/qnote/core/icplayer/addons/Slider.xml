<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slider" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="ImageElement" nameLabel="Slider_property_image_element" type="image"/>
		<property name="Orientation" nameLabel="Slider_property_orientation" type="{Landscape, Portrait}"/>
		<property name="Stepwise" nameLabel="Slider_property_stepwise" type="boolean"/>
		<property name="StepsCount" nameLabel="Slider_property_steps_count" type="string"/>
		<property name="InitialStep" nameLabel="Slider_property_initial_step" type="string"/>
		<property name="onStepChange" nameLabel="Slider_property_on_step_change" type="event"/>
		<property name="Block in error checking mode" nameLabel="Slider_property_block_in_error_checking_mode" type="boolean"/>
		<property name="Continuous events" nameLabel="Slider_property_continuous_events" type="boolean"/>
        <property name="Continuous events steps" nameLabel="Slider_property_continuous_events_steps" type="{Stick, Smooth}"/>
		<property name="Alternative texts" nameLabel="Slider_property_alternative_texts" type="list">
			<property name="Alternative text" nameLabel="Slider_property_alternative_text" type="text"/>
			<property name="Step number" nameLabel="Slider_property_step_number" type="string"/>
		</property>
		<property name="langAttribute" nameLabel="Slider_property_lang_attribute" type="string"/>
		<property name="speechTexts" nameLabel="Slider_property_speech_texts" type="staticlist">
			<property name="Step" nameLabel="Slider_property_step" type="staticrow">
				<property name="Step" nameLabel="Slider_property_step" type="string"/>
			</property>
		</property>
	</model>
<css>.slider-wrapper {&#13;
    border: 0 solid black;&#13;
}&#13;
.slider-element-image-mouse-hover,&#13;
.slider-element-image-mouse-click,&#13;
.slider-element-image {&#13;
    position: relative;&#13;
    top: 0;&#13;
    left: 0;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
    border: 0 solid black;&#13;
    -ms-touch-action: none;&#13;
}&#13;
</css><view>&lt;div class="slider-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="slider-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSlider_create () {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.$view = null;&#13;
    presenter.savedState = null;&#13;
    presenter.counter = 0;&#13;
    presenter.isTouched = false;&#13;
    presenter.isWCAGOn = false;&#13;
&#13;
    var playerController, onStepChangeEvent;&#13;
&#13;
    presenter.ORIENTATION = {&#13;
        LANDSCAPE : 0, // Horizontal&#13;
        PORTRAIT : 1 // Vertical&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ES_01' : "Element source was not given!",&#13;
        'SC_01' : "Steps count incorrect!",&#13;
        'SC_02' : "Steps count cannot be less than 2!",&#13;
        'IS_01' : "Initial step incorrect! It must be a positive number between 1 and steps count!",&#13;
        'AT_01' : "Step number must be a positive number between 1 and steps count",&#13;
        "AT_02" : "Step number has been provided but the alternative text is missing",&#13;
        "AT_03" : "Duplicate step number!"&#13;
    };&#13;
&#13;
    presenter.addonID = '';&#13;
&#13;
    presenter.mouseData = {&#13;
        isMouseDown : false,&#13;
        oldPosition : {&#13;
            x : 0,&#13;
            y : 0&#13;
        },&#13;
        isMouseDragged : false&#13;
    };&#13;
&#13;
    var imageElementData = {&#13;
        width : 0,&#13;
        height : 0,&#13;
        maxLeft : 0,&#13;
        maxTop : 0&#13;
    };&#13;
&#13;
    var CLASSES_NAMES = {&#13;
        WRAPPER : {&#13;
            STANDARD_CLASS : 'slider-wrapper',&#13;
            SELECTOR : '.slider-wrapper:first'&#13;
        },&#13;
        ELEMENT_IMAGE : {&#13;
            STANDARD_CLASS : 'slider-element-image',&#13;
            MOUSE_HOVER : 'slider-element-image-mouse-hover',&#13;
            MOUSE_CLICK : 'slider-element-image-mouse-click',&#13;
            SELECTOR : 'div[class*="slider-element-image"]:first'&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Trigger a callback when the selected images are loaded:&#13;
     * @param {String} selector&#13;
     * @param {Function} callback&#13;
     */&#13;
    var onImgLoaded = function($element, callback){&#13;
        if ($element[0].complete) {&#13;
            callback($element[0]);&#13;
        }&#13;
        else {&#13;
            $element.on('load', function(){&#13;
                callback($element[0]);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    function loadImageElement(isPreview) {&#13;
        var addonContainer = presenter.$addonContainer;&#13;
        var imageElement = document.createElement('img');&#13;
        $(imageElement).attr('src', presenter.configuration.imageSrc + "?" + new Date().getTime()); // fix for IE 10 cached images http://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/&#13;
        addonContainer.html(imageElement);&#13;
&#13;
        onImgLoaded($(imageElement), function(image) {&#13;
            var width = image.width;&#13;
            var height = image.height;&#13;
            imageElementData.width = width;&#13;
            imageElementData.height = height;&#13;
            imageElementData.maxLeft = $(addonContainer).width() - width;&#13;
            imageElementData.maxTop = $(addonContainer).height() - height;&#13;
&#13;
            var imageContainer = document.createElement('div');&#13;
&#13;
            $(imageContainer).addClass(CLASSES_NAMES.ELEMENT_IMAGE.STANDARD_CLASS);&#13;
            $(imageContainer).css({&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')",&#13;
                backgroundSize : '100% 100%',&#13;
                width: imageElementData.width + 'px',&#13;
                height: imageElementData.height + 'px'&#13;
            });&#13;
            addonContainer.html(imageContainer);&#13;
&#13;
            var containerLength = presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(addonContainer).width() : $(addonContainer).height();&#13;
&#13;
            var elementLength = presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(imageContainer).width() : $(imageContainer).height();&#13;
            if(!presenter.configuration.stepwise) {&#13;
                presenter.configuration.stepsCount = containerLength - elementLength + 1;&#13;
            }&#13;
            var stepZoneLength = (containerLength - elementLength) / (presenter.configuration.stepsCount - 1);&#13;
&#13;
&#13;
&#13;
            presenter.configuration.snapPoints.push(elementLength / 2);&#13;
            for (var i = 0; i &lt; presenter.configuration.stepsCount - 2; i++) {&#13;
                var snapPoint = elementLength / 2 + (i + 1) * stepZoneLength;&#13;
                presenter.configuration.snapPoints.push(parseInt(snapPoint, 10));&#13;
            }&#13;
            presenter.configuration.snapPoints.push(containerLength - elementLength / 2);&#13;
&#13;
            presenter.moveToStep(imageContainer, presenter.configuration.initialStep, presenter.configuration);&#13;
&#13;
            if (!isPreview) {&#13;
                handleMouseDrag(addonContainer);&#13;
            } else {&#13;
                drawBurret();&#13;
            }&#13;
&#13;
            presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
&#13;
            presenter.imageElement = imageContainer;&#13;
&#13;
            presenter.imageLoadedDeferred.resolve();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.moveToStep = function(element, step, configuration) {&#13;
        var elementContainer = presenter.$addonContainer;&#13;
        var containerLength = configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(elementContainer).width() : $(elementContainer).height();&#13;
        var elementLength = configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? $(element).width() : $(element).height();&#13;
        var zoneLength = containerLength - elementLength;&#13;
        var singleStepZoneLength = (containerLength - elementLength) / (configuration.stepsCount - 1);&#13;
        var distance = singleStepZoneLength * (step - 1);&#13;
&#13;
        if (distance &lt; 0 || step === 1) {&#13;
            distance = 0;&#13;
        }&#13;
&#13;
        if (distance &gt; zoneLength || step === configuration.stepsCount) {&#13;
            distance = zoneLength;&#13;
        }&#13;
&#13;
        $(element).css({&#13;
            top : configuration.orientation === presenter.ORIENTATION.PORTRAIT ? distance : 0,&#13;
            left : configuration.orientation === presenter.ORIENTATION.LANDSCAPE ? distance : 0&#13;
        });&#13;
&#13;
        var tempElement = document.createElement('p');&#13;
        elementContainer.append(tempElement);&#13;
        $(elementContainer).find('p:first').remove();&#13;
&#13;
    };&#13;
&#13;
&#13;
    function mouseDownCallback (eventData) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        presenter.mouseData.isMouseDown = true;&#13;
        presenter.mouseData.oldPosition.x = eventData.pageX;&#13;
        presenter.mouseData.oldPosition.y = eventData.pageY;&#13;
        if (eventData.stopPropagation) eventData.stopPropagation();&#13;
        if (eventData.preventDefault) eventData.preventDefault();&#13;
    }&#13;
&#13;
    function touchStartCallback (event) {&#13;
        presenter.isTouched = true;&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        &#13;
        var touch = event.touches[0] || touchPoints[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    presenter.mouseUpEventDispatcher = function (event) {&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseUpHandler(event);&#13;
        } else {&#13;
            return;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.mouseUpHandler = function (event) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_CLICK);&#13;
&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        presenter.mouseData.isMouseDown = false;&#13;
        if (presenter.configuration.newStep !== presenter.configuration.currentStep) {&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
&#13;
        if (presenter.configuration.stepwise) {&#13;
            presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
        }&#13;
    };&#13;
&#13;
    function touchEndCallback (event) {&#13;
        presenter.isTouched = false;&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
&#13;
        presenter.mouseUpEventDispatcher();&#13;
    }&#13;
&#13;
    function mouseClickCallback (eventData) {&#13;
&#13;
        eventData.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        $(presenter.imageElement).addClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_CLICK);&#13;
        $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            return;&#13;
        }&#13;
&#13;
        var mousePositions = getMousePositions(eventData);&#13;
        presenter.configuration.newStep = presenter.whichStepZone(mousePositions, presenter.configuration);&#13;
&#13;
        if (presenter.configuration.newStep !== presenter.configuration.currentStep) {&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
            presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
&#13;
        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
    }&#13;
&#13;
    function mouseMoveCallback (eventData) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
        var addonContainer = presenter.$addonContainer;&#13;
        var imageElement = presenter.imageElement;&#13;
&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            var mousePositions = getMousePositions(eventData);&#13;
            var relativeDistance;&#13;
&#13;
            if(presenter.isTouched) {&#13;
                var scale = playerController.getScaleInformation();&#13;
                if (scale.scaleX !== 1.0 || scale.scaleY !== 1.0) {&#13;
                    mousePositions.x = mousePositions.x / scale.scaleX;&#13;
                    mousePositions.y = mousePositions.y / scale.scaleY;&#13;
                }&#13;
            }&#13;
&#13;
            if(presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth"){&#13;
                presenter.configuration.newStep = presenter.whichStepZoneSmooth(mousePositions, presenter.configuration);&#13;
            }else{&#13;
                presenter.configuration.newStep = presenter.whichStepZone(mousePositions, presenter.configuration);&#13;
            }&#13;
&#13;
            if ( presenter.configuration.orientation == presenter.ORIENTATION.LANDSCAPE ) {&#13;
                relativeDistance = presenter.calculateRelativeDistanceX(imageElement, addonContainer, eventData, presenter.mouseData, imageElementData);&#13;
                presenter.mouseData.oldPosition.x = eventData.pageX;&#13;
&#13;
                var minimumXPosition = ($(imageElement).width() / 2);&#13;
                var maximumXPosition = imageElementData.maxLeft + ($(imageElement).width() / 2);&#13;
&#13;
                mousePositions.x = mousePositions.x &gt; minimumXPosition ? mousePositions.x : minimumXPosition;&#13;
                mousePositions.x = mousePositions.x &lt; maximumXPosition? mousePositions.x : maximumXPosition;&#13;
&#13;
                if(!presenter.continuousEvents || (presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth")){&#13;
                    $(imageElement).css({&#13;
                        left: (mousePositions.x + relativeDistance.horizontal - ($(imageElement).width() / 2)) + 'px'&#13;
                    });&#13;
                }&#13;
&#13;
                if (presenter.configuration.newStep !== presenter.configuration.currentStep &amp;&amp; presenter.continuousEvents) {&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
                    presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
                    presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
&#13;
                    if(presenter.continuousEventsSteps == "Stick" || presenter.continuousEventsSteps == undefined || presenter.continuousEventsSteps == ""){&#13;
                        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
                    }&#13;
                }&#13;
&#13;
            } else {&#13;
                relativeDistance = presenter.calculateRelativeDistanceY(imageElement, addonContainer, eventData, presenter.mouseData, imageElementData);&#13;
                var minimumYPosition = ($(imageElement).height() / 2);&#13;
                var maximumYPosition = imageElementData.maxTop + ($(imageElement).height() / 2);&#13;
                mousePositions.y = mousePositions.y &gt; minimumYPosition ? mousePositions.y : minimumYPosition;&#13;
                mousePositions.y = mousePositions.y &lt; maximumYPosition ? mousePositions.y : maximumYPosition;&#13;
&#13;
                presenter.mouseData.oldPosition.y = eventData.pageY;&#13;
&#13;
                if(!presenter.continuousEvents || (presenter.continuousEvents &amp;&amp; presenter.continuousEventsSteps == "Smooth")){&#13;
                    $(imageElement).css({&#13;
                        top: (mousePositions.y + relativeDistance.vertical - ($(imageElement).height() / 2)) + 'px'&#13;
                    });&#13;
                }&#13;
&#13;
                if (presenter.configuration.newStep !== presenter.configuration.currentStep &amp;&amp; presenter.continuousEvents) {&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
                    presenter.configuration.currentStep = presenter.configuration.newStep;&#13;
                    presenter.triggerOnStepChangeUserEvent();&#13;
&#13;
                    presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
&#13;
                    if(presenter.continuousEventsSteps == "Stick" || presenter.continuousEventsSteps == undefined || presenter.continuousEventsSteps == ""){&#13;
                        presenter.moveToStep(imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
        }&#13;
        if(eventData.preventDefault) {&#13;
            eventData.preventDefault();&#13;
        }&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        event.stopPropagation();&#13;
        event.preventDefault();&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        var touch = event.touches[0] || touchPoints[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function handleMouseDrag(addonContainer) {&#13;
        var icplayer = $('#_icplayer');&#13;
        presenter.isWindowsMobile = false;&#13;
&#13;
        if (window.navigator.msPointerEnabled &amp;&amp; MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
            presenter.isWindowsMobile = true;&#13;
        }&#13;
&#13;
        var imageElement = $(addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR))[0];&#13;
&#13;
        $(imageElement).hover(&#13;
            function() {&#13;
                $(this).toggleClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER, !presenter.mouseData.isMouseDown);&#13;
            },&#13;
            function() {&#13;
                $(this).toggleClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER, presenter.mouseData.isMouseDown);&#13;
            }&#13;
        );&#13;
&#13;
        if (presenter.isWindowsMobile) {&#13;
            imageElement.addEventListener('MSPointerDown', touchStartCallback, false);&#13;
            imageElement.addEventListener('MSPointerMove', touchMoveCallback, false);&#13;
        } else {&#13;
            imageElement.ontouchstart = touchStartCallback;&#13;
            imageElement.ontouchmove = touchMoveCallback;&#13;
        }&#13;
&#13;
        $(imageElement).mousedown(mouseDownCallback);&#13;
        icplayer.mousemove(mouseMoveCallback);&#13;
        icplayer.mouseup(presenter.mouseUpEventDispatcher);&#13;
        $(document).mouseup(presenter.mouseUpEventDispatcher);&#13;
        imageElement.ontouchend = touchEndCallback;&#13;
&#13;
        $(addonContainer).click(mouseClickCallback);&#13;
&#13;
&#13;
        $(imageElement).hover(function() {&#13;
            $(presenter.imageElement).addClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
        }, function() {&#13;
            $(presenter.imageElement).removeClass(CLASSES_NAMES.ELEMENT_IMAGE.MOUSE_HOVER);&#13;
        });&#13;
    }&#13;
&#13;
    function getMousePositions(eventData) {&#13;
        var popupTop = 0,&#13;
            popupLeft = 0;&#13;
&#13;
        var $popup = presenter.$view.parent('.ic_popup_page').offset();&#13;
        if ($popup !== null) {&#13;
            var popupTop = $popup.top;&#13;
            var popupLeft = $popup.left;&#13;
        }&#13;
&#13;
        setAddonPosition();&#13;
&#13;
        if (eventData.offsetX != null &amp;&amp; eventData.offsetY != null) {&#13;
            position = {&#13;
                x:(eventData.offsetX + $(eventData.target).offset().left - presenter.configuration.offset.left) - popupLeft,&#13;
                y:(eventData.offsetY + $(eventData.target).offset().top - presenter.configuration.offset.top) - popupTop&#13;
            };&#13;
        } else {&#13;
            var scroll = getScroll();&#13;
            position = {&#13;
                x: (scroll.left + eventData.pageX - presenter.configuration.offset.left) - popupLeft,&#13;
                y: (scroll.top + eventData.pageY - presenter.configuration.offset.top) - popupTop&#13;
            }&#13;
        }&#13;
&#13;
        return position;&#13;
    }&#13;
&#13;
    function getScroll() {&#13;
        var top = $('body').scrollTop();&#13;
        var left = $('body').scrollLeft();&#13;
        return {top: top, left: left};&#13;
    }&#13;
&#13;
    function setAddonPosition() {&#13;
        presenter.configuration.offset = {};&#13;
        presenter.configuration.offset.left = presenter.$addonContainer.offset().left;&#13;
        presenter.configuration.offset.top = presenter.$addonContainer.offset().top;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeTTS(model);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeTTS = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['speechTexts'] === undefined) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Step: {Step: "Step"}&#13;
            };&#13;
        }&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] = "";&#13;
        }&#13;
&#13;
        if (upgradedModel['Alternative texts'] === undefined) {&#13;
            upgradedModel['Alternative texts'] = [&#13;
                {&#13;
                    "Alternative text": "",&#13;
                    "Step number": ""&#13;
                }&#13;
            ];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
&#13;
        presenter.addonID = upgradedModel.ID;&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
        onStepChangeEvent = upgradedModel.onStepChange;&#13;
        presenter.continuousEvents = ModelValidationUtils.validateBoolean(upgradedModel["Continuous events"]);&#13;
        presenter.continuousEventsSteps = upgradedModel["Continuous events steps"];&#13;
&#13;
        presenter.$addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$addonContainer);&#13;
&#13;
        presenter.configuration = presenter.convertModel(upgradedModel);&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        setAddonPosition();&#13;
&#13;
        presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
        presenter.configuration.newStep = presenter.configuration.initialStep;&#13;
        presenter.configuration.snapPoints = [];&#13;
&#13;
        loadImageElement(preview);&#13;
&#13;
        presenter.$view.disableSelection();&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    }&#13;
&#13;
    function drawBurret() {&#13;
        if (!presenter.configuration.stepwise) return;&#13;
&#13;
        var element = presenter.$view.find('.slider-element-image:first')[0];&#13;
        var xPosition = $(presenter.$view).width() / 2;&#13;
        var yPosition = $(presenter.$view).height() / 2;&#13;
        var verticalLineLength = $(presenter.$view).height() / 4;&#13;
        var horizontalLineLength = $(presenter.$view).width() / 4;&#13;
&#13;
        var canvas = document.createElement('canvas');&#13;
        $(canvas).css({&#13;
            position : 'absolute',&#13;
            top : 0,&#13;
            left : 0&#13;
        });&#13;
        $(canvas).attr('width', $(presenter.$view).width());&#13;
        $(canvas).attr('height', $(presenter.$view).height());&#13;
        $(presenter.$view).append(canvas);&#13;
&#13;
        if (presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE) {&#13;
            $(canvas).drawLine({&#13;
                strokeStyle:"#000",&#13;
                strokeWidth:2,&#13;
                strokeCap:"round",&#13;
                x1:presenter.configuration.snapPoints[0], y1:yPosition,&#13;
                x2:presenter.configuration.snapPoints[presenter.configuration.stepsCount - 1], y2:yPosition&#13;
            });&#13;
        } else {&#13;
            $(canvas).drawLine({&#13;
                strokeStyle:"#000",&#13;
                strokeWidth:2,&#13;
                strokeCap:"round",&#13;
                x1:xPosition, y1:presenter.configuration.snapPoints[0],&#13;
                x2:xPosition, y2:presenter.configuration.snapPoints[presenter.configuration.stepsCount - 1]&#13;
            });&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.stepsCount; i++) {&#13;
            if (presenter.configuration.orientation === presenter.ORIENTATION.LANDSCAPE) {&#13;
                $(canvas).drawLine({&#13;
                    strokeStyle:"#000",&#13;
                    strokeWidth:2,&#13;
                    strokeCap:"round",&#13;
                    x1:presenter.configuration.snapPoints[i], y1:yPosition - verticalLineLength / 2,&#13;
                    x2:presenter.configuration.snapPoints[i], y2:yPosition + verticalLineLength / 2&#13;
                });&#13;
            } else {&#13;
                $(canvas).drawLine({&#13;
                    strokeStyle:"#000",&#13;
                    strokeWidth:2,&#13;
                    strokeCap:"round",&#13;
                    x1:xPosition - horizontalLineLength / 2, y1:presenter.configuration.snapPoints[i],&#13;
                    x2:xPosition + horizontalLineLength / 2, y2:presenter.configuration.snapPoints[i]&#13;
                });&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.triggerOnStepChangeUserEvent = function () {&#13;
        if (!onStepChangeEvent) return;&#13;
&#13;
        playerController.getCommands().executeEventCode(onStepChangeEvent);&#13;
    };&#13;
&#13;
    presenter.getContainerAndImageElements = function () {&#13;
        var addonContainer = presenter.$view.find(CLASSES_NAMES.WRAPPER.SELECTOR);&#13;
        var imageElement = addonContainer.find(CLASSES_NAMES.ELEMENT_IMAGE.SELECTOR)[0];&#13;
&#13;
        return {&#13;
            addonContainer: addonContainer,&#13;
            imageElement: imageElement&#13;
        };&#13;
    };&#13;
&#13;
    presenter.moveToInitialStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if(presenter.configuration.currentStep !== presenter.configuration.initialStep) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToInitialStep = function (triggerEvent) {&#13;
        presenter.moveToInitialStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var step = parseInt(params[0], 10);&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 1);&#13;
&#13;
        if (!isNaN(step) &amp;&amp; step &gt;= 1 &amp;&amp; step &lt;= presenter.configuration.stepsCount) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = step;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveTo = function (step, triggerEvent) {&#13;
        presenter.moveToCommand([step, triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToLastCommand = function(params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep !== presenter.configuration.stepsCount) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = presenter.configuration.stepsCount;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToLast = function(triggerEvent) {&#13;
        presenter.moveToLastCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.moveToFirstCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep !== 1) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep = 1;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFirst = function (triggerEvent) {&#13;
        presenter.moveToFirstCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.nextStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep + 1 &lt;= presenter.configuration.stepsCount) {&#13;
            if (triggerEvent)&#13;
                presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep++;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent)&#13;
                presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.nextStep = function (triggerEvent) {&#13;
        presenter.nextStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.previousStepCommand = function (params) {&#13;
        var elements = this.getContainerAndImageElements();&#13;
        var triggerEvent = presenter.parseAdditionalTriggerEventParam(params, 0);&#13;
&#13;
        if (presenter.configuration.currentStep - 1 &gt;= 1) {&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, false);&#13;
&#13;
            presenter.configuration.currentStep--;&#13;
            presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
            presenter.triggerOnStepChangeUserEvent();&#13;
            if (triggerEvent) presenter.triggerStepChangeEvent(presenter.configuration.currentStep, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.previousStep = function (triggerEvent) {&#13;
        presenter.previousStepCommand([triggerEvent + '']);&#13;
    };&#13;
&#13;
    presenter.getCurrentStep = function () {&#13;
        return presenter.configuration.currentStep.toString();&#13;
    };&#13;
&#13;
    presenter.parseAdditionalTriggerEventParam = function (params, numberOfDefaultParams) {&#13;
        if (!params[numberOfDefaultParams]) return true;&#13;
&#13;
        return params[numberOfDefaultParams].toLowerCase() != 'false';&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.shouldBlockInErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'moveTo': presenter.moveToCommand,&#13;
            "moveToLast": presenter.moveToLastCommand,&#13;
            'moveToFirst': presenter.moveToFirst,&#13;
            'moveToInitialStep' : presenter.moveToInitialStepCommand,&#13;
            'nextStep': presenter.nextStep,&#13;
            'previousStep': presenter.previousStep,&#13;
            'getCurrentStep': presenter.getCurrentStep,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.convertStepsCount = function (stepsCount) {&#13;
        var convertedStepsCount = ModelValidationUtils.validatePositiveInteger(stepsCount);&#13;
&#13;
        if (!convertedStepsCount.isValid) {&#13;
            return { isError: true, errorCode: 'SC_01' };&#13;
        }&#13;
&#13;
        if (convertedStepsCount.value &lt; 2) {&#13;
            return { isError: true, errorCode: 'SC_02' };&#13;
        }&#13;
&#13;
        return { isError: false, stepsCount: convertedStepsCount.value };&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.convertSpeechTexts = function(speechTextsModel) {&#13;
        var speechTexts = {&#13;
            step: getSpeechTextProperty(speechTextsModel["Step"]["Step"], "Step")&#13;
        };&#13;
        return speechTexts;&#13;
    };&#13;
&#13;
    presenter.validateAlternativeTexts = function(altTextsModel, stepsCount) {&#13;
        var altTexts = [];&#13;
        for (var i = 0; i &lt; stepsCount; i++) {&#13;
            altTexts.push('');&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; altTextsModel.length; i++) {&#13;
            var altText = altTextsModel[i];&#13;
&#13;
            if (altText["Step number"].length == 0) continue;&#13;
&#13;
            if (isNaN(altText["Step number"])) {&#13;
                return { isError : true, errorCode : 'AT_01' };&#13;
            }&#13;
&#13;
            if (&#13;
                    (altText["Step number"].length &gt; 0 &amp;&amp; altText["Alternative text"].length == 0) ||&#13;
                    (altText["Step number"].length == 0 &amp;&amp; altText["Alternative text"].length &gt; 0)&#13;
            ) {&#13;
                return { isError : true, errorCode : 'AT_02' };&#13;
            }&#13;
&#13;
            var stepNumber = Number(altText["Step number"]);&#13;
            if (stepNumber &lt; 1 || stepNumber &gt; stepsCount) {&#13;
                return { isError : true, errorCode : 'AT_01' };&#13;
            }&#13;
            if (altTexts[stepNumber - 1] != '') {&#13;
                return { isError : true, errorCode : 'AT_03' };&#13;
            }&#13;
&#13;
            altTexts[stepNumber - 1] = altText['Alternative text'];&#13;
        }&#13;
        return { isError : false, value : altTexts };&#13;
    };&#13;
&#13;
    presenter.convertModel = function(model) {&#13;
        var orientation = model.Orientation === 'Portrait' ? presenter.ORIENTATION.PORTRAIT : presenter.ORIENTATION.LANDSCAPE;&#13;
        var stepwise = ModelValidationUtils.validateBoolean(model.Stepwise);&#13;
        var stepsCount = 0;&#13;
        var initialStep = 1;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.ImageElement)) {&#13;
            return { isError : true, errorCode : 'ES_01' };&#13;
        }&#13;
&#13;
        if (stepwise) {&#13;
            var convertedStepsCount = presenter.convertStepsCount(model.StepsCount);&#13;
            if (convertedStepsCount.isError) {&#13;
                return { isError: true, errorCode: convertedStepsCount.errorCode };&#13;
            }&#13;
&#13;
            stepsCount = convertedStepsCount.stepsCount;&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(model.InitialStep)) {&#13;
                initialStep = 1;&#13;
            } else {&#13;
                var convertedInitialStep = ModelValidationUtils.validateIntegerInRange(model.InitialStep, stepsCount, 1);&#13;
                if (!convertedInitialStep.isValid) {&#13;
                    return { isError: true, errorCode: 'IS_01' };&#13;
                }&#13;
&#13;
                initialStep = convertedInitialStep.value;&#13;
            }&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
&#13;
        var speechTexts = presenter.convertSpeechTexts(model["speechTexts"]);&#13;
&#13;
        var validatedAltTexts = presenter.validateAlternativeTexts(model['Alternative texts'], stepsCount);&#13;
        if (validatedAltTexts.isError) {&#13;
            return {isError: true, errorCode: validatedAltTexts.errorCode};&#13;
        }&#13;
&#13;
        return {&#13;
            imageSrc : model.ImageElement,&#13;
            orientation : orientation,&#13;
            stepwise : stepwise,&#13;
            stepsCount : stepsCount,&#13;
            initialStep : initialStep,&#13;
            isVisibleByDefault: isVisible,&#13;
            isVisible: isVisible,&#13;
            isError : false,&#13;
            isErrorMode: false,&#13;
            shouldBlockInErrorMode: ModelValidationUtils.validateBoolean(model["Block in error checking mode"]),&#13;
            speechTexts: speechTexts,&#13;
            lang: model["langAttribute"],&#13;
            altTexts: validatedAltTexts.value&#13;
        };&#13;
    };&#13;
&#13;
    presenter.closestSmooth = 0;&#13;
    presenter.whichStepZoneSmooth = function (mousePositions, globalData) {&#13;
        var imageCenter = globalData.orientation === presenter.ORIENTATION.LANDSCAPE ? parseInt($(presenter.imageElement).css('left'), 10) +&#13;
                ($(presenter.imageElement).width()/2) : parseInt($(presenter.imageElement).css('top'), 10) + ($(presenter.imageElement).height()/2),&#13;
            margin = parseInt((globalData.snapPoints[1] - globalData.snapPoints[0]) / 5, 10);&#13;
&#13;
        for (var j = 0; j &lt; globalData.snapPoints.length; j++) {&#13;
            var pointBefore = parseInt(globalData.snapPoints[j] - margin, 10);&#13;
            var pointAfter = parseInt(globalData.snapPoints[j] + margin, 10);&#13;
            if(imageCenter &gt; pointBefore &amp;&amp; imageCenter &lt; pointAfter){&#13;
                if(presenter.closestSmooth != j){&#13;
                    presenter.closestSmooth = j;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return presenter.closestSmooth + 1;&#13;
    };&#13;
&#13;
    presenter.whichStepZone = function(mousePositions, globalData) {&#13;
        var snapPointDistance = [];&#13;
&#13;
        var mousePosition = globalData.orientation === presenter.ORIENTATION.LANDSCAPE ? mousePositions.x : mousePositions.y;&#13;
&#13;
        for (var i = 0; i &lt; globalData.snapPoints.length; i++) {&#13;
            snapPointDistance.push({&#13;
                distance : Math.abs(mousePosition - globalData.snapPoints[i]),&#13;
                snapPoint : i&#13;
            });&#13;
        }&#13;
&#13;
        var closest = 0;&#13;
        for (var j = 1; j &lt; globalData.snapPoints.length; j++) {&#13;
            if (snapPointDistance[closest].distance &gt; snapPointDistance[j].distance) {&#13;
                closest = j;&#13;
            }&#13;
        }&#13;
&#13;
        return closest + 1;&#13;
    };&#13;
&#13;
    presenter.calculateRelativeDistanceX = function(imageElement, container, eventData, pastEventData, imageElementData) {&#13;
        var left = parseInt($(imageElement).css('left'), 10);&#13;
        var horizontal = Math.round(eventData.pageX - pastEventData.oldPosition.x);&#13;
&#13;
        var isIE = /*@cc_on!@*/false || !!document.documentMode;&#13;
&#13;
        if(isIE){&#13;
            if(horizontal &gt; 8 &amp;&amp; window.screen.deviceXDPI&gt;96){&#13;
                horizontal = horizontal/1.5;&#13;
            }&#13;
        }&#13;
&#13;
        if (left + horizontal &lt; 0 || left + horizontal &gt; imageElementData.maxLeft) {&#13;
            horizontal = 0;&#13;
        }&#13;
&#13;
        return { left: left, horizontal: horizontal };&#13;
    };&#13;
&#13;
    presenter.calculateRelativeDistanceY = function(imageElement, container, eventData, pastEventData, imageElementData) {&#13;
        var top = parseInt($(imageElement).css('top'), 10);&#13;
        var vertical = eventData.pageY - pastEventData.oldPosition.y;&#13;
&#13;
        if (top + vertical &lt; 0 || top + vertical &gt; imageElementData.maxTop) {&#13;
            vertical = 0;&#13;
        }&#13;
&#13;
        return { top: top, vertical: vertical };&#13;
    };&#13;
&#13;
    presenter.createEventData = function (step, moveIn) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : "" + step,&#13;
            value : moveIn ? "1" : "0",&#13;
            score : ''&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerStepChangeEvent = function(step, moveIn) {&#13;
        var eventData = this.createEventData(step, moveIn);&#13;
        if (playerController != null) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addDisabledClass = function () {&#13;
        presenter.getContainerAndImageElements().addonContainer.addClass('disabled');&#13;
    };&#13;
&#13;
    presenter.removeDisabledClass = function () {&#13;
        presenter.getContainerAndImageElements().addonContainer.removeClass('disabled');&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.removeDisabledClass();&#13;
        var elements = this.getContainerAndImageElements();&#13;
        presenter.configuration.currentStep = presenter.configuration.initialStep;&#13;
        presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var state = {&#13;
            'currentStep' : presenter.configuration.currentStep,&#13;
            'isVisible' : presenter.configuration.isVisible&#13;
        };&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.configuration.currentStep = state['currentStep'];&#13;
        presenter.configuration.isVisible = state['isVisible'];&#13;
&#13;
        $.when(presenter.imageLoaded).then(presenter.loadImagesCallback);&#13;
    };&#13;
&#13;
    presenter.loadImagesCallback = function() {&#13;
        var elements = presenter.getContainerAndImageElements();&#13;
&#13;
        presenter.moveToStep(elements.imageElement, presenter.configuration.currentStep, presenter.configuration);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40&#13;
        };&#13;
&#13;
        function nextStep () {&#13;
            presenter.nextStep(event);&#13;
            presenter.readStep(presenter.configuration.currentStep);&#13;
        }&#13;
&#13;
        function prevStep () {&#13;
            presenter.previousStep(event);&#13;
            presenter.readStep(presenter.configuration.currentStep);&#13;
        }&#13;
&#13;
        function readCurrentStep () {&#13;
            presenter.readStep(presenter.configuration.currentStep);&#13;
        }&#13;
&#13;
        var mapping = {};&#13;
        mapping[keys.ARROW_LEFT] = prevStep;&#13;
        mapping[keys.ARROW_UP] = prevStep;&#13;
        mapping[keys.ARROW_DOWN] = nextStep;&#13;
        mapping[keys.ARROW_RIGHT] = nextStep;&#13;
        mapping[keys.ENTER] = readCurrentStep;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.isEnterable = function() {&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.readStep = function(index) {&#13;
        var voices = [];&#13;
        var altText = presenter.configuration.altTexts[index - 1];&#13;
        if (altText.length == 0) {&#13;
            voices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.step + ' ' + index));&#13;
        } else {&#13;
            voices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.speechTexts.step));&#13;
            voices.push(window.TTSUtils.getTextVoiceObject(altText, presenter.configuration.lang));&#13;
        }&#13;
        presenter.speak(voices);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        presenter.isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.speak = function(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        presenter.configuration.isErrorMode = true;&#13;
&#13;
        if (presenter.configuration.shouldBlockInErrorMode) {&#13;
            presenter.addDisabledClass();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        presenter.removeDisabledClass();&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        $(document).off('mouseup', presenter.mouseUpEventDispatcher);&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>