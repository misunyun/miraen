<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="File_Sender" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="SourceId" nameLabel="File_Sender_property_source_id" type="string"/>
		<property isLocalized="true" name="SourceType" nameLabel="File_Sender_property_source_type" type="{File, Paragraph, Media Recorder}"/>
		<property isLocalized="true" name="ButtonText" nameLabel="File_Sender_property_button_text" type="string"/>
		<property isLocalized="true" name="DialogTitle" nameLabel="File_Sender_property_dialog_title" type="string"/>
		<property name="disableSendButton" nameLabel="File_Sender_property_disable_send_button" type="boolean"/>
	</model>
<css>.file-sender-input-wrapper {&#13;
    border: solid;&#13;
    overflow: hidden;&#13;
    position: relative;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.file-sender-input-file {&#13;
    width:100%;&#13;
    height:100%;&#13;
    opacity:0.0001;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
}&#13;
&#13;
.file-sender-input-label {&#13;
    width:100%;&#13;
    height:100%;&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    word-break: break-all;&#13;
}&#13;
&#13;
.file-sender-teacher-dialog-element {&#13;
    cursor: default;&#13;
    display: block;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.file-sender-send-file-button {&#13;
    cursor: default;&#13;
    display: block;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.file-sender-sent-file-reset {&#13;
    color: red;&#13;
    float: right;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.file-sender-sent-file-label {&#13;
    margin-bottom: 1em;&#13;
    cursor: default;&#13;
    overflow-y: clip;&#13;
}&#13;
</css><view>&lt;div class="file-sender-wrapper"&gt;&#13;
    &lt;form class="file-sender-input-wrapper"&gt;&#13;
        &lt;div class="file-sender-input-label"&gt;&lt;/div&gt;&#13;
        &lt;input class="file-sender-input-file" type="file" accept=".doc,.docx,.pdf,.odt,.jpg,.gif,.png,.html,.mp3,.wav"/&gt;&#13;
    &lt;/form&gt;&#13;
    &lt;div class="file-sender-sent-file"&gt;&#13;
        &lt;div class="file-sender-sent-file-reset"&gt;x&lt;/div&gt;&#13;
        &lt;div class="file-sender-sent-file-label"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="file-sender-send-file-button"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="file-sender-wrapper"&gt;&#13;
    &lt;form class="file-sender-input-wrapper"&gt;&#13;
        &lt;div class="file-sender-input-label"&gt;&lt;/div&gt;&#13;
        &lt;input class="file-sender-input-file" type="file"/&gt;&#13;
    &lt;/form&gt;&#13;
    &lt;div class="file-sender-send-file-button"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonFile_Sender_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.teachers = [];&#13;
    presenter.fileEndpointUrl = "";&#13;
    presenter.fileDownloadEndpointUrl = "";&#13;
    presenter.fileSenderPickRecipientAvailable = true;&#13;
    presenter.views = [];&#13;
    presenter.dialog = null;&#13;
    presenter.pageIndex = -1;&#13;
    presenter.$ICPage = null;&#13;
    presenter.contextLoaded = false;&#13;
&#13;
    presenter.sentFileName = "";&#13;
    presenter.sentFileUrl = "";&#13;
    presenter.sentFileId = -1;&#13;
    presenter.isMessageSent = false;&#13;
&#13;
    var currentScrollTop = 0;&#13;
&#13;
    var LessonSendFileType = {&#13;
        'FILE': 0,&#13;
        'AUDIO': 1,&#13;
        'TEXT': 2,&#13;
    };&#13;
&#13;
    var SOURCE_TYPES = {&#13;
        'FILE': 'File',&#13;
        'PARAGRAPH': 'Paragraph',&#13;
        'MEDIA_RECORDER': 'Media Recorder'&#13;
    };&#13;
&#13;
    var ERROR_CODES = {&#13;
        V01: 'Source ID cannot be empty unless source type is set to File'&#13;
    };&#13;
&#13;
    var inactiveClass = "file-sender-inactive";&#13;
&#13;
    var sendFileEventType = "sendFile";&#13;
&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.$view.html(ERROR_CODES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
        presenter.loadViewHandlers();&#13;
        presenter.attachHandlers();&#13;
&#13;
        presenter.views.fileSentLabel.css('max-height', model['Height']+'px');&#13;
        presenter.views.form.css('height', model['Height']+'px');&#13;
&#13;
        presenter.views.sendFileButton.html(presenter.configuration.buttonText);&#13;
        if (presenter.configuration.sourceType !== SOURCE_TYPES.FILE) {&#13;
            presenter.views.form.css('display', 'none');&#13;
            presenter.views.formLabel.css('display', 'none');&#13;
            presenter.views.form.css('width', model['Width']+'px');&#13;
            presenter.views.form.css('height', model['Height']+'px');&#13;
        } else {&#13;
            presenter.views.sendFileButton.css('width', model['Width']+'px');&#13;
            presenter.views.sendFileButton.css('height', model['Width']+'px');&#13;
        }&#13;
&#13;
        presenter.hideSentFile();&#13;
&#13;
        if (presenter.configuration.disableSendButton) {&#13;
            presenter.hideSendButton();&#13;
        } else {&#13;
            presenter.showSendButton();&#13;
        }&#13;
&#13;
        if ((!isPreview) &amp;&amp; (!presenter.contextLoaded)) {&#13;
            presenter.$view.addClass(inactiveClass);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.$view.css("display", "");&#13;
    }&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.$view.css("display", "none");&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var sourceType = model.SourceType;&#13;
        if (sourceType.length == 0) sourceType = SOURCE_TYPES.FILE;&#13;
&#13;
        if (sourceType !== SOURCE_TYPES.FILE &amp;&amp; model.SourceId.length == 0) {&#13;
             return {isValid: false, errorCode: 'V01'};&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            sourceId: model.SourceId,&#13;
            sourceType: sourceType,&#13;
            buttonText: model.ButtonText,&#13;
            dialogTitle: model.DialogTitle,&#13;
            disableSendButton: ModelValidationUtils.validateBoolean(model['disableSendButton'])&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.pageIndex = presenter.playerController.getCurrentPageIndex();&#13;
&#13;
        presenter.loadContext(10);&#13;
    };&#13;
&#13;
    presenter.loadContext = function(iterationsLeft) {&#13;
        //return true if context was loaded and false if it was not&#13;
        var context = presenter.playerController.getContextMetadata();&#13;
        if (context != null) {&#13;
            if ("teachers" in context) {&#13;
                presenter.teachers = context["teachers"];&#13;
            }&#13;
            if ("fileEndpointUrl" in context) {&#13;
                presenter.fileEndpointUrl = context["fileEndpointUrl"];&#13;
            }&#13;
            if ("fileDownloadEndpointUrl" in context) {&#13;
                presenter.fileDownloadEndpointUrl = context["fileDownloadEndpointUrl"];&#13;
            }&#13;
            if (context["fileSenderPickRecipientAvailable"] == false) {&#13;
                presenter.fileSenderPickRecipientAvailable = false;&#13;
            }&#13;
            if (presenter.fileEndpointUrl.length &gt; 0&#13;
                &amp;&amp; presenter.fileDownloadEndpointUrl.length &gt; 0) {&#13;
                presenter.contextLoaded = true;&#13;
                if (presenter.$view) {&#13;
                    presenter.$view.removeClass(inactiveClass);&#13;
                }&#13;
            }&#13;
        } else {&#13;
            if (iterationsLeft &gt; 0) {&#13;
                window.setTimeout(function(){presenter.loadContext(iterationsLeft-1)}, 500);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
            var state = {&#13;
                sentFileName: presenter.sentFileName,&#13;
                sentFileId: presenter.sentFileId,&#13;
                isMessageSent: presenter.isMessageSent&#13;
            };&#13;
            return JSON.stringify(state);&#13;
    }&#13;
&#13;
    presenter.setState = function(state) {&#13;
        if (state == null || state.length == 0) return;&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.setSentFile(parsedState.sentFileName, parsedState.sentFileId);&#13;
        presenter.isMessageSent = parsedState.isMessageSent;&#13;
        if (parsedState.sentFileName.length &gt; 0 &amp;&amp; parsedState.sentFileId != -1) {&#13;
            presenter.showSentFile();&#13;
            if (parsedState.isMessageSent) {&#13;
                presenter.hideSendButton();&#13;
            } else {&#13;
                presenter.showSendButton();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.fireSendFileEvent = function(fileID, targetID) {&#13;
        if (presenter.playerController &amp;&amp; !presenter.configuration.disableSendButton) {&#13;
            var fileType = LessonSendFileType.FILE; //FILE&#13;
            if (presenter.configuration.sourceType == SOURCE_TYPES.PARAGRAPH) {&#13;
                fileType = LessonSendFileType.TEXT;&#13;
            } else if (presenter.configuration.sourceType == SOURCE_TYPES.MEDIA_RECORDER) {&#13;
                fileType = LessonSendFileType.AUDIO;&#13;
            }&#13;
            var data = {&#13;
                teachers: [targetID],&#13;
                fileId: fileID,&#13;
                fileType: fileType&#13;
            };&#13;
            var jsonData = JSON.stringify(data);&#13;
            presenter.playerController.sendExternalEvent(sendFileEventType, jsonData);&#13;
            presenter.isMessageSent = true;&#13;
        } else {&#13;
            console.error("Cannot make a request: no player controller");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.loadViewHandlers = function() {&#13;
        presenter.views.wrapper = presenter.$view.find('.file-sender-wrapper');&#13;
        presenter.views.form = presenter.$view.find('.file-sender-input-wrapper');&#13;
        presenter.views.formInput = presenter.$view.find('.file-sender-input-file');&#13;
        presenter.views.formLabel = presenter.$view.find('.file-sender-input-label');&#13;
        presenter.views.sendFileButton = presenter.$view.find('.file-sender-send-file-button');&#13;
        presenter.views.fileSentWrapper = presenter.$view.find('.file-sender-sent-file');&#13;
        presenter.views.fileSentLabel = presenter.$view.find('.file-sender-sent-file-label');&#13;
        presenter.views.fileSentReset = presenter.$view.find('.file-sender-sent-file-reset');&#13;
    }&#13;
&#13;
    presenter.getSentFileName = function() {&#13;
        return presenter.sentFileName;&#13;
    }&#13;
&#13;
    presenter.getSentFileUrl = function() {&#13;
        return presenter.sentFileUrl;&#13;
    }&#13;
&#13;
    presenter.isSupportedFileType = function(file) {&#13;
        var fileTypes = [".doc",".docx",".pdf",".odt",".jpg",".gif",".png",".html",".mp3",".wav"];&#13;
        var fileName = file.name.toLowerCase();&#13;
        for (var i = 0; i &lt; fileTypes.length; i++) {&#13;
            if (fileName.endsWith(fileTypes[i])) return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.attachHandlers = function() {&#13;
        presenter.views.formInput.click(function(e){&#13;
            if (!presenter.contextLoaded) return;&#13;
            e.preventDefault();&#13;
            var tmpForm = $('&lt;form&gt;');&#13;
            var tmpInput = $('&lt;input type="file"&gt;');&#13;
            tmpInput.attr("accept", ".doc,.docx,.pdf,.odt,.jpg,.gif,.png,.html,.mp3,.wav");&#13;
            tmpForm.append(tmpInput);&#13;
            tmpInput.change(function(){&#13;
                presenter.views.formInput[0].files = tmpInput[0].files;&#13;
                presenter.views.formInput.change();&#13;
            });&#13;
            tmpInput.click();&#13;
        });&#13;
        presenter.views.formInput.change(function(e){&#13;
            if (presenter.contextLoaded) {&#13;
                var files = presenter.views.formInput[0].files;&#13;
                if(files.length &gt; 0 &amp;&amp; presenter.isSupportedFileType(files[0])) {&#13;
                    presenter.sendFile();&#13;
                }&#13;
            } else {&#13;
                presenter.views.formInput[0].value = null;&#13;
            }&#13;
        });&#13;
        presenter.views.sendFileButton.click(presenter.onSendFileClick);&#13;
        presenter.views.fileSentLabel.click(function() {&#13;
            var element = document.createElement("a");&#13;
            element.setAttribute("id", "dl");&#13;
            element.setAttribute("download", presenter.getSentFileName());&#13;
            element.setAttribute("href", presenter.getSentFileUrl());&#13;
            element.click();&#13;
        });&#13;
        presenter.views.fileSentReset.click(function() {&#13;
            presenter.reset();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.updateFileLabel = function() {&#13;
        if (presenter.views.formInput.length == 0 || presenter.views.formInput[0].files.length == 0) {&#13;
            presenter.views.formLabel.html("");&#13;
        }&#13;
        presenter.views.formLabel.html(presenter.views.formInput[0].files[0].name);&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.showTeacherList = function() {&#13;
        presenter.onSendFileClick();&#13;
    }&#13;
&#13;
    presenter.onSendFileClick = function() {&#13;
        if (!presenter.contextLoaded) return;&#13;
        &#13;
        if (presenter.configuration.sourceType == SOURCE_TYPES.FILE) {&#13;
            if (presenter.sentFileId != -1) {&#13;
                if (!presenter.fileSenderPickRecipientAvailable) {&#13;
                    presenter.sendFileToAllTeachers();&#13;
                } else {&#13;
                    presenter.showTargetDialog();&#13;
                }&#13;
            }&#13;
        } else if (presenter.configuration.sourceType == SOURCE_TYPES.MEDIA_RECORDER) {&#13;
            var module = presenter.getMediaRecorderModule();&#13;
            if (module != null &amp;&amp; !module.isEmpty()) {&#13;
                if (!presenter.fileSenderPickRecipientAvailable) {&#13;
                    presenter.sendFileToAllTeachers();&#13;
                } else {&#13;
                    presenter.showTargetDialog();&#13;
                }&#13;
            }&#13;
        } else {&#13;
            if (presenter.getParagraphModule() != null) {&#13;
                if (!presenter.fileSenderPickRecipientAvailable) {&#13;
                    presenter.sendFileToAllTeachers();&#13;
                } else {&#13;
                    presenter.showTargetDialog();&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.sendFileToAllTeachers = function() {&#13;
        presenter.teachers.forEach(teacher =&gt; {&#13;
            presenter.sendFile(teacher["id"]);&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setSentFile = function(fileName, fileId) {&#13;
        presenter.sentFileName = fileName;&#13;
        presenter.sentFileId = fileId;&#13;
        var fileUrl = presenter.fileDownloadEndpointUrl + fileId;&#13;
        presenter.sentFileUrl = fileUrl;&#13;
        presenter.views.fileSentLabel.html(fileName);&#13;
    }&#13;
&#13;
    presenter.resetSentFile = function() {&#13;
        presenter.sentFileName = "";&#13;
        presenter.sentFileUrl = "";&#13;
        presenter.sentFileId = -1;&#13;
        presenter.views.fileSentLabel.html("");&#13;
        presenter.isMessageSent = false;&#13;
    }&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.resetSentFile();&#13;
        presenter.hideSentFile();&#13;
        presenter.showSendButton();&#13;
    }&#13;
&#13;
    presenter.showSentFile = function() {&#13;
        presenter.views.fileSentWrapper.css("display", "");&#13;
        if (presenter.configuration.sourceType === SOURCE_TYPES.FILE) {&#13;
            presenter.views.form.css("display", "none");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideSentFile = function() {&#13;
        presenter.views.fileSentWrapper.css("display", "none");&#13;
        if (presenter.configuration.sourceType === SOURCE_TYPES.FILE) {&#13;
            presenter.views.form.css("display", "");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideSendButton = function() {&#13;
        presenter.views.sendFileButton.css("display", "none");&#13;
    }&#13;
&#13;
    presenter.showSendButton = function() {&#13;
        if (!presenter.configuration.disableSendButton) {&#13;
            presenter.views.sendFileButton.css("display", "block");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.fetchSessionJWTToken = function() {&#13;
        var result = fetch('/api/v2/jwt/session_token', {&#13;
            method: 'GET'&#13;
        });&#13;
        return result;&#13;
    }&#13;
&#13;
    presenter.showTargetDialog = function() {&#13;
        //if (presenter.teachers.length == 0) return;&#13;
        var wrapper = $('&lt;div&gt;&lt;/div&gt;');&#13;
        wrapper.addClass('file-sender-teacher-dialog-content');&#13;
        for (var i = 0; i &lt; presenter.teachers.length; i++) {&#13;
            var teacher = presenter.teachers[i];&#13;
            var teacherElement = $('&lt;div&gt;&lt;/div&gt;');&#13;
            teacherElement.addClass('file-sender-teacher-dialog-element');&#13;
            teacherElement.html(presenter.getTeacherName(teacher));&#13;
            teacherElement.attr('data-targetId', teacher.id);&#13;
            teacherElement.click(presenter.onTeacherSelect);&#13;
            wrapper.append(teacherElement);&#13;
        }&#13;
        currentScrollTop = presenter.playerController.iframeScroll();&#13;
        presenter.findICPage();&#13;
&#13;
        presenter.dialog = wrapper.dialog({&#13;
                    modal: true,&#13;
                    autoOpen: false,&#13;
                    title: presenter.configuration.dialogTitle,&#13;
                    open: presenter.openDialogEventHandler,&#13;
                    close: presenter.closeDialogEventHandler&#13;
                    });&#13;
        presenter.dialog.dialog('open');&#13;
        var dialogParent = presenter.dialog.closest('.ui-dialog');&#13;
        dialogParent.addClass('file-sender-teacher-dialog');&#13;
        dialogParent.find('.ui-dialog-titlebar').addClass('file-sender-teacher-dialog-titlebar');&#13;
&#13;
        if (!presenter.playerController.isPlayerInCrossDomain()) {&#13;
            $(top.window).scrollTop(currentScrollTop);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showErrorDialog = function(message) {&#13;
        //if (presenter.teachers.length == 0) return;&#13;
        var wrapper = $('&lt;div&gt;&lt;/div&gt;');&#13;
        wrapper.addClass('file-sender-error-dialog-content');&#13;
        wrapper.html(message);&#13;
&#13;
        currentScrollTop = presenter.playerController.iframeScroll();&#13;
        presenter.findICPage();&#13;
&#13;
        var dialog = wrapper.dialog({&#13;
                    modal: true,&#13;
                    autoOpen: false,&#13;
                    title: "Warning",&#13;
                    open: presenter.openDialogEventHandler,&#13;
                    close: presenter.closeDialogEventHandler&#13;
                    });&#13;
        dialog.dialog('open');&#13;
        var dialogParent = dialog.closest('.ui-dialog');&#13;
        dialogParent.addClass('file-sender-error-dialog');&#13;
        dialogParent.find('.ui-dialog-titlebar').addClass('file-sender-error-dialog-titlebar');&#13;
&#13;
        if (!presenter.playerController.isPlayerInCrossDomain()) {&#13;
            $(top.window).scrollTop(currentScrollTop);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTeacherName = function(teacher) {&#13;
        if (teacher.first_name.length === 0 &amp;&amp; teacher.last_name.length === 0) {&#13;
            return teacher.username;&#13;
        }&#13;
        return (teacher.first_name + " " + teacher.last_name).trim();&#13;
&#13;
    }&#13;
&#13;
    presenter.onTeacherSelect = function(event) {&#13;
        presenter.dialog.dialog('close');&#13;
        var targetId = $(this).attr('data-targetId');&#13;
        if (targetId == null) return;&#13;
        if (presenter.configuration.sourceType == SOURCE_TYPES.FILE) {&#13;
            if (presenter.sentFileId != -1) {&#13;
                presenter.fireSendFileEvent(presenter.sentFileId, targetId);&#13;
                presenter.hideSendButton();&#13;
            }&#13;
        } else {&#13;
            presenter.sendFile(targetId);&#13;
        }&#13;
    }&#13;
&#13;
    //targetID is optional,&#13;
    presenter.sendFile = function(targetID) {&#13;
        if (!presenter.contextLoaded) return;&#13;
&#13;
        presenter.fetchSessionJWTToken().then(result =&gt; result.json()).then(json =&gt; {&#13;
            presenter.getFile().then(file =&gt; {&#13;
                if (file == null) {&#13;
                    return;&#13;
                }&#13;
                if (presenter.fileEndpointUrl.length == 0) {&#13;
                    return;&#13;
                }&#13;
                var formData = new FormData();&#13;
                formData.append('file', file, file.name);&#13;
                fetch(presenter.fileEndpointUrl, {&#13;
                    method: 'GET',&#13;
                    headers: {&#13;
                        'Authorization': 'JWT ' + json.token,&#13;
                    }&#13;
                }).then(result =&gt; result.json()).then(&#13;
                    success =&gt; fetch(success["upload_url"], {&#13;
                       method: 'POST',&#13;
                       headers: {&#13;
                           'Authorization': 'JWT ' + json.token&#13;
                       },&#13;
                       body: formData&#13;
                    })&#13;
               ).then(result =&gt; result.json()).then(&#13;
                    success =&gt; {&#13;
                        if (success.uploaded_file_id === undefined) {&#13;
                            throw success;&#13;
                        }&#13;
                        presenter.setSentFile(file.name, success.uploaded_file_id);&#13;
                        presenter.showSentFile();&#13;
                        if (targetID !== undefined) {&#13;
                            presenter.fireSendFileEvent(success.uploaded_file_id, targetID);&#13;
                            presenter.hideSendButton();&#13;
                        }&#13;
                    }&#13;
                ).catch((err) =&gt; {&#13;
                        console.log(err);&#13;
                        presenter.showErrorDialog("Error occurred while uploading");&#13;
                    }&#13;
                );&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (!presenter.configuration.isValid || !presenter.contextLoaded) return;&#13;
&#13;
        var commands = {&#13;
            'showTeacherList': presenter.showTeacherList,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getParagraphModule = function() {&#13;
        if (presenter.configuration.sourceType !== SOURCE_TYPES.PARAGRAPH) return null;&#13;
        var module = presenter.playerController.getModule(presenter.configuration.sourceId);&#13;
        if (module == null || !module.hasOwnProperty('getText')) return null;&#13;
        return module;&#13;
    }&#13;
&#13;
&#13;
    presenter.getTextFile = function() {&#13;
        var module = presenter.getParagraphModule();&#13;
        if (module == null) return null;&#13;
        var text = module.getText();&#13;
        var file = new File([text], "paragraph.html", {type: "text/html;charset=utf-8"});&#13;
        return file;&#13;
    }&#13;
&#13;
    presenter.getMediaRecorderModule = function() {&#13;
        if (presenter.configuration.sourceType !== SOURCE_TYPES.MEDIA_RECORDER) return null;&#13;
        var module = presenter.playerController.getModule(presenter.configuration.sourceId);&#13;
        if (module == null || !module.hasOwnProperty('getMP3File') || !module.hasOwnProperty('isEmpty')) return null;&#13;
        return module;&#13;
    }&#13;
&#13;
    presenter.getMP3File = function() {&#13;
        var module = presenter.getMediaRecorderModule();&#13;
        if (module == null) return null;&#13;
        return module.getMP3File();&#13;
    }&#13;
&#13;
    presenter.getFile = function() {&#13;
        return new Promise(resolve =&gt; {&#13;
        if (presenter.configuration.sourceType === SOURCE_TYPES.PARAGRAPH) {&#13;
            resolve(presenter.getTextFile());&#13;
        } else if (presenter.configuration.sourceType === SOURCE_TYPES.FILE) {&#13;
            if (presenter.views.formInput[0].files.length &gt; 0) {&#13;
                 resolve(presenter.views.formInput[0].files[0]);&#13;
            } else {&#13;
                resolve(null);&#13;
            }&#13;
        } else { //SOURCE_TYPES.MEDIA_RECORDER&#13;
            var mp3 = presenter.getMP3File();&#13;
            if (mp3 == null) {&#13;
                resolve(null);&#13;
            } else {&#13;
                mp3.then(file =&gt; resolve(file));&#13;
            }&#13;
        }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.openDialogEventHandler = function(event, ui) {&#13;
        try{&#13;
            var $dialog  = $(event.target).closest('.ui-dialog');&#13;
            var isPreview = $(".gwt-DialogBox").is('.gwt-DialogBox');&#13;
            var isPopup =  $(presenter.$ICPage).is('.ic_popup_page');&#13;
            var isMarginalPage =  $(presenter.$ICPage).is('.ic_footer') || $(presenter.$ICPage).is('.ic_header');&#13;
            var presentationPosition = $(presenter.$ICPage).offset();&#13;
            var presentationWidth = $(presenter.$ICPage).outerWidth();&#13;
            var presentationHeight = isMarginalPage ?  $('.ic_page').outerHeight() : $(presenter.$ICPage).outerHeight();&#13;
            var dialogWidth = $dialog.outerWidth();&#13;
            var dialogHeight = $dialog.outerHeight();&#13;
            var topWindow = window;&#13;
            if (presenter.playerController &amp;&amp; !presenter.playerController.isPlayerInCrossDomain()) topWindow = top.window;&#13;
            var windowHeight = $(topWindow).height();&#13;
            var scrollTop = currentScrollTop;&#13;
            var previewFrame = 0;&#13;
            var popupTop = 0;&#13;
            var popupLeft = 0;&#13;
            var topPosition = 0;&#13;
&#13;
            if (presenter.isPreview) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
&#13;
                if (scrollTop &gt; 0) {&#13;
                    previewFrame = $(presenter.$ICPage).parent().parent().parent().offset().top - $(".gwt-DialogBox").offset().top;&#13;
                }&#13;
&#13;
                windowHeight = ($(presenter.$ICPage).parent().parent().parent().height());&#13;
                presentationPosition.top = 0;&#13;
            }&#13;
&#13;
            if (isPopup) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
                popupTop =  presentationPosition.top;&#13;
                if ($(topWindow).scrollTop() &gt; 0) presentationPosition.top = 0;&#13;
            }&#13;
            var visibleArea = presenter.estimateVisibleArea(presentationPosition.top, presentationHeight, scrollTop, windowHeight);&#13;
            var availableHeight = visibleArea.bottom - visibleArea.top;&#13;
&#13;
            if (dialogHeight &gt;= availableHeight) {&#13;
                dialogHeight = presenter.calculateReducedDialogHeight($dialog, availableHeight);&#13;
                $dialog.find('.file-sender-teacher-dialog-content').css({&#13;
                    height: dialogHeight + 'px'&#13;
                });&#13;
            }&#13;
&#13;
            // Check if the addon needs to account for transform css&#13;
            var scaleInfo = presenter.playerController.getScaleInformation();&#13;
            if(scaleInfo.scaleY!==1.0) {&#13;
                $dialog.css('transform', scaleInfo.transform);&#13;
                $dialog.css('transform-origin', scaleInfo.transformOrigin);&#13;
            }&#13;
&#13;
            if(parseFloat(window.MobileUtils.getAndroidVersion())=='4.1'){&#13;
                if (window !== window.top) {&#13;
                    var ancestorData;&#13;
                    for (var i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                    {&#13;
                        ancestorData = presenter.ancestorsData[i];&#13;
                        $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                    }&#13;
                    presenter.ancestorsData = undefined;&#13;
                }&#13;
            }&#13;
&#13;
            if (isPopup || presenter.isPreview) {&#13;
                popupLeft = presentationPosition.left;&#13;
                topPosition = parseInt((availableHeight - dialogHeight) / 2, 10);&#13;
            }&#13;
            else {&#13;
                topPosition = parseInt(( windowHeight - dialogHeight) / 2, 10) ;&#13;
            }&#13;
&#13;
            var presentationHorizontalOffset = parseInt((presentationWidth - dialogWidth) * scaleInfo.scaleY / 2, 10);&#13;
            var leftPosition = presentationPosition.left + presentationHorizontalOffset;&#13;
&#13;
            // adjust top position if Player was embedded in iframe (i.e. EverTeach)&#13;
            if (window !== window.top) {&#13;
                var iframeDialogHeight = parseInt($dialog.height(), 10);&#13;
                iframeDialogHeight += DOMOperationsUtils.calculateOuterDistances(DOMOperationsUtils.getOuterDimensions($dialog)).vertical;&#13;
&#13;
                if (topPosition &lt; 0) {&#13;
                    topPosition = 0;&#13;
                } else if (topPosition &gt; $(window).height() - iframeDialogHeight) {&#13;
                    topPosition = $(window).height() - iframeDialogHeight;&#13;
                }&#13;
            }&#13;
&#13;
&#13;
            if ($(window).scrollTop() &gt; popupTop &amp;&amp; isPopup) {&#13;
                topPosition += ($(window).scrollTop() - popupTop);&#13;
            }&#13;
&#13;
            $dialog.css({&#13;
                left: (leftPosition - popupLeft) + 'px',&#13;
                top: (topPosition + scrollTop + previewFrame) + 'px'&#13;
            });&#13;
&#13;
            $dialog.find('.ui-dialog-content').css({&#13;
                color: 'black'&#13;
            });&#13;
&#13;
            if(isPopup || presenter.isPreview) {&#13;
                // For Preview and Popup dialog is moved to appropriate page&#13;
                var $overlay = $(".ui-widget-overlay");&#13;
                $(presenter.$view.closest(".ui-widget-overlay")).remove();&#13;
                if (isPreview) {&#13;
                    $(".ic_page_panel").children(".ic_page").children().last().after($overlay);&#13;
                }&#13;
                else {&#13;
                    $dialog.before($overlay);&#13;
                }&#13;
            }&#13;
        }catch(e){console.log(e)}&#13;
    };&#13;
&#13;
    presenter.closeDialogEventHandler = function() {&#13;
        // due to the inability to close the dialog, when any video is under close button&#13;
        try{&#13;
            presenter.dialog.css("maxHeight", "none");&#13;
&#13;
            if (presenter.ancestorsData !== undefined) {&#13;
                var ancestorData;&#13;
                for (i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                {&#13;
                    ancestorData = presenter.ancestorsData[i];&#13;
                    $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                }&#13;
                presenter.ancestorsData = undefined;&#13;
            }&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.findICPage = function () {&#13;
        presenter.$ICPage = $(presenter.$view.parent('.ic_page:first')[0]);&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_popup_page:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_header:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_footer:first')[0]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.estimateVisibleArea = function(presentationTop, presentationHeight, scrollTop, windowHeight) {&#13;
        var borders = {&#13;
            top: presentationTop,&#13;
            bottom: presentationTop + presentationHeight&#13;
        };&#13;
&#13;
        if (presentationTop &lt; scrollTop) {&#13;
            borders.top = scrollTop;&#13;
        }&#13;
&#13;
        if (presentationTop + presentationHeight &gt; scrollTop + windowHeight) {&#13;
            borders.bottom = scrollTop + windowHeight;&#13;
        }&#13;
&#13;
        return borders;&#13;
    };&#13;
&#13;
    presenter.calculateReducedDialogHeight = function($dialog, pageHeight) {&#13;
        var titleHeight = $dialog.find(".ui-dialog-titlebar").outerHeight();&#13;
        var padding = parseInt($dialog.css("padding-top")) + parseInt($dialog.css("padding-bottom"));&#13;
&#13;
        var $content = $dialog.find('.ui-dialog-content');&#13;
        var contentPadding = parseInt($content.css('paddingTop'), 10) + parseInt($content.css('paddingBottom'), 10);&#13;
        var contentBorder = parseInt($content.css('borderTopWidth'), 10) + parseInt($content.css('borderBottomWidth'), 10);&#13;
        var contentMargin = parseInt($content.css('marginTop'), 10) + parseInt($content.css('marginBottom'), 10);&#13;
&#13;
        return pageHeight - padding - titleHeight - contentPadding - contentBorder - contentMargin - 100;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>