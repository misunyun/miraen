<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Submit" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property isLocalized="true" name="Text" nameLabel="Submit_property_text" type="string"/>
        <property displayName="Text Selected" isLocalized="true" name="TextSelected" nameLabel="Submit_property_text_selected" type="string"/>
	</model>
<css>.submit-wrapper,&#13;
.submit-wrapper .submit-container,&#13;
.submit-wrapper .submit-container .submit-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.submit-wrapper .submit-container .submit-button {&#13;
    background: url('resources/submit-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="submit-wrapper"&gt;&#13;
    &lt;div class="submit-container"&gt;&#13;
        &lt;div class="submit-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="submit-wrapper"&gt;&#13;
    &lt;div class="submit-container"&gt;&#13;
        &lt;div class="submit-button"&gt;&#13;
&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonSubmit_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        presenter.runEndedDeferred = new $.Deferred();&#13;
        presenter.runEnded = presenter.runEndedDeferred.promise();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (additionalEventData) {&#13;
        var eventData = { 'source': presenter.configuration.addonID };&#13;
        for (var key in additionalEventData) {&#13;
            eventData[key] = additionalEventData[key];&#13;
        }&#13;
        return eventData;&#13;
    };&#13;
&#13;
    function getEventObject(item, value, score) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': item != undefined ? item : "",&#13;
            'value': value != undefined ? value : "",&#13;
            'score': score != undefined ? score : ""&#13;
        };&#13;
    }&#13;
&#13;
    presenter.sendEvent = function(eventName, eventData) {&#13;
        var eventObject = getEventObject(eventData.item, eventData.value, eventData.score);&#13;
&#13;
        presenter.eventBus.sendEvent(eventName, eventObject);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model, isPreview) {&#13;
        var buttonText = model['Text'],&#13;
            buttonTextSelected = model['TextSelected'],&#13;
            isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        return {&#13;
            'buttonText' : buttonText,&#13;
            'buttonTextSelected' : buttonTextSelected,&#13;
            'addonID' : model['ID'],&#13;
            'isVisible' : isVisible,&#13;
            'isVisibleByDefault': isVisible&#13;
        }&#13;
    };&#13;
&#13;
    function getAllOfTheModulesThatImplementIsAttempted() {&#13;
        var pageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            ids = presenter.playerController.getPresentation().getPage(pageIndex).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        for(var i = 0; i &lt; ids.length; i++){&#13;
            var currentModule = presenter.playerController.getModule(ids[i]);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
        }&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted() {&#13;
        var areAllAttempted = true;&#13;
&#13;
        $.each(presenter.modulesOnPage, function() {&#13;
            if (!this.isAttempted()) {&#13;
                areAllAttempted = false;&#13;
                return false; // break;&#13;
            }&#13;
        });&#13;
&#13;
        return areAllAttempted;&#13;
    }&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model, isPreview);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.submitButton = presenter.$view.find('.submit-button');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.submitWrapper = presenter.$view.find('.submit-wrapper');&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
&#13;
            presenter.modulesOnPage = getAllOfTheModulesThatImplementIsAttempted();&#13;
&#13;
            presenter.submitButton.click(function(e) {&#13;
                e.stopPropagation();&#13;
&#13;
                var isSelected = $(presenter.submitWrapper).hasClass('selected');&#13;
&#13;
                if (isSelected) {&#13;
                    presenter.submitWrapper.removeClass('selected');&#13;
                    presenter.submitButton.html(presenter.configuration.buttonText);&#13;
&#13;
                    presenter.playerController.getCommands().uncheckAnswers();&#13;
                    presenter.sendEvent('State', presenter.createEventData({ 'value' : 0 }));&#13;
&#13;
                } else if (areAllModulesAttempted()) {&#13;
                    presenter.submitWrapper.addClass('selected');&#13;
                    presenter.submitButton.html(presenter.configuration.buttonTextSelected);&#13;
&#13;
                    presenter.playerController.getCommands().checkAnswers();&#13;
                    presenter.sendEvent('Submitted', presenter.createEventData());&#13;
                    presenter.sendEvent('State', presenter.createEventData({ 'value' : 1 }));&#13;
                } else {&#13;
                    presenter.sendEvent('NotAllAttempted', presenter.createEventData());&#13;
                }&#13;
&#13;
            });&#13;
&#13;
            presenter.runEndedDeferred.resolve();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.submitWrapper.removeClass('selected');&#13;
        presenter.submitButton.html(presenter.configuration.buttonText);&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function(){&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(rawState){&#13;
        var state = JSON.parse(rawState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>