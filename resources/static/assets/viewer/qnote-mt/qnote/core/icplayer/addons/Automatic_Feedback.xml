<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Automatic_Feedback" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="ActivityModuleID" nameLabel="Automatic_Feedback_property_activity_module_id" type="string"/>
		<property name="ActivityType" nameLabel="Automatic_Feedback_property_activity_type" type="{Default}"/>
		<property name="CorrectFeedback" nameLabel="Automatic_Feedback_property_correct_feedback" type="list">
			<property name="ActivityItem" nameLabel="Automatic_Feedback_property_activity_item" type="string"/>
			<property name="Feedback" nameLabel="Automatic_Feedback_property_feedback" type="html"/>
		</property>
		<property name="IncorrectFeedback" nameLabel="Automatic_Feedback_property_incorrect_feedback" type="list">
			<property name="ActivityItem" nameLabel="Automatic_Feedback_property_activity_item" type="string"/>
			<property name="Feedback" nameLabel="Automatic_Feedback_property_feedback" type="html"/>
		</property>
		<property name="EmptyFeedback" nameLabel="Automatic_Feedback_property_empty_feedback" type="list">
			<property name="ActivityItem" nameLabel="Automatic_Feedback_property_activity_item" type="string"/>
			<property name="Feedback" nameLabel="Automatic_Feedback_property_feedback" type="html"/>
		</property>
		<property name="PartialFeedback" nameLabel="Automatic_Feedback_property_partial_feedback" type="list">
			<property name="ActivityItem" nameLabel="Automatic_Feedback_property_activity_item" type="string"/>
			<property name="Feedback" nameLabel="Automatic_Feedback_property_feedback" type="html"/>
		</property>
		<property name="ResetResponseOnPageChange" nameLabel="Automatic_Feedback_property_reset_response_on_page_change" type="boolean"/>
		<property name="Display" nameLabel="Automatic_Feedback_property_display_mode" type="{block,tooltips,popup}"/>
		<property name="DisplayFeedbackButtons" nameLabel="Automatic_Feedback_property_display_feedback_buttons" type="boolean"/>
		<property name="ReactTo" nameLabel="Automatic_Feedback_property_react_to" type="{Check,ValueChanged,Script}"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Automatic_Feedback_property_lang_attribute" type="string"/>
	</model>
<css>.ui-dialog &gt; .ui-dialog-titlebar.automatic_feedback_tooltip_title {&#13;
    width: 1em;&#13;
    padding-top: 0.2em;&#13;
    padding-left: 0.4em;&#13;
    padding-right: 0.4em;&#13;
    padding-bottom: 0.2em;&#13;
    position: absolute;&#13;
    right: 0.3em;&#13;
    z-index: 999;&#13;
}&#13;
&#13;
.ui-dialog &gt; .ui-dialog-content.automatic_feedback_tooltip_body {&#13;
    padding-right: 2.5em;&#13;
}&#13;
&#13;
.automatic_feedback_button {&#13;
    width: 1.5em;&#13;
    height: 1.5em;&#13;
}&#13;
</css><view>&lt;div class="automatic_feedback_wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="external-link-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAutomatic_Feedback_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.activityHandler = null;&#13;
    presenter.playerController = null;&#13;
    presenter.textParser = null;&#13;
    presenter.isLoaded = false;&#13;
&#13;
    var ERROR_MESSAGES = {&#13;
        AM01: "Activity module ID cannot be empty",&#13;
        AT01: "Activity type not implemented",&#13;
        F01: "Incorrect Activity item syntax",&#13;
    }&#13;
&#13;
    var DISPLAY_MODES = {&#13;
        BLOCK: "block",&#13;
        TOOLTIPS: "tooltips",&#13;
        POPUP: "popup"&#13;
    };&#13;
&#13;
    var REACT_TO = {&#13;
        VALUE_CHANGED: "ValueChanged",&#13;
        CHECK: "Check",&#13;
        SCRIPT: "Script"&#13;
    }&#13;
&#13;
    var FEEDBACK_CLASSES = {&#13;
        CORRECT: "correct-feedback",&#13;
        INCORRECT: "incorrect-feedback",&#13;
        PARTIAL: "partial-feedback",&#13;
        EMPTY: "empty-feedback"&#13;
    }&#13;
&#13;
    var POPUP_FEEDBACK_CLASS = "automatic-feedback-popup";&#13;
    var AUTOMATIC_FEEDBACK_DIALOG_CLASS = "automatic-feedback-dialog";&#13;
    var AUTOMATIC_FEEDBACK_BUTTON_CLASS = "automatic_feedback_button";&#13;
    var REMAIN_OPEN_CLASS = "remain-open";&#13;
&#13;
    var activityTypeDict = null;&#13;
    presenter.initializeActivityTypeDict = function() {&#13;
        activityTypeDict = {&#13;
            "Default": DefaultActivity,&#13;
        };&#13;
    }&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.initializeActivityTypeDict();&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            view.innerHTML = ERROR_MESSAGES[presenter.configuration.errorCode];&#13;
            return;&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.$content = $(view).find('.automatic_feedback_wrapper');&#13;
            presenter.tooltipElements = [];&#13;
            presenter.activityHandler = new activityTypeDict[presenter.configuration.activityType](this);&#13;
&#13;
            if (presenter.configuration.displayMode == DISPLAY_MODES.POPUP) {&#13;
                presenter.$popup = $('&lt;div&gt;&lt;/div&gt;');&#13;
                presenter.$content.append(presenter.$popup);&#13;
                presenter.$popup.addClass(POPUP_FEEDBACK_CLASS);&#13;
                presenter.$popup.dialog({&#13;
                    modal: true,&#13;
                    autoOpen: false,&#13;
                    draggable: false,&#13;
                    minHeight: 'auto',&#13;
                    resizable: false,&#13;
                    width: presenter.configuration.width&#13;
                });&#13;
&#13;
                if (presenter.configuration.displayFeedbackButtons) {&#13;
                    presenter.activityHandler.createTooltips();&#13;
                } else {&#13;
                    presenter.$popup.on('dialogclose', function(event, ui){&#13;
                        presenter.activityHandler.popupClosedCallback();&#13;
                    });&#13;
                }&#13;
            } else if (presenter.configuration.displayMode == DISPLAY_MODES.TOOLTIPS) {&#13;
                presenter.activityHandler.createTooltips();&#13;
            }&#13;
&#13;
            presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        }&#13;
&#13;
        presenter.isLoaded = true;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
       presenter.upgradeLangAttribute(upgradedModel);&#13;
       presenter.upgradeResetResponse(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
    &#13;
    presenter.upgradeLangAttribute = function (upgradedModel) {&#13;
        if (upgradedModel["langAttribute"] === undefined) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
    }&#13;
    &#13;
    presenter.upgradeResetResponse = function (upgradedModel) {&#13;
        if (upgradedModel["ResetResponseOnPageChange"] === undefined) {&#13;
            upgradedModel["ResetResponseOnPageChange"] = "False";&#13;
        }&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        if (model["ActivityModuleID"].trim().length === 0) {&#13;
            return {isValid: false, errorCode: "AM01"};&#13;
        }&#13;
&#13;
        var activityType = "Default";&#13;
        if (model["ActivityType"].length &gt; 0) activityType = model["ActivityType"];&#13;
        if(Object.keys(activityTypeDict).indexOf(activityType) === -1) {&#13;
            return {isValid: false, errorCode: "AT01"};&#13;
        }&#13;
&#13;
        var displayMode = DISPLAY_MODES.BLOCK;&#13;
        if (model["Display"].length &gt; 0) displayMode = model["Display"];&#13;
&#13;
        var reactTo = REACT_TO.CHECK;&#13;
        if (model["ReactTo"].length &gt; 0) reactTo = model["ReactTo"];&#13;
&#13;
&#13;
        var feedbacks = generateFeedbacks(model);&#13;
        if (!feedbacks.isValid) return {isValid: false, errorCode: feedbacks.errorCode};&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            activityModuleID: model["ActivityModuleID"],&#13;
            activityType: activityType,&#13;
            resetResponseOnPageChange: ModelValidationUtils.validateBoolean(model["ResetResponseOnPageChange"]),&#13;
            displayFeedbackButtons: ModelValidationUtils.validateBoolean(model["DisplayFeedbackButtons"]),&#13;
            defaultFeedback: feedbacks.defaultFeedback,&#13;
            itemFeedbacks: feedbacks.itemFeedbacks,&#13;
            displayMode: displayMode,&#13;
            reactTo: reactTo,&#13;
            langTag: model["langAttribute"]&#13;
        }&#13;
    }&#13;
&#13;
    function generateFeedbacks(model) {&#13;
        var feedbacks = {&#13;
            defaultFeedback: createEmptyFeedbackObject(),&#13;
            itemFeedbacks: {},&#13;
            isValid: true&#13;
        };&#13;
        feedbacks = fillFeedbackObjects(feedbacks, 'correct', model['CorrectFeedback']);&#13;
        feedbacks = fillFeedbackObjects(feedbacks, 'incorrect', model['IncorrectFeedback']);&#13;
        feedbacks = fillFeedbackObjects(feedbacks, 'empty', model['EmptyFeedback']);&#13;
        feedbacks = fillFeedbackObjects(feedbacks, 'partial', model['PartialFeedback']);&#13;
        return feedbacks;&#13;
    }&#13;
&#13;
    function fillFeedbackObjects(feedbacks, fieldName, feedbackModelList) {&#13;
        if (!feedbacks.isValid) return feedbacks;&#13;
&#13;
        for (var i = 0; i &lt; feedbackModelList.length; i++) {&#13;
            var feedbackModel = feedbackModelList[i];&#13;
            if (feedbackModel['Feedback'].trim() === 0) continue;&#13;
            if (feedbackModel['ActivityItem'].trim().length === 0) {&#13;
                let feedback = feedbackModel['Feedback'];&#13;
                if (presenter.textParser) {&#13;
                    feedback = presenter.textParser.parse(feedback);&#13;
                }&#13;
                feedbacks.defaultFeedback[fieldName] = feedback;&#13;
            } else {&#13;
                activityItems = feedbackModel['ActivityItem'].split(',');&#13;
                for (var j = 0; j &lt; activityItems.length; j++) {&#13;
                    var activityItem = activityItems[j];&#13;
                    var range = activityItem.split('-');&#13;
                    if (range.length === 1 || range.length === 2) {&#13;
                        var r1, r2;&#13;
                        r1 = range[0].trim();&#13;
                        if (range.length == 2) {&#13;
                            r2 = range[1].trim();&#13;
                        } else {&#13;
                            r2 = r1;&#13;
                        }&#13;
                        if (isNaN(r1) || isNaN(r2)) {&#13;
                            feedbacks.isValid = false;&#13;
                            feedbacks.errorCode = "F01";&#13;
                            return feedbacks;&#13;
                        }&#13;
                        r1 = parseInt(r1);&#13;
                        r2 = parseInt(r2) + 1;&#13;
                        if (r2 &lt;= r1) {&#13;
                            feedbacks.isValid = false;&#13;
                            feedbacks.errorCode = "F01";&#13;
                            return feedbacks;&#13;
                        }&#13;
                        for (var k = r1; k &lt; r2; k++) {&#13;
                            if (feedbacks.itemFeedbacks[k] === undefined) feedbacks.itemFeedbacks[k] = createEmptyFeedbackObject();&#13;
                            let feedback = feedbackModel['Feedback'];&#13;
                            if (presenter.textParser) {&#13;
                                feedback = presenter.textParser.parse(feedback);&#13;
                            }&#13;
                            feedbacks.itemFeedbacks[k][fieldName] = feedback;&#13;
                        }&#13;
                    } else {&#13;
                        feedbacks.isValid = false;&#13;
                        feedbacks.errorCode = "F01";&#13;
                        return feedbacks;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        return feedbacks;&#13;
    }&#13;
&#13;
    function createEmptyFeedbackObject() {&#13;
        return {&#13;
            correct: "",&#13;
            incorrect: "",&#13;
            empty: "",&#13;
            partial: ""&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.reactTo == REACT_TO.CHECK) {&#13;
            presenter.activityHandler.onShowErrorsMode();&#13;
        } else if (presenter.configuration.reactTo == REACT_TO.VALUE_CHANGED) {&#13;
            if (presenter.configuration.displayMode !== DISPLAY_MODES.BLOCK || presenter.configuration.displayFeedbackButtons) {&#13;
                presenter.activityHandler.clearFeedback();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.configuration.displayMode !== DISPLAY_MODES.BLOCK&#13;
            || presenter.configuration.displayFeedbackButtons&#13;
            || presenter.configuration.reactTo === REACT_TO.CHECK) {&#13;
            presenter.activityHandler.clearFeedback();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.activityHandler.clearFeedback();&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    presenter.setEventBus = function (wrappedEventBus) {&#13;
        eventBus = wrappedEventBus;&#13;
        eventBus.addEventListener("ValueChanged", this);&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (!presenter.isLoaded) return;&#13;
        if (eventName == "ValueChanged") presenter.onValueChanged(data);&#13;
    }&#13;
&#13;
    presenter.onValueChanged = function(data) {&#13;
        if (presenter.configuration.reactTo == REACT_TO.VALUE_CHANGED) {&#13;
            if (data.source == presenter.configuration.activityModuleID) {&#13;
                if (presenter.configuration.activityType == "Default") {&#13;
                    presenter.activityHandler.onShowErrorsMode();&#13;
                } else {&#13;
                    if (data.value.length === 0 || data.value == '---') {&#13;
                        presenter.activityHandler.onEmptyAnswer(data.item);&#13;
                    } else if (data.score == 0) {&#13;
                        presenter.activityHandler.onIncorrectAnswer(data.item);&#13;
                    } else {&#13;
                        presenter.activityHandler.onCorrectAnswer(data.item);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                presenter.activityHandler.clearFeedback();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showBlockFeedback = function(feedback, _class) {&#13;
        presenter.clearFeedbackClasses(presenter.$content);&#13;
        presenter.$content.addClass(_class);&#13;
        presenter.$content.html(feedback);&#13;
        if (presenter.configuration.displayFeedbackButtons) {&#13;
            presenter.wrapElementInButton(presenter.$content, false);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.clearBlockFeedback = function() {&#13;
        presenter.clearFeedbackClasses(presenter.$content);&#13;
        presenter.$content.html("");&#13;
        if (presenter.configuration.displayFeedbackButtons) {&#13;
            presenter.$content.parent().find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS).remove();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isBlockFeedbackWrapped = function() {&#13;
        return presenter.$content.parent().find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS).length &gt; 0;&#13;
    }&#13;
&#13;
    presenter.unwrapBlockFeedback = function() {&#13;
        if (presenter.configuration.displayFeedbackButtons) {&#13;
            presenter.$content.parent().find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS).click();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.clearFeedbackClasses = function($element) {&#13;
        $element.removeClass(FEEDBACK_CLASSES.CORRECT);&#13;
        $element.removeClass(FEEDBACK_CLASSES.INCORRECT);&#13;
        $element.removeClass(FEEDBACK_CLASSES.PARTIAL);&#13;
        $element.removeClass(FEEDBACK_CLASSES.EMPTY);&#13;
    }&#13;
&#13;
    presenter.showPopupFeedback = function(feedback, _class) {&#13;
        $('.' + POPUP_FEEDBACK_CLASS).dialog("close");&#13;
        presenter.clearFeedbackClasses(presenter.$popup.parent());&#13;
        presenter.$popup.parent().addClass(_class);&#13;
        presenter.$popup.parent().addClass(AUTOMATIC_FEEDBACK_DIALOG_CLASS);&#13;
        presenter.$popup.html(feedback);&#13;
&#13;
        var currentScrollTop = presenter.playerController.iframeScroll();&#13;
        presenter.$popup.dialog('open');&#13;
        var topWindow = window;&#13;
        if (!presenter.playerController.isPlayerInCrossDomain()) {&#13;
            topWindow = top.window;&#13;
            $(topWindow).scrollTop(currentScrollTop);&#13;
        }&#13;
&#13;
        var dialogHeight = presenter.$popup.outerHeight();&#13;
        var windowHeight = $(topWindow).height();&#13;
        var topPosition = parseInt(( windowHeight - dialogHeight) / 3, 10) + currentScrollTop;&#13;
        presenter.$popup.parent().css('top',topPosition+'px');&#13;
&#13;
        presenter.scaleDialog(presenter.$popup);&#13;
    }&#13;
&#13;
    presenter.scaleDialog = function ($dialog) {&#13;
        var scaleInfo = presenter.playerController.getScaleInformation();&#13;
        if(scaleInfo.scaleY !== 1.0) {&#13;
            var $icpage = presenter.findICPage();&#13;
            if ($icpage != null) {&#13;
                var presentationPosition = $icpage.offset();&#13;
                var presentationWidth = $icpage.outerWidth();&#13;
                var dialogWidth = $dialog.outerWidth();&#13;
                var presentationHorizontalOffset = parseInt((presentationWidth - dialogWidth) * scaleInfo.scaleY / 2, 10);&#13;
                var leftPosition = presentationPosition.left + presentationHorizontalOffset;&#13;
&#13;
                $dialog.parent().css('transform', scaleInfo.transform);&#13;
                $dialog.parent().css('transform-origin', scaleInfo.transformOrigin);&#13;
                $dialog.parent().css('left',leftPosition+'px');&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.findICPage = function () {&#13;
        var $icpage = $(presenter.$view.parent('.ic_page:first')[0]);&#13;
        if ($icpage.offset() == null){&#13;
            $icpage = $(presenter.$view.parent('.ic_popup_page:first')[0]);&#13;
        }&#13;
        if ($icpage.offset() == null){&#13;
            $icpage = $(presenter.$view.parent('.ic_header:first')[0]);&#13;
        }&#13;
        if ($icpage.offset() == null){&#13;
            $icpage = $(presenter.$view.parent('.ic_footer:first')[0]);&#13;
        }&#13;
        return $icpage;&#13;
    };&#13;
&#13;
    function getFeedbackClassFromElement($element) {&#13;
        if ($element.hasClass(FEEDBACK_CLASSES.CORRECT)) {&#13;
            return FEEDBACK_CLASSES.CORRECT;&#13;
        } else if ($element.hasClass(FEEDBACK_CLASSES.INCORRECT)) {&#13;
            return FEEDBACK_CLASSES.INCORRECT;&#13;
        } else if ($element.hasClass(FEEDBACK_CLASSES.EMPTY)) {&#13;
            return FEEDBACK_CLASSES.EMPTY;&#13;
        } else if ($element.hasClass(FEEDBACK_CLASSES.PARTIAL)) {&#13;
            return FEEDBACK_CLASSES.PARTIAL;&#13;
        } else {&#13;
            return '';&#13;
        }&#13;
    }&#13;
&#13;
    presenter.wrapElementInButton = function($element, isDialog) {&#13;
        var $parent = $element.parent();&#13;
        if (isDialog) {&#13;
            $parent.find('.ui-dialog-titlebar').css('display', 'none');&#13;
            if (!$parent.attr('data-original-width')) {&#13;
                $parent.attr('data-original-width', $parent.css('width'));&#13;
            }&#13;
            originalWidth = $element.parent().css('width');&#13;
            $parent.css('width', 'auto');&#13;
        }&#13;
        $element.css('display','none');&#13;
&#13;
        var $buttons = $parent.find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS);&#13;
&#13;
        if($buttons.length == 0) {&#13;
            var $button = $('&lt;button&gt;&lt;/button&gt;');&#13;
            $button.addClass(AUTOMATIC_FEEDBACK_BUTTON_CLASS);&#13;
            var _class = getFeedbackClassFromElement($parent);&#13;
            $button.addClass(_class);&#13;
            $parent.append($button);&#13;
            if (presenter.configuration.displayMode == DISPLAY_MODES.POPUP) {&#13;
                $button.click(function(){&#13;
                    presenter.showPopupFeedback($element.html(), _class);&#13;
                });&#13;
            } else {&#13;
                $button.click(function(){&#13;
                    $element.css('display','');&#13;
                    if (isDialog) {&#13;
                        $parent.find('.ui-dialog-titlebar').css('display', '');&#13;
                        $parent.css('width', $parent.attr('data-original-width'));&#13;
                    }&#13;
                    $button.remove();&#13;
                });&#13;
            }&#13;
        } else {&#13;
            var $button = $buttons.first();&#13;
            presenter.clearFeedbackClasses($button);&#13;
            var _class = getFeedbackClassFromElement($parent);&#13;
            $button.addClass(_class);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isScoreCorrect = function(score, maxScore, errorCount) {&#13;
        return score == maxScore &amp;&amp; errorCount == 0;&#13;
    }&#13;
&#13;
    presenter.isScoreIncorrect = function(score, maxScore, errorCount) {&#13;
        return errorCount &gt; 0;&#13;
    }&#13;
&#13;
    presenter.isScoreEmpty = function(score, maxScore, errorCount) {&#13;
        return score == 0 &amp;&amp; maxScore &gt; 0 &amp;&amp; errorCount == 0;&#13;
    }&#13;
&#13;
    presenter.isScorePartial = function(score, maxScore, errorCount) {&#13;
        return score != 0 &amp;&amp; score &lt; maxScore &amp;&amp; errorCount == 0;&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        var state = presenter.activityHandler.getState();&#13;
        return state;&#13;
    }&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.reset();&#13;
        presenter.activityHandler.setState(state);&#13;
    }&#13;
&#13;
    presenter.destroy = function AddonAutomatic_Feedback_destroy() {&#13;
        presenter.activityHandler.onDestroy();&#13;
    }&#13;
&#13;
    presenter.displayFeedback = function (item, type) {&#13;
        if (Array.isArray(item) &amp;&amp; item.length == 2 &amp;&amp; type === undefined) {&#13;
            type = item[1];&#13;
            item = item[0];&#13;
        }&#13;
        switch (type.toLowerCase()) {&#13;
            case "correct":&#13;
                presenter.activityHandler.onCorrectAnswer(item);&#13;
                break;&#13;
            case "incorrect":&#13;
                presenter.activityHandler.onIncorrectAnswer(item);&#13;
                break;&#13;
            case "partial":&#13;
                presenter.activityHandler.onPartialAnswer(item);&#13;
                break;&#13;
            case "empty":&#13;
                presenter.activityHandler.onEmptyAnswer(item);&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.clearFeedback = function() {&#13;
        presenter.activityHandler.clearFeedback();&#13;
    }&#13;
&#13;
    presenter.getCorrectFeedbacks = function() {&#13;
        return getFeedbackValues("correct");&#13;
    }&#13;
&#13;
    presenter.getIncorrectFeedbacks = function() {&#13;
        return getFeedbackValues("incorrect");&#13;
    }&#13;
&#13;
    presenter.getEmptyFeedbacks = function() {&#13;
        return getFeedbackValues("empty");&#13;
    }&#13;
&#13;
    presenter.getPartiallyCorrectFeedbacks = function() {&#13;
        return getFeedbackValues("partial");&#13;
    }&#13;
&#13;
    function getFeedbackValues (type) {&#13;
        let result = {};&#13;
        if (presenter.configuration.defaultFeedback[type].length &gt; 0) {&#13;
            result["default"] = presenter.configuration.defaultFeedback[type];&#13;
        }&#13;
        let itemIDs = Object.keys(presenter.configuration.itemFeedbacks);&#13;
        for (let i = 0; i &lt; itemIDs.length; i++) {&#13;
            let itemID = itemIDs[i];&#13;
            let item = presenter.configuration.itemFeedbacks[itemID];&#13;
            if (item[type].length &gt; 0) {&#13;
                result[itemID] = item[type];&#13;
            }&#13;
        }&#13;
        return result;&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'displayFeedback': presenter.displayFeedback,&#13;
            'readFeedback': presenter.readFeedback,&#13;
            'displayAndReadFeedback': presenter.displayAndReadFeedback,&#13;
            'clearFeedback': presenter.clearFeedback,&#13;
            'getCorrectFeedbacks': presenter.getCorrectFeedbacks,&#13;
            'getIncorrectFeedbacks': presenter.getIncorrectFeedbacks,&#13;
            'getPartiallyCorrectFeedbacks': presenter.getPartiallyCorrectFeedbacks,&#13;
            'getEmptyFeedbacks': presenter.getEmptyFeedbacks&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.displayAndReadFeedback = function(item, type) {&#13;
        if (Array.isArray(item) &amp;&amp; item.length == 2 &amp;&amp; type === undefined) {&#13;
            type = item[1];&#13;
            item = item[0];&#13;
        }&#13;
        presenter.displayFeedback(item, type);&#13;
        presenter.readFeedback(item, type);&#13;
    }&#13;
&#13;
    presenter.readFeedback = function(item, type) {&#13;
        if (Array.isArray(item) &amp;&amp; item.length == 2 &amp;&amp; type === undefined) {&#13;
            type = item[1];&#13;
            item = item[0];&#13;
        }&#13;
&#13;
        if (["correct","incorrect","partial","empty"].indexOf(type) == -1) return;&#13;
&#13;
        var feedback = "";&#13;
        if (item != null &amp;&amp; presenter.configuration.itemFeedbacks[item] !== undefined) {&#13;
            feedback = presenter.configuration.itemFeedbacks[item][type];&#13;
        } else {&#13;
            var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
            feedback = feedbackObject[type];&#13;
        }&#13;
        let $wrapper = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $wrapper.html(feedback);&#13;
        let speechTexts = window.TTSUtils.getTextVoiceArrayFromElement($wrapper, presenter.configuration.langTag);&#13;
        speak(speechTexts);&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    class AbstractActivity {&#13;
&#13;
        constructor (presenter) {&#13;
            this.presenter = presenter;&#13;
        }&#13;
&#13;
        onCorrectAnswer(itemID) {&#13;
            throw "onCorrectAnswer must be implemented";&#13;
        }&#13;
&#13;
        onIncorrectAnswer(itemID) {&#13;
            throw "onIncorrectAnswer must be implemented";&#13;
        }&#13;
&#13;
        onEmptyAnswer(itemID) {&#13;
            throw "onEmptyAnswer must be implemented";&#13;
        }&#13;
&#13;
        onPartialAnswer(itemID) {&#13;
            throw "onPartialAnswer must be implemented";&#13;
        }&#13;
&#13;
        onShowErrorsMode() {&#13;
            throw "onShowErrorsMode must be implemented";&#13;
        }&#13;
&#13;
        clearFeedback() {&#13;
            throw "clearFeedback must be implemented";&#13;
        }&#13;
&#13;
        createTooltips() {&#13;
            throw "createTooltips must be implemented";&#13;
        }&#13;
&#13;
        getState() {&#13;
            throw "getState must be implemented";&#13;
        }&#13;
&#13;
        setState(state) {&#13;
            throw "setState must be implemented";&#13;
        }&#13;
&#13;
        popupClosedCallback() {&#13;
            throw "popupClosedCallback must be implemented";&#13;
        }&#13;
&#13;
        onDestroy() {&#13;
            throw "onDestroy must be implemented";&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    class DefaultActivity extends AbstractActivity {&#13;
&#13;
        isActivated = false;&#13;
        lastFeedback = "";&#13;
        lastClass = "";&#13;
&#13;
        onCorrectAnswer(itemID) {&#13;
            var _class = FEEDBACK_CLASSES.CORRECT;&#13;
            var feedback = "";&#13;
            if (itemID != null &amp;&amp; presenter.configuration.itemFeedbacks[itemID] !== undefined) {&#13;
                feedback = presenter.configuration.itemFeedbacks[itemID].correct;&#13;
            } else {&#13;
                var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
                feedback = feedbackObject.correct;&#13;
            }&#13;
            this.displayFeedback(feedback, _class);&#13;
        }&#13;
&#13;
        onIncorrectAnswer(itemID) {&#13;
            var _class = FEEDBACK_CLASSES.INCORRECT;&#13;
            var feedback = "";&#13;
            if (itemID != null &amp;&amp; presenter.configuration.itemFeedbacks[itemID] !== undefined) {&#13;
                feedback = presenter.configuration.itemFeedbacks[itemID].incorrect;&#13;
            } else {&#13;
                var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
                feedback = feedbackObject.incorrect;&#13;
            }&#13;
            this.displayFeedback(feedback, _class);&#13;
        }&#13;
&#13;
        onEmptyAnswer(itemID) {&#13;
            var _class = FEEDBACK_CLASSES.EMPTY;&#13;
            var feedback = "";&#13;
            if (itemID != null &amp;&amp; presenter.configuration.itemFeedbacks[itemID] !== undefined) {&#13;
                feedback = presenter.configuration.itemFeedbacks[itemID].empty;&#13;
            } else {&#13;
                var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
                feedback = feedbackObject.empty;&#13;
            }&#13;
            this.displayFeedback(feedback, _class);&#13;
        }&#13;
&#13;
        onPartialAnswer(itemID) {&#13;
            var _class = FEEDBACK_CLASSES.PARTIAL;&#13;
            var feedback = "";&#13;
            if (itemID != null &amp;&amp; presenter.configuration.itemFeedbacks[itemID] !== undefined) {&#13;
                feedback = presenter.configuration.itemFeedbacks[itemID].partial;&#13;
            } else {&#13;
                var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
                feedback = feedbackObject.partial;&#13;
            }&#13;
            this.displayFeedback(feedback, _class);&#13;
        }&#13;
&#13;
        onShowErrorsMode() {&#13;
            if (!this.presenter.isLoaded || this.presenter.playerController == null) return;&#13;
            var module = this.presenter.playerController.getModule(this.presenter.configuration.activityModuleID);&#13;
            if (module == null) return;&#13;
            if (!module.hasOwnProperty("getScore")&#13;
                || !module.hasOwnProperty("getMaxScore")&#13;
                || !module.hasOwnProperty("getErrorCount")) return;&#13;
            var score = module.getScore();&#13;
            var maxScore = module.getMaxScore();&#13;
            var errorCount = module.getErrorCount();&#13;
&#13;
            var feedbackObject = this.presenter.configuration.defaultFeedback;&#13;
            var feedback = "";&#13;
            var _class = "";&#13;
            if (this.presenter.isScoreIncorrect(score, maxScore, errorCount)) {&#13;
                feedback = feedbackObject.incorrect;&#13;
                _class = FEEDBACK_CLASSES.INCORRECT;&#13;
            } else if (this.presenter.isScoreCorrect(score, maxScore, errorCount)) {&#13;
                feedback = feedbackObject.correct;&#13;
                _class = FEEDBACK_CLASSES.CORRECT;&#13;
            } else if (this.presenter.isScoreEmpty(score, maxScore, errorCount)) {&#13;
                feedback = feedbackObject.empty;&#13;
                _class = FEEDBACK_CLASSES.EMPTY;&#13;
            } else {&#13;
                feedback = feedbackObject.partial;&#13;
                _class = FEEDBACK_CLASSES.PARTIAL;&#13;
            }&#13;
            this.displayFeedback(feedback, _class);&#13;
        }&#13;
&#13;
        displayFeedback(feedback, _class) {&#13;
            this.isActivated = true;&#13;
            this.lastFeedback = feedback;&#13;
            this.lastClass = _class;&#13;
            if (this.presenter.configuration.displayMode == DISPLAY_MODES.BLOCK) {&#13;
                this.presenter.showBlockFeedback(feedback, _class);&#13;
            } else if (this.presenter.configuration.displayMode == DISPLAY_MODES.POPUP) {&#13;
                if (this.presenter.configuration.displayFeedbackButtons) {&#13;
                    if (this.$tooltip == null) {this.createTooltips();};&#13;
                    if (this.$tooltip != null) this.showTooltipFeedback(feedback, _class);&#13;
                } else {&#13;
                    this.presenter.showPopupFeedback(feedback, _class);&#13;
                }&#13;
            } else {&#13;
                if (this.$tooltip == null) {this.createTooltips();};&#13;
                if (this.$tooltip != null) this.showTooltipFeedback(feedback, _class);&#13;
            }&#13;
        }&#13;
&#13;
        clearFeedback() {&#13;
            this.isActivated = false;&#13;
            const displayMode = this.presenter.configuration.displayMode;&#13;
&#13;
            if (displayMode === DISPLAY_MODES.BLOCK) {&#13;
                this.presenter.clearBlockFeedback();&#13;
            } else if (displayMode === DISPLAY_MODES.POPUP) {&#13;
                this.presenter.$popup.removeClass(REMAIN_OPEN_CLASS);&#13;
                this.presenter.$popup.dialog('close');&#13;
                if (this.presenter.configuration.displayFeedbackButtons) {&#13;
                    this.clearTooltips();&#13;
                }&#13;
            } else {&#13;
                if (this.$tooltip) {&#13;
                    this.clearTooltips();&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        clearTooltips() {&#13;
            if (this.$tooltip) {&#13;
                this.$tooltip.removeClass(REMAIN_OPEN_CLASS);&#13;
                this.$tooltip.dialog('close');&#13;
            }&#13;
        }&#13;
&#13;
        getActivityModuleView() {&#13;
            var $icpanel = this.presenter.$view.closest('.ic_page_panel');&#13;
            if ($icpanel.length &gt; 0) {&#13;
                return $icpanel.find('#'+this.presenter.configuration.activityModuleID)[0];&#13;
            } else {&#13;
                return $('#'+this.presenter.configuration.activityModuleID)[0];&#13;
            }&#13;
        }&#13;
&#13;
        createTooltips() {&#13;
            var activityModuleView = this.getActivityModuleView();&#13;
            if (activityModuleView == null) return;&#13;
            var $tooltipElement = $('&lt;div&gt;&lt;/div&gt;');&#13;
            this.presenter.$content.append($tooltipElement);&#13;
            this.$tooltip = $tooltipElement.dialog({&#13;
                modal: false,&#13;
                autoOpen: false,&#13;
                draggable: false,&#13;
                minHeight: 'auto',&#13;
                resizable: false,&#13;
                position: {&#13;
                    my: "left center",&#13;
                    at: "right center",&#13;
                    of: activityModuleView&#13;
                }&#13;
            });&#13;
            var self = this;&#13;
            this.$tooltip.on('dialogbeforeclose', function(event, ui){&#13;
                if (self.$tooltip.hasClass('remain-open')) {&#13;
                    self.presenter.wrapElementInButton(self.$tooltip, true);&#13;
                    return false;&#13;
                }&#13;
                return true;&#13;
                });&#13;
            if (!this.presenter.configuration.displayFeedbackButtons) {&#13;
                this.$tooltip.on('dialogclose', function(event, ui){&#13;
                    this.isActivated = false;&#13;
                });&#13;
            }&#13;
            this.$tooltip.addClass('automatic_feedback_tooltip_body');&#13;
            this.$tooltip.parent().find('.ui-dialog-titlebar').addClass('automatic_feedback_tooltip_title');&#13;
        }&#13;
&#13;
        showTooltipFeedback = function(feedback, _class) {&#13;
            this.presenter.clearFeedbackClasses(this.$tooltip.parent());&#13;
            this.$tooltip.parent().addClass(_class);&#13;
            this.$tooltip.parent().addClass(AUTOMATIC_FEEDBACK_DIALOG_CLASS);&#13;
            this.$tooltip.html(feedback);&#13;
            this.$tooltip.dialog('open');&#13;
            this.presenter.scaleDialog(this.$tooltip);&#13;
            if (this.presenter.configuration.displayFeedbackButtons) {&#13;
                this.$tooltip.addClass(REMAIN_OPEN_CLASS);&#13;
                this.presenter.wrapElementInButton(this.$tooltip, true);&#13;
            }&#13;
        }&#13;
&#13;
        getState = function () {&#13;
            const isResetResponse = this.presenter.configuration.resetResponseOnPageChange;&#13;
            if (isResetResponse) this.setDefaultState();&#13;
&#13;
            var state = {&#13;
                isActivated: this.isActivated,&#13;
                lastFeedback: this.lastFeedback,&#13;
                lastClass: this.lastClass,&#13;
                isWrapped: this.isWrapped()&#13;
            };&#13;
&#13;
            return JSON.stringify(state);&#13;
        }&#13;
&#13;
        setDefaultState = function () {&#13;
            this.isActivated = false;&#13;
            this.lastFeedback = "";&#13;
            this.lastClass = "";&#13;
        }&#13;
&#13;
        isWrapped = function () {&#13;
            if (!this.presenter.configuration.displayFeedbackButtons) return false;&#13;
            if (this.presenter.configuration.displayMode === DISPLAY_MODES.BLOCK) {&#13;
                return this.presenter.isBlockFeedbackWrapped();&#13;
            } else if (this.presenter.configuration.displayMode === DISPLAY_MODES.POPUP) {&#13;
                return !this.presenter.$popup.dialog('isOpen');&#13;
            } else {&#13;
                if (this.$tooltip) {&#13;
                    return this.$tooltip.parent().find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS).length &gt; 0;&#13;
                } else {&#13;
                    return false;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
&#13;
        setState = function (state) {&#13;
            setTimeout(() =&gt; {&#13;
                // without timeout there are issues with positioning of feedback buttons&#13;
                const parsed = JSON.parse(state);&#13;
                const displayMode = this.presenter.configuration.displayMode;&#13;
&#13;
                this.isActivated = parsed.isActivated;&#13;
                this.lastFeedback = parsed.lastFeedback;&#13;
                this.lastClass = parsed.lastClass;&#13;
&#13;
                if (this.isActivated) {&#13;
                    this.displayFeedback(parsed.lastFeedback, parsed.lastClass);&#13;
                } else {&#13;
                    this.clearFeedback();&#13;
                }&#13;
&#13;
                if (this.presenter.configuration.displayFeedbackButtons &amp;&amp; !parsed.isWrapped) {&#13;
                    if (displayMode === DISPLAY_MODES.BLOCK) {&#13;
                        this.presenter.unwrapBlockFeedback();&#13;
                    } else if (displayMode === DISPLAY_MODES.POPUP) {&#13;
                        return !this.presenter.$popup.dialog('open');&#13;
                    } else if (this.$tooltip) {&#13;
                        this.$tooltip.parent()&#13;
                            .find('.' + AUTOMATIC_FEEDBACK_BUTTON_CLASS)&#13;
                            .click();&#13;
                    }&#13;
                }&#13;
            }, 0);&#13;
        }&#13;
&#13;
        popupClosedCallback = function () {&#13;
             this.isActivated = false;&#13;
        }&#13;
&#13;
        onDestroy() {&#13;
            this.clearTooltips();&#13;
            if (this.$tooltip) {&#13;
                this.$tooltip.remove();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>