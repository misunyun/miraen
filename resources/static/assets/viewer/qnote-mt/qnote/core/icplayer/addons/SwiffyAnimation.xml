<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SwiffyAnimation" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Animations" nameLabel="SwiffyAnimation_property_animations" type="list">
			<property displayName="Swiffy File" name="swiffyobject" nameLabel="SwiffyAnimation_property_swiffy_object" type="file"/>
			<property displayName="Auto Play" name="autoPlay" nameLabel="SwiffyAnimation_property_auto_play" type="boolean"/>
			<property displayName="Disable Transparent Background" name="disableTransparentBackground" nameLabel="SwiffyAnimation_property_disable_transparent_background" type="boolean"/>
            <property displayName="Do Not Preload" name="doNotPreload" nameLabel="SwiffyAnimation_property_do_not_preload" type="boolean"/>
		</property>
		<property displayName="Initial Animation" name="initialAnimation" nameLabel="SwiffyAnimation_property_initial_animation" type="string"/>
	</model>
<css>.swiffycontainer {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
&#13;
.swiffyAnimation {&#13;
	position: absolute;&#13;
}&#13;
&#13;
.swiffy-loading-image {&#13;
	position: absolute;&#13;
	width: 30px;&#13;
	height: 30px;&#13;
	border: 0;&#13;
	outline: 0;&#13;
}&#13;
</css><view>&lt;div class="swiffyContainer"&gt;&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="swiffy-loading-image" /&gt;&#13;
</view><preview>&lt;div class="swiffyContainer"&gt;&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="swiffy-loading-image" style="display: none;" /&gt;&#13;
</preview><presenter>function AddonSwiffyAnimation_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.Animations = model.Animations;&#13;
        presenter.swiffyContainer = $(view).find('.swiffyContainer')[0];&#13;
        presenter.stage = [];&#13;
        presenter.swiffyObject = [];&#13;
        presenter.swiffyItem = [];&#13;
        presenter.animsLoaded = [];&#13;
        presenter.animsRunning = [];&#13;
        presenter.originalDisplay = presenter.$view.css('display') ? presenter.$view.css('display') : 'block';&#13;
&#13;
        presenter.isVisible = model["Is Visible"] == 'True';&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.animationLoadedDeferred = [];&#13;
        presenter.animationLoaded = [];&#13;
&#13;
        //show loading icon&#13;
        var loadingSrc = DOMOperationsUtils.getResourceFullPath(presenter.playerController, "media/loading.gif");&#13;
        presenter.loadingIconImg = $(view).find('.swiffy-loading-image')[0];&#13;
        $(presenter.loadingIconImg).css({&#13;
            left: (presenter.model.Width/2)-15 + 'px',&#13;
            top: (presenter.model.Height/2)-15 + 'px'&#13;
        });&#13;
        $(presenter.loadingIconImg).attr('src',loadingSrc);&#13;
&#13;
        //determine presenter.currentAnimationItem&#13;
        if(model.initialAnimation === ""){&#13;
            model.initialAnimation = 1;&#13;
        } else {&#13;
            //incorrect model.initialAnimation number -&gt; error&#13;
            if( model.initialAnimation &lt; 1 || model.initialAnimation &gt; presenter.Animations.length || model.initialAnimation%1 !== 0 ){&#13;
                presenter.errorHandler("Error: Incorrect Initial Animation number.");&#13;
                $(presenter.loadingIconImg).css('display','none');&#13;
                return;&#13;
            }&#13;
            model.initialAnimation = parseInt(model.initialAnimation, 10);&#13;
        }&#13;
        presenter.currentAnimationItem = model.initialAnimation;&#13;
&#13;
        //loop through Animations&#13;
        $(presenter.Animations).each(function(i, animation){&#13;
            //initiate deferred for every animation&#13;
            presenter.animationLoadedDeferred[i+1] = new $.Deferred();&#13;
            presenter.animationLoaded[i+1] = presenter.animationLoadedDeferred[i+1].promise();&#13;
&#13;
            //empty Swiffy Object file -&gt; error&#13;
            if(animation.swiffyobject === ''){&#13;
                presenter.errorHandler("Error: Swiffy Object in Item "+(i+1)+" is missing.");&#13;
                $(presenter.loadingIconImg).css('display','none');&#13;
                return;&#13;
            }&#13;
&#13;
            var visibility = "hidden";&#13;
            if(presenter.currentAnimationItem - 1 == i){&#13;
                visibility = "visible";&#13;
            }&#13;
&#13;
            $(presenter.swiffyContainer).append('&lt;div class="swiffyItem_'+i+' swiffyItem" style="position: absolute; width: 100%; height: 100%;"&gt;&lt;/div&gt;');&#13;
&#13;
            presenter.swiffyItem[i] = $(view).find('.swiffyItem_'+i)[0];&#13;
            $(presenter.swiffyItem[i]).css('visibility', visibility);&#13;
&#13;
            if(animation.autoPlay === 'True'){&#13;
                presenter.animsRunning[i] = true;&#13;
            }else{&#13;
                presenter.animsRunning[i] = false;&#13;
            }&#13;
&#13;
            if(animation.doNotPreload !== 'True'){&#13;
                presenter.animsLoaded[i] = true;&#13;
&#13;
                $.getScript(animation.swiffyobject, function(){&#13;
                    presenter.swiffyObject[i] = swiffyobject;&#13;
                    presenter.stage[i] = new swiffy.Stage(presenter.swiffyItem[i],presenter.swiffyObject[i]);&#13;
&#13;
                    if(animation.disableTransparentBackground === 'False'){&#13;
                        presenter.stage[i].setBackground(null);&#13;
                    }&#13;
&#13;
                    if(presenter.animsRunning[i] === true){&#13;
                        presenter.stage[i].start();&#13;
                    }&#13;
&#13;
                    presenter.animationLoadedDeferred[i+1].resolve();&#13;
&#13;
                });//end getScript&#13;
            }&#13;
&#13;
            //Last item, checking if all are loaded&#13;
            if(presenter.Animations.length == i+1){&#13;
                presenter.checkIfAllAnimationsAreLoaded();&#13;
            }&#13;
&#13;
        });//end loop&#13;
&#13;
        //stop propagation&#13;
        $(view).find('.swiffyContainer').click(function(e) {&#13;
            e.stopImmediatePropagation();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.checkIfAllAnimationsAreLoaded = function(){&#13;
        presenter.loaded = false;&#13;
&#13;
        var count = 0;&#13;
        var last = 1;&#13;
        //loop through Animations&#13;
        $(presenter.Animations).each(function(i, animation){&#13;
            if(presenter.animsLoaded[i]){&#13;
                count++;&#13;
                last = i+1;&#13;
            }&#13;
        });&#13;
&#13;
        if(count &gt; 0){&#13;
            presenter.animationLoaded[last].then(function() {&#13;
                if(presenter.animsLoaded.length == last){&#13;
                    presenter.loaded = true;&#13;
                    //hide loading icon&#13;
                    $(presenter.loadingIconImg).css('display','none');&#13;
                }&#13;
            });&#13;
        }else{&#13;
            $(presenter.loadingIconImg).css('display','none');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        //presenter.run(view,model);&#13;
        presenter.$view = $(view);&#13;
&#13;
        //ERROR CHECKING&#13;
        //incorrect model.initialAnimation number -&gt; error&#13;
        if(model.initialAnimation === ""){&#13;
            model.initialAnimation = 1;&#13;
        } else {&#13;
            if( model.initialAnimation &lt; 1 || model.initialAnimation &gt; model.Animations.length || model.initialAnimation%1 !== 0 ){&#13;
                presenter.errorHandler("Error: Incorrect Initial Animation number.");&#13;
                return;&#13;
            }&#13;
            model.initialAnimation = parseInt(model.initialAnimation, 10);&#13;
        }&#13;
        //empty Swiffy Object file -&gt; error&#13;
        $(model.Animations).each(function(i, animation){&#13;
            if(animation.swiffyobject === ''){&#13;
                presenter.errorHandler("Error: Swiffy Object in Item "+(i+1)+" is missing.");&#13;
                return;&#13;
            }&#13;
        });&#13;
        var message = "Preview unavailable in editor. Please use Preview button.";&#13;
        presenter.$view.prepend('&lt;div style="color: #444444; font-size: 12px; font-family: Arial;"&gt;'+message+'&lt;/div&gt;');&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'loadAnimation': presenter.loadAnimation,&#13;
            'start': presenter.start,&#13;
            'replay': presenter.replay,&#13;
            'setVars': presenter.setVars,&#13;
            'switchAnimation': presenter.switchAnimation&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params[0], presenter);&#13;
    };&#13;
&#13;
    presenter.loadAnimation = function(item){&#13;
        var i = typeof item !== 'undefined' ? i = item - 1 : i = presenter.currentAnimationItem - 1;&#13;
        var animation = presenter.Animations[i];&#13;
&#13;
        if(typeof presenter.$view.find('.swiffyItem_'+i+' canvas')[0] === 'undefined'){&#13;
&#13;
            $(presenter.loadingIconImg).css('display','block');&#13;
            presenter.animsLoaded[i] = true;&#13;
&#13;
            $.getScript(animation.swiffyobject, function(){&#13;
                presenter.swiffyObject[i] = swiffyobject;&#13;
                presenter.stage[i] = new swiffy.Stage(presenter.swiffyItem[i],presenter.swiffyObject[i]);&#13;
&#13;
                if(animation.disableTransparentBackground === 'False'){&#13;
                    presenter.stage[i].setBackground(null);&#13;
                }&#13;
&#13;
                if(presenter.animsRunning[i] === true){&#13;
                    presenter.stage[i].start();&#13;
                }&#13;
&#13;
                presenter.animationLoadedDeferred[i+1].resolve();&#13;
&#13;
                if(presenter.currentAnimationItem - 1 == i){&#13;
                    $(presenter.loadingIconImg).css('display','none');&#13;
                }&#13;
&#13;
                //stop propagation&#13;
                presenter.$view.find('.swiffyContainer').click(function(e){&#13;
                    e.stopImmediatePropagation();&#13;
                    e.stopPropagation();&#13;
                });&#13;
            });//end getScript&#13;
        }&#13;
    };&#13;
&#13;
    presenter.start = function(item){&#13;
        var i = typeof item !== 'undefined' ? i = item - 1 : i = presenter.currentAnimationItem - 1;&#13;
        if(presenter.animsRunning[i] === false &amp;&amp; typeof presenter.stage[i] !== 'undefined'){&#13;
            presenter.stage[i].start();&#13;
        }&#13;
        if(presenter.animsLoaded[i] == true){&#13;
            presenter.animsRunning[i] = true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVars = function(commands){&#13;
        presenter.animationLoaded[presenter.currentAnimationItem].then(function() {&#13;
            commands = commands.split(",");&#13;
            var i = presenter.currentAnimationItem-1;&#13;
            presenter.stage[i].setFlashVars(commands[0]+'='+commands[1]);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.errorHandler = function(message){&#13;
        presenter.$view.prepend('&lt;div style="color: red; font-size: 12px; font-family: Arial;"&gt;'+message+'&lt;/div&gt;');&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("display", isVisible ? presenter.originalDisplay : "none");&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
&#13;
    };&#13;
&#13;
    presenter.replay = function(item){&#13;
        var itemToDestroy = typeof item !== 'undefined' ? itemToDestroy = item - 1 : itemToDestroy = presenter.currentAnimationItem - 1;&#13;
        if(presenter.animsRunning[itemToDestroy] === true &amp;&amp; typeof presenter.stage[itemToDestroy] !== 'undefined'){&#13;
            var currentSwiffyObject = presenter.swiffyObject[itemToDestroy];&#13;
            presenter.swiffyItem = presenter.$view.find('.swiffyItem_'+itemToDestroy)[0];&#13;
            presenter.stage[itemToDestroy].destroy();&#13;
            presenter.stage[itemToDestroy] = new swiffy.Stage(presenter.swiffyItem,currentSwiffyObject, { });&#13;
            if(presenter.Animations[itemToDestroy].disableTransparentBackground === 'False'){&#13;
                presenter.stage[itemToDestroy].setBackground(null);&#13;
            }&#13;
            presenter.stage[itemToDestroy].start();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.switchAnimation = function(item){&#13;
        presenter.currentAnimationItem = item;&#13;
        $(presenter.Animations).each(function(i,v){&#13;
            if(item == (i+1)){&#13;
                $(presenter.$view.find('.swiffyItem_'+i)[0]).css("visibility", "visible");&#13;
            }else{&#13;
                $(presenter.$view.find('.swiffyItem_'+i)[0]).css("visibility", "hidden");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        if(presenter.loaded === true){&#13;
            presenter.loaded = false;&#13;
            $(presenter.swiffyContainer).html("");&#13;
            $(presenter.Animations).each(function(i, animation){&#13;
                if(presenter.animsRunning[i] === true &amp;&amp; typeof presenter.stage[i] !== 'undefined'){&#13;
                    presenter.stage[i].destroy();&#13;
                }&#13;
            });&#13;
            $(presenter.loadingIconImg).css('display','block');&#13;
            presenter.run(presenter.view,presenter.model);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            'currentAnimationItem' : presenter.currentAnimationItem,&#13;
            'animsRunning' : presenter.animsRunning,&#13;
            'animsLoaded' : presenter.animsLoaded,&#13;
            'isVisible' : presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.currentAnimationItem = parsedState.currentAnimationItem;&#13;
        presenter.switchAnimation(presenter.currentAnimationItem);&#13;
&#13;
        presenter.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
&#13;
        presenter.animsRunning = parsedState.animsRunning;&#13;
        presenter.animsLoaded = parsedState.animsLoaded;&#13;
&#13;
        $(presenter.animsLoaded).each(function(i, loaded){&#13;
&#13;
            if(loaded &amp;&amp; presenter.Animations[i].doNotPreload === 'True'){&#13;
                var item = parseInt(i+1,10);&#13;
                presenter.loadAnimation(item);&#13;
            }&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.destroy = function(event) {&#13;
        if (event.target === presenter.view) {&#13;
            presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
            if (presenter.loaded === true) {&#13;
                presenter.loaded = false;&#13;
                $(presenter.swiffyContainer).html("");&#13;
                $(presenter.Animations).each(function (i, animation) {&#13;
                    if (presenter.animsRunning[i] === true &amp;&amp; typeof presenter.stage[i] !== 'undefined') {&#13;
                        presenter.stage[i].destroy();&#13;
                    }&#13;
                });&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>