<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="video" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Files" nameLabel="video_property_files" type="list">
			<property displayName="Ogv video" name="Ogg video" nameLabel="video_property_ogg_video" type="video"/>
			<property name="MP4 video" nameLabel="video_property_mp4_video" type="video"/>
			<property name="WebM video" nameLabel="video_property_webm_video" type="video"/>
			<property isLocalized="true" name="Subtitles" nameLabel="video_property_subtitles" type="text"/>
			<property name="Poster" nameLabel="video_property_poster" type="image"/>
			<property name="ID" nameLabel="video_property_id" type="string"/>
            <property name="Loop video" nameLabel="video_property_loop_video" type="boolean"/>
			<property name="AlternativeText" nameLabel="video_property_alternative_text" type="string"/>
			<property name="time_labels" nameLabel="video_property_time_labels" type="text"/>
			<property isLocalized="true" name="Audio Description" nameLabel="video_property_audiodescription" type="text"/>
		</property>
		<property name="Show video" nameLabel="video_property_show_video" type="string"/>
		<property isLocalized="true" name="Narration" nameLabel="video_property_narration" type="narration"/>
        <property name="Hide default controls" nameLabel="video_property_hide_default_controls" type="boolean"/>
        <property name="Hide subtitles" nameLabel="video_property_hide_subtitles" type="boolean"/>
		<property name="Show play button" nameLabel="video_property_show_play_button" type="boolean"/>
		<property name="speechTexts" nameLabel="feedback_property_speech_texts" type="staticlist">
            <property name="AudioDescriptionEnabled" nameLabel="video_property_description_enabled" type="staticrow">
                <property name="AudioDescriptionEnabled" nameLabel="video_property_description_enabled" type="string"/>
            </property>
            <property name="AudioDescriptionDisabled" nameLabel="video_property_description_disabled" type="staticrow">
                <property name="AudioDescriptionDisabled" nameLabel="video_property_description_disabled" type="string"/>
            </property>
        </property>
        <property name="offlineMessage" nameLabel="video_property_offline_message" type="text"/>
		<property name="enableVideoSpeedController" nameLabel="enable_video_speed_controller" type="boolean"/>
	</model>
<css>.video-container {&#13;
    background-color: #000;&#13;
    position: relative;&#13;
}&#13;
&#13;
.captions {&#13;
    position: absolute;&#13;
    color: #fff;&#13;
}&#13;
&#13;
.poster-wrapper {&#13;
    display: block;&#13;
    position: absolute;&#13;
    top:0;&#13;
    left:0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-color: white;&#13;
}&#13;
&#13;
.poster-wrapper img {&#13;
    position : absolute;&#13;
    top:0;&#13;
    left:0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.video-poster-play {&#13;
    position : absolute;&#13;
    background: url('resources/video-poster-play.svg') no-repeat center;&#13;
    text-align: center;&#13;
    width: 80px;&#13;
    height: 80px;&#13;
    top: calc(50% - 40px);&#13;
    left: calc(50% - 40px);&#13;
&#13;
}&#13;
&#13;
.video-container-mask {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    color: transparent;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper {&#13;
    bottom : 0px;&#13;
    left : 0px;&#13;
    background-color: #EBEFF0;&#13;
    height: 40px;&#13;
    width: 100%;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-controlsWrapper {&#13;
    margin-top: 3px;&#13;
    position: absolute;&#13;
    height: 37px;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.video-container-video {&#13;
    display: block;&#13;
    pointer-events: none;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-play {&#13;
    height: 100%;&#13;
    width: 38px;&#13;
    background: url("resources/video-play-btn.png") no-repeat center;&#13;
    box-sizing: border-box;&#13;
    cursor: pointer;&#13;
    float: left;&#13;
&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-pause {&#13;
    height: 100%;&#13;
    width: 38px;&#13;
    background: url("resources/video-pause-btn.png") no-repeat center;&#13;
    box-sizing: border-box;&#13;
    cursor: pointer;&#13;
    float: left;&#13;
&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-stop {&#13;
    height: 100%;&#13;
    width: 40px;&#13;
    background: url("resources/video-stop-btn.png") no-repeat center center;&#13;
    cursor: pointer;&#13;
    float: left;&#13;
&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-progressBarWrapper {&#13;
    position:absolute;&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    float: left;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-progressBarWrapper:hover {&#13;
    height: 6px;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-progressBarWrapper-redProgressBar {&#13;
    background-color: red;&#13;
    height: 100%;&#13;
    position:absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-progressBarWrapper-grayProgressBar {&#13;
    background-color: dimgrey;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position:absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-volume {&#13;
    height: 100%;&#13;
    width: 40px;&#13;
    background: url("resources/video-volume-btn.png") no-repeat center center;&#13;
    cursor: pointer;&#13;
    float: left;&#13;
&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-volumeBarWrapper {&#13;
    height: 100%;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-volumeBarWrapper-volumeBackground {&#13;
    width: 100px;&#13;
    height: 14px;&#13;
    border-bottom: solid 9px white;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-volumeBarWrapper-volumeBackgroundSelected {&#13;
    width: 100px;&#13;
    height: 14px;&#13;
    border-bottom: solid 9px lightgrey;&#13;
    float: left;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-fullscreen {&#13;
    float: right;&#13;
    width: 40px;&#13;
    height: 100%;&#13;
    background: url("resources/video-fullscreen-btn.png") no-repeat center center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-closeFullscreen {&#13;
    float: right;&#13;
    width: 40px;&#13;
    height: 100%;&#13;
    background: url("resources/video-close-fullscreen-btn.png") no-repeat center center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.video-container .CustomControlsBar-wrapper-controls-timer {&#13;
    height: 40px;&#13;
    color: gray;&#13;
    font-size: 14px;&#13;
    padding-right: 10px;&#13;
    display: flex;&#13;
    align-items: center;&#13;
    float: right;&#13;
&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-burgersContainer-time_labels {&#13;
    height: 100%;&#13;
    width: 40px;&#13;
    background: url("resources/video-drop-down.png") no-repeat center;&#13;
    cursor: pointer;&#13;
    float: left;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-burgersContainer {&#13;
    float: right;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-burgersContainer-container-time_labels {&#13;
    background-color: #f9f9f9;&#13;
    min-width: 100px;&#13;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);&#13;
    position: absolute;&#13;
    display: none;&#13;
    z-index: 1;&#13;
    white-space: nowrap;&#13;
    word-break: keep-all;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-burgersContainer-time_labels-element {&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-burgersContainer-time_labels-element:hover {&#13;
    background-color: #f1f1f1;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-videoSpeedController .video-playback-rate{&#13;
    float: left;&#13;
    margin-top: 10px;&#13;
    height: 30px;&#13;
    width: 60px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    background-color: inherit;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-videoSpeedController .video-playback-rate select {&#13;
    width: 100%;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
    border: 0;&#13;
    background-color: inherit;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.CustomControlsBar-wrapper-controls-videoSpeedController .video-playback-rate select option{&#13;
    cursor: pointer;&#13;
}&#13;
</css><view>&lt;div class="video-container"&gt;&#13;
    &lt;video class="video-container-video"&gt;&#13;
        Video playback is not supported on your browser.&#13;
    &lt;/video&gt;&#13;
    &lt;div class="captions-container"&gt;&lt;/div&gt;&#13;
    &lt;div class="video-container-mask"&gt;&lt;/div&gt;&#13;
    &lt;div class="poster-wrapper"&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="video-poster-play"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="video-container"&gt;&#13;
    &lt;video preload="auto"&gt;&#13;
        Video playback is not supported on your browser.&#13;
    &lt;/video&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>/**&#13;
 * @module VideoAddon&#13;
 * @class VideoAddon&#13;
 * @constructor&#13;
 */&#13;
function Addonvideo_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
    var currentTime;&#13;
&#13;
    var escapedSeparator = '&amp;&amp;separator&amp;&amp;';&#13;
&#13;
    presenter.currentMovie = 0;&#13;
    presenter.videoContainer = null;&#13;
    presenter.$view = null;&#13;
    presenter.files = [];&#13;
    presenter.video = null;&#13;
    presenter.controlBar = null;&#13;
    presenter.isVideoSpeedControllerAdded = false;&#13;
    presenter.isCurrentlyVisible = true;&#13;
    presenter.isVideoLoaded = false;&#13;
    presenter.metadadaLoaded = false;&#13;
    presenter.isPreview = false;&#13;
    presenter.captions = [];&#13;
    presenter.captionDivs = [];&#13;
    presenter.descriptions = [];&#13;
    presenter.descriptionsDivs = [];&#13;
    presenter.speechTexts = [];&#13;
    presenter.metadataQueue = [];&#13;
    presenter.areSubtitlesHidden = false;&#13;
    presenter.calledFullScreen = false;&#13;
    presenter.playTriggered = false;&#13;
    presenter.playerController = null;&#13;
    presenter.posterPlayButton = null;&#13;
    presenter.videoView = null;&#13;
    presenter.isAudioDescriptionEnabled = null;&#13;
    presenter.prevTime = -0.001;&#13;
    presenter.usedStop = false;&#13;
    presenter.stylesBeforeFullscreen = {&#13;
        changedStyles: false,&#13;
        style: null,&#13;
        moduleWidth: 0,&#13;
        moduleHeight: 0,&#13;
        actualTime: -1,&#13;
        className: ''&#13;
    };&#13;
&#13;
    presenter.originalVideoSize = {&#13;
        width: 0,&#13;
        height: 0&#13;
    };&#13;
&#13;
    presenter.captionsOffset = {&#13;
        left: 0,&#13;
        top: 0&#13;
    };&#13;
&#13;
    presenter.lastWidthAndHeightValues = {&#13;
        width: 0,&#13;
        height: 0&#13;
    };&#13;
&#13;
    presenter.addedVideoURLS = {};&#13;
&#13;
    presenter.configuration = {&#13;
        isValid: false,&#13;
        addonSize: {&#13;
            width: 0,&#13;
            height: 0&#13;
        },&#13;
        addonID: null,&#13;
        isVisibleByDefault: null,&#13;
        shouldHideSubtitles: null,&#13;
        defaultControls: null,&#13;
        files: [],&#13;
        height: 0,&#13;
        showPlayButton: false,&#13;
        offlineMessage: ""&#13;
    };&#13;
&#13;
    presenter.lastSentCurrentTime = 0;&#13;
&#13;
    function deferredQueueDecoratorChecker() {&#13;
        return presenter.isVideoLoaded;&#13;
    }&#13;
&#13;
    presenter.metadataLoadedDecorator = function (fn) {&#13;
        return function () {&#13;
            if (presenter.metadadaLoaded) {&#13;
                return fn.apply(this, arguments);&#13;
            } else {&#13;
                presenter.pushToMetadataQueue(fn, arguments);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pushToMetadataQueue = function (fn, providedArguments) {&#13;
        presenter.metadataQueue.push({&#13;
            function: fn,&#13;
            arguments: providedArguments,&#13;
            self: this&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeShowPlayButton = function (model) {&#13;
        if (!model['Show play button']) {&#13;
            model['Show play button'] = 'False';&#13;
        }&#13;
&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.upgradeTimeLabels = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy&#13;
&#13;
        for (var i = 0; i &lt; model.Files.length; i++) {&#13;
            if (!upgradedModel.Files[i].time_labels) {&#13;
                upgradedModel.Files[i].time_labels = "";&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradePoster(model);&#13;
        upgradedModel = presenter.upgradeTimeLabels(upgradedModel);&#13;
        upgradedModel = presenter.upgradeSpeechTexts(upgradedModel);&#13;
        upgradedModel = presenter.upgradeOfflineMessage(upgradedModel);&#13;
        upgradedModel = presenter.upgradeVideoSpeedController(upgradedModel);&#13;
        return presenter.upgradeShowPlayButton(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradePoster = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        for (var i = 0; i &lt; model.Files.length; i++) {&#13;
            if (!upgradedModel.Files[i].Poster) {&#13;
                upgradedModel.Files[i].Poster = "";&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        for (var i = 0; i &lt; model.Files.length; i++) {&#13;
            if (!upgradedModel.Files[i]["Audio Description"]) {&#13;
                upgradedModel.Files[i]["Audio Description"] = "";&#13;
            }&#13;
        }&#13;
&#13;
        if (!model.speechTexts) {&#13;
            upgradedModel.speechTexts = {&#13;
                AudioDescriptionEnabled: {AudioDescriptionEnabled: "Audio description enabled"},&#13;
                AudioDescriptionDisabled: {AudioDescriptionDisabled: "Audio description disabled"}&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeOfflineMessage = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["offlineMessage"]) {&#13;
            upgradedModel["offlineMessage"] = "This video is not available offline. Please connect to the Internet to watch it."&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeVideoSpeedController = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel.hasOwnProperty('enableVideoSpeedController')) {&#13;
            upgradedModel['enableVideoSpeedController'] = 'False';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.callMetadataLoadedQueue = function () {&#13;
        for (var i = 0; i &lt; presenter.metadataQueue.length; i++) {&#13;
            var queueElement = presenter.metadataQueue[i];&#13;
            queueElement.function.apply(queueElement.self, queueElement.arguments);&#13;
        }&#13;
&#13;
        presenter.metadataQueue = [];&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'MEDIA_ERR_ABORTED': 1,&#13;
        'MEDIA_ERR_DECODE': 2,&#13;
        'MEDIA_ERR_NETWORK': 3,&#13;
        'MEDIA_ERR_SRC_NOT_SUPPORTED': [4, 'Ups ! Looks like your browser doesn\'t support this codecs. Go &lt;a href="https://tools.google.com/dlpage/webmmf/" &gt; -here- &lt;/a&gt; to download WebM plugin'],&#13;
        'NVT01': "Not valid data format in time labels property"&#13;
    };&#13;
&#13;
    presenter.getVideoErrorMessage = function (errorCode) {&#13;
        var errorMessage = 'We are terribly sorry, but an error has occurred: ';&#13;
&#13;
        switch (errorCode) {&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_ABORTED:&#13;
                errorMessage += 'you aborted the video playback.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_NETWORK:&#13;
                errorMessage += 'a network error caused the video download to fail part-way.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_DECODE:&#13;
                errorMessage += 'the video playback was aborted due to a corruption problem or because the video used features your browser did not support.';&#13;
                break;&#13;
            case presenter.ERROR_CODES.MEDIA_ERR_SRC_NOT_SUPPORTED:&#13;
                errorMessage += 'the video could not be loaded, either because the server or network failed or because the format is not supported.';&#13;
                break;&#13;
            default:&#13;
                errorMessage += 'unknown.';&#13;
                break;&#13;
        }&#13;
&#13;
        return errorMessage + ' Please refresh page.';&#13;
    };&#13;
&#13;
    presenter.videoTypes = [&#13;
        {name: 'MP4 video', type: 'video/mp4'},&#13;
        {name: 'Ogg video', type: 'video/ogg'},&#13;
        {name: 'WebM video', type: 'video/webm'}&#13;
    ];&#13;
&#13;
    presenter.VIDEO_STATE = {&#13;
        STOPPED: 0,&#13;
        PLAYING: 1,&#13;
        PAUSED: 2&#13;
    };&#13;
&#13;
    function fullScreenChange() {&#13;
        if (presenter.configuration.isFullScreen) {&#13;
            $(presenter.videoContainer).css({&#13;
                width: "100%",&#13;
                height: "100%"&#13;
            });&#13;
&#13;
            $(presenter.videoObject).css({&#13;
                width: "100%",&#13;
                height: "100%",&#13;
                position: 'fixed',&#13;
                left: '0px',&#13;
                top: '0px'&#13;
            });&#13;
&#13;
            $(presenter.controlBar.getMainElement()).css('position', "fixed");&#13;
&#13;
            presenter.$posterWrapper.hide();&#13;
&#13;
        } else {&#13;
            $(presenter.videoContainer).css({&#13;
                width: presenter.configuration.dimensions.container.width + 'px',&#13;
                height: presenter.configuration.dimensions.container.height + 'px',&#13;
                position: 'relative'&#13;
            });&#13;
            $(presenter.videoObject).css({&#13;
                width: presenter.configuration.dimensions.video.width + 'px',&#13;
                height: presenter.configuration.dimensions.video.height + 'px',&#13;
                position: 'relative'&#13;
            });&#13;
&#13;
            $(presenter.controlBar.getMainElement()).css('position', "absolute");&#13;
&#13;
        }&#13;
&#13;
        $(presenter.videoObject).on("loadedmetadata", function onLoadedMeta() {&#13;
            presenter.$view.find(".poster-wrapper").show();&#13;
            $(presenter.videoObject).off("loadedmetadata");&#13;
        });&#13;
&#13;
        $(presenter.videoObject).on("canplay", function onCanPlay() {&#13;
            $(presenter.videoObject).off("canplay");&#13;
        });&#13;
    }&#13;
&#13;
    presenter.registerHook = function () {&#13;
        presenter.mathJaxHook = MathJax.Hub.Register.MessageHook("End Process", function mathJaxResolve(message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
        presenter.playerController = controller;&#13;
        presenter.registerHook();&#13;
&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
&#13;
        var pageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.pageLoadedDeferred = pageLoadedDeferred;&#13;
        presenter.pageLoaded = pageLoadedDeferred.promise();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        presenter.pageLoadedDeferred.resolve();&#13;
        if (eventData.value === 'dropdownClicked' &amp;&amp; !presenter.videoObject.playing &amp;&amp; !isTemporarilyPaused()) {&#13;
            presenter.metadadaLoaded = false;&#13;
            presenter.videoObject.load();&#13;
        }&#13;
    };&#13;
&#13;
    function isTemporarilyPaused() {&#13;
        return (presenter.videoObject.paused&#13;
            &amp;&amp; presenter.videoObject.readyState &gt; 2&#13;
            &amp;&amp; presenter.videoObject.currentTime &gt; 0&#13;
            &amp;&amp; !presenter.videoObject.ended&#13;
        );&#13;
    }&#13;
&#13;
    presenter.createEndedEventData = function (currentVideo) {&#13;
        return {&#13;
            source: presenter.configuration.addonID,&#13;
            item: '' + (currentVideo + 1),&#13;
            value: 'ended'&#13;
        };&#13;
    };&#13;
&#13;
    presenter.formatTime = function addonVideo_formatTime(seconds) {&#13;
        if (seconds &lt; 0 || isNaN(seconds)) {&#13;
            return "00:00";&#13;
        }&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        minutes = (minutes &gt;= 10) ? minutes : "0" + minutes;&#13;
        seconds = Math.floor(seconds % 60);&#13;
        seconds = (seconds &gt;= 10) ? seconds : "0" + seconds;&#13;
        return minutes + ":" + seconds;&#13;
    };&#13;
&#13;
    presenter.sendTimeUpdateEvent = function Video_sendTimeUpdate(formattedTime) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            source: presenter.configuration.addonID,&#13;
            item: (presenter.currentMovie + 1),&#13;
            value: formattedTime&#13;
        });&#13;
    };&#13;
&#13;
    presenter.sendVideoEndedEvent = function () {&#13;
        var eventData = presenter.createEndedEventData(presenter.currentMovie);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.stopPropagationOnClickEvent = function (e) {&#13;
        e.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.setMetaDataOnMetaDataLoadedEvent = function () {&#13;
        if (DevicesUtils.isFirefox()) {&#13;
            presenter.$view.find(".video-container").prepend(presenter.videoObject);&#13;
        }&#13;
&#13;
        presenter.metadadaLoaded = true;&#13;
        presenter.originalVideoSize = presenter.getVideoSize(presenter.configuration.addonSize, presenter.videoObject);&#13;
        presenter.calculateCaptionsOffset(presenter.configuration.addonSize, true);&#13;
&#13;
        if (presenter.controlBar !== null) {&#13;
            presenter.$view.find('.video-container').append(presenter.controlBar.getMainElement());&#13;
            presenter.controlBar.setMaxDurationTime(presenter.videoObject.duration);&#13;
            if (presenter.stylesBeforeFullscreen.actualTime !== -1) {&#13;
                presenter.videoObject.currentTime = presenter.stylesBeforeFullscreen.actualTime;&#13;
                presenter.play();&#13;
                presenter.stylesBeforeFullscreen.actualTime = -1;&#13;
            }&#13;
        }&#13;
&#13;
        presenter.callMetadataLoadedQueue();&#13;
    };&#13;
&#13;
    presenter.calculateCaptionsOffset = function (size, changeWidth) {&#13;
        var videoSize = presenter.getVideoSize(size, presenter.videoObject);&#13;
&#13;
        presenter.captionsOffset.left = Math.abs(size.width - videoSize.width) / 2;&#13;
        presenter.captionsOffset.top = Math.abs(size.height - videoSize.height) / 2;&#13;
&#13;
        presenter.$captionsContainer.css({&#13;
            top: presenter.captionsOffset.top,&#13;
            left: presenter.captionsOffset.left,&#13;
            position: "absolute"&#13;
        });&#13;
&#13;
        if (changeWidth) {&#13;
            presenter.$captionsContainer.css({&#13;
                width: videoSize.width,&#13;
                height: videoSize.height&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * @param  {{width: Number, height:Number}} size&#13;
     * @param  {HTMLVideoElement} video&#13;
     * @returns {{width: Number, height:Number}} calculated video size&#13;
     */&#13;
    presenter.getVideoSize = function (size, video) {&#13;
        //https://stackoverflow.com/questions/17056654/getting-the-real-html5-video-width-and-height&#13;
        var videoRatio = video.videoWidth / video.videoHeight;&#13;
        var width = size.width, height = size.height;&#13;
        var elementRatio = width / height;&#13;
&#13;
        if (elementRatio &gt; videoRatio) {&#13;
            width = height * videoRatio;&#13;
        } else {&#13;
            height = width / videoRatio;&#13;
        }&#13;
&#13;
        return {&#13;
            width: width,&#13;
            height: height&#13;
        };&#13;
    };&#13;
&#13;
    function setVideoStateOnPlayEvent() {&#13;
        presenter.videoState = presenter.VIDEO_STATE.PLAYING;&#13;
        presenter.addClassToView('playing');&#13;
    }&#13;
&#13;
    function setVideoStateOnPauseEvent() {&#13;
        if (!presenter.isHideExecuted) {&#13;
            presenter.videoState = presenter.VIDEO_STATE.PAUSED;&#13;
            presenter.removeClassFromView('playing');&#13;
        }&#13;
&#13;
        delete presenter.isHideExecuted;&#13;
    }&#13;
&#13;
    presenter.removeMathJaxHook = function () {&#13;
        MathJax.Hub.signal.hooks["End Process"].Remove(presenter.mathJaxHook);&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        var view = document.getElementsByClassName('ic_page');&#13;
&#13;
        if (presenter.controlBar !== null) {&#13;
            presenter.controlBar.destroy();&#13;
        }&#13;
&#13;
        presenter.stop();&#13;
&#13;
        presenter.videoView.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.videoObject.removeEventListener('click', presenter.stopPropagationOnClickEvent);&#13;
        presenter.videoObject.removeEventListener('loadedmetadata', presenter.setMetaDataOnMetaDataLoadedEvent);&#13;
        presenter.videoObject.removeEventListener('play', setVideoStateOnPlayEvent);&#13;
        presenter.videoObject.removeEventListener('pause', setVideoStateOnPauseEvent);&#13;
        presenter.videoObject.removeEventListener('stalled', presenter.onStalledEventHandler);&#13;
        presenter.videoObject.removeEventListener('webkitfullscreenchange', fullScreenChange);&#13;
        $(document).off('webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange');&#13;
        document.removeEventListener("mozfullscreenchange", fullScreenChange);&#13;
&#13;
        presenter.$videoObject.unbind("ended");&#13;
        presenter.$videoObject.unbind("error");&#13;
        presenter.$videoObject.unbind("canplay");&#13;
        presenter.$videoObject.unbind('timeupdate');&#13;
&#13;
        presenter.removeMathJaxHook();&#13;
        presenter.$view.off();&#13;
&#13;
        presenter.videoObject.src = '';&#13;
        presenter.mathJaxHook = null;&#13;
        presenter.eventBus = null;&#13;
        presenter.view = null;&#13;
        presenter.viewObject = null;&#13;
        presenter.videoObject = null;&#13;
&#13;
        $(view).off('click');&#13;
        $(window).off('click');&#13;
    };&#13;
&#13;
    presenter.resizeVideoToWindow = function () {&#13;
        var body = document.getElementsByTagName('body')[0];&#13;
&#13;
        var video = presenter.videoContainer.get(0);&#13;
        presenter.stylesBeforeFullscreen.actualTime = presenter.videoObject.currentTime;&#13;
        presenter.stylesBeforeFullscreen.style = {&#13;
            position: video.style.position,&#13;
            top: video.style.top,&#13;
            left: video.style.left,&#13;
            zIndex: video.style.zIndex,&#13;
            className: video.className&#13;
        };&#13;
&#13;
        presenter.stylesBeforeFullscreen.changedStyles = true;&#13;
        video.style.position = "fixed";&#13;
        video.style.top = "0";&#13;
        video.style.left = "0";&#13;
        video.style.zIndex = 20000;&#13;
        video.className = video.className + " " + presenter.$view[0].className;&#13;
        body.appendChild(video);&#13;
        presenter.metadadaLoaded = false;&#13;
        presenter.videoObject.load();&#13;
        presenter.scalePosterToWindowSize();&#13;
        presenter.scaleCaptionsContainerToVideoNewVideoSize();&#13;
    };&#13;
&#13;
    presenter.scalePosterToWindowSize = presenter.metadataLoadedDecorator(function () {&#13;
        var size = {&#13;
            width: $(presenter.videoObject).width(),&#13;
            height: $(presenter.videoObject).height()&#13;
        };&#13;
&#13;
        presenter.calculatePosterSize(presenter.videoObject, size);&#13;
    });&#13;
&#13;
    presenter.fullScreen = function () {&#13;
        var requestMethod = requestFullscreen(presenter.videoContainer);&#13;
        presenter.stylesBeforeFullscreen.moduleWidth = presenter.$view.width();&#13;
        presenter.stylesBeforeFullscreen.moduleHeight = presenter.$view.height();&#13;
        if (requestMethod === null) {&#13;
            presenter.resizeVideoToWindow();&#13;
        } else {&#13;
            presenter.scaleCaptionsContainerToScreenSize();&#13;
&#13;
            var size = {&#13;
                width: screen.width,&#13;
                height: screen.height&#13;
            };&#13;
            presenter.calculatePosterSize(presenter.videoObject, size);&#13;
        }&#13;
&#13;
        presenter.configuration.isFullScreen = true;&#13;
        presenter.playerController.setAbleChangeLayout(false);&#13;
        fullScreenChange();&#13;
    };&#13;
&#13;
    presenter.closeFullscreen = function () {&#13;
        if (presenter.stylesBeforeFullscreen.changedStyles === true) {&#13;
            presenter.stylesBeforeFullscreen.actualTime = presenter.videoObject.currentTime;&#13;
            presenter.stylesBeforeFullscreen.changedStyles = false;&#13;
            var video = presenter.videoContainer.get(0);&#13;
            presenter.videoView.appendChild(video);&#13;
            presenter.metadadaLoaded = false;&#13;
            presenter.videoObject.load();&#13;
            video.style.position = presenter.stylesBeforeFullscreen.style.position;&#13;
            video.style.top = presenter.stylesBeforeFullscreen.style.top;&#13;
            video.style.left = presenter.stylesBeforeFullscreen.style.left;&#13;
            video.style.zIndex = presenter.stylesBeforeFullscreen.style.zIndex;&#13;
            video.className = presenter.stylesBeforeFullscreen.style.className;&#13;
        } else {&#13;
            exitFullscreen();&#13;
        }&#13;
        presenter.configuration.isFullScreen = false;&#13;
        presenter.removeScaleFromCaptionsContainer();&#13;
        fullScreenChange();&#13;
&#13;
        presenter.calculatePosterSize(presenter.videoObject, presenter.configuration.addonSize);&#13;
        presenter.playerController.setAbleChangeLayout(true);&#13;
    };&#13;
&#13;
    presenter.switchAudioDescriptionEnabled = function() {&#13;
        if (presenter.isAudioDescriptionEnabled == null) {&#13;
            setAudioDescriptionEnabled(false);&#13;
        } else {&#13;
            setAudioDescriptionEnabled(!presenter.isAudioDescriptionEnabled);&#13;
        }&#13;
    };&#13;
&#13;
    function setAudioDescriptionEnabled(isEnabled) {&#13;
        presenter.isAudioDescriptionEnabled = isEnabled;&#13;
        if (presenter.isAudioDescriptionEnabled) {&#13;
            speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.audioDescriptionEnabled)]);&#13;
        } else {&#13;
            speak([window.TTSUtils.getTextVoiceObject(presenter.speechTexts.audioDescriptionDisabled)]);&#13;
            setAudioDescriptionDisabled();&#13;
        }&#13;
    }&#13;
&#13;
    function setAudioDescriptionDisabled(){&#13;
        if ('speechSynthesis' in window) {&#13;
            window.speechSynthesis.cancel();&#13;
        }&#13;
        if (window.responsiveVoice &amp;&amp; window.responsiveVoice.isPlaying()) {&#13;
            audioDescriptionEndedCallback();&#13;
            window.responsiveVoice.cancel();&#13;
        }&#13;
        for ( var i = 0; i &lt; presenter.descriptions.length; i++) {&#13;
            var description = presenter.descriptions[i];&#13;
            $(description.element).css('visibility', 'hidden');&#13;
            $(description.element).attr('visibility', 'hidden');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showAudioDescription = function() {&#13;
        setAudioDescriptionEnabled(true);&#13;
    };&#13;
&#13;
    presenter.hideAudioDescription = function() {&#13;
        setAudioDescriptionEnabled(false);&#13;
    };&#13;
&#13;
&#13;
    presenter.keyboardController = function (keycode, isShift, event) {&#13;
        event.preventDefault();&#13;
&#13;
        function increasedVolume() {&#13;
            var val = Math.round((presenter.videoObject.volume + 0.1) * 10) / 10;&#13;
&#13;
            return val &gt; 1 ? 1 : val;&#13;
        }&#13;
&#13;
        function decreasedVolume() {&#13;
            var val = Math.round((presenter.videoObject.volume - 0.1) * 10) / 10;&#13;
&#13;
            return val &lt; 0 ? 0 : val;&#13;
        }&#13;
&#13;
        function forward() {&#13;
            presenter.videoObject.currentTime += 15;&#13;
        }&#13;
&#13;
        function backward() {&#13;
            presenter.videoObject.currentTime -= 15;&#13;
        }&#13;
&#13;
        function playPause() {&#13;
            if (presenter.videoObject.paused) {&#13;
                presenter.play();&#13;
            } else {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
&#13;
        function nextTimeLabel() {&#13;
            var currentTime = presenter.videoObject.currentTime;&#13;
            var currentElement = presenter.configuration.files[presenter.currentMovie],&#13;
                /**&#13;
                 * @type {{title: String, time: Number}[]}&#13;
                 */&#13;
                timeLabels = currentElement.timeLabels;&#13;
&#13;
&#13;
            for (var i = 0; i &lt; timeLabels.length; i++) {&#13;
                var element = timeLabels[i];&#13;
&#13;
                if (element.time &gt; currentTime) {&#13;
                    presenter.seek(element.time);&#13;
                    break;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        function previousTimeLabel() {&#13;
            var currentTime = presenter.videoObject.currentTime - 2;&#13;
            var currentElement = presenter.configuration.files[presenter.currentMovie],&#13;
                /**&#13;
                 * @type {{title: String, time: Number}[]}&#13;
                 */&#13;
                timeLabels = currentElement.timeLabels;&#13;
&#13;
            for (var i = timeLabels.length - 1; i &gt;= 0; i--) {&#13;
                var element = timeLabels[i];&#13;
&#13;
                if (element.time &lt; currentTime) {&#13;
                    presenter.seek(element.time);&#13;
                    break;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        switch (keycode) {&#13;
            case 32:&#13;
                playPause();&#13;
                break;&#13;
            case 38:&#13;
                presenter.videoObject.volume = increasedVolume();&#13;
                break;&#13;
            case 40:&#13;
                presenter.videoObject.volume = decreasedVolume();&#13;
                break;&#13;
            case 37:&#13;
                if (!isShift) {&#13;
                    backward();&#13;
                } else {&#13;
                    previousTimeLabel();&#13;
                }&#13;
                break;&#13;
            case 39:&#13;
                if (!isShift) {&#13;
                    forward();&#13;
                } else {&#13;
                    nextTimeLabel();&#13;
                }&#13;
                break;&#13;
            case 27:&#13;
                presenter.pause();&#13;
                break;&#13;
            case 70:&#13;
                presenter.fullScreen();&#13;
                break;&#13;
            case 65: // A&#13;
                presenter.switchAudioDescriptionEnabled();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     *&#13;
     * @param {String} timeLabel&#13;
     */&#13;
    presenter.validateTimeLabel = function (timeLabel, index) {&#13;
        var title = timeLabel.split(' ').slice(1).join(' '),&#13;
            time = timeLabel.split(' ')[0],&#13;
            //[Sec, Min, Hour]&#13;
            timeMultiplication = [1, 60, 60 * 60],&#13;
            timeElements = time.split(':'),&#13;
            i;&#13;
&#13;
        if (timeElements.length === 0 || timeElements.length &gt; 3) {&#13;
            return {&#13;
                isValid: false,&#13;
                errorCode: "NVT01"&#13;
            };&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; timeElements.length; i++) {&#13;
            if (!timeElements[i].match(/^[0-9]+$/g)) {&#13;
                return {&#13;
                    isValid: false,&#13;
                    errorCode: "NVT01"&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        if (title.trim() === '') {&#13;
            title = index + ". " + time;&#13;
        }&#13;
&#13;
        var timeInSeconds = 0;&#13;
&#13;
        timeElements = timeElements.reverse();&#13;
        for (i = timeElements.length - 1; i &gt;= 0; i--) {&#13;
            timeInSeconds += parseInt(timeElements[i], 10) * timeMultiplication[i];&#13;
        }&#13;
&#13;
        if (isNaN(timeInSeconds)) {&#13;
            return {&#13;
                isValid: false,&#13;
                errorCode: "NVT01"&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            title: title,&#13;
            time: timeInSeconds&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateTimeLabels = function (file) {&#13;
        var timeLabelsText = file['time_labels'],&#13;
            timeLabels = timeLabelsText.match(/[^\r\n]+/g) || [],  //https://stackoverflow.com/questions/5034781/js-regex-to-split-by-line&#13;
            validatedTimeLabels = [];&#13;
&#13;
        for (var i = 0; i &lt; timeLabels.length; i++) {&#13;
            var validatedTimeLabel = presenter.validateTimeLabel(timeLabels[i], i + 1);&#13;
            if (!validatedTimeLabel.isValid) {&#13;
                return validatedTimeLabel;&#13;
            }&#13;
&#13;
            validatedTimeLabels.push(validatedTimeLabel);&#13;
        }&#13;
&#13;
        validatedTimeLabels = validatedTimeLabels.sort(function (a, b) {&#13;
            return a.time - b.time;&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: validatedTimeLabels&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateFile = function (file) {&#13;
        var validatedTimeLabels = presenter.validateTimeLabels(file);&#13;
        if (!validatedTimeLabels.isValid) {&#13;
            return validatedTimeLabels;&#13;
        }&#13;
&#13;
        var fileToReturn = {&#13;
            "Ogg video": file['Ogg video'],&#13;
            "MP4 video": file['MP4 video'],&#13;
            "WebM video": file['WebM video'],&#13;
            "Subtitles": file['Subtitles'],&#13;
            "Audiodescription": file['Audio Description'],&#13;
            "Poster": file['Poster'],&#13;
            "ID": file['ID'],&#13;
            "AlternativeText": file['AlternativeText'],&#13;
            "Loop video": ModelValidationUtils.validateBoolean(file['Loop video']),&#13;
            timeLabels: validatedTimeLabels.value&#13;
        };&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            file: fileToReturn&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.validateFiles = function (model) {&#13;
        var modelFiles = model.Files;&#13;
        var files = [];&#13;
&#13;
        for (var i = 0; i &lt; modelFiles.length; i++) {&#13;
            var validatedFile = presenter.validateFile(modelFiles[i]);&#13;
            if (!validatedFile.isValid) {&#13;
                return validatedFile;&#13;
            }&#13;
&#13;
            files.push(validatedFile.file);&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            files: files&#13;
        };&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            audioDescriptionEnabled:  'Audio description enabled',&#13;
            audioDescriptionDisabled: 'Audio description disabled'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            audioDescriptionEnabled: getSpeechTextProperty(speechTexts['AudioDescriptionEnabled']['AudioDescriptionEnabled'], presenter.speechTexts.audioDescriptionEnabled),&#13;
            audioDescriptionDisabled: getSpeechTextProperty(speechTexts['AudioDescriptionDisabled']['AudioDescriptionDisabled'], presenter.speechTexts.audioDescriptionDisabled)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedFiles = presenter.validateFiles(model);&#13;
        setSpeechTexts(model["speechTexts"]);&#13;
        if (!validatedFiles.isValid) {&#13;
            return validatedFiles;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonSize: {&#13;
                width: parseInt(model.Width, 10),&#13;
                height: parseInt(model.Height, 10)&#13;
            },&#13;
            addonID: model.ID,&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            shouldHideSubtitles: ModelValidationUtils.validateBoolean(model["Hide subtitles"]),&#13;
            defaultControls: !ModelValidationUtils.validateBoolean(model['Hide default controls']),&#13;
            files: validatedFiles.files,&#13;
            height: parseInt(model.Height, 10),&#13;
            showPlayButton: ModelValidationUtils.validateBoolean(model['Show play button']),&#13;
            isTabindexEnabled: ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]),&#13;
            offlineMessage: model["offlineMessage"],&#13;
            enableVideoSpeedController: ModelValidationUtils.validateBoolean(model["enableVideoSpeedController"])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkPlayButtonVisibility = function () {&#13;
        if (!presenter.configuration.showPlayButton) {&#13;
            presenter.$view.find('.video-poster-play').hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cachePosters = function () {&#13;
        for (var fileNumber = 0; fileNumber &lt; presenter.configuration.files.length; fileNumber++) {&#13;
            presenter.cachePoster(fileNumber);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cachePoster = function (fileNumber) {&#13;
        var posterSource = presenter.configuration.files[fileNumber].Poster;&#13;
        if (posterSource) {&#13;
            var image = new Image();&#13;
            image.src = posterSource;&#13;
&#13;
            presenter.configuration.files[fileNumber].Poster = image;&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.showPlayButton = function () {&#13;
        if (presenter.configuration.showPlayButton) {&#13;
            presenter.posterPlayButton.show();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hidePlayButton = function () {&#13;
        if (presenter.configuration.showPlayButton) {&#13;
            presenter.posterPlayButton.hide();&#13;
        }&#13;
    };&#13;
&#13;
//    presenter.play = function () {&#13;
//        if (presenter.videoObject.paused) {&#13;
//            presenter.play();&#13;
//        }&#13;
//    }&#13;
//&#13;
//    presenter.payse = function () {&#13;
//        if (!presenter.videoObject.paused) {&#13;
//            presenter.pause();&#13;
//        }&#13;
//    }&#13;
&#13;
&#13;
    presenter.setBurgerMenu = function () {&#13;
        var BURGER_MENU = "time_labels";&#13;
        if (!presenter.configuration.defaultControls) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.controlBar.removeBurgerMenu(BURGER_MENU);&#13;
&#13;
        var currentElement = presenter.configuration.files[presenter.currentMovie],&#13;
            /**&#13;
             * @type {{title: String, time: Number}[]}&#13;
             */&#13;
            labels = currentElement.timeLabels;&#13;
&#13;
        if (labels.length === 0) {&#13;
            return;&#13;
        }&#13;
&#13;
        var elementsForBurger = labels.map(function (value) {&#13;
            return {&#13;
                title: value.title,&#13;
                callback: function () {&#13;
                    presenter.seek(value.time);&#13;
                }&#13;
            };&#13;
        });&#13;
&#13;
        presenter.controlBar.addBurgerMenu(BURGER_MENU, elementsForBurger);&#13;
    };&#13;
&#13;
    presenter.addVideoSpeedController = function () {&#13;
        if (presenter.configuration.enableVideoSpeedController) {&#13;
            presenter.isVideoSpeedControllerAdded = true;&#13;
            presenter.controlBar.addVideoSpeedController(presenter.setPlaybackRate);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.resetVideoSpeedController = function () {&#13;
        presenter.controlBar.resetPlaybackRateSelectValue();&#13;
        presenter.setPlaybackRate(1.0);&#13;
    }&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
        if (!validatedModel.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = $.extend(presenter.configuration, validatedModel);&#13;
&#13;
        presenter.cachePosters();&#13;
&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
        presenter.videoView = view;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.posterPlayButton = $(view).find('.video-poster-play');&#13;
        presenter.videoContainer = $(view).find('.video-container:first');&#13;
        presenter.$captionsContainer = presenter.$view.find(".captions-container:first");&#13;
        presenter.$posterWrapper = presenter.$view.find('.poster-wrapper');&#13;
        presenter.$mask = presenter.$view.find('.video-container-mask');&#13;
&#13;
        presenter.videoObject = presenter.videoContainer.find('video')[0];&#13;
        presenter.$videoObject = $(presenter.videoObject);&#13;
&#13;
        Object.defineProperty(presenter.videoObject, 'playing', {&#13;
           get: function () {&#13;
               return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
           }&#13;
        });&#13;
&#13;
        presenter.setDimensions();&#13;
&#13;
        presenter.checkPlayButtonVisibility();&#13;
&#13;
        if (presenter.configuration.defaultControls) {&#13;
            presenter.buildControlsBars();&#13;
        } else {&#13;
            presenter.videoContainer.on("click", function () {&#13;
                if (presenter.videoObject.paused) {&#13;
                    presenter.play();&#13;
                } else {&#13;
                    presenter.pause();&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
&#13;
&#13;
        presenter.addTabindex(presenter.configuration.isTabindexEnabled);&#13;
&#13;
        presenter.connectHandlers();&#13;
        presenter.reload();&#13;
&#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
&#13;
        if (presenter.configuration.shouldHideSubtitles) {&#13;
            presenter.hideSubtitles();&#13;
        } else {&#13;
            presenter.showSubtitles();&#13;
        }&#13;
&#13;
        presenter.videoObject.setAttribute('webkit-playsinline', 'webkit-playsinline');&#13;
        presenter.videoObject.setAttribute('playsinline', 'playsinline');&#13;
&#13;
    };&#13;
&#13;
    presenter.connectHandlers = function () {&#13;
        presenter.videoObject.addEventListener('click', presenter.stopPropagationOnClickEvent);&#13;
        presenter.videoObject.addEventListener('error', function () {&#13;
            presenter.handleErrorCode(this.error);&#13;
        }, true);&#13;
        presenter.videoObject.addEventListener('loadedmetadata', presenter.setMetaDataOnMetaDataLoadedEvent);&#13;
        presenter.videoObject.addEventListener('play', setVideoStateOnPlayEvent);&#13;
        presenter.videoObject.addEventListener('pause', setVideoStateOnPauseEvent);&#13;
        presenter.videoObject.addEventListener('playing', presenter.onVideoPlaying, false);&#13;
&#13;
        $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange', presenter.fullscreenChangedEventReceived);&#13;
&#13;
        presenter.videoView.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
&#13;
        presenter.addClickListener();&#13;
    };&#13;
&#13;
    presenter.addClickListener = function () {&#13;
        var view = document.getElementsByClassName('ic_page');&#13;
        $(view[0]).on('click', function (event) {&#13;
            if (presenter.controlBar.isSelectorOpen &amp;&amp; !event.target.localName.includes('select')) {&#13;
                presenter.controlBar.isSelectorOpen = false;&#13;
                presenter.controlBar.hideControls();&#13;
            }&#13;
            event.preventDefault();&#13;
            event.stopPropagation();&#13;
        });&#13;
&#13;
        $(window).on('click', function (event) {&#13;
            if (presenter.controlBar.isSelectorOpen) {&#13;
                presenter.controlBar.isSelectorOpen = false;&#13;
                presenter.controlBar.hideControls();&#13;
            }&#13;
            event.preventDefault();&#13;
            event.stopPropagation();&#13;
        });&#13;
    }&#13;
&#13;
    presenter.fullscreenChangedEventReceived = function () {&#13;
        if (!isVideoInFullscreen() &amp;&amp; presenter.configuration.isFullScreen) {&#13;
            presenter.configuration.isFullScreen = false;&#13;
            presenter.removeScaleFromCaptionsContainer();&#13;
            fullScreenChange();&#13;
            presenter.controlBar.showFullscreenButton();&#13;
&#13;
            presenter.calculatePosterSize(presenter.videoObject, presenter.configuration.addonSize);&#13;
            presenter.playerController.setAbleChangeLayout(true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkAddonSize = function () {&#13;
        if (presenter.videoContainer.width() !== presenter.lastWidthAndHeightValues.width&#13;
            || presenter.videoContainer.height() !== presenter.lastWidthAndHeightValues.height) {&#13;
&#13;
            presenter.lastWidthAndHeightValues.width = presenter.videoContainer.width();&#13;
            presenter.lastWidthAndHeightValues.height = presenter.videoContainer.height();&#13;
&#13;
            presenter.calculateCaptionsOffset(presenter.lastWidthAndHeightValues, false);&#13;
            presenter.scaleCaptionsContainerToVideoNewVideoSize();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.buildControlsBars = function () {&#13;
        var config = {&#13;
            videoObject: presenter.videoObject,&#13;
            parentElement: presenter.videoContainer[0],&#13;
            isVolumeEnabled: !MobileUtils.isSafariMobile(navigator.userAgent)&#13;
        };&#13;
&#13;
        var controls = new window.CustomControlsBar(config);&#13;
&#13;
        controls.addPlayCallback(presenter.play);&#13;
        controls.addPauseCallback(presenter.pause);&#13;
        controls.addStopCallback(presenter.stop);&#13;
        controls.addFullscreenCallback(presenter.fullScreen);&#13;
        controls.addCloseFullscreenCallback(presenter.closeFullscreen);&#13;
        controls.addProgressChangedCallback(presenter.seekFromPercent);&#13;
        controls.addVolumeChangedCallback(presenter.setVolume);&#13;
        controls.addCallbackToBuildInTimer(presenter.checkAddonSize);&#13;
&#13;
        presenter.$view.find('.video-container').append(controls.getMainElement());&#13;
&#13;
        presenter.controlBar = controls;&#13;
    };&#13;
&#13;
    presenter.scaleCaptionsContainerToVideoNewVideoSize = presenter.metadataLoadedDecorator(function () {&#13;
        var size = {&#13;
            width: $(presenter.videoObject).width(),&#13;
            height: $(presenter.videoObject).height()&#13;
        };&#13;
&#13;
        var newVideoSize = presenter.getVideoSize(size, presenter.videoObject);&#13;
&#13;
        var xScale = newVideoSize.width / presenter.originalVideoSize.width;&#13;
        var yScale = newVideoSize.height / presenter.originalVideoSize.height;&#13;
&#13;
        presenter.$captionsContainer.css(generateTransformDict(xScale, yScale));&#13;
&#13;
        presenter.calculateCaptionsOffset(size, false);&#13;
    });&#13;
&#13;
    presenter.scaleCaptionsContainerToScreenSize = presenter.metadataLoadedDecorator(function () {&#13;
        var size = {&#13;
            width: screen.width,&#13;
            height: screen.height&#13;
        };&#13;
&#13;
        var newVideoSize = presenter.getVideoSize(size, presenter.videoObject);&#13;
&#13;
        var xScale = newVideoSize.width / presenter.originalVideoSize.width;&#13;
        var yScale = newVideoSize.height / presenter.originalVideoSize.height;&#13;
&#13;
&#13;
        presenter.$captionsContainer.css(generateTransformDict(xScale, yScale));&#13;
&#13;
        presenter.calculateCaptionsOffset(size, false);&#13;
    });&#13;
&#13;
    presenter.removeScaleFromCaptionsContainer = presenter.metadataLoadedDecorator(function () {&#13;
        presenter.$captionsContainer.css(generateTransformDict(1, 1));&#13;
&#13;
        presenter.calculateCaptionsOffset(presenter.configuration.addonSize, false);&#13;
    });&#13;
&#13;
    presenter.sendOnPlayingEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': (presenter.currentMovie + 1),&#13;
            'value': 'playing',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    //이석웅 추가&#13;
    presenter.sendOnPlayingConfirmEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': (presenter.currentMovie + 1),&#13;
            'value': 'playing_confirm',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    //이석웅 추가&#13;
    presenter.sendOnPauseEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': (presenter.currentMovie + 1),&#13;
            'value': 'pause',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    //이석웅 추가&#13;
    presenter.sendOnStopEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': (presenter.currentMovie + 1),&#13;
            'value': 'stop',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onVideoPlaying = function AddonVideo_onVideoPlaying() {&#13;
        presenter.sendOnPlayingEvent();&#13;
&#13;
        if (presenter.videoObject.currentTime === 0) {&#13;
            presenter.sendTimeUpdateEvent(presenter.formatTime(presenter.videoObject.currentTime))&#13;
        }&#13;
    };&#13;
&#13;
    presenter.convertTimeStringToNumber = function (timeString) {&#13;
        timeString = timeString.split(':');&#13;
        var minutes = parseInt(timeString[0] * 60, 10);&#13;
        var seconds = parseInt(timeString[1], 10);&#13;
        return {isCorrect: true, value: (minutes + seconds)};&#13;
    };&#13;
&#13;
    presenter.handleErrorCode = function (error) {&#13;
        if (!error) return;&#13;
&#13;
        presenter.$view.html(presenter.getVideoErrorMessage(error.code));&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.isPreview = true;&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
        if (!validatedModel.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = $.extend(presenter.configuration, validatedModel);&#13;
&#13;
        presenter.$view = $(view);&#13;
        presenter.videoContainer = $(view).find('.video-container:first');&#13;
&#13;
        presenter.setVideo();&#13;
        presenter.setDimensions();&#13;
    };&#13;
&#13;
    presenter.showCaptions = function (time) {&#13;
        if (!presenter.configuration.dimensions) return ; // No captions to show when video wasn't loaded properly&#13;
        for (var i = 0; i &lt; presenter.captions.length; i++) {&#13;
            var caption = presenter.captions[i];&#13;
            if (caption.start &lt;= time &amp;&amp; caption.end &gt;= time) {&#13;
                $(caption.element).attr('visibility', 'visible');&#13;
                $(caption.element).css('visibility', presenter.isCurrentlyVisible ? 'visible' : 'hidden');&#13;
            } else {&#13;
                $(caption.element).css('visibility', 'hidden');&#13;
                $(caption.element).attr('visibility', 'hidden');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function getAudioDescriptionEnabled() {&#13;
        if (presenter.isAudioDescriptionEnabled != null) {&#13;
            return presenter.isAudioDescriptionEnabled;&#13;
        }&#13;
        if (presenter.playerController &amp;&amp; presenter.playerController.isWCAGOn()) {&#13;
            return presenter.playerController.isWCAGOn();&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function audioDescriptionEndedCallback() {&#13;
        if (presenter) {&#13;
            if(!presenter.usedStop) {&#13;
                presenter.play();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readAudioDescriptions = function (time) {&#13;
        if (!presenter.configuration.dimensions) return false;&#13;
        if (!presenter.playerController || !getAudioDescriptionEnabled()) return false;&#13;
        if ((time &lt; presenter.prevTime) || ((time - presenter.prevTime) &gt; 1.0)) {&#13;
            presenter.prevTime = time - 0.001;&#13;
            return false;&#13;
        }&#13;
&#13;
        var isSpeaking = false;&#13;
        for ( var i = 0; i &lt; presenter.descriptions.length; i++) {&#13;
            var description = presenter.descriptions[i];&#13;
            if (presenter.prevTime &lt; description.start &amp;&amp; description.start &lt;= time) {&#13;
                isSpeaking = true;&#13;
                presenter.pause();&#13;
                $(description.element).attr('visibility', 'visible');&#13;
                $(description.element).css('visibility', presenter.isCurrentlyVisible ? 'visible' : 'hidden');&#13;
                speakWithCallback([window.TTSUtils.getTextVoiceObject(description.text,description.langTag)], audioDescriptionEndedCallback);&#13;
            } else {&#13;
                $(description.element).css('visibility', 'hidden');&#13;
                $(description.element).attr('visibility', 'hidden');&#13;
            }&#13;
        }&#13;
&#13;
        presenter.prevTime = time;&#13;
&#13;
        if (isSpeaking) {&#13;
            for (var i = 0; i &lt; presenter.captions.length; i++) {&#13;
                var caption = presenter.captions[i];&#13;
                $(caption.element).css('visibility', 'hidden');&#13;
                $(caption.element).attr('visibility', 'hidden');&#13;
            }&#13;
        }&#13;
        return isSpeaking;&#13;
    };&#13;
&#13;
    presenter.reload = function () {&#13;
        presenter.showPlayButton();&#13;
        presenter.isVideoLoaded = false;&#13;
        $(presenter.videoContainer).find('.captions').remove();&#13;
        presenter.setVideo();&#13;
        presenter.loadSubtitles();&#13;
        presenter.loadAudioDescription();&#13;
        presenter.setBurgerMenu();&#13;
        if (presenter.isVideoSpeedControllerAdded) {&#13;
            presenter.resetVideoSpeedController();&#13;
        } else {&#13;
            presenter.addVideoSpeedController();&#13;
        }&#13;
        $(presenter.videoObject).unbind('timeupdate');&#13;
        $(presenter.videoObject).bind("timeupdate", function () {&#13;
            onTimeUpdate(this);&#13;
        });&#13;
        presenter.removeClassFromView('playing');&#13;
        presenter.posterPlayButton.removeClass('video-poster-pause');&#13;
    };&#13;
&#13;
    presenter.sendTimeUpdate = function Video_sendTime() {&#13;
        var actualVideoTime = parseInt(presenter.videoObject.currentTime, 10);&#13;
        if (actualVideoTime !== presenter.lastSentCurrentTime) {&#13;
            var formattedTime = presenter.formatTime(actualVideoTime, 10);&#13;
            presenter.sendTimeUpdateEvent(formattedTime);&#13;
            presenter.lastSentCurrentTime = actualVideoTime;&#13;
        }&#13;
    };&#13;
&#13;
    function onTimeUpdate(video) {&#13;
        if (!presenter.videoObject.paused) {&#13;
            var isSpeaking = presenter.readAudioDescriptions(presenter.videoObject.currentTime);&#13;
            if (!isSpeaking) {&#13;
                presenter.showCaptions(presenter.videoObject.currentTime);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.sendTimeUpdate();&#13;
&#13;
        var currentTime = Math.round(video.currentTime * 10) / 10,&#13;
            videoDuration = Math.round(video.duration * 10) / 10,&#13;
            isFullScreen = document.mozFullScreen || document.webkitIsFullScreen;&#13;
&#13;
        var shouldSetAbleChangeLayout = false;&#13;
        if (currentTime &gt;= videoDuration) {&#13;
            presenter.sendVideoEndedEvent();&#13;
            presenter.showWaterMark();&#13;
            presenter.prevTime = -0.001;&#13;
            if (document.exitFullscreen &amp;&amp; document.fullscreenElement) {&#13;
                document.exitFullscreen();&#13;
            } else if (document.webkitExitFullscreen) {&#13;
                document.webkitExitFullscreen();&#13;
            } else if (document.mozCancelFullScreen) {&#13;
                document.mozCancelFullScreen();&#13;
            } else if (document.msExitFullscreen) {&#13;
                document.msExitFullscreen();&#13;
            } else if (presenter.configuration.isFullScreen) {&#13;
                presenter.configuration.isFullScreen = false;&#13;
                presenter.removeScaleFromCaptionsContainer();&#13;
                presenter.controlBar.showFullscreenButton();&#13;
                presenter.closeFullscreen();&#13;
                shouldSetAbleChangeLayout = true;&#13;
&#13;
            }&#13;
&#13;
            if (!presenter.configuration.defaultControls) {&#13;
                presenter.seek(0); // sets the current time to 0&#13;
                presenter.$posterWrapper.show();&#13;
                if (presenter.configuration.showPlayButton) {&#13;
                    presenter.posterPlayButton.show();&#13;
                }&#13;
                presenter.videoObject.pause();&#13;
            }&#13;
&#13;
            $(presenter.videoObject).on("canplay", function onCanPlay() {&#13;
                currentTime = 0;&#13;
                presenter.videoObject.currentTime = currentTime;&#13;
                presenter.pause();&#13;
                $(presenter.videoObject).off("canplay");&#13;
            });&#13;
&#13;
            presenter.lastSentCurrentTime = 0;&#13;
&#13;
            if(shouldSetAbleChangeLayout) {&#13;
                presenter.playerController.setAbleChangeLayout(true);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        var isPaused = presenter.videoObject.paused;&#13;
        return JSON.stringify({&#13;
            files: "deprecated",        //Removed from state.&#13;
            videoURLS: presenter.addedVideoURLS,&#13;
            currentTime: presenter.videoObject.currentTime,&#13;
            isCurrentlyVisible: presenter.isCurrentlyVisible,&#13;
            isPaused: isPaused,&#13;
            currentMovie: presenter.currentMovie,&#13;
            areSubtitlesHidden: presenter.areSubtitlesHidden,&#13;
            isAudioDescriptionEnabled: presenter.isAudioDescriptionEnabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) {&#13;
            return;&#13;
        }&#13;
        var state = JSON.parse(stateString);&#13;
        var currentTime = state.currentTime;&#13;
&#13;
        if (state.videoURLS) {  //This was added later than rest of state&#13;
            for (var i in state.videoURLS) {&#13;
                if (state.videoURLS.hasOwnProperty(i)) {&#13;
                    var element = state.videoURLS[i];&#13;
                    presenter._setVideoURL(element.url, element.index);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.isCurrentlyVisible = state.isCurrentlyVisible;&#13;
&#13;
        if (presenter.isCurrentlyVisible !== (presenter.$view.css('visibility') !== 'hidden')) {&#13;
            presenter.setVisibility(presenter.isCurrentlyVisible);&#13;
        }&#13;
&#13;
        presenter.currentMovie = state.currentMovie;&#13;
        presenter.reload();&#13;
&#13;
        $(presenter.videoObject).on('canplay', function onVideoCanPlay() {&#13;
            if (presenter.videoObject.currentTime &lt; currentTime) {&#13;
                presenter.currentTime = currentTime;&#13;
                presenter.videoObject.currentTime = currentTime;&#13;
                presenter.startTime = currentTime;&#13;
                presenter.videoState = presenter.VIDEO_STATE.PAUSED;&#13;
                $(this).off('canplay');&#13;
            }&#13;
&#13;
            if (state.areSubtitlesHidden != undefined) {&#13;
                if (state.areSubtitlesHidden) {&#13;
                    presenter.hideSubtitles();&#13;
                } else {&#13;
                    presenter.showSubtitles();&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        presenter.isAudioDescriptionEnabled = state.isAudioDescriptionEnabled;&#13;
    };&#13;
&#13;
    presenter.getIOSVersion = function (userAgent) {&#13;
        var match = /CPU OS ([\d_]+) like Mac OS X/.exec(userAgent);&#13;
        return match === null ? '' : match[1];&#13;
    };&#13;
&#13;
    /**&#13;
     * Setting poster for video.&#13;
     *&#13;
     * Attribute poster is not used because safari wont reload poster while reloading video.&#13;
     * @param  {HTMLVideoElement} video&#13;
     * @param  {String} posterSource&#13;
     */&#13;
    presenter.addAttributePoster = presenter.metadataLoadedDecorator(function (video, poster) {&#13;
        presenter.$posterWrapper.find("img").remove();&#13;
        var $video = $(video);&#13;
&#13;
        if (poster) {&#13;
            presenter.$posterWrapper.prepend(poster);&#13;
&#13;
            presenter.calculatePosterSize(video, presenter.configuration.addonSize);&#13;
&#13;
            presenter.$posterWrapper.show();&#13;
        } else {&#13;
            presenter.$posterWrapper.hide();&#13;
            $video.attr('poster', '');&#13;
        }&#13;
    });&#13;
&#13;
    presenter.calculatePosterSize = presenter.metadataLoadedDecorator(function (video, toSize) {&#13;
        var $poster = presenter.$posterWrapper.find("img");&#13;
&#13;
        var calculatedVideoSize = presenter.getVideoSize(toSize, video);&#13;
&#13;
        var left = (toSize.width - calculatedVideoSize.width) / 2;&#13;
        var top = (toSize.height - calculatedVideoSize.height) / 2;&#13;
&#13;
        $poster.width(calculatedVideoSize.width);&#13;
        $poster.height(calculatedVideoSize.height);&#13;
        $poster.css({&#13;
            left: left,&#13;
            top: top&#13;
        });&#13;
    });&#13;
&#13;
    presenter.setAltText = function () {&#13;
        var files = presenter.configuration.files;&#13;
        presenter.$view.find('.video-container-mask').text(files[presenter.currentMovie].AlternativeText);&#13;
        presenter.$view.find('.video-container-video').text(files[presenter.currentMovie].AlternativeText);&#13;
    };&#13;
&#13;
    presenter.isOnlineResourceOnly = function() {&#13;
        for (var i = 0; i &lt; presenter.configuration.files.length; i++) {&#13;
            var videoFile = presenter.configuration.files[i];&#13;
            var isMP4Local = videoFile["MP4 video"] &amp;&amp; videoFile["MP4 video"].trim().indexOf("file:/") == 0;&#13;
            var isOggLocal = videoFile["Ogg video"] &amp;&amp; videoFile["Ogg video"].trim().indexOf("file:/") == 0;&#13;
            var isWebMLocal = videoFile["WebM video"] &amp;&amp; videoFile["WebM video"].trim().indexOf("file:/") == 0;&#13;
            if (!isMP4Local &amp;&amp; !isOggLocal &amp;&amp; !isWebMLocal) {&#13;
                return true;&#13;
            }&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVideo = function () {&#13;
        if (!window.navigator.onLine &amp;&amp; presenter.isOnlineResourceOnly()) {&#13;
                presenter.$view.html(presenter.configuration.offlineMessage);&#13;
                return;&#13;
        }&#13;
&#13;
&#13;
        if (presenter.videoObject) {&#13;
            $(presenter.videoObject).unbind("ended");&#13;
            $(presenter.videoObject).unbind("error");&#13;
            $(presenter.videoObject).unbind("canplay");&#13;
&#13;
            presenter.videoObject.pause();&#13;
        }&#13;
&#13;
        presenter.videoObject = presenter.videoContainer.find('video')[0];&#13;
        if (!presenter.videoObject.hasOwnProperty('playing')) {&#13;
            Object.defineProperty(presenter.videoObject, 'playing', {&#13;
               get: function () {&#13;
                   return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
               }&#13;
            });&#13;
        }&#13;
&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
        var $video = $(presenter.videoObject);&#13;
        var files = presenter.configuration.files;&#13;
&#13;
        this.videoContainer.find('source').remove();&#13;
        this.addAttributePoster($video[0], files[presenter.currentMovie].Poster);&#13;
&#13;
        presenter.setAltText();&#13;
        if (presenter.isPreview) {&#13;
            $video.attr('preload', 'none');&#13;
        } else {&#13;
            $video.attr('preload', 'auto');&#13;
            for (var vtype in presenter.videoTypes) {&#13;
                if (files[presenter.currentMovie][this.videoTypes[vtype].name] &amp;&amp; presenter.videoObject.canPlayType(presenter.videoTypes[vtype].type)) {&#13;
                    var source = $('&lt;source&gt;');&#13;
                    source.attr('type', this.videoTypes[vtype].type);&#13;
                    source.attr('src', files[presenter.currentMovie][presenter.videoTypes[vtype].name]);&#13;
                    $video.append(source);&#13;
                }&#13;
            }&#13;
&#13;
            // "ended" event doesn't work on Safari&#13;
            $(presenter.videoObject).unbind('timeupdate');&#13;
            $(presenter.videoObject).bind("timeupdate", function () {&#13;
                onTimeUpdate(this);&#13;
            });&#13;
&#13;
            $(presenter.videoObject).bind("error", function onError() {&#13;
                $(this).unbind("error");&#13;
                presenter.reload();&#13;
                if (presenter.configuration.isFullScreen) {&#13;
                    fullScreenChange();&#13;
                }&#13;
            });&#13;
&#13;
            $(presenter.videoObject).bind("canplay", function onCanPlay() {&#13;
                presenter.isVideoLoaded = true;&#13;
                presenter.callTasksFromDeferredQueue();&#13;
&#13;
                $(this).unbind("canplay");&#13;
&#13;
                if (presenter.areSubtitlesHidden) {&#13;
                    presenter.hideSubtitles();&#13;
                } else {&#13;
                    presenter.showSubtitles();&#13;
                }&#13;
            });&#13;
            // Android devices have problem with loading content.&#13;
            presenter.videoObject.addEventListener("stalled", presenter.onStalledEventHandler, false);&#13;
            presenter.videoObject.load();&#13;
            presenter.metadadaLoaded = false;&#13;
&#13;
            if (files[presenter.currentMovie]['Loop video']) {&#13;
                if (typeof presenter.videoObject.loop == 'boolean') {&#13;
                    presenter.videoObject.loop = true;&#13;
                } else {&#13;
                    $(presenter.videoObject).on('ended', function () {&#13;
                        presenter.currentTime = 0;&#13;
                        presenter.play();&#13;
                    }, false);&#13;
                }&#13;
&#13;
                presenter.isAborted = false;&#13;
&#13;
                $(presenter.videoObject).on('abort', function () {&#13;
                    presenter.isAborted = true;&#13;
                });&#13;
&#13;
                $(presenter.videoObject).on('canplay', function () {&#13;
                    if (presenter.isAborted &amp;&amp; presenter.playTriggered) {&#13;
                        presenter.play();&#13;
                    }&#13;
                });&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    /**&#13;
     * Creates DIV element containing caption text.&#13;
     *&#13;
     * @param caption - used text, top and left properties&#13;
     * @return reference do newly created element&#13;
     */&#13;
    function createCaptionElement(caption, isAudioDescription) {&#13;
        const captionElement = document.createElement('div');&#13;
&#13;
        $(captionElement).addClass('captions');&#13;
        if(isAudioDescription) {&#13;
            $(captionElement).addClass('audio-description');&#13;
        }&#13;
        $(captionElement).addClass(caption.cssClass);&#13;
        const sanitizedText = window.xssUtils.sanitize(caption.text);&#13;
        $(captionElement).html(window.TTSUtils.parsePreviewAltText(sanitizedText));&#13;
        $(captionElement).css({&#13;
            top: caption.top,&#13;
            left: caption.left&#13;
        });&#13;
&#13;
        $(captionElement).css('visibility', 'hidden');&#13;
        $(captionElement).attr('visibility', 'hidden');&#13;
        presenter.$captionsContainer.append(captionElement);&#13;
&#13;
        return captionElement;&#13;
    }&#13;
&#13;
    presenter.convertLinesToCaptions = function (lines) {&#13;
        presenter.captions = [];&#13;
&#13;
        for (var i = 0; i &lt; lines.length; i++) {&#13;
            var parts = lines[i].split('|');&#13;
            if (parts.length == 6) {&#13;
                var caption = {&#13;
                    start: parts[0],&#13;
                    end: parts[1],&#13;
                    top: (StringUtils.endsWith(parts[2], 'px') ? parts[2] : parts[2] + 'px'),&#13;
                    left: (StringUtils.endsWith(parts[3], 'px') ? parts[3] : parts[3] + 'px'),&#13;
                    cssClass: parts[4],&#13;
                    text: parts[5]&#13;
                };&#13;
&#13;
                caption.element = createCaptionElement(caption, false);&#13;
                presenter.captions.push(caption);&#13;
&#13;
                presenter.captionDivs.push(caption.element);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadSubtitles = function () {&#13;
        var subtitlesLoadedDeferred = new $.Deferred(),&#13;
            subtitles = presenter.configuration.files[presenter.currentMovie].Subtitles;&#13;
&#13;
        if (subtitles) {&#13;
            if (StringUtils.startsWith(subtitles, "/file")) {&#13;
                $.get(subtitles, function (data) {&#13;
                    subtitlesLoadedDeferred.resolve(data);&#13;
                });&#13;
            } else {&#13;
                subtitlesLoadedDeferred.resolve(subtitles);&#13;
            }&#13;
&#13;
            presenter.convertLinesToCaptions(Helpers.splitLines(subtitles));&#13;
            $.when(subtitlesLoadedDeferred.promise(), presenter.mathJaxProcessEnded, presenter.pageLoaded).then(function onSubtitlesLoaded(data) {&#13;
                presenter.convertLinesToCaptions(Helpers.splitLines(data));&#13;
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, presenter.captionDivs])();&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadAudioDescription = function () {&#13;
        var descriptionsLoadedDeferred = new $.Deferred(),&#13;
            descriptions = presenter.configuration.files[presenter.currentMovie].Audiodescription;&#13;
&#13;
        if (descriptions) {&#13;
            if (StringUtils.startsWith(descriptions, "/file")) {&#13;
                $.get(descriptions, function (data) {&#13;
                    descriptionsLoadedDeferred.resolve(data);&#13;
                });&#13;
            } else {&#13;
                descriptionsLoadedDeferred.resolve(descriptions);&#13;
            }&#13;
&#13;
            presenter.convertLinesToAudioDescriptions(Helpers.splitLines(descriptions));&#13;
            $.when(descriptionsLoadedDeferred.promise(), presenter.mathJaxProcessEnded, presenter.pageLoaded).then(function onDescriptionsLoaded(data) {&#13;
                presenter.convertLinesToAudioDescriptions(Helpers.splitLines(data));&#13;
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, presenter.descriptionsDivs])();&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.escapeAltText = function(text) {&#13;
        function replacer(match, p1, offset, string) {&#13;
          return '[' + p1.replace(/\|/g, escapedSeparator) + ']';&#13;
        }&#13;
        return text.replace(/\[(.*?)\]/g, replacer);&#13;
    };&#13;
    &#13;
    presenter.unescapeAndConvertAltText = function(text) {&#13;
        function replacer(match, p1, offset, string) {&#13;
          var parts = p1.split(escapedSeparator);&#13;
          if (parts.length === 2) {&#13;
              return '\\alt{' + parts[0] + '|' + parts[1] + '}';&#13;
          }&#13;
          if (parts.length === 3) {&#13;
              return '\\alt{' + parts[0] + '|' + parts[1] + '}[lang ' + parts[2] + ']';&#13;
          }&#13;
          return '[' + parts.join('|') + ']';&#13;
        }&#13;
        return text.replace(/\[(.*?)\]/g, replacer);&#13;
    };&#13;
&#13;
    presenter.convertLinesToAudioDescriptions = function (lines) {&#13;
        presenter.descriptions = [];&#13;
&#13;
        for (var i = 0; i &lt; lines.length; i++) {&#13;
            var line = presenter.escapeAltText(lines[i]);&#13;
            var parts = line.split('|');&#13;
            if (parts.length == 6) {&#13;
                var description = {&#13;
                    start: parts[0],&#13;
                    top: (StringUtils.endsWith(parts[2], 'px') ? parts[1] : parts[1] + 'px'),&#13;
                    left: (StringUtils.endsWith(parts[3], 'px') ? parts[2] : parts[2] + 'px'),&#13;
                    cssClass: parts[3],&#13;
                    langTag: parts[4],&#13;
                    text: presenter.unescapeAndConvertAltText(parts[5])&#13;
                };&#13;
&#13;
                description.element = createCaptionElement(description, true);&#13;
                presenter.descriptions.push(description);&#13;
&#13;
                presenter.descriptionsDivs.push(description.element);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.calculateVideoContainerHeight = function ($container, moduleHeight) {&#13;
        var borderBottom = $container.css('border-bottom-width'),&#13;
            borderTop = $container.css('border-top-width'),&#13;
            marginTop = $container.css('margin-top'),&#13;
            marginBottom = $container.css('margin-bottom');&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(borderTop)) borderTop = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(borderBottom)) borderBottom = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(marginTop)) marginTop = "0px";&#13;
        if (ModelValidationUtils.isStringEmpty(marginBottom)) marginBottom = "0px";&#13;
&#13;
        return moduleHeight - parseInt(borderBottom, 10) -&#13;
            parseInt(borderTop, 10) -&#13;
            parseInt(marginTop, 10) -&#13;
            parseInt(marginBottom, 10);&#13;
    };&#13;
&#13;
    presenter.setDimensions = function () {&#13;
        var video = presenter.getVideo();&#13;
&#13;
        presenter.videoContainer.css('height', presenter.calculateVideoContainerHeight(presenter.videoContainer, presenter.configuration.height) + 'px');&#13;
&#13;
        video.css("width", "100%")&#13;
            .attr('height', presenter.videoContainer.height());&#13;
&#13;
        presenter.configuration.dimensions = {&#13;
            video: {&#13;
                width: $(video).width(),&#13;
                height: $(video).height()&#13;
            },&#13;
            container: {&#13;
                width: $(presenter.videoContainer).width(),&#13;
                height: $(presenter.videoContainer).height()&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.showSubtitles = function () {&#13;
        presenter.$view.find('.captions:not(.audio-description)').show();&#13;
        presenter.areSubtitlesHidden = false;&#13;
    };&#13;
&#13;
    presenter.hideSubtitles = function () {&#13;
        presenter.$view.find('.captions:not(.audio-description)').hide();&#13;
        presenter.areSubtitlesHidden = true;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'jumpTo': presenter.jumpToCommand,&#13;
            'jumpToID': presenter.jumpToIDCommand,&#13;
            'seek': presenter.seekCommand,&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'pause': presenter.pause,&#13;
            'showSubtitles': presenter.showSubtitles,&#13;
            'hideSubtitles': presenter.hideSubtitles,&#13;
            'showAudioDescription': presenter.showAudioDescription,&#13;
            'hideAudioDescription': presenter.hideAudioDescription,&#13;
            'setVideoURL': presenter.setVideoURLCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVideoURLCommand = function (params) {&#13;
        presenter.setVideoURL(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter._setVideoURL = function (url, index) {&#13;
        var key;&#13;
        var videoFile;&#13;
        var mapper = {&#13;
            "oggFormat": "Ogg video",&#13;
            "mp4Format": "MP4 video",&#13;
            "webMFormat": "WebM video",&#13;
            "poster": "Poster",&#13;
            "subtitles": "Subtitles",&#13;
            "id": "ID",&#13;
            "altText": "AlternativeText",&#13;
            "loop": "Loop video"&#13;
        };&#13;
&#13;
        if (index &gt;= presenter.configuration.files.length) {&#13;
            return false;&#13;
        }&#13;
&#13;
        videoFile = presenter.configuration.files[index];&#13;
&#13;
        for (key in mapper) {&#13;
            if (mapper.hasOwnProperty(key)) {&#13;
                videoFile[mapper[key]] = url[key] || videoFile[mapper[key]];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.addedVideoURLS[index] = {&#13;
            url: url,&#13;
            index: index&#13;
        };&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    /*&#13;
        Set video url and jump to this video.&#13;
        index: video index counted from 0&#13;
        url: object {&#13;
            "oggFormat": "Ogg video",&#13;
            "mp4Format": "MP4 video",&#13;
            "webMFormat": "WebM video",&#13;
            "poster": "Poster",&#13;
            "subtitles": "Subtitles",&#13;
            "id": "ID",&#13;
            "altText": "AlternativeText",&#13;
            "loop": "Loop video"&#13;
        }&#13;
    */&#13;
    presenter.setVideoURL = function (url, index) {&#13;
        index = (index || 1) - 1;&#13;
&#13;
        if (presenter._setVideoURL(url, index)) {&#13;
            presenter.jumpTo(index + 1);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
&#13;
        var $captions = presenter.$view.find('.captions');&#13;
        if (!isVisible) {&#13;
            $captions.each(function hideVisibility() {&#13;
                $(this).css('visibility', 'hidden');&#13;
            });&#13;
        } else {&#13;
            $captions.each(function showVisibility() {&#13;
                if ($(this).attr('visibility') === 'visible') {&#13;
                    $(this).css('visibility', 'visible');&#13;
                }&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.seek = deferredSyncQueue.decorate(function (seconds) {&#13;
        presenter.videoObject.currentTime = seconds;&#13;
        if (seconds &gt; presenter.videoObject.duration) {&#13;
            presenter.posterPlayButton.removeClass('video-poster-pause');&#13;
        }&#13;
    });&#13;
&#13;
    presenter.seekFromPercent = function (percent) {&#13;
        presenter.seek(presenter.videoObject.duration * (percent / 100));&#13;
    };&#13;
&#13;
    presenter.seekCommand = function (params) {&#13;
        presenter.seek(params[0]);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        if (presenter.isCurrentlyVisible) return;&#13;
        if (presenter.VIDEO_STATE.PLAYING == presenter.videoState) {&#13;
            presenter.videoObject.play();&#13;
        }&#13;
        presenter.isCurrentlyVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        if (!presenter.isCurrentlyVisible) return;&#13;
&#13;
        if (presenter.VIDEO_STATE.PLAYING == presenter.videoState) {&#13;
            presenter.videoObject.pause();&#13;
            presenter.videoState = presenter.VIDEO_STATE.PLAYING;&#13;
            presenter.isHideExecuted = true;&#13;
        }&#13;
        presenter.isCurrentlyVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.jumpTo = function (movieNumber) {&#13;
        var newMovie = parseInt(movieNumber, 10) - 1;&#13;
        if (0 &lt;= newMovie &amp;&amp; newMovie &lt; presenter.configuration.files.length) {&#13;
            presenter.currentMovie = newMovie;&#13;
            presenter.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToCommand = function (params) {&#13;
        presenter.jumpTo(params[0]);&#13;
    };&#13;
&#13;
    presenter.jumpToID = function (id) {&#13;
        for (var i = 0; i &lt; presenter.configuration.files.length; i++) {&#13;
            if (id === presenter.configuration.files[i].ID) {&#13;
                presenter.jumpTo(i + 1);  // Video numbers are counted from 1 to n&#13;
                break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToIDCommand = function (params) {&#13;
        presenter.jumpToID(params[0]);&#13;
    };&#13;
&#13;
    presenter.onStalledEventHandler = function () {&#13;
        var video = this;&#13;
&#13;
        if (video.readyState &gt;= 2) {&#13;
            presenter.isVideoLoaded = true;&#13;
            presenter.callTasksFromDeferredQueue();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.callTasksFromDeferredQueue = function () {&#13;
        deferredSyncQueue.resolve();&#13;
    };&#13;
&#13;
    presenter.removeWaterMark = function () {&#13;
        presenter.$view.find('.poster-wrapper').hide();&#13;
    };&#13;
&#13;
    presenter.showWaterMark = function () {&#13;
        presenter.$view.find(".poster-wrapper").show();&#13;
    };&#13;
&#13;
    presenter.loadVideoAtPlayOnMobiles = function () {&#13;
        if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            if (!presenter.isVideoLoaded) {&#13;
                presenter.videoObject.load();&#13;
                presenter.metadadaLoaded = false;&#13;
            }&#13;
        }&#13;
        if (!presenter.isVideoLoaded) {&#13;
            presenter.videoObject.load();&#13;
            presenter.metadadaLoaded = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addClassToView = function (className) {&#13;
        presenter.$view.addClass(className);&#13;
    };&#13;
&#13;
    presenter.removeClassFromView = function (className) {&#13;
        presenter.$view.removeClass(className);&#13;
    };&#13;
&#13;
//    presenter.play = deferredSyncQueue.decorate(function () {&#13;
//        presenter.removeWaterMark();&#13;
//        presenter.hidePlayButton();&#13;
//        presenter.loadVideoAtPlayOnMobiles();&#13;
//&#13;
//        if (presenter.videoObject.paused) {&#13;
//            presenter.videoObject.play();&#13;
//            presenter.addClassToView('playing');&#13;
//        }&#13;
//        presenter.usedStop = false;&#13;
//        presenter.playTriggered = true;&#13;
//    });&#13;
&#13;
    presenter.play = deferredSyncQueue.decorate(function () {&#13;
        presenter.sendOnPlayingConfirmEvent();&#13;
    });&#13;
&#13;
     presenter.DoPlay = deferredSyncQueue.decorate(function () {&#13;
        presenter.removeWaterMark();&#13;
        presenter.hidePlayButton();&#13;
        presenter.loadVideoAtPlayOnMobiles();&#13;
&#13;
        if (presenter.videoObject.paused) {&#13;
            presenter.videoObject.play();&#13;
            presenter.addClassToView('playing');&#13;
        }&#13;
        presenter.usedStop = false;&#13;
        presenter.playTriggered = true;&#13;
    });&#13;
&#13;
    presenter.stop = deferredSyncQueue.decorate(function () {&#13;
            presenter.showPlayButton();&#13;
            presenter.seek(0);&#13;
            presenter.prevTime = -0.001;&#13;
            presenter.videoObject.pause();&#13;
            presenter.usedStop = true;&#13;
            if(presenter.descriptions.length &gt; 0){&#13;
                setAudioDescriptionDisabled();&#13;
            }&#13;
            presenter.removeClassFromView('playing');&#13;
            presenter.posterPlayButton.removeClass('video-poster-pause');&#13;
            presenter.sendOnStopEvent();&#13;
    });&#13;
&#13;
    presenter.pause = deferredSyncQueue.decorate(function () {&#13;
        if (!presenter.videoObject.paused) {&#13;
            presenter.posterPlayButton.addClass('video-poster-pause');&#13;
            presenter.showPlayButton();&#13;
            presenter.videoObject.pause();&#13;
            presenter.removeClassFromView('playing');&#13;
        }&#13;
        presenter.usedStop = false;&#13;
         presenter.sendOnPauseEvent();&#13;
    });&#13;
&#13;
    presenter.previous = function () {&#13;
        if (presenter.currentMovie &gt; 0) {&#13;
            presenter.currentMovie--;&#13;
            presenter.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function () {&#13;
        if (presenter.currentMovie &lt; presenter.configuration.files.length - 1) {&#13;
            presenter.currentMovie++;&#13;
            presenter.reload();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setVolume = function (percent) {&#13;
        presenter.videoObject.volume = percent / 100;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.configuration.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
        presenter.videoState = presenter.VIDEO_STATE.STOPPED;&#13;
        presenter.videoObject.currentTime = 0;&#13;
        presenter.currentMovie = 0;&#13;
        if (presenter.metadadaLoaded) {&#13;
            presenter.videoObject.pause();&#13;
        }&#13;
&#13;
        presenter.reload();&#13;
&#13;
        if (presenter.configuration.shouldHideSubtitles) {&#13;
            presenter.hideSubtitles();&#13;
        } else {&#13;
            presenter.showSubtitles();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlaybackRate = function (playbackRate) {&#13;
        presenter.videoObject.playbackRate = parseFloat(playbackRate);&#13;
    }&#13;
&#13;
    presenter.getVideo = function () {&#13;
        return presenter.videoContainer.find('video:first');&#13;
    };&#13;
&#13;
    function generateTransformDict(scaleX, scaleY) {&#13;
        var scale = "scale(" + scaleX + "," + scaleY + ")";&#13;
        return {&#13;
            'transform': scale,&#13;
            '-ms-transform': scale,&#13;
            '-webkit-transform': scale,&#13;
            '-o-transform': scale,&#13;
            '-moz-transform': scale,&#13;
            "-webkit-transform-origin": "top left",&#13;
            "-ms-transform-origin": "top left",&#13;
            "transform-origin": "top left"&#13;
        }&#13;
    }&#13;
&#13;
    function requestFullscreen($element) {&#13;
        var DomElement = $element.get(0);&#13;
&#13;
        var requestMethod = DomElement.requestFullscreen || DomElement.mozRequestFullScreen ||&#13;
            DomElement.msRequestFullscreen || DomElement.webkitRequestFullScreen ||&#13;
            DomElement.webkitEnterFullscreen || null;&#13;
        if (requestMethod) {&#13;
            requestMethod.call(DomElement);&#13;
        }&#13;
        return requestMethod;&#13;
    }&#13;
&#13;
    function exitFullscreen() {&#13;
        var exitMethod = document.exitFullscreen || document.mozCancelFullScreen ||&#13;
            document.msExitFullscreen || document.webkitExitFullscreen || null;&#13;
&#13;
        if (exitMethod) {&#13;
            exitMethod.call(document);&#13;
        }&#13;
    }&#13;
&#13;
    function isVideoInFullscreen() {&#13;
        if (document.fullscreenElement&#13;
            || document.mozFullScreenElement&#13;
            || document.webkitFullscreenElement&#13;
            || document.msFullscreenElement&#13;
            || document.webkitCurrentFullScreenElement&#13;
            || document.fullscreen&#13;
            || document.webkitIsFullScreen&#13;
            || document.mozFullScreen) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return false;&#13;
    }&#13;
&#13;
    presenter.addTabindex = function (isTabindexEnabled) {&#13;
        var value = isTabindexEnabled ? "0" : "-1";&#13;
        presenter.videoContainer.attr("tabindex", value);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.playerController.isWCAGOn()) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    function speakWithCallback (data, callbackFunction) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts) {&#13;
            tts.speakWithCallback(data, callbackFunction);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isWCAGOn = function(isWCAGOn) {&#13;
        //This method has been added to enable the addon's detection by the autofill option of TTS&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>