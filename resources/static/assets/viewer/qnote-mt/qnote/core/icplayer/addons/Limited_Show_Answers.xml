<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Limited_Show_Answers" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isLocalized="true" name="Text" nameLabel="Limited_Show_Answers_property_text" type="string"/>
        <property isLocalized="true" name="Text selected" nameLabel="Limited_Show_Answers_property_text_selected" type="string"/>
        <property name="Increment check counter" nameLabel="Limited_Show_Answers_property_increment_check_counter" type="boolean"/>
        <property name="Increment mistake counter" nameLabel="Limited_Show_Answers_property_increment_mistake_counter" type="boolean"/>
        <property name="worksWith" nameLabel="Limited_Show_Answers_property_works_with" type="text"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="choice_speech_texts" type="staticlist">

            <property name="Selected" nameLabel="Limited_Show_Answers_speech_text_choice_item_selected" type="staticrow">
                <property name="Selected" nameLabel="Limited_Show_Answers_speech_text_choice_item_selected" type="string"/>
            </property>

            <property name="Block edit" nameLabel="Limited_Show_Answers_speech_text_check_answers_button_edit_block" type="staticrow">
                <property name="Block edit" nameLabel="Limited_Show_Answers_speech_text_check_answers_button_edit_block" type="string"/>
            </property>

            <property name="No block edit" nameLabel="Limited_Show_Answers_speech_text_check_answers_button_no_edit_block" type="staticrow">
                <property name="No block edit" nameLabel="Limited_Show_Answers_speech_text_check_answers_button_no_edit_block" type="string"/>
            </property>

        </property>
    </model>
<css>.limited-show-answers-wrapper,&#13;
.limited-show-answers-wrapper .limited-show-answers-container,&#13;
.limited-show-answers-wrapper .limited-show-answers-container .limited-show-answers-button {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.limited-show-answers-wrapper .limited-show-answers-container .limited-show-answers-button {&#13;
    background: url('resources/show-answers-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="limited-show-answers-wrapper"&gt;&#13;
    &lt;div class="limited-show-answers-container"&gt;&#13;
        &lt;div class="limited-show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="limited-show-answers-wrapper"&gt;&#13;
    &lt;div class="limited-show-answers-container"&gt;&#13;
        &lt;div class="limited-show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLimited_Show_Answers_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    var isWCAGOn = false;&#13;
&#13;
    function getSpeechTextProperty(rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function getTextVoiceObject(text, lang) {&#13;
        return {&#13;
            text: text,&#13;
            lang: lang&#13;
        };&#13;
    }&#13;
&#13;
    presenter.EVENTS = {&#13;
        SHOW_ANSWERS: 'LimitedShowAnswers',&#13;
        HIDE_ANSWERS: 'LimitedHideAnswers'&#13;
    };&#13;
&#13;
    presenter.EVENTS_MAP = {&#13;
        LimitedShowAnswers: "ShowAnswers",&#13;
        LimitedHideAnswers: "HideAnswers"&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keycode) {&#13;
        if (keycode === 13) {&#13;
            presenter.$button.click();&#13;
            if (isWCAGOn) {&#13;
                if (presenter.configuration.isSelected) {&#13;
                    speak([getTextVoiceObject(presenter.speechTexts.editBlock)]);&#13;
                } else {&#13;
                    speak([getTextVoiceObject(presenter.speechTexts.noEditBlock)]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (eventName) {&#13;
        if(!presenter.eventBus) return;&#13;
        var eventData = {&#13;
            'value': eventName,&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': JSON.stringify(presenter.configuration.worksWithModulesList)&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
        if (eventName === "LimitedShowAnswers") {&#13;
            presenter.eventBus.sendEvent('LimitedShowAnswers', eventData);&#13;
        } else if (eventName === "LimitedHideAnswers") {&#13;
            presenter.eventBus.sendEvent('LimitedHideAnswers', eventData);&#13;
        }&#13;
&#13;
        presenter.sendEventToWorksWithModules(eventName);&#13;
    };&#13;
&#13;
    presenter.sendEventToWorksWithModules = function (eventName) {&#13;
        presenter.configuration.worksWithModulesList.forEach(function (moduleId) {&#13;
            var module = player.getPlayerServices().getModule(moduleId);&#13;
            if (module &amp;&amp; module.onEventReceived) {&#13;
                try {&#13;
                    module.onEventReceived(presenter.EVENTS_MAP[eventName]);&#13;
                }catch (e) {&#13;
                    console.error(e);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.getWorksWithModulesList = function () {&#13;
        return presenter.configuration.worksWithModulesList.slice();&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
&#13;
        var modelValidator = new ModelValidator();&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.utils.FieldRename("Is Visible", "isVisible", ModelValidators.Boolean("isVisible")),&#13;
            ModelValidators.utils.FieldRename("Text", "text", ModelValidators.String("text", {default: ""})),&#13;
            ModelValidators.utils.FieldRename("Text selected", "textSelected", ModelValidators.String("textSelected", {default: ""})),&#13;
            ModelValidators.utils.FieldRename("ID", "addonID", ModelValidators.DumbString("addonID")),&#13;
            ModelValidators.utils.FieldRename("Increment check counter", "enableCheckCounter", ModelValidators.Boolean("enableCheckCounter")),&#13;
            ModelValidators.utils.FieldRename("Increment mistake counter", "enableMistakeCounter", ModelValidators.Boolean("enableMistakeCounter")),&#13;
            ModelValidators.utils.FieldRename("Is Tabindex Enabled", "isTabindexEnabled", ModelValidators.Boolean("isTabindexEnabled")),&#13;
            ModelValidators.String("worksWith", {default: ""})&#13;
        ]);&#13;
&#13;
        if (validatedModel.isValid) {&#13;
            validatedModel.value.isSelected = false;&#13;
            validatedModel.value.isEnabled = true;&#13;
            validatedModel.value.worksWithModulesList = validatedModel.value.worksWith.split("\n")&#13;
                .map(function (value) {&#13;
                    return value.trim();&#13;
                })&#13;
                .filter(function (value) {&#13;
                    return value !== "";&#13;
                })&#13;
                .filter(function (value, index, self) { //Unique elements&#13;
                    return self.indexOf(value) === index;&#13;
                });&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            selected: 'Selected',&#13;
            editBlock: 'Exercise edition is blocked',&#13;
            noEditBlock: 'Exercise edition is not blocked'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            selected: getSpeechTextProperty(speechTexts['Selected']['Selected'], presenter.speechTexts.selected),&#13;
            editBlock: getSpeechTextProperty(speechTexts['Block edit']['Block edit'], presenter.speechTexts.editBlock),&#13;
            noEditBlock: getSpeechTextProperty(speechTexts['No block edit']['No block edit'], presenter.speechTexts.noEditBlock)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.handleClick = function () {&#13;
        var text, eventName;&#13;
&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
&#13;
        if (presenter.configuration.isSelected) {&#13;
            text = presenter.configuration.textSelected;&#13;
            eventName = presenter.EVENTS.SHOW_ANSWERS;&#13;
            presenter.$wrapper.addClass('selected');&#13;
&#13;
            if (presenter.configuration.enableCheckCounter) {&#13;
                presenter.playerController.getCommands().incrementCheckCounter();&#13;
            }&#13;
&#13;
            if (presenter.configuration.enableMistakeCounter) {&#13;
                presenter.playerController.getCommands().increaseMistakeCounter();&#13;
            }&#13;
        } else {&#13;
            text = presenter.configuration.text;&#13;
            eventName = presenter.EVENTS.HIDE_ANSWERS;&#13;
            presenter.$wrapper.removeClass('selected');&#13;
        }&#13;
&#13;
        presenter.$button.text(text);&#13;
        presenter.sendEvent(eventName);&#13;
    };&#13;
&#13;
    presenter.connectClickAction = function () {&#13;
        presenter.$button.on('click', function (eventData) {&#13;
            eventData.stopPropagation();&#13;
            if (presenter.configuration.isEnabled)&#13;
                presenter.handleClick();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.connectKeyDownAction = function () {&#13;
        presenter.$view.on('keydown', function (eventData) {&#13;
            if (eventData.which === 13) {&#13;
                eventData.stopPropagation();&#13;
                presenter.handleClick();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model).value;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.$button = presenter.$view.find('.limited-show-answers-button');&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper = presenter.$view.find('.limited-show-answers-wrapper');&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            presenter.$wrapper.attr('tabindex', '0');&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
            presenter.connectClickAction();&#13;
            presenter.connectKeyDownAction();&#13;
            presenter.eventBus.addEventListener('ShowAnswers', presenter);&#13;
            presenter.eventBus.addEventListener('HideAnswers', presenter);&#13;
            presenter.eventBus.addEventListener('LimitedHideAnswers', presenter);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.presenterLogic(view, model, false);&#13;
&#13;
        presenter.view.addEventListener("DOMNodeRemoved", presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        presenter.$button.off();&#13;
        presenter.$view.off();&#13;
&#13;
        presenter.$button = null;&#13;
        presenter.$wrapper = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.isEventSourceLocal = function (eventData) {&#13;
        return eventData.source === presenter.configuration.addonID;&#13;
    }&#13;
&#13;
    presenter.eventItemsContainAllWorksWithModules = function (eventDataItems) {&#13;
        const moduleList = presenter.configuration.worksWithModulesList;&#13;
        for (let i in moduleList) {&#13;
            if (!JSON.parse(eventDataItems).includes(moduleList[i])) {&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.handleLimitedHideAnswers = function (eventName, eventData) {&#13;
        if (presenter.isEventSourceLocal(eventData)) return;&#13;
&#13;
        if (eventData.item) {&#13;
            if (eventData.item.includes(presenter.configuration.addonID)) {&#13;
                presenter.sendEvent(eventName);&#13;
                presenter.reset();&#13;
            } else if (presenter.eventItemsContainAllWorksWithModules(eventData.item)) {&#13;
                presenter.reset();&#13;
            }&#13;
        }&#13;
&#13;
        for (let i in eventData) {&#13;
            if (eventData.hasOwnProperty(i)) {&#13;
                const eventModule = eventData[i];&#13;
                if (presenter.configuration.worksWithModulesList.includes(eventModule)) {&#13;
                    presenter.sendEvent(eventName);&#13;
                    presenter.reset();&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName === "LimitedHideAnswers") {&#13;
            presenter.handleLimitedHideAnswers(eventName, eventData);&#13;
        }&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.reset();&#13;
        }&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.$button.text(presenter.configuration.textSelected);&#13;
            presenter.$wrapper.removeClass('disabled');&#13;
            presenter.$wrapper.addClass('selected');&#13;
            presenter.configuration.isSelected = true;&#13;
            presenter.configuration.isEnabled = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            "show": presenter.show,&#13;
            "hide": presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        presenter.setVisibility(JSON.parse(state).isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.$button.text(presenter.configuration.text);&#13;
        presenter.$wrapper.removeClass('selected');&#13;
        presenter.$wrapper.removeClass("disabled");&#13;
        presenter.configuration.isEnabled = true;&#13;
        presenter.configuration.isSelected = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.reset();&#13;
        presenter.$wrapper.addClass("selected");&#13;
        presenter.$wrapper.addClass("disabled");&#13;
        presenter.configuration.isEnabled = false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.reset();&#13;
    };&#13;
&#13;
    presenter.getTitlePostfix = function () {&#13;
        if (presenter.configuration.isSelected) {&#13;
            return presenter.speechTexts.selected;&#13;
        } else {&#13;
            return ''&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>