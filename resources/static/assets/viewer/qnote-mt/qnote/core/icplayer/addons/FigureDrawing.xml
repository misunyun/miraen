<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="FigureDrawing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="3DGrid" nameLabel="FigureDrawing_property_3d_grid" type="boolean"/>
        <property name="ShowGrid" nameLabel="FigureDrawing_property_show_grid" type="boolean"/>
        <property name="Grid" nameLabel="FigureDrawing_property_grid_step" type="string"/>
        <property name="Radius" nameLabel="FigureDrawing_property_point_radius" type="string"/>
        <property name="StartingLines" nameLabel="FigureDrawing_property_starting_lines" type="text"/>
        <property name="Answer" nameLabel="FigureDrawing_property_answer" type="text"/>
        <property name="IsActivity" nameLabel="FigureDrawing_property_is_activity" type="boolean"/>
        <property name="IsDisabled" nameLabel="FigureDrawing_property_is_disabled" type="boolean"/>
        <property name="Coloring" nameLabel="FigureDrawing_property_coloring" type="boolean"/>
        <property name="DefColor" nameLabel="FigureDrawing_property_default_color" type="string"/>
        <property name="StartingColors" nameLabel="FigureDrawing_property_starting_colors" type="text"/>
        <property name="AnswerColors" nameLabel="FigureDrawing_property_answer_colors" type="list">
            <property name="Figure" nameLabel="FigureDrawing_property_figure" type="string"/>
            <property name="Color" nameLabel="FigureDrawing_property_point_and_color" type="string"/>
        </property>
        <property name="BlockColoring" nameLabel="FigureDrawing_property_block_coloring" type="boolean"/>
        <property name="ShowAns" nameLabel="FigureDrawing_property_show_answers_in_editor" type="boolean"/>
    </model>
<css>.figure {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
.figure.disabled{&#13;
}&#13;
.canvas {&#13;
    position:absolute;&#13;
}&#13;
.chart{&#13;
    position:absolute;&#13;
}&#13;
.chart.disabled{&#13;
    background: rgba(0,0,0,0.1);&#13;
}&#13;
.point {&#13;
    fill: black;&#13;
    stroke-width: 20px;&#13;
    stroke: #A52A2A;&#13;
    stroke-opacity: 0;&#13;
    cursor:pointer;&#13;
}&#13;
&#13;
.point.selected {&#13;
    fill: #0099CC;&#13;
}&#13;
&#13;
.grid {&#13;
    stroke:#7A8B8B;&#13;
    stroke-width:1;&#13;
    stroke-dasharray: 5, 5;&#13;
    stroke-linecap: round;&#13;
}&#13;
.line {&#13;
    stroke:#05B8CC;&#13;
    stroke-width:4;&#13;
    stroke-linecap: round;&#13;
}&#13;
.line.nonremovable {&#13;
    stroke: black;&#13;
}&#13;
.line.correct{&#13;
    stroke: green;&#13;
}&#13;
.line.wrong{&#13;
    stroke: red;&#13;
}&#13;
.line.show-answers{&#13;
    stroke: gray;&#13;
}&#13;
.templine {&#13;
    stroke:#4C92FD;&#13;
    stroke-width:4;&#13;
    stroke-linecap: round;&#13;
}&#13;
.figure .icon-container {&#13;
    border: 1px solid #111111;&#13;
    border-radius: 50%;&#13;
    font-size: 10px;&#13;
    height: 6px;&#13;
    line-height: 6px;&#13;
    padding: 2px;&#13;
    position: absolute;&#13;
    width: 6px;&#13;
    font-weight: bold;&#13;
}&#13;
.coordinates {&#13;
    width: 35px;&#13;
    height: 22px;&#13;
    border: 1px solid #696969;&#13;
    border-radius: 3px;&#13;
    position: absolute;&#13;
    top: -34px;&#13;
    left: 0px;&#13;
    font-size: 9px;&#13;
    padding: 5px;&#13;
    line-height: 11px;&#13;
}&#13;
.figure .icon-container.wrong {&#13;
    background-color: #ff5599;&#13;
}&#13;
.figure .icon-container.correct {&#13;
    background-color: #55ff99;&#13;
}&#13;
.figure .icon-container.correct:after {&#13;
    content: 'v';&#13;
}&#13;
.figure .icon-container.wrong:after {&#13;
    content: 'x';&#13;
}&#13;
.figure.deflines:before {&#13;
    content: 'Starting lines are incorrect!';&#13;
}&#13;
.figure.answerlines:before {&#13;
    content: 'Answer lines are incorrect!';&#13;
}&#13;
.figure.radius:before {&#13;
    content: 'Radius is incorrect!';&#13;
}&#13;
.figure.nonremanswer:before {&#13;
    content: 'At least one of the answers is a nonremovable starting line!';&#13;
}&#13;
.figure.colorerror:before {&#13;
    content: 'Error in the color definition!';&#13;
}&#13;
.figure.startingcolor:before {&#13;
    content: 'Error in the starting color definition!';&#13;
}&#13;
.figure.answerfigure:before {&#13;
    content: 'Error in the answer figure definition!';&#13;
}&#13;
.figure.grid:before {&#13;
    content: 'Enter a correct grid step!';&#13;
}&#13;
.figure.defcolorerror:before {&#13;
    content: 'Enter a correct default color!';&#13;
}&#13;
</css><view>&lt;div class="figure"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="figure"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonFigureDrawing_create(){&#13;
    var presenter = function(){}&#13;
    presenter.error = false;&#13;
    presenter.isEraser = false;&#13;
    presenter.isStarted = false;&#13;
    presenter.isErrorMode = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.wasShowAnswersActive = false;&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAllOK'.toLowerCase():&#13;
                presenter.isAllOK();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
            case 'setColor'.toLowerCase():&#13;
                presenter.setColor(params[0]);&#13;
                break;&#13;
            case 'setDrawMode'.toLowerCase():&#13;
                presenter.setDrawMode();&#13;
                break;&#13;
            case 'setColorMode'.toLowerCase():&#13;
                presenter.setColorMode();&#13;
                break;&#13;
            case 'setEraserOn'.toLowerCase():&#13;
                presenter.setEraserOn();&#13;
                break;&#13;
            case 'allLinesDrawn'.toLowerCase():&#13;
                presenter.allLinesDrawn();&#13;
                break;&#13;
            case 'isDrawn'.toLowerCase():&#13;
                presenter.isDrawn(params[0],params[1],params[2],params[3]);&#13;
                break;&#13;
            case 'countDrawnLines'.toLowerCase():&#13;
                presenter.countDrawnLines();&#13;
                break;&#13;
            case 'markAsCorrect'.toLowerCase():&#13;
                presenter.markAsCorrect();&#13;
                break;&#13;
            case 'markAsWrong'.toLowerCase():&#13;
                presenter.markAsWrong();&#13;
                break;&#13;
            case 'markAsNeutral'.toLowerCase():&#13;
                presenter.markAsNeutral();&#13;
                break;&#13;
        }&#13;
    };&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
        presenter.$view.find('.figure').addClass('correct');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').addClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsNeutral = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.isDrawn = function(column1, row1, column2, row2) {&#13;
        var firstRow, firstColumn, secondRow, secondColumn, col1, col2, ro1, ro2, i;&#13;
        if (column1 &lt; column2 || (column1 == column2 &amp;&amp; row1 &lt; row2)) {&#13;
            firstColumn = column1;&#13;
            firstRow = row1;&#13;
            secondColumn = column2;&#13;
            secondRow = row2;&#13;
        } else {&#13;
            firstColumn = column2;&#13;
            firstRow = row2;&#13;
            secondColumn = column1;&#13;
            secondRow = row1;&#13;
        }&#13;
        var steps = Math.abs(gcd(secondRow-firstRow, secondColumn-firstColumn));&#13;
        if (presenter.grid3D &amp;&amp; (secondRow-firstRow+secondColumn-firstColumn)/steps %2 != 0) steps = 0.5 * steps;&#13;
        var stepX = parseInt((secondColumn-firstColumn)/steps);&#13;
        var	stepY = parseInt((secondRow-firstRow)/steps);&#13;
        col1 = firstColumn;&#13;
        ro1 = firstRow;&#13;
        for (i = 1; i &lt;= steps; i++) {&#13;
            col2 = col1 + stepX;&#13;
            ro2 = ro1 + stepY;&#13;
            line = presenter.$view.find('#line_'+col1+'_'+ro1+'_'+col2+'_'+ro2);&#13;
            if (line.length &lt;= 0) {&#13;
                return false&#13;
            }&#13;
            col1 = col2;&#13;
            ro1 = ro2;&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.countDrawnLines = function() {&#13;
        var numberOfLines = presenter.$view.find('.line').not('.nonremovable').length;&#13;
        return numberOfLines;&#13;
    };&#13;
&#13;
    presenter.allLinesDrawn = function() {&#13;
        var answer = true;&#13;
        if (presenter.activity &amp;&amp; !presenter.error) {&#13;
            var i, j, line, line2, color, counter = 0, errorCounter = presenter.$view.find('.line').not('.nonremovable').length, numberOfAnswers = presenter.AnswerLines.length;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0) {&#13;
                    counter++;&#13;
                    errorCounter--;&#13;
                }&#13;
            }&#13;
            if (counter != numberOfAnswers || errorCounter != 0)&#13;
                answer = false;&#13;
        };&#13;
        return answer;&#13;
    };&#13;
    presenter.setDrawMode = function() {&#13;
        presenter.drawingMode = true;&#13;
        presenter.$view.find('.figure').addClass('drawing_mode');&#13;
        presenter.$view.find('.figure').removeClass('coloring_mode');&#13;
    };&#13;
    presenter.setColorMode = function() {&#13;
        if (presenter.coloring &amp;&amp; (!presenter.blockColoring || presenter.allLinesDrawn() || !presenter.drawingMode)) {&#13;
            presenter.drawingMode = false;&#13;
            presenter.$view.find('.figure').addClass('coloring_mode');&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            presenter.$view.find('.figure').removeClass('drawing_mode');&#13;
            presenter.selected.isSelected = false;&#13;
        }&#13;
    };&#13;
    presenter.setColor = function(color) {&#13;
        presenter.isEraser = false;&#13;
        var color = validateColor(color,false,false);&#13;
        if (color != false)&#13;
            presenter.currentColor = color;&#13;
    };&#13;
    presenter.setEraserOn = function() {&#13;
        presenter.isEraser = true;&#13;
        presenter.currentColor = [255,255,255,0];&#13;
    };&#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return presenter.isStarted;&#13;
    };&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        return ((presenter.getScore() == presenter.getMaxScore()) &amp;&amp; (presenter.getErrorCount() === 0));&#13;
    };&#13;
    presenter.disable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (!(presenter.$view.find('.disabled').length &gt; 0)) {&#13;
            presenter.disabled = true;&#13;
            presenter.$view.find('.figure').addClass('disabled');&#13;
            presenter.$view.find('.chart').addClass('disabled');&#13;
        }&#13;
    };&#13;
    presenter.enable = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.disabled = false;&#13;
        presenter.$view.find('.disabled').removeClass('disabled');&#13;
    };&#13;
    presenter.hide = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.show = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (presenter.coloring) presenter.$view.find('.canvas').css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else&#13;
            presenter.hide();&#13;
    };&#13;
    function validateRadius(radius){&#13;
        if (radius == '' || radius == 0) {&#13;
            return 5;&#13;
        } else if (radius &gt; 0) {&#13;
            return parseInt(radius)&#13;
        } else {&#13;
            presenter.error = 'radius';&#13;
            return 5;&#13;
        }&#13;
    };&#13;
    function validateStartingColor(params){&#13;
        var answer = [], point;&#13;
        if (params == '' || params == undefined) return '';&#13;
        var pointsData = Helpers.splitLines(params);&#13;
        var re = /^\d+;\d+;\d{1,3} \d{1,3} \d{1,3}$/;&#13;
        var testing;&#13;
        $.each(pointsData, function() {&#13;
            if (this != '') {&#13;
                testing = re.test(this);&#13;
                if (!testing) {&#13;
                    presenter.error = 'startingcolor';&#13;
                    return '';&#13;
                }&#13;
                point = this.split(';');&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || point[0] &lt; 0 || point[1] &lt; 0 || point[0] &gt; presenter.canvasWidth || point[1] &gt; presenter.canvasHeight) {&#13;
                    presenter.error = 'startingcolor';&#13;
                    return '';&#13;
                }&#13;
                colors = validateColor(point[2],false,true);&#13;
                answer.push([parseInt(point[0]),parseInt(point[1]),colors[0],colors[1],colors[2],colors[3]]);&#13;
            }&#13;
        });&#13;
        return answer;&#13;
    }&#13;
    function validateLines(lines, draw, coloranswers){&#13;
        presenter.tmpLine = [];&#13;
        if (lines == '' || lines == undefined) return true;&#13;
        var Lines = Helpers.splitLines(lines);&#13;
        var point, x, y, tmpPoint1, tmpPoint2, nonremovable;&#13;
        var re = /^\d+;\d+-\d+;\d+$/;&#13;
        var re2 = /^\d+;\d+-\d+;\d+\*$/;&#13;
        var testing;&#13;
        $.each(Lines, function() {&#13;
            if (this != '') {&#13;
                nonremovable = true;&#13;
                testing = re.test(this);&#13;
                if (draw &amp;&amp; !testing)&#13;
                    testing = re2.test(this);&#13;
                if (!testing) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                splittedByDash = this.split('-');&#13;
                point = splittedByDash[0].split(';');&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || (point[0] &gt; presenter.pointsX+1 &amp;&amp; !presenter.grid3D) || (point[0] &gt; 2*presenter.pointsX+1 &amp;&amp; presenter.grid3D) || point[1] &gt; presenter.pointsY+1) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; (parseInt(point[0]) + parseInt(point[1])) % 2 == 0) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                x = countX(point[0]); y = countY(point[1]);&#13;
                tmpPoint1 = new Point(parseInt(point[1]), parseInt(point[0]), x, y);&#13;
                point = splittedByDash[1].split(';');&#13;
                if (point[1].slice(-1) == '*' &amp;&amp; draw) {&#13;
                    nonremovable = false;&#13;
                    point[1] = point[1].substr(0,point[1].length-1);&#13;
                };&#13;
                if (isNaN(point[0]) || isNaN(point[1]) || (point[0] &gt; presenter.pointsX+1 &amp;&amp; !presenter.grid3D) || point[1] &gt; presenter.pointsY+1 || (point[0] &gt; 2*presenter.pointsX+1 &amp;&amp; presenter.grid3D)) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; (parseInt(point[0]) + parseInt(point[1])) % 2 == 0) {&#13;
                    draw ? presenter.error = 'deflines' : presenter.error = 'answerlines';&#13;
                    return false;&#13;
                }&#13;
                y = countY(point[1]);&#13;
                x = countX(point[0]);&#13;
                tmpPoint2 = new Point(parseInt(point[1]), parseInt(point[0]), x, y);&#13;
                presenter.drawLine(tmpPoint1, tmpPoint2, nonremovable,draw, coloranswers,false);&#13;
            }&#13;
        });&#13;
    }&#13;
    function validateAnswersColor(list) {&#13;
        presenter.answersColors = [];&#13;
        var points, color = [], tmpPoint, helpString, tmpData, i, j, k;&#13;
        var re = /^(\d+;\d+-)+(\d+;\d+)$/;&#13;
        var re2 = /^\d+;\d+;\d{1,3} \d{1,3} \d{1,3}$/;&#13;
        var testing;&#13;
        for (i = 0; i &lt; list.length; i++) {&#13;
            points = [];&#13;
            if (tmpPoint == '') {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            testing = re.test(list[i]['Figure']);&#13;
            if (!testing) {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            tmpPoint = list[i]['Figure'].split('-');&#13;
            for (j=0; j &lt; tmpPoint.length-1; j++) {&#13;
                helpString = tmpPoint[j] +'-'+tmpPoint[j+1];&#13;
                validateLines(helpString,false, true);&#13;
                for (k=0; k &lt; presenter.tmpLine.length;k++)&#13;
                    points.push(presenter.tmpLine[k]);&#13;
            }&#13;
            if (list[i]['Color'] != '') {&#13;
                testing = re2.test(list[i]['Color']);&#13;
                if (!testing) {&#13;
                    presenter.error = 'colorerror';&#13;
                    return false;&#13;
                }&#13;
                color = validateStartingColor(list[i]['Color'])[0]&#13;
            }&#13;
            tmpData = {&#13;
                lines: points,&#13;
                x: color[0],&#13;
                y: color[1],&#13;
                color: color[2]+' '+color[3]+' '+color[4]+' '+color[5]&#13;
            };&#13;
            if (tmpPoint[0] != tmpPoint[j]) {&#13;
                presenter.error = 'answerfigure';&#13;
                return false;&#13;
            }&#13;
            presenter.answersColors.push(tmpData);&#13;
        }&#13;
    }&#13;
    function validateColor(color,isDefault,isEditor){&#13;
        var rgb = color.split(' ');&#13;
        if (isNaN(rgb[0]) || isNaN(rgb[1]) || isNaN(rgb[2]) || rgb[0] &lt; 0 || rgb[0] &gt; 255 || rgb[1]&lt;0 || rgb[1]&gt;255 || rgb[2]&lt;0 || rgb[2]&gt;255 || rgb.length != 3) {&#13;
            if (isEditor)&#13;
                (isDefault) ? (presenter.error = 'defcolorerror') : (presenter.error = 'colorerror');&#13;
            else&#13;
                return false;&#13;
        };&#13;
        rgb.push('255');&#13;
        return rgb;&#13;
    };&#13;
    function Point (row, column, x, y) {&#13;
        this.row = row;&#13;
        this.column = column;&#13;
        this.x = x;&#13;
        this.y = y;&#13;
    }&#13;
    presenter.selected = {&#13;
        row: 0,&#13;
        column: 0,&#13;
        x: 0,&#13;
        y: 0,&#13;
        isSelected: false&#13;
    }&#13;
    presenter.drawingPoint = {&#13;
        row: 0,&#13;
        column: 0,&#13;
        x: 0,&#13;
        y: 0,&#13;
        isDown: false&#13;
    }&#13;
    var gcd = function(a, b) {&#13;
        if (!b) {&#13;
            return a;&#13;
        }&#13;
        return gcd(b, a % b);&#13;
    }&#13;
    var countX = function(column) {&#13;
        if (presenter.grid3D) return (0.5 * column * presenter.grid)&#13;
        else return ((parseInt(column)-0.5) * presenter.grid);&#13;
    };&#13;
    var countY = function(row) {&#13;
        if (presenter.grid3D) return ((1/3*(parseInt(row)-1) + 0.5) * presenter.grid)&#13;
        else return ((parseInt(row)-0.5) * presenter.grid);&#13;
    };&#13;
    function uniq(a) {&#13;
        return a.sort().filter(function(item, pos) {&#13;
            return !pos || item != a[pos - 1];&#13;
        })&#13;
    }&#13;
    function drawOneLine(point1, point2, nonremovable) {&#13;
        var newLine = document.createElementNS("http://www.w3.org/2000/svg", 'line');&#13;
        newLine.setAttribute("y1",point1.y);&#13;
        newLine.setAttribute("x1",point1.x);&#13;
        newLine.setAttribute("y2",point2.y);&#13;
        newLine.setAttribute("x2",point2.x);&#13;
        newLine.setAttribute("id",'line_'+(point1.column)+'_'+(point1.row)+'_'+(point2.column)+'_'+(point2.row))&#13;
        nonremovable ? newLine.setAttribute("class","line nonremovable") : newLine.setAttribute("class","line");&#13;
        var firstPoint = presenter.$view.find('.point')[0];&#13;
        presenter.$view.find('.chart')[0].insertBefore(newLine,firstPoint);&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; presenter.coloring) drawLineOnCanvas(point1.x,point1.y,point2.x,point2.y);&#13;
    }&#13;
    function drawTempLine(point1, point2) {&#13;
        line = presenter.$view.find('.templine');&#13;
        if (line.length &gt; 0) {&#13;
            line.attr('y1',point1.y);&#13;
            line.attr('x1',point1.x);&#13;
            line.attr('y2',point2.y);&#13;
            line.attr('x2',point2.x);&#13;
        } else {&#13;
            var newLine = document.createElementNS("http://www.w3.org/2000/svg", 'line');&#13;
            newLine.setAttribute("y1",point1.y);&#13;
            newLine.setAttribute("x1",point1.x);&#13;
            newLine.setAttribute("y2",point2.y);&#13;
            newLine.setAttribute("x2",point2.x);&#13;
            newLine.setAttribute("class","templine");&#13;
            var firstPoint = presenter.$view.find('.point')[0];&#13;
            presenter.$view.find('.chart')[0].insertBefore(newLine,firstPoint);&#13;
        }&#13;
    }&#13;
    function drawLineOnCanvas(x1,y1,x2,y2) {&#13;
        presenter.ctx.beginPath();&#13;
        presenter.ctx.moveTo(x1,y1);&#13;
        presenter.ctx.lineTo(x2,y2);&#13;
        presenter.ctx.closePath();&#13;
        presenter.ctx.strokeStyle="rgba(5,5,5,0.8)";&#13;
        presenter.ctx.stroke();&#13;
    }&#13;
    presenter.redrawCanvas = function(showAnswers) {&#13;
        //	presenter.canvas.getContext('2d').clearRect(0,0,presenter.canvasWidth,presenter.canvasHeight);&#13;
        presenter.canvas.width += 0;&#13;
        var line = presenter.$view.find('.line');&#13;
        var i, x1, y1, x2, y2, tmpColor, tmpColor2, tmpPoint;&#13;
        var indexes = new Array();&#13;
        for(i = 0; i &lt; line.length; i++) {&#13;
            indexes = line[i].id.split('_');&#13;
            x1 = countX(indexes[1]); y1 = countY(indexes[2]);&#13;
            x2 = countX(indexes[3]); y2 = countY(indexes[4]);&#13;
            drawLineOnCanvas(x1,y1,x2,y2);&#13;
        }&#13;
        if (showAnswers) {&#13;
            presenter.fillFiguresWithAnswerColor();&#13;
        } else {&#13;
            for(i = 0; i &lt; presenter.coloredAreas.length; i++) {&#13;
                tmpPoint = [presenter.coloredAreas[i][0],presenter.coloredAreas[i][1]];&#13;
                tmpColor = [presenter.coloredAreas[i][2],presenter.coloredAreas[i][3],presenter.coloredAreas[i][4],presenter.coloredAreas[i][5]];&#13;
                tmpColor2 = getClickedAreaColor(tmpPoint[0],tmpPoint[1]);&#13;
                if (tmpColor2[0] != tmpColor[0] || tmpColor2[1] != tmpColor[1] || tmpColor2[2] != tmpColor2[2] || tmpColor2[3] != tmpColor[3]) {&#13;
                    floodFill(tmpPoint,tmpColor);&#13;
                } else&#13;
                    presenter.coloredAreas.splice(i,1);&#13;
            }&#13;
            checkColors();&#13;
        }&#13;
    }&#13;
    presenter.drawLine = function(point1, point2, nonremovable, draw, coloranswers, trigger){&#13;
        var firstPoint, secondPoint, column1, row1, row, column, column2, row2, tmpPoint;&#13;
        var x1, x2, y1, y2, x1N, y1N, x2N, y2N, x, y;&#13;
        var i, line, counter = 0;&#13;
        if (point1.column &lt; point2.column || (point1.column == point2.column &amp;&amp; point1.row &lt; point2.row)) {&#13;
            firstPoint = point1;&#13;
            secondPoint = point2;&#13;
        }  else {&#13;
            firstPoint = point2;&#13;
            secondPoint = point1;&#13;
        }&#13;
        var steps = Math.abs(gcd(secondPoint.row-firstPoint.row, secondPoint.column-firstPoint.column));&#13;
        if (presenter.grid3D &amp;&amp; (secondPoint.row-firstPoint.row+secondPoint.column-firstPoint.column)/steps %2 != 0) steps = 0.5 * steps;&#13;
        var stepX = parseInt((secondPoint.column-firstPoint.column)/steps);&#13;
        var	stepY = parseInt((secondPoint.row-firstPoint.row)/steps);&#13;
        column1 = firstPoint.column;&#13;
        row1 = firstPoint.row;&#13;
        for (i = 1; i &lt;= steps; i++) {&#13;
            column2 = column1 + stepX;&#13;
            row2 = row1 + stepY;&#13;
            line = presenter.$view.find('#line_'+column1+'_'+row1+'_'+column2+'_'+row2);&#13;
            if (line.length &gt; 0)&#13;
                counter++;&#13;
            if (!draw &amp;&amp; (line.length &gt; 0) &amp;&amp; line.attr('class') == 'line nonremovable' &amp;&amp; !coloranswers) {&#13;
                presenter.error = 'nonremanswer';&#13;
                return false;&#13;
            };&#13;
            column1 = column2;&#13;
            row1 = row2;&#13;
        }&#13;
        column1 = firstPoint.column;&#13;
        row1 = firstPoint.row;&#13;
        if (steps == counter &amp;&amp; draw) {&#13;
            for (i = 1; i &lt;= steps; i++) {&#13;
                column2 = column1 + stepX;&#13;
                row2 = row1 + stepY;&#13;
                line = presenter.$view.find('#line_'+column1+'_'+row1+'_'+column2+'_'+row2);&#13;
                if (line.attr('class') != 'line nonremovable')&#13;
                    line.remove();&#13;
                column1 = column2;&#13;
                row1 = row2;&#13;
&#13;
            }&#13;
            var item = 'line_'+point1.column+'_'+point1.row+'_'+point2.column+'_'+point2.row;&#13;
            var value = 0;&#13;
            var score = 0;&#13;
            if (trigger) presenter.triggerEvent(item,value,score);&#13;
        } else {&#13;
            var score = 1;&#13;
            for (i = 1; i &lt;= steps; i++) {&#13;
                column = firstPoint.column + stepX;&#13;
                row = firstPoint.row + stepY;&#13;
                if (presenter.grid3D) {&#13;
                    x = firstPoint.x + stepX * 0.5 * presenter.grid;&#13;
                    y = firstPoint.y + stepY * 1/3 * presenter.grid;&#13;
                } else {&#13;
                    x = firstPoint.x + stepX * presenter.grid;&#13;
                    y = firstPoint.y + stepY * presenter.grid;&#13;
                }&#13;
                tmpPoint = new Point(row, column, x, y);&#13;
                line = 'line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row;&#13;
                if (presenter.$view.find('#'+line).length &lt;= 0 &amp;&amp; draw) {&#13;
                    drawOneLine(firstPoint, tmpPoint, nonremovable);&#13;
&#13;
                    if (score == 1 &amp;&amp; ($.inArray(line,presenter.AnswerLines) == -1))&#13;
                        score = 0;&#13;
                }&#13;
                if (!draw &amp;&amp; !((presenter.$view.find('#'+line).length &gt; 0) &amp;&amp; presenter.$view.find('#'+line).attr('class') == 'line nonremovable'))&#13;
                    presenter.AnswerLines.push('line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row);&#13;
                if (coloranswers)&#13;
                    presenter.tmpLine.push('line_'+firstPoint.column+'_'+firstPoint.row+'_'+tmpPoint.column+'_'+tmpPoint.row);&#13;
                firstPoint = tmpPoint;&#13;
            }&#13;
            var item = 'line_'+point1.column+'_'+point1.row+'_'+point2.column+'_'+point2.row;&#13;
            var value = 1;&#13;
            if (trigger) presenter.triggerEvent(item,value,score);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.initiate = function(view, model){&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.figure = presenter.$view.find('.figure');&#13;
        presenter.setDrawMode();&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['IsActivity']);&#13;
        presenter.disabled = ModelValidationUtils.validateBoolean(presenter.model['IsDisabled']);&#13;
        presenter.initDisabled = presenter.disabled;&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(presenter.model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        presenter.grid3D = ModelValidationUtils.validateBoolean(presenter.model['3DGrid']);&#13;
        presenter.showGrid = ModelValidationUtils.validateBoolean(presenter.model['ShowGrid']);&#13;
        presenter.StartingLines = presenter.model['StartingLines'];&#13;
        presenter.Answer = presenter.model['Answer'];&#13;
        presenter.grid = parseInt(presenter.model['Grid']);&#13;
        if (!(presenter.grid &gt; 1))&#13;
            presenter.error = 'grid';&#13;
        presenter.radius = validateRadius(presenter.model['Radius']);&#13;
        presenter.coloring = ModelValidationUtils.validateBoolean(presenter.model['Coloring']);&#13;
        presenter.blockColoring = ModelValidationUtils.validateBoolean(presenter.model['BlockColoring']);&#13;
        presenter.answersColors = [];&#13;
        if (presenter.coloring &amp;&amp; !presenter.error) {&#13;
            presenter.defaultColor = validateColor(presenter.model['DefColor'],true,true);&#13;
            presenter.startingColors = validateStartingColor(presenter.model['StartingColors']);&#13;
        };&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.drawGrid = function() {&#13;
        var Width = presenter.figure.width();&#13;
        var Height = presenter.figure.parent().height();&#13;
        var i, j, presentX, presentY;&#13;
        presenter.pointsX = parseInt((Width - presenter.grid) / presenter.grid);&#13;
        presenter.pointsY = parseInt((Height - presenter.grid) / presenter.grid);&#13;
        if (presenter.grid3D) {&#13;
            presenter.pointsY = parseInt(3*(Height - presenter.grid) / presenter.grid);&#13;
            Height = parseInt((presenter.pointsY / 3 + 1) * presenter.grid);&#13;
            presenter.pointsX = parseInt((Width - presenter.grid) / presenter.grid);&#13;
            Width = parseInt((presenter.pointsX + 1) * presenter.grid);&#13;
        } else {&#13;
            Width = (presenter.pointsX + 1) * presenter.grid;&#13;
            Height = (presenter.pointsY + 1) * presenter.grid;&#13;
        }&#13;
        presenter.figure.css({'width' : Width, 'height' : Height});&#13;
        var $svg = '&lt;svg height="'+Height+'" width="'+Width+'" version="1.1" xmlns:xlink="http://www.w3.org/2000/svg" class="chart"&gt;';&#13;
        points = '';&#13;
        for (i = 0; i &lt;= presenter.pointsX; i++) {&#13;
            presentX = (i + 0.5) * presenter.grid;&#13;
            if (presenter.showGrid &amp;&amp; !presenter.grid3D)&#13;
                $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + Height +'" x2="'+presentX+'" y1="0" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
            if (presenter.showGrid &amp;&amp; presenter.grid3D) {&#13;
                if (presenter.pointsY % 2 == 0) {&#13;
                    $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + (Height - 5/6 * presenter.grid) +'" x2="'+presentX+'" y1="'+(5/6*presenter.grid)+'" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
                } else {&#13;
                    $svg += '&lt;line id="j_'+(i+1)+'" class ="grid" y2="' + (Height - 1/2*presenter.grid) +'" x2="'+presentX+'" y1="'+(5/6*presenter.grid)+'" x1="'+presentX+'"&gt;&lt;/line&gt;';&#13;
                }&#13;
                if (presenter.grid3D &amp;&amp; i &lt; presenter.pointsX) {&#13;
                    if (presenter.pointsY % 2 == 0) {&#13;
                        $svg += '&lt;line id="j__'+(i+1)+'" class ="grid" y2="' + (Height - 1/2*presenter.grid) +'" x2="'+(presentX+0.5*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x1="'+(presentX+0.5*presenter.grid)+'"&gt;&lt;/line&gt;';&#13;
                    } else {&#13;
                        $svg += '&lt;line id="j__'+(i+1)+'" class ="grid" y2="' + (Height - 5/6*presenter.grid) +'" x2="'+(presentX+0.5*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x1="'+(presentX+0.5*presenter.grid)+'"&gt;&lt;/line&gt;';&#13;
                    }&#13;
                }&#13;
            }&#13;
            for (j = 0; j &lt;= presenter.pointsY; j++) {&#13;
                if (presenter.grid3D) {&#13;
                    ((j % 2) == 0) ? (presentX = (1 + i)* presenter.grid) : (presentX = (0.5 + i)* presenter.grid);&#13;
                }&#13;
                (presenter.grid3D) ? (presentY = (1/3 * j + 0.5) * presenter.grid) : (presentY = (0.5 + j)* presenter.grid);&#13;
                if (!presenter.grid3D) {&#13;
                    points += '&lt;circle class="point" row="'+(j+1)+'" column ="'+(i+1)+'" r="'+presenter.radius+'" cy="'+presentY+'" cx="'+presentX+'"&gt;&lt;/circle&gt;';&#13;
                } else if (!(i == presenter.pointsX &amp;&amp; (j % 2) == 0)) {&#13;
                    points += '&lt;circle class="point" row="'+(j+1)+'" column ="'+ ((j%2==0) ? (2*(i+1)) : (2*(i+1)-1)) +'" r="'+presenter.radius+'" cy="'+presentY+'" cx="'+presentX+'"&gt;&lt;/circle&gt;';&#13;
                }&#13;
                if (i == 0 &amp;&amp; presenter.showGrid &amp;&amp; !presenter.grid3D) {&#13;
                    $svg += '&lt;line id="i_'+(j+1)+'" class ="grid" y2="'+presentY+'" x2="' + Width +'" y1="'+presentY+'" x1="0"&gt;&lt;/line&gt;';&#13;
                }&#13;
            }&#13;
        }&#13;
        if (presenter.showGrid &amp;&amp; presenter.grid3D) {&#13;
            for (i = 1; i &lt;= (presenter.pointsY/2); i++) {&#13;
                $svg += '&lt;line id="i_'+(i)+'" class ="grid" x1="'+(0.5*presenter.grid)+'" y1="'+((1/6+2/3*i)*presenter.grid)+'" x2="' + (0.5 * presenter.grid * (Math.min((presenter.pointsY-2*i+1),(2*presenter.pointsX)) + 1)) +'" y2="'+(1/3 * presenter.grid * (Math.min((presenter.pointsY-2*i+1),(2*presenter.pointsX)) + 0.5 + 2*i))+'"&gt;&lt;/line&gt;';&#13;
                $svg += '&lt;line id="i_'+(i)+'_" class ="grid" x1="'+(0.5*presenter.grid)+'" y1="'+((1/6+2/3*i)*presenter.grid)+'" x2="' + (0.5 * presenter.grid * (Math.min(2*i-1, 2*presenter.pointsX) + 1)) +'" y2="'+(1/3 * presenter.grid * (0.5 + 2*i - Math.min(2*i-1, 2*presenter.pointsX)))+'"&gt;&lt;/line&gt;';&#13;
            }&#13;
            for (i = 1; i &lt;= presenter.pointsX; i++) {&#13;
                $svg += '&lt;line id="i__'+(i)+'" class ="grid" x1="'+(i*presenter.grid)+'" y1="'+(0.5*presenter.grid)+'" x2="'+ (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY) + 2*i)) +'" y2="'+ (presenter.grid * (0.5 + 1/3* Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                if (presenter.pointsY % 2 == 0) {&#13;
                    $svg += '&lt;line id="i__'+(i)+'_" class ="grid" x1="'+(i*presenter.grid)+'" y1="'+((presenter.pointsY/3+0.5)*presenter.grid)+'" x2="'+  (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY) + 2*i)) +'" y2="'+ (1/3 * presenter.grid * (presenter.pointsY + 1.5 - Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                } else {&#13;
                    $svg += '&lt;line id="i__'+(i)+'_" class ="grid" x1="'+((i-0.5)*presenter.grid)+'" y1="'+((presenter.pointsY/3+0.5)*presenter.grid)+'" x2 ="'+ (0.5 * presenter.grid * (Math.min(2*(presenter.pointsX-i)+1, presenter.pointsY-1) + 2*i)) +'" y2="' + (1/3 * presenter.grid * (presenter.pointsY + 1.5 - Math.min(2*(presenter.pointsX-i+1),presenter.pointsY))) +'"&gt;&lt;/line&gt;';&#13;
                }&#13;
            }&#13;
        }&#13;
        $svg += points;&#13;
        $svg += '&lt;/svg&gt;';&#13;
        presenter.figure.prepend($svg);&#13;
        var canvasElement = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
        presenter.ctx = canvasElement[0].getContext('2d');&#13;
        canvasElement.attr('width', Width);&#13;
        canvasElement.attr('height', Height);&#13;
        canvasElement.attr('class', 'canvas');&#13;
        presenter.canvasWidth = Width;&#13;
        presenter.canvasHeight = Height;&#13;
        presenter.canvas = canvasElement[0];&#13;
        if (presenter.coloring) presenter.figure.prepend(canvasElement);&#13;
        //double canvas fix&#13;
        if (presenter.coloring &amp;&amp; MobileUtils.isAndroidWebBrowser(window.navigator.userAgent)) {&#13;
            var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
            if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
                presenter.$view.find('.canvas').parents("*").css("overflow", "visible");&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        var row, column, x, y;&#13;
        var timeClick = true, abandon = false;&#13;
        presenter.initiate(view, model);&#13;
        presenter.coloredAreas = [];&#13;
        presenter.down = false;&#13;
        if (!presenter.error) {&#13;
            presenter.drawGrid();&#13;
            validateLines(presenter.StartingLines,true,false);&#13;
            presenter.updateVisibility();&#13;
&#13;
            var coordinations = {x:0, y:0};&#13;
            var tmpColor, i;&#13;
            if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
                for (i = 0; i &lt; presenter.startingColors.length; i++)&#13;
                    presenter.coloredAreas[i] = presenter.startingColors[i];&#13;
                presenter.redrawCanvas(false);&#13;
            }&#13;
            presenter.currentColor = presenter.defaultColor;&#13;
            if (presenter.disabled) presenter.disable();&#13;
            if (presenter.activity) {&#13;
                presenter.AnswerLines = new Array();&#13;
                validateLines(presenter.Answer,false,false);&#13;
                if (presenter.coloring &amp;&amp; !presenter.error)&#13;
                    if (presenter.model['AnswerColors'].length != 1 || presenter.model['AnswerColors'][0]['Figure'] != '' || presenter.model['AnswerColors'][0]['Color'] != '')&#13;
                        validateAnswersColor(presenter.model['AnswerColors']);&#13;
                // delete duplicates from AnswerLines&#13;
                presenter.AnswerLines = uniq(presenter.AnswerLines);&#13;
            }&#13;
        }&#13;
        if (presenter.error) {&#13;
            presenter.figure.addClass(presenter.error);&#13;
            presenter.$view.find('.chart').remove();&#13;
            presenter.$view.find('.canvas').remove();&#13;
        };&#13;
        var point1, point2;&#13;
        presenter.$view.find('.point').on('mouseup touchend', function(e){&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode &amp;&amp; timeClick) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                abandon = false;&#13;
                if (e.type != 'mouseup') timeClick = false;&#13;
                setTimeout(function(){timeClick = true;},400);&#13;
                if (e.type == 'mouseup') {&#13;
                    row = parseInt($(this).attr('row'),10);&#13;
                    column = parseInt($(this).attr('column'),10);&#13;
                    x = parseInt($(this).attr('cx'),10);&#13;
                    y = parseInt($(this).attr('cy'),10);&#13;
                } else {&#13;
                    row = findClosestPoint(presenter.mouseSX,presenter.mouseSY).row;&#13;
                    column = findClosestPoint(presenter.mouseSX,presenter.mouseSY).column;&#13;
                    x = countX(column);&#13;
                    y = countY(row);&#13;
                    if ((presenter.grid3D &amp;&amp; (column + row) % 2 == 0) || Math.abs(x-presenter.mouseSX) + Math.abs(y-presenter.mouseSY) &gt; 30 || row &lt; 1 || column &lt; 1 || row &gt; presenter.pointsY + 1 || (presenter.grid3D &amp;&amp; column &gt; 2*(presenter.pointsX)+1) || (!presenter.grid3D &amp;&amp; column &gt; presenter.pointsX + 1))&#13;
                        abandon = true;&#13;
                }&#13;
                if (!presenter.selected.isSelected &amp;&amp; !abandon) {&#13;
                    if (presenter.drawingPoint.row == row &amp;&amp; presenter.drawingPoint.column == column) {&#13;
                        presenter.selected.row = row;&#13;
                        presenter.selected.column = column;&#13;
                        presenter.selected.x = x;&#13;
                        presenter.selected.y = y;&#13;
                        presenter.selected.isSelected = true;&#13;
                        $(this).addClass('selected');&#13;
                    } else {&#13;
                        point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                        point2 = new Point(row, column, x, y);&#13;
                        presenter.drawLine(point1,point2,false,true,false,true);&#13;
                        presenter.isStarted = true;&#13;
                        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                        //if blockColoring mode check if is OK&#13;
                        if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                            var item = 'lines';&#13;
                            var value = '';&#13;
                            var score = '';&#13;
                            presenter.triggerEvent(item,value,score);&#13;
                            if (presenter.blockColoring) presenter.setColorMode();&#13;
                        }&#13;
                    }&#13;
                } else if (!abandon) {&#13;
                    if (presenter.drawingPoint.row == row &amp;&amp; presenter.drawingPoint.column == column) {&#13;
                        if (presenter.selected.row != row || presenter.selected.column != column) {&#13;
                            point1 = new Point(presenter.selected.row, presenter.selected.column, presenter.selected.x, presenter.selected.y);&#13;
                            point2 = new Point(row, column, x, y);&#13;
                            presenter.drawLine(point1,point2,false,true,false,true);&#13;
                            presenter.isStarted = true;&#13;
                            presenter.selected.isSelected = false;&#13;
                            presenter.$view.find('.point').removeClass('selected');&#13;
                            if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                            //if blockColoring mode check if is OK&#13;
                            if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                                var item = 'lines';&#13;
                                var value = '';&#13;
                                var score = '';&#13;
                                presenter.triggerEvent(item,value,score);&#13;
                                if (presenter.blockColoring) presenter.setColorMode();&#13;
                            }&#13;
                        }&#13;
                        presenter.selected.isSelected = false;&#13;
                        presenter.$view.find('.point').removeClass('selected');&#13;
                    } else {&#13;
                        point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                        point2 = new Point(row, column, x, y);&#13;
                        presenter.drawLine(point1,point2,false,true,false,true);&#13;
                        presenter.isStarted = true;&#13;
                        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
                        //if blockColoring mode check if is OK&#13;
                        if (presenter.activity &amp;&amp; presenter.allLinesDrawn()) {&#13;
                            var item = 'lines';&#13;
                            var value = '';&#13;
                            var score = '';&#13;
                            presenter.triggerEvent(item,value,score);&#13;
                            if (presenter.blockColoring) presenter.setColorMode();&#13;
                        }&#13;
                    }&#13;
                }&#13;
            };&#13;
            presenter.$view.find('.templine').remove();&#13;
            presenter.drawingPoint.isDown = false;&#13;
        });&#13;
        presenter.$view.find('.point').on('mousedown touchstart', function(e){&#13;
            presenter.$view.find('.templine').remove();&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.drawingPoint.row = parseInt($(this).attr('row'),10);&#13;
                presenter.drawingPoint.column = parseInt($(this).attr('column'),10);&#13;
                presenter.drawingPoint.x = parseInt($(this).attr('cx'),10);&#13;
                presenter.drawingPoint.y = parseInt($(this).attr('cy'),10);&#13;
                presenter.drawingPoint.isDown = true;&#13;
                if (e.type == 'touchstart') {&#13;
                    presenter.mouseSX = presenter.drawingPoint.x;&#13;
                    presenter.mouseSY = presenter.drawingPoint.y;&#13;
                }&#13;
            };&#13;
        });&#13;
        presenter.$view.on('mousedown touchstart', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            if (presenter.coloring &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActiv &amp;&amp; !presenter.drawingMode) {&#13;
                coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top,10);&#13;
                var imgData = presenter.ctx.getImageData(0, 0, presenter.canvasWidth, presenter.canvasHeight);&#13;
                var myPoint = (presenter.mouseSX + presenter.mouseSY * presenter.canvasWidth) * 4;&#13;
                var color = getClickedAreaColor(presenter.mouseSX,presenter.mouseSY);&#13;
                var startingPixel = [presenter.mouseSX,presenter.mouseSY];&#13;
                tmpColor = getClickedAreaColor(startingPixel[0],startingPixel[1]);&#13;
                if ((presenter.currentColor[0] != tmpColor[0] || presenter.currentColor[1] != tmpColor[1] || presenter.currentColor[2] != tmpColor[2] || presenter.currentColor[3] != tmpColor[3]) &amp;&amp; (tmpColor[3] &lt; 10 || tmpColor[3] &gt; 245) &amp;&amp; presenter.mouseSX &gt; 0 &amp;&amp; presenter.mouseSY &gt; 0) {&#13;
                    presenter.isStarted = true;&#13;
                    floodFill(startingPixel,presenter.currentColor);&#13;
                    presenter.coloredAreas.push([startingPixel[0],startingPixel[1],presenter.currentColor[0],presenter.currentColor[1],presenter.currentColor[2],presenter.currentColor[3]]);&#13;
                    // checking if this area was not colored previously&#13;
                    checkColors();&#13;
                    var item = startingPixel[0]+' '+startingPixel[1];&#13;
                    var value = presenter.currentColor.join(" ");&#13;
                    var score = '';&#13;
                    presenter.triggerEvent(item,value,score);&#13;
                }&#13;
            }&#13;
        });&#13;
        presenter.$view.on('mousemove touchmove', function(e){&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
            var scaleInfo = presenter.playerController.getScaleInformation()&#13;
            if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; presenter.drawingMode &amp;&amp; presenter.drawingPoint.isDown) {&#13;
                point1 = new Point(presenter.drawingPoint.row, presenter.drawingPoint.column, presenter.drawingPoint.x, presenter.drawingPoint.y);&#13;
                if (e.type == 'mousemove') {&#13;
                    coordinations.x = e.originalEvent.pageX/scaleInfo.scaleX;&#13;
                    coordinations.y = e.originalEvent.pageY/scaleInfo.scaleY;&#13;
                } else {&#13;
                    coordinations.x = e.originalEvent.touches[0].pageX/scaleInfo.scaleX;&#13;
                    coordinations.y = e.originalEvent.touches[0].pageY/scaleInfo.scaleY;&#13;
                };&#13;
                presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left/scaleInfo.scaleX,10);&#13;
                presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top/scaleInfo.scaleY,10);&#13;
                if (presenter.mouseSX &lt; 0 || presenter.mouseSX &gt; presenter.figure.width() || presenter.mouseSY &lt; 0 || presenter.mouseSY &gt; presenter.figure.height()) {&#13;
                    presenter.drawingPoint.isDown = false;&#13;
                    presenter.$view.find('.templine').remove();&#13;
                } else {&#13;
                    point2 = new Point(0, 0, presenter.mouseSX, presenter.mouseSY);&#13;
                    drawTempLine(point1, point2);&#13;
                }&#13;
            }&#13;
        });&#13;
        presenter.$view.on('mouseup mouseleave touchend touchleave', function(e){&#13;
            presenter.drawingPoint.isDown = false;&#13;
            presenter.$view.find('.templine').remove();&#13;
        });&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    }&#13;
    function checkColors() {&#13;
        for(var i = 0; i &lt; presenter.coloredAreas.length; i++) {&#13;
            var tmpColor = getClickedAreaColor(presenter.coloredAreas[i][0],presenter.coloredAreas[i][1]);&#13;
            if (tmpColor[0] != presenter.coloredAreas[i][2] || tmpColor[1] != presenter.coloredAreas[i][3] || tmpColor[2] != presenter.coloredAreas[i][4] || tmpColor[3] != presenter.coloredAreas[i][5])&#13;
                presenter.coloredAreas.splice(i,1);&#13;
        }&#13;
    }&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") presenter.showAnswers();&#13;
        if (eventName == "HideAnswers") presenter.hideAnswers();&#13;
    };&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createPreview = function(view, model){&#13;
        presenter.initiate(view, model);&#13;
        presenter.coloredAreas = [];&#13;
        var coordinations = {x:0, y:0};&#13;
        if (!presenter.error) {&#13;
            presenter.drawGrid();&#13;
            validateLines(presenter.StartingLines,true,false);&#13;
            if (presenter.activity) {&#13;
                presenter.AnswerLines = new Array();&#13;
                validateLines(presenter.Answer,false,false);&#13;
                if (presenter.coloring &amp;&amp; !presenter.error)&#13;
                    if (presenter.model['AnswerColors'].length != 1 || presenter.model['AnswerColors'][0]['Figure'] != '' || presenter.model['AnswerColors'][0]['Color'] != '')&#13;
                        validateAnswersColor(presenter.model['AnswerColors']);&#13;
            }&#13;
&#13;
            if (presenter.disabled) presenter.disable();&#13;
            if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
                presenter.coloredAreas = presenter.startingColors;&#13;
                presenter.redrawCanvas(false);&#13;
            }&#13;
            presenter.showAnswersInEditor = ModelValidationUtils.validateBoolean(presenter.model['ShowAns']);&#13;
            if (presenter.activity &amp;&amp; presenter.showAnswersInEditor)&#13;
                presenter.showAnswers();&#13;
            if (presenter.coloring) {&#13;
                var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                    xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                    yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;');&#13;
                coordinatesContainer.addClass('coordinates');&#13;
                coordinatesContainer.append(xContainer).append(yContainer);&#13;
                presenter.figure.append(coordinatesContainer);&#13;
&#13;
                function setCalculatedPosition(e) {&#13;
                    coordinations.x = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;&#13;
                    coordinations.y = e.originalEvent.pageY || e.originalEvent.touches[0].pageY;&#13;
                    presenter.mouseSX = parseInt(coordinations.x,10) - parseInt(presenter.figure.offset().left,10);&#13;
                    presenter.mouseSY = parseInt(coordinations.y,10) - parseInt(presenter.figure.offset().top,10);&#13;
                    xContainer.find('.value').html(presenter.mouseSX);&#13;
                    yContainer.find('.value').html(presenter.mouseSY);&#13;
                }&#13;
&#13;
                var doesElementExist = function() {&#13;
                    var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                    if ($moduleSelector.length &gt; 0) {&#13;
                        $moduleSelector.on('mousemove', function(e) {&#13;
                            setCalculatedPosition(e);&#13;
                        });&#13;
&#13;
                        clearInterval(interval);&#13;
                    }&#13;
                };&#13;
&#13;
                var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
                presenter.figure.on('mousemove', function(e) {&#13;
                    setCalculatedPosition(e);&#13;
                });&#13;
            }&#13;
        };&#13;
        if (presenter.error) {&#13;
            presenter.figure.addClass(presenter.error);&#13;
            presenter.$view.find('.chart').remove();&#13;
            presenter.$view.find('.canvas').remove();&#13;
        }&#13;
    }&#13;
    presenter.reset = function(resetOnlyWrong) {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.setWorkMode();&#13;
        if (presenter.coloring &amp;&amp; presenter.startingColors != '') {&#13;
            for (let i = 0; i &lt; presenter.startingColors.length; i++)&#13;
                presenter.coloredAreas[i] = presenter.startingColors[i];&#13;
        }&#13;
&#13;
        if (resetOnlyWrong) {&#13;
            presenter.removeIncorrectLines();&#13;
&#13;
            if (presenter.coloring) {&#13;
                var copyOfColoredAreas = JSON.parse(JSON.stringify(presenter.coloredAreas));&#13;
                presenter.coloredAreas = [];&#13;
                presenter.redrawCanvas(false);&#13;
                presenter.fillFiguresWithAnswerColor();&#13;
                presenter.coloredAreas = copyOfColoredAreas;&#13;
                var areasToRemove = presenter.getAreasToRemove();&#13;
                presenter.updateColoredAreas(areasToRemove);&#13;
            }&#13;
        } else {&#13;
            presenter.$view.find('.line').remove();&#13;
            presenter.coloredAreas = [];&#13;
        }&#13;
&#13;
        validateLines(presenter.StartingLines,true,false);&#13;
        presenter.$view.find('.selected').removeClass('selected');&#13;
        presenter.selected.isSelected = false;&#13;
        presenter.disabled = presenter.initDisabled;&#13;
        if (presenter.disabled) presenter.disable()&#13;
        else presenter.enable();&#13;
        presenter.isVisible = presenter.initIsVisible;&#13;
        presenter.updateVisibility();&#13;
        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
        presenter.isEraser = false;&#13;
        presenter.currentColor = presenter.defaultColor;&#13;
&#13;
        if (resetOnlyWrong) {&#13;
            presenter.isStarted = true;&#13;
            if (presenter.blockColoring &amp;&amp; presenter.allLinesDrawn()) {&#13;
                presenter.setColorMode();&#13;
            } else {&#13;
                presenter.setDrawMode();&#13;
            }&#13;
        } else {&#13;
            presenter.isStarted = false;&#13;
            presenter.setDrawMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeIncorrectLines = function () {&#13;
        var lines = presenter.$view.find('.line').not('.nonremovable');&#13;
        for (let i = 0; i &lt; lines.length; i++) {&#13;
            if ($.inArray(lines[i].id, presenter.AnswerLines) === -1)&#13;
                presenter.$view.find('#' + lines[i].id).remove();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.fillFiguresWithAnswerColor = function () {&#13;
        for (let i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
            let tmpPoint = [presenter.answersColors[i].x, presenter.answersColors[i].y];&#13;
            let tmpColor = presenter.answersColors[i].color.split(' ');&#13;
            let tmpColor2 = getClickedAreaColor(tmpPoint[0], tmpPoint[1]);&#13;
            if (tmpColor2[0] != tmpColor[0] || tmpColor2[1] != tmpColor[1] || tmpColor2[2] != tmpColor2[2] || tmpColor2[3] != tmpColor[3]) {&#13;
                floodFill(tmpPoint, tmpColor);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getAreasToRemove = function () {&#13;
        var figuresToRemove = [];&#13;
        for (let i = 0; i &lt; presenter.coloredAreas.length; i++) {&#13;
            let color = getClickedAreaColor(presenter.coloredAreas[i][0], presenter.coloredAreas[i][1]);&#13;
            if (color[0] != presenter.coloredAreas[i][2] || color[1] != presenter.coloredAreas[i][3] || color[2] != presenter.coloredAreas[i][4] || color[3] != presenter.coloredAreas[i][5]) {&#13;
                figuresToRemove.push(i);&#13;
            }&#13;
        }&#13;
&#13;
        figuresToRemove.sort(function (x, y) {&#13;
            return y - x;&#13;
        });&#13;
&#13;
        return figuresToRemove;&#13;
    }&#13;
&#13;
    presenter.updateColoredAreas = function (figuresToRemove) {&#13;
        if (figuresToRemove.length === presenter.coloredAreas.length) {&#13;
            presenter.coloredAreas = [];&#13;
        } else {&#13;
            for (let i = 0; i &lt; figuresToRemove.length; i++) {&#13;
                presenter.coloredAreas.splice(figuresToRemove[i], 1);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getErrorCount = function(){&#13;
        var errorCounter = 0, i, lineCounter, color;&#13;
        presenter.wasShowAnswersActive = presenter.isShowAnswersActive;&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            errorCounter = presenter.$view.find('.line').not('.nonremovable').length;&#13;
            var numberOfAnswers = presenter.AnswerLines.length, line;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0)&#13;
                    errorCounter--;&#13;
            }&#13;
            if (presenter.coloring) {&#13;
                for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                    lineCounter = 0;&#13;
                    for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                        line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                        if (line.length &gt; 0) lineCounter++;&#13;
                    }&#13;
                    color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                    if (color != presenter.answersColors[i].color &amp;&amp; color != '0 0 0 0' &amp;&amp; lineCounter == presenter.answersColors[i].lines.length)&#13;
                        errorCounter++;&#13;
                }&#13;
            }&#13;
        }&#13;
        if(presenter.wasShowAnswersActive) presenter.showAnswers();&#13;
        return errorCounter;&#13;
    }&#13;
    presenter.getMaxScore = function(){&#13;
        var maxScore = 0;&#13;
        presenter.wasShowAnswersActive = presenter.isShowAnswersActive;&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.coloring)&#13;
            maxScore = presenter.AnswerLines.length + presenter.answersColors.length;&#13;
        else if (presenter.activity &amp;&amp; !presenter.error)&#13;
            maxScore = presenter.AnswerLines.length;&#13;
&#13;
        if(presenter.wasShowAnswersActive) presenter.showAnswers();&#13;
        return maxScore;&#13;
    }&#13;
    presenter.getScore = function(){&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            var i, j, line, lineCounter, color, counter = 0, numberOfAnswers = presenter.AnswerLines.length;&#13;
            for (i = 0; i &lt;= numberOfAnswers; i++) {&#13;
                line = presenter.$view.find('#'+presenter.AnswerLines[i]);&#13;
                if (line.length &gt; 0)&#13;
                    counter++;&#13;
            }&#13;
            if (presenter.coloring) {&#13;
                for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                    lineCounter = 0;&#13;
                    for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                        line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                        if (line.length &gt; 0) lineCounter++;&#13;
                    }&#13;
                    color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                    if (lineCounter == presenter.answersColors[i].lines.length &amp;&amp; color == presenter.answersColors[i].color) counter++;&#13;
                }&#13;
            }&#13;
            return counter;&#13;
        } else&#13;
            return 0;&#13;
    }&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.line').removeClass('correct');&#13;
        presenter.$view.find('.line').removeClass('wrong');&#13;
        presenter.$view.find('.icon-container').remove();&#13;
        presenter.$view.find('.figure').removeClass('correct');&#13;
        presenter.$view.find('.figure').removeClass('wrong');&#13;
    };&#13;
    presenter.setShowErrorsMode = function() {&#13;
        var i, j, line, color, lineCounter;&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        presenter.isErrorMode = true;&#13;
        presenter.selected.isSelected = false;&#13;
        presenter.$view.find('.point').removeClass('selected');&#13;
        var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
        var i;&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted) {&#13;
            for (i = 0; i &lt; Lines.length; i++) {;&#13;
                if ($.inArray(Lines[i].id,presenter.AnswerLines) != -1)&#13;
                    presenter.$view.find('#'+Lines[i].id).addClass('correct')&#13;
                else&#13;
                    presenter.$view.find('#'+Lines[i].id).addClass('wrong');&#13;
            }&#13;
        }&#13;
        if (presenter.activity &amp;&amp; !presenter.error &amp;&amp; presenter.isStarted &amp;&amp; presenter.coloring) {&#13;
            for (i = 0; i &lt; presenter.answersColors.length; i++) {&#13;
                lineCounter = 0;&#13;
                for (j = 0; j &lt; presenter.answersColors[i].lines.length; j++) {&#13;
                    line = presenter.$view.find('#'+presenter.answersColors[i].lines[j]);&#13;
                    if (line.length &gt; 0) lineCounter++;&#13;
                }&#13;
                color = getClickedAreaColor(presenter.answersColors[i].x,presenter.answersColors[i].y).join(" ");&#13;
                if (lineCounter == presenter.answersColors[i].lines.length &amp;&amp; color == presenter.answersColors[i].color)&#13;
                    presenter.displayIcon(presenter.answersColors[i].x,presenter.answersColors[i].y,true)&#13;
                else if (color != presenter.answersColors[i].color &amp;&amp; color != '0 0 0 0' &amp;&amp; lineCounter == presenter.answersColors[i].lines.length)&#13;
                    presenter.displayIcon(presenter.answersColors[i].x,presenter.answersColors[i].y,false);&#13;
            }&#13;
        }&#13;
    };&#13;
    presenter.displayIcon = function(x,y,isCorrect) {&#13;
        var iconContainer = $('&lt;div class="icon-container"&gt;&lt;/div&gt;');&#13;
        iconContainer.css({&#13;
            top: (y-5) + 'px',&#13;
            left: (x-5) + 'px'&#13;
        });&#13;
        iconContainer.addClass(isCorrect ? 'correct' : 'wrong');&#13;
        presenter.figure.append(iconContainer);&#13;
    }&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
        var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
        var LinesIds = new Array();&#13;
        for (i = 0; i &lt; Lines.length; i++) {&#13;
            LinesIds.push(Lines[i].id);&#13;
        };&#13;
        return JSON.stringify({&#13;
            isStarted : presenter.isStarted,&#13;
            disabled : presenter.disabled,&#13;
            visible : presenter.isVisible,&#13;
            lines : LinesIds,&#13;
            eraser: presenter.isEraser,&#13;
            color: presenter.currentColor,&#13;
            coloredAreas: presenter.coloredAreas,&#13;
            mode: presenter.drawingMode&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state) {&#13;
        var point1, point2, x, y, i;&#13;
        presenter.disabled = JSON.parse(state).disabled;&#13;
        presenter.isEraser = JSON.parse(state).eraser;&#13;
        presenter.currentColor = JSON.parse(state).color;&#13;
        presenter.coloredAreas = JSON.parse(state).coloredAreas;&#13;
        presenter.drawingMode = JSON.parse(state).mode;&#13;
        if (presenter.drawingMode)&#13;
            presenter.setDrawMode()&#13;
        else&#13;
            presenter.setColorMode();&#13;
        if (presenter.disabled)&#13;
            presenter.disable()&#13;
        else&#13;
            presenter.enable();&#13;
        presenter.isVisible = JSON.parse(state).visible;&#13;
        presenter.isStarted = JSON.parse(state).isStarted;&#13;
        presenter.updateVisibility();&#13;
        presenter.$view.find('.line').not('.nonremovable').remove();&#13;
        var LinesIds = JSON.parse(state).lines;&#13;
        var indexes = new Array();&#13;
        for (i = 0; i &lt; LinesIds.length; i++) {&#13;
            indexes = LinesIds[i].split('_');&#13;
            x = countX(indexes[1]); y = countY(indexes[2]);&#13;
            point1 = new Point(indexes[2], indexes[1], x, y);&#13;
            x = countX(indexes[3]); y = countY(indexes[4]);&#13;
            point2 = new Point(indexes[4], indexes[3], x, y);&#13;
            drawOneLine(point1,point2,false);&#13;
        }&#13;
        if (presenter.coloring) presenter.redrawCanvas(false);&#13;
    };&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.activity) {&#13;
            var i, x, y, point1, point2;&#13;
            if (presenter.isShowAnswersActive) presenter.hideAnswers();&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            var Lines = presenter.$view.find('.line').not('.nonremovable');&#13;
            presenter.LinesIds = new Array();&#13;
            for (i = 0; i &lt; Lines.length; i++) {&#13;
                presenter.LinesIds.push(Lines[i].id);&#13;
            }&#13;
            presenter.$view.find('.line').not('.nonremovable').remove();&#13;
            var indexes = new Array();&#13;
            for (i = 0; i &lt; presenter.AnswerLines.length; i++) {&#13;
                indexes = presenter.AnswerLines[i].split('_');&#13;
                x = countX(indexes[1]); y = countY(indexes[2]);&#13;
                point1 = new Point(indexes[2], indexes[1], x, y);&#13;
                x = countX(indexes[3]); y = countY(indexes[4]);&#13;
                point2 = new Point(indexes[4], indexes[3], x, y);&#13;
                drawOneLine(point1,point2,false);&#13;
            }&#13;
            presenter.selected.isSelected = false;&#13;
            presenter.$view.find('.selected').removeClass('selected');&#13;
            presenter.$view.find('.line').not('.nonremovable').addClass('show-answers');&#13;
            if (presenter.coloring) presenter.redrawCanvas(true);&#13;
        }&#13;
    };&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.activity &amp;&amp; presenter.isShowAnswersActive) {&#13;
            var i, x, y, point1, point2;&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find('.line').not('.nonremovable').remove();&#13;
            var indexes = new Array();&#13;
            for (i = 0; i &lt; presenter.LinesIds.length; i++) {&#13;
                indexes = presenter.LinesIds[i].split('_');&#13;
                x = countX(indexes[1]); y = countY(indexes[2]);&#13;
                point1 = new Point(indexes[2], indexes[1], x, y);&#13;
                x = countX(indexes[3]); y = countY(indexes[4]);&#13;
                point2 = new Point(indexes[4], indexes[3], x, y);&#13;
                drawOneLine(point1,point2,false);&#13;
            }&#13;
            if (presenter.coloring) presenter.redrawCanvas(false);&#13;
        }&#13;
    }&#13;
    function findClosestPoint(x,y) {&#13;
        if (presenter.grid3D) {&#13;
            var column = parseInt((x * 2 + 0.25 * presenter.grid)/presenter.grid);&#13;
            var row = parseInt(3*(y + 1/6 * presenter.grid - 0.5 * presenter.grid)/presenter.grid)+1;&#13;
        } else {&#13;
            var column = parseInt((x + 0.5 * presenter.grid)/presenter.grid);&#13;
            if (x - countX(column) &gt; 0.5 * presenter.grid) column++;&#13;
            var row = parseInt((y + 0.5 * presenter.grid)/presenter.grid);&#13;
            if (y - countY(row) &gt; 0.5 * presenter.grid) row++;&#13;
        }&#13;
        point = new Point(row, column, x, y);&#13;
        return point;&#13;
    }&#13;
    function floodFill(startingPixel,fillColor) {&#13;
        var imgData = presenter.ctx.getImageData(0, 0, presenter.canvasWidth, presenter.canvasHeight);&#13;
        var pixelStack = [];&#13;
        var newPos, x, y, pixelPos, reachLeft, reachRight;&#13;
        pixelStack.push(startingPixel);&#13;
        var start = getClickedAreaColor(startingPixel[0],startingPixel[1]);&#13;
        while(pixelStack.length) {&#13;
            newPos = pixelStack.pop();&#13;
            x = newPos[0];&#13;
            y = newPos[1];&#13;
            pixelPos = (y*presenter.canvasWidth + x) * 4;&#13;
            while(y-- &gt;= 0 &amp;&amp; matchStartColor(imgData,pixelPos,start)) {&#13;
                pixelPos -= presenter.canvasWidth * 4;&#13;
            }&#13;
            pixelPos += presenter.canvasWidth * 4;&#13;
            ++y;&#13;
            reachLeft = false;&#13;
            reachRight = false;&#13;
            while(y++ &lt; presenter.canvasHeight-1 &amp;&amp; matchStartColor(imgData,pixelPos,start)) {&#13;
                colorPixel(imgData,pixelPos,fillColor);&#13;
                if(x &gt; 0) {&#13;
                    if(matchStartColor(imgData,pixelPos - 4,start)) {&#13;
                        if(!reachLeft){&#13;
                            pixelStack.push([x - 1, y]);&#13;
                            reachLeft = true;&#13;
                        }&#13;
                    } else if(reachLeft) {&#13;
                        reachLeft = false;&#13;
                    }&#13;
                }&#13;
                if(x &lt; presenter.canvasWidth-1) {&#13;
                    if(matchStartColor(imgData,pixelPos + 4,start)) {&#13;
                        if(!reachRight) {&#13;
                            pixelStack.push([x + 1, y]);&#13;
                            reachRight = true;&#13;
                        }&#13;
                    } else if(reachRight) {&#13;
                        reachRight = false;&#13;
                    }&#13;
                }&#13;
                pixelPos += presenter.canvasWidth * 4;&#13;
            }&#13;
        }&#13;
        presenter.ctx.putImageData(imgData, 0, 0);&#13;
    }&#13;
    function matchStartColor(imgData,pixelPos,start) {&#13;
        var r = imgData.data[pixelPos];&#13;
        var g = imgData.data[pixelPos+1];&#13;
        var b = imgData.data[pixelPos+2];&#13;
        var a = imgData.data[pixelPos+3];&#13;
        return (r == start[0] &amp;&amp; g == start[1] &amp;&amp; b == start[2] &amp;&amp; a == start[3]);&#13;
    }&#13;
    function colorPixel(imgData,pixelPos,fillColor) {&#13;
        imgData.data[pixelPos] = fillColor[0];&#13;
        imgData.data[pixelPos+1] = fillColor[1];&#13;
        imgData.data[pixelPos+2] = fillColor[2];&#13;
        imgData.data[pixelPos+3] = fillColor[3];&#13;
    }&#13;
    function getClickedAreaColor(x, y) {&#13;
        var data = presenter.ctx.getImageData(x, y, 1, 1).data, color = [];&#13;
        for (var i = 0; i &lt; data.length; i++) {&#13;
            color.push(data[i]);&#13;
        }&#13;
        return color;&#13;
    }&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    presenter.createEventData = function(item,value,score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerEvent = function(item, state, score) {&#13;
        var eventData = presenter.createEventData(item, state, score);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        if (presenter.getScore() == presenter.getMaxScore() &amp;&amp; presenter.activity &amp;&amp; presenter.getErrorCount() == 0) {&#13;
            eventData = presenter.createEventData('all','','');&#13;
            presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonFigureDrawing_create.__supported_player_options__ = {&#13;
    resetInterfaceVersion: 2&#13;
};&#13;
</presenter></addon>