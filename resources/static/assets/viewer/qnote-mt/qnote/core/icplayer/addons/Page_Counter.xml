<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Counter" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Numericals" nameLabel="Page_Counter_property_numericals" type="{Western Arabic,Eastern Arabic,Perso-Arabic}"/>
		<property name="startFrom" nameLabel="Page_Counter_property_start_from" type="string"/>
		<property name="omittedPagesTexts" nameLabel="Page_Counter_property_omitted_pages_texts" type="list">
			<property name="pages" nameLabel="Page_Counter_property_pages" type="string"/>
			<property name="text" nameLabel="Page_Counter_property_text" type="string"/>
		</property>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Page_counter_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Page_counter_property_speech_texts" type="staticlist">

            <property name="Page" nameLabel="Page_Counter_property_page" type="staticrow">
                <property name="Page" nameLabel="Page_Counter_property_page" type="string"/>
            </property>

            <property name="OutOf" nameLabel="Page_Counter_property_out_of" type="staticrow">
                <property name="OutOf" nameLabel="Page_Counter_property_out_of" type="string"/>
            </property>

        </property>
	</model>
<css>.pagecounter {&#13;
    text-align: center;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    border: 0px solid black;&#13;
    padding: 1px;&#13;
    color: #7C818E;&#13;
    font-family: Georgia;&#13;
    font-size: 25px;&#13;
    direction: inherit;&#13;
}&#13;
</css><view>&lt;div class="pagecounter"&gt;&#13;
    &lt;!-- Here goes current page index / page count --&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="pagecounter"&gt;&#13;
    &lt;!-- Here goes current page index / page count --&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Counter_create() {&#13;
    var presenter = function() { };&#13;
    var presentationController;&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.isCurrentlyVisible = true;&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.hide = function() {&#13;
        presenter.isCurrentlyVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    &#13;
    presenter.show = function() {&#13;
        presenter.isCurrentlyVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    &#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
    &#13;
    presenter.updateVisibility = function() {&#13;
        if (presenter.isCurrentlyVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.ERROR_CODES = {&#13;
            "L_01": "No language selected, have to be selected proper language in Numericals property",&#13;
            'ST_01': "Start from property have to be a positive integer.",&#13;
            "OPT_01": "Omitted pages texts have to be comma separated positive integers, greater than 0.",&#13;
            "OPT_02": "Omitted pages texts property can define only one text for one page.",&#13;
            "OPT_03": "Omitted pages texts property page number can't be greater than Start From property.",&#13;
            "OPT_04": "Omitted pages texts needs pages filled, not only texts",&#13;
            "OPT_05": "Omitted pages texts needs text filled, not only pages"&#13;
        };&#13;
    &#13;
    presenter.isPositiveInt = function (value) {&#13;
        if (value.trim() == "0") {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(value.trim()) == true) {&#13;
            return false;&#13;
        }&#13;
&#13;
        var exp = /[0-9]/;&#13;
        for(var i = 0 ; i &lt; value.length; i++) {&#13;
            var character = value.charAt(i);&#13;
            if(!exp.test(character)) {&#13;
                return false;&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    function getTextVoiceObject (text, lang) { return {text: text, lang: lang}; }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presentationController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
    &#13;
    presenter.validateLanguage = function (model) {&#13;
        if (model.Numericals == 'Eastern Arabic') {&#13;
            return {isValid: true, value: Internationalization.EASTERN_ARABIC};&#13;
        }&#13;
&#13;
        else if (model.Numericals == 'Perso-Arabic') {&#13;
            return {isValid: true, value: Internationalization.PERSO_ARABIC};&#13;
        }&#13;
&#13;
        return {isValid: true, value: Internationalization.WESTERN_ARABIC};&#13;
    };&#13;
&#13;
    function render(view, language, pageIndex, pageCount) {&#13;
        if (pageIndex &gt;= 0) {&#13;
            var viewContainer = $(view);&#13;
            var element = viewContainer.find(".pagecounter:first")[0];&#13;
            DOMOperationsUtils.setReducedSize(view, element);&#13;
&#13;
            var addonText = Internationalization.translate((pageIndex + 1), language) + ' / ' + Internationalization.translate(pageCount, language);&#13;
&#13;
            // This asures us that text will be center vertically&#13;
            $(element).css('line-height', $(element).height() + 'px');&#13;
            $(element).html(addonText);&#13;
        }&#13;
    }&#13;
&#13;
    function renderText(view, text) {&#13;
        var viewContainer = $(view);&#13;
        var element = viewContainer.find(".pagecounter:first")[0];&#13;
        DOMOperationsUtils.setReducedSize(view, element);&#13;
&#13;
        // This asures us that text will be center vertically&#13;
        $(element).css('line-height', $(element).height() + 'px');&#13;
        $(element).html(text);&#13;
    }&#13;
&#13;
&#13;
    presenter.validateStartFrom = function (startFrom) {&#13;
        if (ModelValidationUtils.isStringEmpty(startFrom)) {&#13;
            return { isValid: true, value: undefined};&#13;
        }&#13;
&#13;
        if (!presenter.isPositiveInt(startFrom)) {&#13;
            return { isValid: false, errorCode: "ST_01"};&#13;
        }&#13;
&#13;
        return {isValid: true, value: (parseInt(startFrom, 10) - 1)};&#13;
    };&#13;
&#13;
    function parsePages(omittedPagesTextsObject) {&#13;
        var pages = omittedPagesTextsObject.pages;&#13;
        var text = omittedPagesTextsObject.text;&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(pages) &amp;&amp; !ModelValidationUtils.isStringEmpty(text)) {&#13;
            return {isValid: false, errorCode: "OPT_04"};&#13;
        } else {&#13;
            if (ModelValidationUtils.isStringEmpty(text) &amp;&amp; !ModelValidationUtils.isStringEmpty(pages)) {&#13;
                return {isValid: false, errorCode: "OPT_05"};&#13;
            }&#13;
        }&#13;
&#13;
        pages = pages.split(",");&#13;
&#13;
        var parsedPages = [];&#13;
        for(var page = 0; page &lt; pages.length; page++) {&#13;
            var number = pages[page].trim();&#13;
&#13;
            if(!presenter.isPositiveInt(number)) {&#13;
                return {isValid: false, errorCode: "OPT_01"};&#13;
            }&#13;
&#13;
            parsedPages.push((parseInt(number, 10) - 1));&#13;
        }&#13;
        &#13;
        return {isValid: true, value: parsedPages};&#13;
    }&#13;
&#13;
    presenter.validateOmittedPagesTexts = function (model, validatedStartFrom) {&#13;
        var omittedPagesTexts = model.omittedPagesTexts;&#13;
&#13;
        if (omittedPagesTexts.length == 1 &amp;&amp;&#13;
            ModelValidationUtils.isStringEmpty(omittedPagesTexts[0].pages) &amp;&amp;&#13;
            ModelValidationUtils.isStringEmpty(omittedPagesTexts[0].text)) {&#13;
&#13;
            return {isValid: true, value: {}};&#13;
        }&#13;
&#13;
        var parsedOPT = {};&#13;
        &#13;
        for(var i = 0; i &lt; (omittedPagesTexts).length; i++) {&#13;
            var parsedPages = parsePages(omittedPagesTexts[i]);&#13;
            if(!parsedPages.isValid) {&#13;
                return parsedPages;&#13;
            }&#13;
            &#13;
            for(var page = 0; page &lt; parsedPages.value.length; page++) {&#13;
                if(parsedOPT[parsedPages.value[page]] != undefined) {&#13;
                    return {isValid: false, errorCode: "OPT_02"};&#13;
                }&#13;
&#13;
&#13;
                if(parsedPages.value[page] &gt;= validatedStartFrom) {&#13;
                    return {isValid: false, errorCode: "OPT_03"};&#13;
                }&#13;
                &#13;
                parsedOPT[parsedPages.value[page]] = omittedPagesTexts[i].text;&#13;
            }&#13;
            &#13;
        }&#13;
        &#13;
        return {isValid: true, value: parsedOPT};&#13;
    };&#13;
    &#13;
    presenter.validateModel = function(model) {&#13;
        var validatedStartFrom = presenter.validateStartFrom(model.startFrom);&#13;
        if (!validatedStartFrom.isValid) {&#13;
            return validatedStartFrom;&#13;
        }&#13;
&#13;
        var validatedOmittedPagesTexts = presenter.validateOmittedPagesTexts(model, validatedStartFrom.value);&#13;
        if (!validatedOmittedPagesTexts.isValid) {&#13;
            return validatedOmittedPagesTexts;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            ID: model.ID,&#13;
            startFrom: validatedStartFrom.value,&#13;
            omittedPagesTexts: validatedOmittedPagesTexts.value,&#13;
            Numericals: presenter.validateLanguage(model).value,&#13;
            langTag: model['langAttribute'],&#13;
            speechTexts: presenter.getSpeechTexts(model['speechTexts']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        };&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.getSpeechTexts = function(speechTexts) {&#13;
        var speechTextsModel = {&#13;
            page:  'Page',&#13;
            outOf: 'Out of'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return speechTextsModel;&#13;
        }&#13;
&#13;
        speechTextsModel = {&#13;
            page: getSpeechTextProperty(speechTexts['Page']['Page'], speechTextsModel.page),&#13;
            outOf: getSpeechTextProperty(speechTexts['OutOf']['OutOf'], speechTextsModel.outOf)&#13;
        };&#13;
&#13;
        return speechTextsModel;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeStartFromAndOPT(model);&#13;
        return presenter.upgradeAddTTS(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeStartFromAndOPT = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.startFrom == undefined) {&#13;
            upgradedModel["startFrom"] = "";&#13;
        }&#13;
&#13;
        if(model.omittedPagesTexts == undefined) {&#13;
            upgradedModel["omittedPagesTexts"] = [{"pages": "", "text": ""}];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeAddTTS = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.langAttribute == undefined) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
&#13;
        if(model.speechTexts == undefined) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Page: {Page: ''},&#13;
                OutOf: {OutOf: ''}&#13;
            };&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
    &#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
        presenter.configuration = validatedModel;&#13;
        presenter.isCurrentlyVisible = presenter.configuration.isVisible;&#13;
        if (!isPreview) {&#13;
            presenter.updateVisibility();&#13;
        }&#13;
        &#13;
        if (!validatedModel.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        var language = validatedModel.Numericals;&#13;
&#13;
        if (isPreview) {&#13;
            render(view, language, 0, 5);&#13;
        } else {&#13;
            var currentPageIndex = presentationController.getCurrentPageIndex();&#13;
            var pageCount = presentationController.getPresentation().getPageCount();&#13;
&#13;
            if (validatedModel.startFrom) {&#13;
                var modifiedPageIndex = currentPageIndex - validatedModel.startFrom;&#13;
                pageCount = pageCount - validatedModel.startFrom;&#13;
&#13;
                if (validatedModel.omittedPagesTexts[currentPageIndex]) {&#13;
                    renderText(view, validatedModel.omittedPagesTexts[currentPageIndex]);&#13;
                } else{&#13;
                    render(view, language, modifiedPageIndex, pageCount);&#13;
                }&#13;
&#13;
            } else {&#13;
                render(view, language, currentPageIndex, pageCount);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShift, event) {&#13;
        if (keyCode == 13 || keyCode == 32) {&#13;
            if(event!== null &amp;&amp; event !== undefined) {&#13;
                event.preventDefault();&#13;
            }&#13;
            presenter.clickHandler();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clickHandler = function() {&#13;
        presenter.playContent();&#13;
    };&#13;
&#13;
    presenter.playContent = function() {&#13;
        var currentPageIndex = presentationController.getCurrentPageIndex();&#13;
        var pageCount = presentationController.getPresentation().getPageCount();&#13;
        var TextVoices = [];&#13;
        if (presenter.configuration.startFrom) {&#13;
            var modifiedPageIndex = currentPageIndex - presenter.configuration.startFrom;&#13;
            pageCount = pageCount - presenter.configuration.startFrom;&#13;
            if (presenter.configuration.omittedPagesTexts[currentPageIndex]) {&#13;
                TextVoices.push(getTextVoiceObject(presenter.configuration.omittedPagesTexts[currentPageIndex], presenter.configuration.langTag));&#13;
            } else{&#13;
                if(modifiedPageIndex &lt; 0) {&#13;
                    return;&#13;
                }&#13;
                var text = presenter.configuration.speechTexts.page + ' ';&#13;
                text += (modifiedPageIndex + 1) + ' ';&#13;
                text += presenter.configuration.speechTexts.outOf + ' ';&#13;
                text += presenter.getPageCount(pageCount);&#13;
                TextVoices.push(getTextVoiceObject(text));&#13;
            }&#13;
&#13;
        } else {&#13;
            var text = presenter.configuration.speechTexts.page + ' ';&#13;
            text += (currentPageIndex + 1) + ' ';&#13;
            text += presenter.configuration.speechTexts.outOf + ' ';&#13;
            text += presenter.getPageCount(pageCount);&#13;
            TextVoices.push(getTextVoiceObject(text));&#13;
        }&#13;
        speak(TextVoices);&#13;
    };&#13;
&#13;
    presenter.getPageCount = function(pageCount) {&#13;
        var lessonLangTag = document.documentElement.lang;&#13;
        if(0 === lessonLangTag.toLowerCase().localeCompare('pl') || 0 === lessonLangTag.toLowerCase().localeCompare('pl-pl')){&#13;
            if(pageCount===2) {&#13;
                return 'dwóch';&#13;
            }&#13;
            if(pageCount===3) {&#13;
                return 'trzech';&#13;
            }&#13;
            if(pageCount===4) {&#13;
                return 'czterech';&#13;
            }&#13;
        }&#13;
        return pageCount;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isCurrentlyVisible = presenter.configuration.isVisible;&#13;
        presenter.updateVisibility();&#13;
    };&#13;
    &#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            visible : presenter.isCurrentlyVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (state === undefined || state === '') {&#13;
             presenter.isCurrentlyVisible = true;&#13;
        } else {&#13;
             var parsedState = JSON.parse(state);&#13;
             presenter.isCurrentlyVisible = parsedState.visible;&#13;
        }&#13;
&#13;
        presenter.updateVisibility();&#13;
    };&#13;
    &#13;
    presenter.isEnterable = function() {&#13;
        return false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>