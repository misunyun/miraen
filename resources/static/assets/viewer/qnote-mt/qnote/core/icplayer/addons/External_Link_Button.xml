<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="External_Link_Button" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Title" nameLabel="External_Link_Button_property_title" type="string"/>
		<property name="Image" nameLabel="External_Link_Button_property_image" type="image"/>
		<property displayName="URL" name="URI" nameLabel="External_Link_Button_property_uri" type="string"/>
        <property displayName="Target type" name="targetType" nameLabel="External_Link_Button_property_target_type" type="{Blank, Top}"/>
	</model>
<css>.external-link-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.external-link-button-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background: transparent;&#13;
    background: url('resources/elb-button.png') no-repeat center;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.external-link-button-title,&#13;
.external-link-button-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.external-link-button-title  {&#13;
	color: #00F;&#13;
	text-decoration: none;&#13;
}&#13;
</css><view>&lt;div class="external-link-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="external-link-button-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonExternal_Link_Button_create() {&#13;
    var presenter = function() {};&#13;
    &#13;
    presenter.ERROR_CODES = {&#13;
    	'M01': 'URL property cannot be empty!'&#13;
    };&#13;
    &#13;
    presenter.DISPLAY_CONTENT_TYPE = {&#13;
        NONE: 0,&#13;
        TITLE: 1,&#13;
        IMAGE: 2,&#13;
        BOTH: 3&#13;
    };&#13;
&#13;
    presenter.playerController = undefined;&#13;
    presenter.isWCAGOn = false;&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setElementsDimensions = function (model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    };&#13;
&#13;
    presenter.createImageElement = function (element) {&#13;
        var $imageElement = $(document.createElement('img'));&#13;
&#13;
        $imageElement.addClass('external-link-button-image');&#13;
        $imageElement.attr('src', presenter.configuration.image);&#13;
&#13;
        $(element).append($imageElement);&#13;
    };&#13;
    &#13;
    presenter.createTitleElement = function (element) {&#13;
        var $titleElement = $(document.createElement('span'));&#13;
&#13;
        $titleElement.addClass('external-link-button-title');&#13;
        $titleElement.html(presenter.configuration.title);&#13;
&#13;
        $(element).append($titleElement);&#13;
    };&#13;
&#13;
    presenter.createElements = function (wrapper) {&#13;
        var $ahref = $(document.createElement('a'));&#13;
        presenter.$ahref = $ahref;&#13;
        $ahref.attr('href',decodeURIComponent(presenter.configuration.URI));&#13;
&#13;
        switch(true) {&#13;
            case (presenter.configuration.targetType == 'Blank'):&#13;
            case window.navigator.userAgent.toLowerCase().includes('android'):&#13;
                $ahref.attr('target','_blank');&#13;
                break;&#13;
            case (presenter.configuration.targetType == 'Top'):&#13;
                $ahref.attr('target','_top');&#13;
                break;&#13;
            default:&#13;
                $ahref.attr('target','_blank');&#13;
                break;&#13;
        }&#13;
&#13;
        $ahref.click(function (event) { event.stopPropagation(); });&#13;
&#13;
        var $element = $(document.createElement('div'));&#13;
        $element.addClass('external-link-button-element');&#13;
        &#13;
        switch (presenter.configuration.displayContent) {&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.TITLE:&#13;
	            presenter.createTitleElement($element);&#13;
	            break;&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.IMAGE:&#13;
	            presenter.createImageElement($element);&#13;
	            break;&#13;
	        case presenter.DISPLAY_CONTENT_TYPE.BOTH:&#13;
	            presenter.createImageElement($element);&#13;
	            presenter.createTitleElement($element);&#13;
	            break;&#13;
        }&#13;
        &#13;
        $ahref.append($element);&#13;
        wrapper.append($ahref);&#13;
&#13;
        return $element;&#13;
    };&#13;
    &#13;
    presenter.getWrapper = function () {&#13;
    	return presenter.$view.find('.external-link-button-wrapper');&#13;
    };&#13;
&#13;
    presenter.isLocalResource = function (uri) {&#13;
        var regex = new RegExp('^\.\.\/resources\/[0-9]*\.[a-zA-Z]+$');&#13;
&#13;
        return regex.test(uri);&#13;
    };&#13;
&#13;
    presenter.fixLocalResourceURI = function () {&#13;
        var currentPageIndex = presenter.playerController.getCurrentPageIndex(),&#13;
            currentPage = presenter.playerController.getPresentation().getPage(currentPageIndex),&#13;
            pageBaseURL = currentPage.getBaseURL();&#13;
&#13;
        presenter.configuration.URI = pageBaseURL + presenter.configuration.URI;&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.$view = $(view);&#13;
&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
        	DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
        	return;&#13;
        }&#13;
&#13;
        if (presenter.isLocalResource(presenter.configuration.URI)) {&#13;
            presenter.fixLocalResourceURI();&#13;
        }&#13;
&#13;
        var $wrapper = presenter.getWrapper();&#13;
        var $element = presenter.createElements($wrapper);&#13;
        &#13;
        presenter.setElementsDimensions(model, $wrapper, $element);&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
    	presenter.presenterLogic(view, model);&#13;
&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
    	presenter.presenterLogic(view, model);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.determineDisplayContent = function(title, image) {&#13;
        var displayContent = presenter.DISPLAY_CONTENT_TYPE.NONE;&#13;
&#13;
        if (!title.isEmpty &amp;&amp; image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.TITLE;&#13;
        } else if (title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.IMAGE;&#13;
        } else if (!title.isEmpty &amp;&amp; !image.isEmpty) {&#13;
            displayContent = presenter.DISPLAY_CONTENT_TYPE.BOTH;&#13;
        }&#13;
&#13;
        return displayContent;&#13;
    };&#13;
    &#13;
    presenter.validateModel = function (model) {&#13;
    	if (ModelValidationUtils.isStringEmpty(model.URI)) {&#13;
    		return { isValid: false, errorCode: 'M01' };&#13;
    	}&#13;
    	&#13;
    	var image = presenter.validateString(model.Image);&#13;
    	var title = presenter.validateString(model.Title);&#13;
    	&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        &#13;
        return {&#13;
        	displayContent: presenter.determineDisplayContent(title, image),&#13;
        	isValid: true,&#13;
            title: model.Title,&#13;
            image: image.value,&#13;
            URI: decodeURIComponent(model.URI.trim()).trim(),&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            targetType: model['targetType']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };    &#13;
    &#13;
    presenter.show = function() {&#13;
        presenter.configuration.isVisible = true;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.configuration.isVisible = false;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
    &#13;
    presenter.setVisibilityFromConfig = function() {&#13;
    	presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
    	presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    	presenter.setVisibilityFromConfig();&#13;
    };&#13;
    &#13;
    presenter.getState = function() {&#13;
    	return JSON.stringify({&#13;
    		isVisible: presenter.configuration.isVisible&#13;
    	});&#13;
    };&#13;
    &#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
        presenter.setVisibilityFromConfig();&#13;
    };&#13;
&#13;
    function ExternalLinkKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    ExternalLinkKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    ExternalLinkKeyboardController.prototype.constructor = ExternalLinkKeyboardController;&#13;
&#13;
    presenter.buildKeyboardController = function AddonExternal_link_buildKeyboardController () {&#13;
        presenter.keyboardControllerObject = new ExternalLinkKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function AddonExternal_link_getElementsForKeyboardNavigation () {&#13;
        return presenter.$view.find(".external-link-button-wrapper")&#13;
    };&#13;
&#13;
&#13;
    presenter.keyboardController = function AddonExternal_link_keyboardController (keycode, isShiftKeyDown, event) {&#13;
        if (keycode == window.KeyboardControllerKeys.SPACE ||&#13;
            keycode == window.KeyboardControllerKeys.ARROW_UP ||&#13;
            keycode == window.KeyboardControllerKeys.ARROW_DOWN ||&#13;
            keycode == window.KeyboardControllerKeys.ESC)&#13;
        {&#13;
            event.preventDefault();&#13;
        }&#13;
&#13;
        if (keycode === window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.speak(presenter.configuration.title.trim());&#13;
        }&#13;
&#13;
        if (keycode === window.KeyboardControllerKeys.SPACE) {&#13;
            presenter.$ahref[0].click();&#13;
        }&#13;
    };&#13;
&#13;
    ExternalLinkKeyboardController.prototype.getTarget = function (element) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function AddonExternal_link_getTextToSpeechOrNull (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function AddonExternal_link_setWCAGStatus (isOn) {&#13;
        presenter.isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.speak = function AddonExternal_link_speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>