<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Image_Viewer_Public" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Image" nameLabel="Image_Viewer_Public_property_image" type="image"/>
		<property name="Frames" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		<property name="Frame size" nameLabel="Image_Viewer_Public_property_frame_size" type="{Original, Keep aspect ratio, Stretch}"/>
		<property name="Sounds" nameLabel="Image_Viewer_Public_property_sounds" type="list">
			<property name="MP3 sound" nameLabel="Image_Viewer_Public_property_mp3_sound" type="audio"/>
			<property name="OGG sound" nameLabel="Image_Viewer_Public_property_ogg_sound" type="audio"/>
			<property name="AAC sound" nameLabel="Image_Viewer_Public_property_aac_sound" type="audio"/>
		</property>
		<property name="Frame names" nameLabel="Image_Viewer_Public_property_frame_names" type="list">
			<property name="name" nameLabel="Image_Viewer_Public_property_name" type="string"/>
			<property name="frame" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		</property>
		<property name="Alternative texts" nameLabel="Image_Viewer_Public_property_alternative_texts" type="list">
			<property name="Alternative text" nameLabel="Image_Viewer_Public_property_alternative_text" type="text"/>
			<property name="frame" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		</property>
		<property name="isClickDisabled" nameLabel="Image_Viewer_Public_property_is_click_disabled" type="boolean"/>
		<property name="Labels" nameLabel="Image_Viewer_Public_property_labels" type="list">
			<property isLocalized="true" name="Text" nameLabel="Image_Viewer_Public_property_text" type="string"/>
			<property name="Top" nameLabel="Image_Viewer_Public_property_top" type="string"/>
			<property name="Left" nameLabel="Image_Viewer_Public_property_left" type="string"/>
			<property name="Frames" nameLabel="Image_Viewer_Public_property_frames" type="string"/>
		</property>
		<property name="Show watermark" nameLabel="Image_Viewer_Public_property_show_watermark" type="boolean"/>
		<property name="Watermark color" nameLabel="Image_Viewer_Public_property_watermark_color" type="string"/>
		<property name="Watermark opacity" nameLabel="Image_Viewer_Public_property_watermark_opacity" type="string"/>
		<property name="Watermark size" nameLabel="Image_Viewer_Public_property_watermark_size" type="string"/>
		<property name="Show frame" nameLabel="Image_Viewer_Public_property_show_frame" type="string"/>
		<property name="Animation" nameLabel="Image_Viewer_Public_property_animation" type="{None, Linear, Fading}"/>
		<property name="Correct frames" nameLabel="Image_Viewer_Public_property_correct_frames" type="string"/>
		<property name="Do not reset" nameLabel="Image_Viewer_Public_property_do_not_reset" type="boolean"/>
		<property name="Random frame" nameLabel="Image_Viewer_Public_property_random_frame" type="boolean"/>
		<property name="Initial frame" nameLabel="Image_Viewer_Public_property_initial_frame" type="string"/>
		<property name="Show frame counter" nameLabel="Image_Viewer_Public_property_show_frame_counter" type="boolean"/>
		<property name="langAttribute" nameLabel="Image_Viewer_Public_property_lang_attribute" type="string"/>
	</model>
<css>.image-viewer {&#13;
    border: none;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    float: left;&#13;
    overflow: hidden;&#13;
    background: no-repeat 0 0;&#13;
    -ms-touch-action: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-audio-wrapper audio {&#13;
    display: inherit;&#13;
}&#13;
&#13;
.image-viewer-hidden-image {&#13;
    display: none;&#13;
}&#13;
&#13;
.image-viewer-watermark,&#13;
.image-viewer-loading-image {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    display: none;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.image-viewer-label {&#13;
    border: 0;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.image-viewer-loading-image {&#13;
    z-index: 10;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.image-viewer-watermark {&#13;
    display: block;&#13;
}&#13;
&#13;
.frame-counter-wrapper {&#13;
    position: absolute;&#13;
    bottom: 5px;&#13;
    height: 10px;&#13;
    width: 100%;&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    border: 0;&#13;
    background: none;&#13;
}&#13;
&#13;
.frame-counter {&#13;
    height: 100%;&#13;
    margin-left: auto;&#13;
    margin-right: auto;&#13;
    background: none;&#13;
    display: table;&#13;
}&#13;
&#13;
.dot {&#13;
    float: left;&#13;
    width: 10px;&#13;
    height: 10px;&#13;
    -webkit-border-radius: 5px;&#13;
    -moz-border-radius: 5px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid black;&#13;
    background-color: #f0f8ff;&#13;
    margin: 0 1px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.dot.current {&#13;
    background-color: #696969;&#13;
    cursor: default;&#13;
}&#13;
</css><view>&lt;div class='image-viewer'&gt;&#13;
    &lt;div class="image-viewer-helper"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
&lt;div class="image-viewer-watermark"&gt;&lt;/div&gt;&#13;
&lt;div class="frame-counter-wrapper"&gt;&#13;
    &lt;div class="frame-counter"&gt;&#13;
        &lt;div class="dot current"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class='image-viewer'&gt;&#13;
    &lt;div class="image-viewer-helper"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;img src="/media/images/loading.gif" alt="Loading..." class="image-viewer-loading-image"/&gt;&#13;
&lt;div class="image-viewer-watermark"&gt;&lt;/div&gt;&#13;
&lt;div class="frame-counter-wrapper"&gt;&#13;
    &lt;div class="frame-counter"&gt;&#13;
        &lt;div class="dot current"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonImage_Viewer_Public_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    var playerController = null;&#13;
    var watermarkElement;&#13;
    var loadingScreen = {&#13;
        element: null,&#13;
        counter: 0&#13;
    };&#13;
    var audioElements = [];&#13;
&#13;
    presenter.addonId = null;&#13;
    presenter.upgradedModel = null;&#13;
&#13;
    presenter.lastMovePosition = null;&#13;
    presenter.totalPercentage = 0;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isMouseDown = false;&#13;
    presenter.eventBus = null;&#13;
    presenter.isWCAGSelected = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'IM_01': "Image must be uploaded to display Addon!",&#13;
        'FN_01': "Frame number must be set to properly display Addon",&#13;
        'FN_02': "Frame number is not a number!",&#13;
        'FN_03': "Frame number must be a positive integer!",&#13;
        'FN_04': "Frame name cannot be empty!",&#13;
        'FN_05': "Frame names - frame number must be between 1 and frames count",&#13;
        'LA_01': "Label text cannot be empty!",&#13;
        'LA_02': "Label top value incorrect!",&#13;
        'LA_03': "Label left value incorrect!",&#13;
        'LA_04': "All label fields must be filled correctly!",&#13;
        'FL_01': "Label must be assigned to at least one frame!",&#13;
        'FL_02': "Frames list syntax incorrect! Check for separators!",&#13;
        'FL_03': "Frame number is invalid!",&#13;
        'FL_04': "Frame number missing inside list!",&#13;
        'FL_05': "Frame numbers range incorrect!",&#13;
        'WM_01': "Watermark color must be provided in #RRGGBB format!",&#13;
        'WM_02': "Watermark opacity must be a value from 0.0 to 1.0!",&#13;
        'WM_03': "Watermark size must be a positive integer number!",&#13;
        'CF_01': "Correct frame number must be between 1 and frames count!",&#13;
        'IF_01': "Initial frame is out of range. Please choose number between 1 and frames count."&#13;
    };&#13;
&#13;
    presenter.FRAME_SIZE = {&#13;
        'Original': 'ORIGINAL',&#13;
        'Keep aspect ratio': 'SCALED',&#13;
        'Stretch': 'STRETCHED',&#13;
        DEFAULT: 'Original'&#13;
    };&#13;
&#13;
    presenter.ANIMATION = {&#13;
        'None': 'NONE',&#13;
        'Linear': 'LINEAR',&#13;
        'Fading': 'FADING',&#13;
        DEFAULT: 'None'&#13;
    };&#13;
&#13;
    presenter.configuration = {};&#13;
&#13;
    presenter.changeFrameData = {&#13;
        isPreview: false,&#13;
        isReverseOrder: false,&#13;
        triggerEvent: false&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeFrom_01(model);&#13;
        upgradedModel =  presenter.upgradeFrom_02(upgradedModel);&#13;
        upgradedModel = presenter.upgradeAddAltTexts(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Do not reset"]) {&#13;
            upgradedModel["Do not reset"] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_02 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Random frame"]) {&#13;
            upgradedModel["Random frame"] = false;&#13;
        }&#13;
&#13;
        if (!upgradedModel["Initial frame"]) {&#13;
            upgradedModel["Initial frame"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeAddAltTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
&#13;
        if (!upgradedModel["Alternative texts"]) {&#13;
            upgradedModel["Alternative texts"] =&#13;
                [{&#13;
                    "Alternative text": "",&#13;
                    "frame": ""&#13;
                }];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function showErrorMessage(element, errorCode) {&#13;
        $(element).html(presenter.ERROR_CODES[errorCode]);&#13;
    }&#13;
&#13;
    function setContainerDimensions(wrapper) {&#13;
        var elementReducedSize = DOMOperationsUtils.calculateReducedSize(wrapper, presenter.$element);&#13;
        $(presenter.$element).css({&#13;
            width: elementReducedSize.width,&#13;
            height: elementReducedSize.height&#13;
        });&#13;
&#13;
        presenter.configuration.containerDimensions = {&#13;
            width: elementReducedSize.width,&#13;
            height: elementReducedSize.height&#13;
        };&#13;
    }&#13;
&#13;
    function loadSounds() {&#13;
        // Check for browser audio tag support&#13;
        if (!buzz.isSupported()) {&#13;
            return;&#13;
        }&#13;
&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
        showLoadingScreen();&#13;
&#13;
        for (var i = 0; i &lt; presenter.configuration.frames; i++) {&#13;
            if ((i &gt; presenter.configuration.sounds.length - 1 ) || presenter.configuration.sounds[i].isEmpty) {&#13;
                audioElements[i] = null;&#13;
            } else {&#13;
                if (presenter.configuration.sounds[i].MP3 !== "" &amp;&amp; buzz.isMP3Supported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].MP3);&#13;
                } else if (presenter.configuration.sounds[i].OGG !== "" &amp;&amp; buzz.isOGGSupported()) {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].OGG);&#13;
                } else {&#13;
                    audioElements[i] = new buzz.sound(presenter.configuration.sounds[i].AAC);&#13;
                }&#13;
&#13;
                audioElements[i].load();&#13;
            }&#13;
        }&#13;
&#13;
        hideLoadingScreen();&#13;
    }&#13;
&#13;
    function hideWatermarkIfVisible() {&#13;
        if ($(watermarkElement).is(':visible')) {&#13;
            $(watermarkElement).hide();&#13;
        }&#13;
    }&#13;
&#13;
    function showWatermarkIfNotVisible() {&#13;
        if ($(watermarkElement).not(':visible')) {&#13;
            $(watermarkElement).show();&#13;
        }&#13;
    }&#13;
&#13;
    function clickHandler(e) {&#13;
        if (e)&#13;
            e.stopPropagation();&#13;
&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            return;&#13;
        }&#13;
&#13;
        hideWatermarkIfVisible();&#13;
&#13;
        presenter.next();&#13;
    }&#13;
&#13;
    function isMoreThanOneFingerGesture(event) {&#13;
        var touch, touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches&#13;
        return touchPoints.length&gt; 1;&#13;
    }&#13;
&#13;
    function touchStartCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0]&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        mouseDownCallback(touch);&#13;
    }&#13;
&#13;
    function getFixedBackgroundPosition() {&#13;
        return parseInt(presenter.$element.css('backgroundPosition'), 10);&#13;
    }&#13;
&#13;
    function mouseDownCallback(event) {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        presenter.mouseData.isMouseDown = true;&#13;
        presenter.mouseData.oldPosition.x = event.pageX;&#13;
        presenter.mouseData.oldPosition.y = event.pageY;&#13;
    }&#13;
&#13;
    function touchEndCallback () {&#13;
        mouseUpCallback();&#13;
    }&#13;
&#13;
    function getRequiredShift() {&#13;
        return (presenter.$element.width() / 100) * 30; // 30% of frame width&#13;
    }&#13;
&#13;
    function mouseUpCallback() {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) {&#13;
            presenter.mouseData.isMouseDown = false;&#13;
            delete presenter.mouseData.originalBackgroundPosition;&#13;
            return;&#13;
        }&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        var originalAnimation = presenter.configuration.animation;&#13;
        presenter.configuration.animation = presenter.ANIMATION.Linear;&#13;
&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            var currentBackgroundPosition = getFixedBackgroundPosition(),&#13;
                shift = Math.abs(currentBackgroundPosition - presenter.mouseData.originalBackgroundPosition),&#13;
                isNextFrameShift = currentBackgroundPosition - presenter.mouseData.originalBackgroundPosition &lt; 0;&#13;
&#13;
            // Restoring percentage calculation of background position&#13;
            var newPosition = Math.abs(currentBackgroundPosition) / (presenter.configuration.backgroundImageWidth - presenter.$element.width());&#13;
            newPosition *= 100;&#13;
            presenter.$element.css('backgroundPosition', newPosition + '%');&#13;
&#13;
            if (shift &gt; getRequiredShift()) {&#13;
                var currentFrame = presenter.configuration.currentFrame;&#13;
                var framesCount = presenter.configuration.frames;&#13;
&#13;
                if (isNextFrameShift) {&#13;
                    if (currentFrame &lt; framesCount - 1) {&#13;
                        presenter.next();&#13;
                    } else {&#13;
                        presenter.configuration.currentFrame = 0;&#13;
                        presenter.$element.css({&#13;
                            'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
                        });&#13;
                        presenter.$element.animate({&#13;
                            'background-position':'0%'&#13;
                        }, 500, "linear");&#13;
                        presenter.changeFrameLogic(false, true);&#13;
                    }&#13;
                } else {&#13;
                    if (currentFrame !== 0) {&#13;
                        presenter.previous();&#13;
                    } else {&#13;
                        presenter.configuration.currentFrame = framesCount - 1;&#13;
                        presenter.$element.css({&#13;
                            'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
                        });&#13;
                        presenter.$element.animate({&#13;
                            'background-position':'100%'&#13;
                        }, 500, "linear")&#13;
                        presenter.changeFrameLogic(false, true);&#13;
                    }&#13;
                    presenter.configuration.currentFrame = currentFrame &gt; 1 ? currentFrame - 1 : framesCount - 1;&#13;
                }&#13;
&#13;
            } else {&#13;
                var isReverseOrder = presenter.configuration.currentFrame === 0;&#13;
                presenter.changeFrame(false, isReverseOrder, false, false);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.configuration.animation = originalAnimation;&#13;
        presenter.mouseData.isMouseDown = false;&#13;
        delete presenter.mouseData.originalBackgroundPosition;&#13;
&#13;
        if (!MobileUtils.isWindowsMobile(window.navigator) &amp;&amp; presenter.isMobileDevice) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
        }&#13;
        if (MobileUtils.isWindowsMobile(window.navigator) &amp;&amp; shift &lt;= getRequiredShift()) {&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            clickHandler(false);&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
        }&#13;
    }&#13;
&#13;
    function touchMoveCallback (event) {&#13;
        if (isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        event.preventDefault();&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0]&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        mouseMoveCallback(touch);&#13;
    }&#13;
&#13;
    function mouseMoveCallback(event) {&#13;
        if (presenter.configuration.isClickDisabled) return;&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
        if(presenter.isShowAnswersActive) return;&#13;
&#13;
        if (presenter.mouseData.isMouseDown) {&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
&#13;
            if (presenter.$element.css('background-position').indexOf('px') == -1) {&#13;
                var oldPositionInPx = (-1 * presenter.configuration.currentFrame) * presenter.$element.width();&#13;
                presenter.$element.css('backgroundPosition', oldPositionInPx + 'px');&#13;
                presenter.mouseData.originalBackgroundPosition = oldPositionInPx;&#13;
            }&#13;
&#13;
            var relativeDistance = event.pageX - presenter.mouseData.oldPosition.x,&#13;
                oldPosition = parseInt(presenter.$element.css('backgroundPosition'), 10);&#13;
            presenter.$element.css('backgroundPosition', (oldPosition + relativeDistance) + 'px');&#13;
&#13;
            presenter.mouseData.oldPosition.x = event.pageX;&#13;
            presenter.mouseData.oldPosition.y = event.pageY;&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Calculate scale for image containing element depending on frame aspect ratio&#13;
     *&#13;
     * @return {Object} calculated horizontal and vertical scale&#13;
     */&#13;
    presenter.calculateContainerDimensions = function(imageWidth, imageHeight, containerWidth, containerHeight) {&#13;
        var imageRatio = imageWidth / imageHeight;&#13;
        var containerRatio = containerWidth / containerHeight;&#13;
&#13;
        var horizontal = imageRatio &gt;= containerRatio ? containerWidth : containerHeight * imageRatio;&#13;
        var vertical = imageRatio &gt;= containerRatio ? containerWidth / imageRatio : containerHeight;&#13;
&#13;
        return {&#13;
            horizontal: horizontal,&#13;
            vertical: vertical&#13;
        };&#13;
    };&#13;
&#13;
&#13;
    // This function returns string containing CSS declaration of elements&#13;
    // background image size in percentage measure&#13;
    function calculateBackgroundSize(size, framesCount) {&#13;
        var cssValue;&#13;
&#13;
        switch(size) {&#13;
            case 'SCALED':&#13;
            case 'STRETCHED':&#13;
                cssValue = framesCount * 100;&#13;
                cssValue += '% 100%';&#13;
                break;&#13;
            default:&#13;
                cssValue = '';&#13;
        }&#13;
&#13;
        return cssValue;&#13;
    }&#13;
&#13;
    function shouldShowWatermark() {&#13;
        return presenter.configuration.showWatermark &amp;&amp; !presenter.configuration.isClickDisabled;&#13;
    }&#13;
&#13;
    function calculateWidth (containerWidth, imageWidth) {&#13;
        var differenceContainerElement = containerWidth - (imageWidth / presenter.configuration.frames);&#13;
        var differenceImage = differenceContainerElement * presenter.configuration.frames;&#13;
&#13;
        var scaleWidth = imageWidth + differenceImage;&#13;
&#13;
        return {&#13;
            scaleWidth: scaleWidth,&#13;
            differenceContainerElement: differenceContainerElement,&#13;
            elementWidth: (imageWidth / presenter.configuration.frames) + differenceContainerElement&#13;
        }&#13;
    }&#13;
&#13;
    function loadImage(preview) {&#13;
        var tempImageElement = document.createElement('img');&#13;
        $(tempImageElement).addClass('image-viewer-hidden-image');&#13;
        $(tempImageElement).attr('src', presenter.configuration.imageSrc);&#13;
        $(presenter.$view).append(tempImageElement);&#13;
&#13;
        $(tempImageElement).load(function() {&#13;
            var containerWidth = presenter.configuration.containerDimensions.width;&#13;
            var containerHeight = presenter.configuration.containerDimensions.height;&#13;
            var imageWidth = $(this).width();&#13;
            var imageHeight = $(this).height();&#13;
            var containerDimensions = presenter.calculateContainerDimensions(imageWidth / presenter.configuration.frames, imageHeight, containerWidth, containerHeight);&#13;
            var backgroundSize = calculateBackgroundSize(presenter.configuration.frameSize, presenter.configuration.frames);&#13;
&#13;
            var elementWidth;&#13;
            var elementHeight;&#13;
&#13;
            switch (presenter.configuration.frameSize) {&#13;
                case 'ORIGINAL':&#13;
                    elementWidth = imageWidth / presenter.configuration.frames;&#13;
                    elementHeight = imageHeight;&#13;
                    break;&#13;
                case 'SCALED':&#13;
                    var calculatedWidthScale = calculateWidth(containerWidth, imageWidth);&#13;
                    $(this).width(calculatedWidthScale.scaleWidth);&#13;
&#13;
                    elementWidth = calculatedWidthScale.elementWidth;&#13;
                    elementHeight = containerDimensions.vertical;&#13;
                    break;&#13;
                case 'STRETCHED':&#13;
                    var calculatedWidthStretched = calculateWidth(containerWidth, imageWidth);&#13;
                    $(this).width(calculatedWidthStretched.scaleWidth);&#13;
&#13;
                    elementWidth = calculatedWidthStretched.elementWidth;&#13;
                    elementHeight = containerHeight;&#13;
                    break;&#13;
            }&#13;
&#13;
            presenter.$element.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px',&#13;
                backgroundImage: "url('" + presenter.configuration.imageSrc + "')"&#13;
            });&#13;
            presenter.$elementHelper.css({&#13;
                width: elementWidth + 'px',&#13;
                height: elementHeight + 'px'&#13;
            });&#13;
&#13;
            if (backgroundSize) {&#13;
                $(presenter.$element).css('background-size', backgroundSize);&#13;
            }&#13;
&#13;
            presenter.configuration.backgroundImageWidth = $(this).width();&#13;
&#13;
            $(this).remove();&#13;
            presenter.changeFrame(true, false, false, false);&#13;
&#13;
            if (shouldShowWatermark()) {&#13;
                var watermarkOptions = {&#13;
                    "color": presenter.model["Watermark color"],&#13;
                    "opacity": presenter.model["Watermark opacity"],&#13;
                    "size": presenter.model["Watermark size"]&#13;
                };&#13;
                Watermark.draw(watermarkElement, watermarkOptions);&#13;
            }&#13;
&#13;
            hideLoadingScreen();&#13;
            presenter.$view.trigger("onLoadImageEnd", [preview]);&#13;
        });&#13;
    }&#13;
&#13;
    function prepareLoadingScreen(containerWidth, containerHeight) {&#13;
        $(loadingScreen.element).css({&#13;
            top: ((containerHeight - $(loadingScreen.element).height()) / 2) + 'px',&#13;
            left: ((containerWidth - $(loadingScreen.element).width()) / 2) + 'px'&#13;
        });&#13;
    }&#13;
&#13;
    function showLoadingScreen() {&#13;
        $(loadingScreen.element).show();&#13;
        loadingScreen.counter++;&#13;
    }&#13;
&#13;
    function hideLoadingScreen() {&#13;
        loadingScreen.counter--;&#13;
        if (loadingScreen.counter === 0) {&#13;
            $(loadingScreen.element).hide();&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Creates label SPAN element and appends it to Addon space&#13;
     *&#13;
     * @param label&#13;
     * @return newly created element DOM reference&#13;
     */&#13;
    function createLabelElement(label) {&#13;
        var labelElement = document.createElement('span');&#13;
&#13;
        $(labelElement).addClass('image-viewer-label');&#13;
        $(labelElement).html(label.text);&#13;
        $(labelElement).css({&#13;
            top: label.top + 'px',&#13;
            left: label.left + 'px'&#13;
        });&#13;
&#13;
        $(presenter.$view).append(labelElement);&#13;
&#13;
        return labelElement;&#13;
    }&#13;
&#13;
    function loadLabels() {&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            presenter.configuration.labels[i].element = createLabelElement(presenter.configuration.labels[i]);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.hideLabels = function () {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
    };&#13;
&#13;
    /**&#13;
     * Displays labels that are assigned to given frame.&#13;
     *&#13;
     * @param frame frame number counted from 1 to n&#13;
     */&#13;
    presenter.displayLabels = function (frame) {&#13;
        $(presenter.$view).find('.image-viewer-label').css('visibility', 'hidden');&#13;
        for (var i = 0; i &lt; presenter.configuration.labels.length; i++) {&#13;
            var label = presenter.configuration.labels[i];&#13;
            for (var j = 0; j &lt; label.frames.length; j++) {&#13;
                if (frame === label.frames[j]) {&#13;
                    $(label.element).css('visibility', 'visible');&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function attachEventHandlers() {&#13;
&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$element[0].addEventListener("MSPointerDown", touchStartCallback, false);&#13;
            presenter.$element[0].addEventListener("MSPointerUp", touchEndCallback, false);&#13;
            presenter.$element[0].addEventListener("MSPointerMove", touchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$element[0].ontouchstart = touchStartCallback;&#13;
            presenter.$element[0].ontouchend = touchEndCallback;&#13;
            presenter.$element[0].ontouchmove = touchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$element.mousedown(mouseDownCallback);&#13;
            presenter.$element.mouseup(mouseUpCallback);&#13;
            presenter.$element.mousemove(mouseMoveCallback);&#13;
        }&#13;
&#13;
        presenter.$element.click(clickHandler);&#13;
&#13;
        $(watermarkElement).click(function(e) {&#13;
            e.stopPropagation();&#13;
&#13;
            $(watermarkElement).hide();&#13;
            clickHandler(e);&#13;
        });&#13;
&#13;
        if (presenter.configuration.showFrameCounter) {&#13;
            var $frameCounter = presenter.$view.find('.frame-counter:first');&#13;
&#13;
            $frameCounter.find('.dot').each(function (index) {&#13;
                $(this).click(function (e) {&#13;
                    e.stopPropagation();&#13;
&#13;
                    if (presenter.configuration.isClickDisabled) return;&#13;
                    if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
                    if (index === presenter.configuration.currentFrame) return;&#13;
&#13;
                    hideWatermarkIfVisible();&#13;
&#13;
                    presenter.moveToFrame(index + 1);&#13;
                });&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function loadImagesCallback(preview) {&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) {&#13;
            presenter.getMaxScore = undefined;&#13;
            presenter.getScore = undefined;&#13;
            presenter.getErrorCount = undefined;&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            loadSounds();&#13;
&#13;
            if (!presenter.configuration.isClickDisabled) {&#13;
                attachEventHandlers();&#13;
            }&#13;
        }&#13;
        presenter.imageLoadedDeferred.resolve();&#13;
    }&#13;
&#13;
    function loadImageEndCallback() {&#13;
        var configuration = presenter.configuration;&#13;
&#13;
        if(!configuration.showWatermark) {&#13;
            $(watermarkElement).remove();&#13;
        }&#13;
        presenter.setVisibility(configuration.currentVisibility);&#13;
        presenter.changeFrame(presenter.changeFrameData.isPreview, presenter.changeFrameData.isReverseOrder, presenter.changeFrameData.triggerEvent, false);&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
&#13;
        presenter.imageLoadedDeferred = new jQuery.Deferred();&#13;
        presenter.imageLoaded = presenter.imageLoadedDeferred.promise();&#13;
        presenter.addonId = upgradedModel.ID;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = upgradedModel;&#13;
        presenter.isPreview = isPreview;&#13;
        presenter.$element = $(presenter.$view.find('.image-viewer:first')[0]);&#13;
        presenter.$elementHelper = $(presenter.$view.find('.image-viewer-helper:first')[0]);&#13;
        loadingScreen.element = presenter.$view.find('.image-viewer-loading-image:first')[0];&#13;
        watermarkElement = presenter.$view.find('.image-viewer-watermark:first')[0];&#13;
&#13;
        if (!isPreview) {&#13;
            var loadingSrc = DOMOperationsUtils.getResourceFullPath(playerController, "media/loading.gif");&#13;
            if (loadingSrc) $(loadingScreen.element).attr('src', loadingSrc);&#13;
        }&#13;
&#13;
        var configuration = presenter.validateModel(upgradedModel);&#13;
        if (configuration.isError) {&#13;
            showErrorMessage(view, configuration.errorCode);&#13;
        } else {&#13;
            showLoadingScreen();&#13;
&#13;
            presenter.configuration = configuration;&#13;
            presenter.configuration.frameWidthPercentage = 100 / (presenter.configuration.frames - 1);&#13;
            presenter.configuration.isErrorMode = false;&#13;
&#13;
            // Initialize mouse data&#13;
            presenter.mouseData = {&#13;
                isMouseDown : false,&#13;
                oldPosition : { x: 0, y: 0 },&#13;
                isMouseDragged : false&#13;
            };&#13;
&#13;
            if (isPreview) {&#13;
                presenter.configuration.currentFrame = presenter.configuration.showFrame &lt;= presenter.configuration.frames ? presenter.configuration.showFrame - 1 : 0;&#13;
            } else {&#13;
                presenter.setCurrentFrame();&#13;
            }&#13;
&#13;
            setContainerDimensions(view);&#13;
            prepareLoadingScreen(upgradedModel.Width, upgradedModel.Height);&#13;
            presenter.adjustFrameCounter();&#13;
            loadLabels();&#13;
&#13;
            presenter.$view.bind("onLoadImageEnd", function (event, isPreview) {&#13;
                loadImagesCallback(isPreview);&#13;
            });&#13;
            if(!isPreview){&#13;
                presenter.pageLoaded.then(function() {&#13;
                    loadImage(isPreview);&#13;
                });&#13;
            }else{&#13;
                loadImage(isPreview);&#13;
            }&#13;
            presenter.setVisibility(presenter.configuration.defaultVisibility || isPreview);&#13;
            if (presenter.configuration.defaultVisibility) {&#13;
                presenter.displayLabels(1);&#13;
            }&#13;
&#13;
            if (!configuration.showWatermark) {&#13;
                hideWatermarkIfVisible();&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.adjustFrameCounter = function () {&#13;
        var $wrapper = presenter.$view.find('.frame-counter-wrapper:first'), i, $dot,&#13;
            $frameCounter = $wrapper.find('.frame-counter:first');&#13;
&#13;
        if (!presenter.configuration.showFrameCounter) {&#13;
            $wrapper.remove();&#13;
            return;&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; presenter.configuration.frames - 1; i++) {&#13;
            $dot = $(document.createElement('div'));&#13;
            $dot.addClass('dot');&#13;
            $frameCounter.append($dot);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeCurrentDot = function () {&#13;
        var $frameCounter = presenter.$view.find('.frame-counter:first');&#13;
&#13;
        $frameCounter.find('.dot.current').removeClass('current');&#13;
        $frameCounter.find('.dot:eq(' + presenter.configuration.currentFrame + ')').addClass('current');&#13;
    };&#13;
&#13;
    presenter.setCurrentFrame = function() {&#13;
        if(presenter.configuration.initialFrame) {&#13;
            presenter.configuration.currentFrame = presenter.configuration.initialFrame - 1;&#13;
        } else if(presenter.configuration.isRandomFrame) {&#13;
            presenter.configuration.currentFrame = presenter.getRandomFrame();&#13;
        } else {&#13;
            presenter.configuration.currentFrame = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var currentFrame = presenter.configuration.currentFrame,&#13;
            framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.currentFrame = currentFrame === framesCount - 1 ? 0 : currentFrame + 1;&#13;
        presenter.changeFrame(false, false, true, true);&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var currentFrame = presenter.configuration.currentFrame,&#13;
            framesCount = presenter.configuration.frames;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.currentFrame = currentFrame === 0 ? framesCount - 1 : currentFrame - 1;&#13;
        presenter.changeFrame(false, true, true, true);&#13;
    };&#13;
&#13;
    presenter.isValidFrameNumber = function(frame, framesCount) {&#13;
        return !isNaN(frame) &amp;&amp; frame &gt; 0 &amp;&amp; frame &lt;= framesCount;&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommand = function(params) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var framesCount = presenter.configuration.frames,&#13;
            currentFrame = presenter.configuration.currentFrame,&#13;
            validatedFrame = ModelValidationUtils.validateIntegerInRange(params[0], framesCount, 1);&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (validatedFrame.isValid &amp;&amp; validatedFrame.value - 1 !== currentFrame) {&#13;
            var isReverseOrder = currentFrame &gt; validatedFrame.value - 1;&#13;
            presenter.configuration.currentFrame = validatedFrame.value - 1;&#13;
&#13;
            presenter.changeFrameData = {&#13;
                isPreview: false,&#13;
                isReverseOrder: isReverseOrder,&#13;
                triggerEvent: true&#13;
            };&#13;
&#13;
            $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
            presenter.readFrame(presenter.configuration.currentFrame);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrame = function (frame) {&#13;
        presenter.moveToFrameCommand([frame]);&#13;
    };&#13;
&#13;
    presenter.isValidFrameName = function (frameName) {&#13;
        var isInvalid = !frameName || frameName === "";&#13;
&#13;
        return !isInvalid;&#13;
    };&#13;
&#13;
    presenter.findFrame = function (name, frames) {&#13;
        for (var i = 0, length = frames.length; i &lt; length; i++) {&#13;
            if (frames[i].name == name) {&#13;
                return {&#13;
                    found: true,&#13;
                    frameNumber: parseInt(frames[i].frame, 10)&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            found: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.moveToFrameNameCommand = function (params) {&#13;
        var frameFindResult, frameNumber;&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (!presenter.isValidFrameName(params[0])) return;&#13;
&#13;
        frameFindResult = presenter.findFrame(params[0], presenter.configuration.frameNames);&#13;
        if (!frameFindResult.found) return;&#13;
&#13;
        frameNumber = frameFindResult.frameNumber;&#13;
        if (frameNumber - 1 !== presenter.configuration.currentFrame) {&#13;
            var currentFrame = presenter.configuration.currentFrame;&#13;
            var isReverseOrder = currentFrame &gt; frameNumber - 1;&#13;
            presenter.configuration.currentFrame = frameNumber - 1;&#13;
            presenter.changeFrame(false, isReverseOrder, true, true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameName = function (frameName) {&#13;
        presenter.moveToFrameNameCommand([frameName]);&#13;
    };&#13;
&#13;
    presenter.getRandomFrame = function() {&#13;
        var frames = presenter.configuration.frames;&#13;
        return Math.floor( Math.random() * frames );&#13;
    };&#13;
&#13;
    presenter.setClickDisabled = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = true;&#13;
        hideWatermarkIfVisible();&#13;
    };&#13;
    presenter.setClickEnabled = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = false;&#13;
        if (presenter.configuration.showWatermarkbyDefault) {&#13;
            showWatermarkIfNotVisible();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorMode &amp;&amp; presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        var commands = {&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'moveToFrame': presenter.moveToFrameCommand,&#13;
            'moveToFrameName': presenter.moveToFrameNameCommand,&#13;
            'getCurrentFrame': presenter.getCurrentFrame,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'setClickDisabled': presenter.setClickDisabled,&#13;
            'setClickEnabled': presenter.setClickEnabled&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(true);&#13;
        presenter.displayLabels(presenter.configuration.currentFrame + 1);&#13;
        presenter.configuration.currentVisibility = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.setVisibility(false);&#13;
        presenter.hideLabels();&#13;
        presenter.configuration.currentVisibility = false;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.$element.addClass('correct');&#13;
        presenter.$element.removeClass('wrong');&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.$element.addClass('wrong');&#13;
        presenter.$element.removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.getCurrentFrame = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.configuration.currentFrame + 1;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.validateAnimation = function (animation) {&#13;
        return ModelValidationUtils.validateOption(presenter.ANIMATION, animation);&#13;
    };&#13;
&#13;
    presenter.validateFrameSize = function(size) {&#13;
        return ModelValidationUtils.validateOption(presenter.FRAME_SIZE, size);&#13;
    };&#13;
&#13;
    presenter.validateImage = function(imageSrc) {&#13;
        if (ModelValidationUtils.isStringWithPrefixEmpty(imageSrc, '/file/')) {&#13;
            return { isError : true, errorCode: "IM_01" };&#13;
        }&#13;
&#13;
        return { isError: false, image : imageSrc };&#13;
    };&#13;
&#13;
    presenter.validateFrameNumber = function(frame) {&#13;
        if (!frame) return { isError: true, errorCode: "FN_01" };&#13;
&#13;
        var parsedFrame = parseInt(frame, 10);&#13;
&#13;
        if (isNaN(parsedFrame)) return { isError:true, errorCode:"FN_02" };&#13;
        if (parsedFrame &lt; 1) return { isError:true, errorCode:"FN_03" };&#13;
&#13;
        return { isError: false, frames : parsedFrame };&#13;
    };&#13;
&#13;
    presenter.validateAlternativeTexts = function (altTexts, framesNumber) {&#13;
        var parsedAltTexts = [];&#13;
&#13;
        for (var i = 0; i &lt; framesNumber; i++) parsedAltTexts.push("");&#13;
&#13;
        if (altTexts.length != 1 || altTexts[0]["Alternative text"] != "") {&#13;
            for (var i = 0; i &lt; altTexts.length; i++) {&#13;
                var alt = altTexts[i];&#13;
                var parsedNumber = presenter.validateFrameNumber(alt.frame);&#13;
                if (parsedNumber.isError) return parsedNumber;&#13;
                parsedAltTexts[parsedNumber.frames - 1] = alt["Alternative text"];&#13;
            }&#13;
        }&#13;
        return { isError: false, altTexts: parsedAltTexts };&#13;
&#13;
    };&#13;
&#13;
    presenter.validateSound = function(soundsArray) {&#13;
        var sounds = [];&#13;
&#13;
        if (soundsArray &amp;&amp; $.isArray(soundsArray)) {&#13;
            for (var i = 0; i &lt; soundsArray.length; i++) {&#13;
                var isMP3Empty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['MP3 sound'], '/file/');&#13;
                var isAACEmpty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['AAC sound'], '/file/');&#13;
                var isOGGEmpty = ModelValidationUtils.isStringWithPrefixEmpty(soundsArray[i]['OGG sound'], '/file/');&#13;
                var isEmpty = isMP3Empty &amp;&amp; isAACEmpty &amp;&amp; isOGGEmpty;&#13;
&#13;
                sounds.push({&#13;
                    AAC : isAACEmpty ? "" : soundsArray[i]['AAC sound'],&#13;
                    OGG : isOGGEmpty ? "" : soundsArray[i]['OGG sound'],&#13;
                    MP3 : isMP3Empty ? "" : soundsArray[i]['MP3 sound'],&#13;
                    isEmpty : isEmpty&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            sounds : sounds&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateFrameNames = function(frameNames, frames) {&#13;
        var frameNamesArray = [];&#13;
&#13;
        var frameNamesEmpty = false;&#13;
        if (frameNames &amp;&amp; $.isArray(frameNames)) {&#13;
            var firstName = frameNames[0].name;&#13;
            var firstFrame = frameNames[0].frame;&#13;
            if (firstFrame === "" &amp;&amp; firstName === "") {&#13;
                frameNamesEmpty = true;&#13;
            } else {&#13;
                for (var j = 0; j &lt; frameNames.length; j++) {&#13;
                    var frame = frameNames[j]['frame'];&#13;
                    var name = frameNames[j]['name'];&#13;
&#13;
                    if (!name || name === null || name === "") {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: "FN_04"&#13;
                        };&#13;
                    }&#13;
&#13;
                    var validatedFrame = presenter.validateFrameNumber(frame);&#13;
                    if (validatedFrame.isError) {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: validatedFrame.errorCode&#13;
                        };&#13;
                    }&#13;
&#13;
                    if (validatedFrame.frames &gt; frames) {&#13;
                        return {&#13;
                            isError: true,&#13;
                            errorCode: "FN_05"&#13;
                        };&#13;
                    }&#13;
&#13;
                    frameNamesArray.push({&#13;
                        name: name,&#13;
                        frame: frame&#13;
                    });&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            frameNames: frameNamesArray,&#13;
            frameNamesEmpty: frameNamesEmpty&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * This function validates and converts number from string representation to integer value&#13;
     */&#13;
    presenter.validatePosition = function (position) {&#13;
        var validatedPosition = ModelValidationUtils.validateInteger(position);&#13;
&#13;
        if (!validatedPosition.isValid) {&#13;
            return { isError:true };&#13;
        }&#13;
&#13;
        if (validatedPosition.value &lt; 0) {&#13;
            return { isError:true };&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            position: validatedPosition.value&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Removes duplicates from sorted array of numbers&#13;
     *&#13;
     * @param array sorted array of numbers&#13;
     * @return array with removed duplicates&#13;
     */&#13;
    presenter.removeDuplicatesFromArray = function(array) {&#13;
        if (array.length === 0) {&#13;
            return [];&#13;
        }&#13;
&#13;
        var results = [];&#13;
&#13;
        for (var i = 0; i &lt; array.length - 1; i++) {&#13;
            if (array[i + 1] !== array[i]) {&#13;
                results.push(array[i]);&#13;
            }&#13;
        }&#13;
&#13;
        results.push(array[array.length - 1]);&#13;
&#13;
        return results;&#13;
    };&#13;
&#13;
    /**&#13;
     * Validates frames numbers list separated with commas&#13;
     *&#13;
     * @param frames string representation of frames list&#13;
     * @param count frames count&#13;
     *&#13;
     * @return array of frames numbers counted from 1 to n&#13;
     */&#13;
    presenter.validateFramesList = function (frames, count) {&#13;
        var list = [];&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(frames)) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_01"&#13;
            };&#13;
        }&#13;
&#13;
        var regExp = new RegExp('[0-9a-zA-Z\,\-]+'); // Only digits and commas are allowed in slides list&#13;
        var matchResult = frames.match(regExp);&#13;
        if (matchResult === null || frames.length !== matchResult[0].length) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: "FL_02"&#13;
            };&#13;
        }&#13;
&#13;
        var splittedFrames = frames.split(',');&#13;
        for (var i = 0; i &lt; splittedFrames.length; i++) {&#13;
            if (ModelValidationUtils.isStringEmpty(splittedFrames[i])) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_04"&#13;
                };&#13;
            }&#13;
&#13;
            var indexOfRange = splittedFrames[i].search('-');&#13;
            if (indexOfRange !== -1) {&#13;
                var rangeEnd = splittedFrames[i].split('-')[1];&#13;
                var validatedRangeEnd = ModelValidationUtils.validateIntegerInRange(rangeEnd, count, 1);&#13;
                if (!validatedRangeEnd.isValid) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_05"&#13;
                    };&#13;
                }&#13;
&#13;
                var rangeStart = splittedFrames[i].split('-')[0];&#13;
                var validatedRangeStart = ModelValidationUtils.validateIntegerInRange(rangeStart, rangeEnd.value, 1);&#13;
                if (!validatedRangeStart.isValid || validatedRangeStart.value &gt; validatedRangeEnd.value) {&#13;
                    return {&#13;
                        isError: true,&#13;
                        errorCode: "FL_05"&#13;
                    };&#13;
                }&#13;
&#13;
                for (var frameNumber = validatedRangeStart.value; frameNumber &lt;= validatedRangeEnd.value; frameNumber++) {&#13;
                    list.push(frameNumber);&#13;
                }&#13;
&#13;
                continue;&#13;
            }&#13;
&#13;
            var validatedFrame = ModelValidationUtils.validateIntegerInRange(splittedFrames[i], count, 1);&#13;
            if (!validatedFrame.isValid) {&#13;
                return {&#13;
                    isError: true,&#13;
                    errorCode: "FL_03"&#13;
                };&#13;
            }&#13;
&#13;
            list.push(validatedFrame.value);&#13;
        }&#13;
&#13;
        list = list.sort();&#13;
        list = presenter.removeDuplicatesFromArray(list);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            list: list&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateLabels = function (labelsArray, framesCount) {&#13;
        var labels = [], element;&#13;
&#13;
        // Ugly fix for Editor problems&#13;
        if (labelsArray === undefined) return { isError:false, labels:labels };&#13;
&#13;
        for (var i = 0; i &lt; labelsArray.length; i++) {&#13;
            element = {&#13;
                Text: labelsArray[i].Text,&#13;
                Frames: labelsArray[i].Frames,&#13;
                Top: labelsArray[i].Top,&#13;
                Left: labelsArray[i].Left&#13;
            };&#13;
&#13;
            if (ModelValidationUtils.isArrayElementEmpty(element)) {&#13;
                if (labelsArray.length == 1)&#13;
                    return { isError:false, labels:labels };&#13;
                else&#13;
                    return { isError:true, errorCode:"LA_04" };&#13;
            }&#13;
&#13;
            if (ModelValidationUtils.isStringEmpty(element.Text)) {&#13;
                return { isError:true, errorCode:"LA_01" };&#13;
            }&#13;
&#13;
            var validatedFramesList = presenter.validateFramesList(element.Frames, framesCount);&#13;
            if (validatedFramesList.isError) return { isError:true, errorCode: validatedFramesList.errorCode };&#13;
&#13;
            var validatedTopPosition = ModelValidationUtils.validateInteger(element.Top);&#13;
            if (!validatedTopPosition.isValid) return { isError:true, errorCode:"LA_02" };&#13;
&#13;
            var validatedLeftPosition = ModelValidationUtils.validateInteger(element.Left);&#13;
            if (!validatedLeftPosition.isValid) return { isError:true, errorCode:"LA_03" };&#13;
&#13;
            var text = {&#13;
                text: element.Text,&#13;
                frames: validatedFramesList.list,&#13;
                top: validatedTopPosition.value,&#13;
                left: validatedLeftPosition.value&#13;
            };&#13;
&#13;
            labels.push(text);&#13;
        }&#13;
&#13;
        return { isError:false, labels:labels };&#13;
    };&#13;
&#13;
    presenter.validateInitialFrame = function(frame, framesCount) {&#13;
        if(frame &amp;&amp; !ModelValidationUtils.validateIntegerInRange(frame, framesCount, 1).isValid) {&#13;
            return {&#13;
                isError: true,&#13;
                errorCode: 'IF_01'&#13;
            }&#13;
        }&#13;
        var isValid = this.isValidFrameNumber(frame, framesCount);&#13;
        return isValid ? frame : false;&#13;
    };&#13;
&#13;
    presenter.validateOpacity = function (opacity) {&#13;
        if (ModelValidationUtils.isStringEmpty(opacity)) return { isError: false, opacity: 1.0 };&#13;
&#13;
        var parsedOpacity = ModelValidationUtils.validateFloatInRange(opacity, 1.0, 0.0, 2);&#13;
        if (!parsedOpacity.isValid) return { isError: true };&#13;
&#13;
        return { isError: false, opacity: parsedOpacity.value };&#13;
    };&#13;
&#13;
    presenter.validateCorrectFrame = function (frames, framesCount) {&#13;
        if (ModelValidationUtils.isStringEmpty(frames)) return { isExerciseMode: false };&#13;
&#13;
        var framesArray = frames.split(',');&#13;
        var correctFrames = [];&#13;
&#13;
        for (var i = 0, length = framesArray.length; i &lt; length; i++) {&#13;
            var frameNumber = ModelValidationUtils.validateInteger(framesArray[i]);&#13;
            if (!frameNumber.isValid) return { errorCode: "FN_02" };&#13;
&#13;
            frameNumber = ModelValidationUtils.validateIntegerInRange(framesArray[i], framesCount, 1);&#13;
            if (!frameNumber.isValid) return { errorCode: "CF_01" };&#13;
&#13;
            correctFrames.push(frameNumber.value - 1);&#13;
        }&#13;
&#13;
        return { frames: correctFrames, isExerciseMode: true };&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedImage = presenter.validateImage(model.Image);&#13;
        if (validatedImage.isError) return { isError: true, errorCode: validatedImage.errorCode };&#13;
&#13;
        var validatedFrames = presenter.validateFrameNumber(model.Frames);&#13;
        if (validatedFrames.isError) return { isError: true, errorCode: validatedFrames.errorCode };&#13;
&#13;
        var validatedFrameNames = presenter.validateFrameNames(model["Frame names"], validatedFrames.frames);&#13;
        if (validatedFrameNames.isError) return { isError: true, errorCode: validatedFrameNames.errorCode };&#13;
&#13;
        var validatedLabels = presenter.validateLabels(model.Labels, validatedFrames.frames);&#13;
        if (validatedLabels.isError) return { isError: true, errorCode: validatedLabels.errorCode };&#13;
&#13;
        var validatedCorrectFrames = presenter.validateCorrectFrame(model["Correct frames"], validatedFrames.frames);&#13;
        if (validatedCorrectFrames.errorCode) return { isError: true, errorCode: validatedCorrectFrames.errorCode };&#13;
&#13;
        var showFrame = 1;&#13;
        var validatedShowFrame = ModelValidationUtils.validateIntegerInRange(model["Show frame"], validatedFrames.frames, 1);&#13;
        if (validatedShowFrame.isValid) {&#13;
            showFrame = validatedShowFrame.value;&#13;
        }&#13;
&#13;
        var validatedInitialFrame = this.validateInitialFrame(model["Initial frame"], validatedFrames.frames);&#13;
        if(validatedInitialFrame.errorCode) return { isError: true, errorCode: validatedInitialFrame.errorCode };&#13;
&#13;
        var validatedAltTexts = presenter.validateAlternativeTexts(model["Alternative texts"], validatedFrames.frames);&#13;
        if(validatedAltTexts.errorCode) return { isError: true, errorCode: validatedAltTexts.errorCode };&#13;
&#13;
        var validatedSound = presenter.validateSound(model.Sounds);&#13;
        var isClickDisabled = ModelValidationUtils.validateBoolean(model.isClickDisabled);&#13;
        var frameSize = presenter.validateFrameSize(model["Frame size"]);&#13;
        var animation = presenter.validateAnimation(model.Animation);&#13;
        var defaultVisibility = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var isDoNotReset = ModelValidationUtils.validateBoolean(model["Do not reset"]);&#13;
        var isRandomFrame = ModelValidationUtils.validateBoolean(model["Random frame"]);&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            imageSrc : validatedImage.image,&#13;
            frames : validatedFrames.frames,&#13;
            sounds : validatedSound.sounds,&#13;
            frameNames: validatedFrameNames.frameNames,&#13;
            frameNamesEmpty: validatedFrameNames.frameNamesEmpty,&#13;
            isClickDisabled: isClickDisabled,&#13;
            isClickDisabledbyDefault: isClickDisabled,&#13;
            frameSize: frameSize,&#13;
            labels: validatedLabels.labels,&#13;
            showWatermark: ModelValidationUtils.validateBoolean(model["Show watermark"]),&#13;
            showWatermarkbyDefault: ModelValidationUtils.validateBoolean(model["Show watermark"]),&#13;
            showFrame: showFrame,&#13;
            animation: animation,&#13;
            correctFrames: validatedCorrectFrames,&#13;
            defaultVisibility: defaultVisibility,&#13;
            currentVisibility: defaultVisibility,&#13;
            isDoNotReset: isDoNotReset,&#13;
            isRandomFrame: isRandomFrame,&#13;
            initialFrame: validatedInitialFrame,&#13;
            showFrameCounter: ModelValidationUtils.validateBoolean(model["Show frame counter"]),&#13;
            shouldCalcScore: false,&#13;
            lang: model["langAttribute"],&#13;
            altTexts: validatedAltTexts.altTexts&#13;
        };&#13;
    };&#13;
&#13;
    function animateLinearly(element, backgroundPositionValue) {&#13;
        $(element).animate({&#13;
            'background-position':backgroundPositionValue&#13;
        }, 500, "linear");&#13;
    }&#13;
&#13;
    function animateLinearlyLastElement(element) {&#13;
        $(element).animate({&#13;
            'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
        }, {&#13;
            duration:500,&#13;
            easing:"linear",&#13;
            complete:function () {&#13;
                $(element).css({&#13;
                    'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
                });&#13;
                $(element).animate({&#13;
                    'background-position':'0%'&#13;
                }, 500, "linear")&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function animateLinearlyFirstElement(element) {&#13;
        $(element).animate({&#13;
            'background-position':'-' + presenter.configuration.frameWidthPercentage + '%'&#13;
        }, {&#13;
            duration:500,&#13;
            easing:"linear",&#13;
            complete:function () {&#13;
                $(element).css({&#13;
                    'background-position':(100 + presenter.configuration.frameWidthPercentage) + '%'&#13;
                });&#13;
                $(element).animate({&#13;
                    'background-position':'100%'&#13;
                }, 500, "linear")&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function animateFading(element, backgroundPositionValue) {&#13;
        $(element).fadeOut({&#13;
            duration: 750,&#13;
            complete: function() {&#13;
                $(element).css({&#13;
                    'background-position': backgroundPositionValue&#13;
                });&#13;
                $(element).fadeIn(750);&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.changeBackgroundPosition = function (isPreview, element, isReverseOrder) {&#13;
        var backgroundPositionValue = (presenter.configuration.currentFrame * presenter.configuration.frameWidthPercentage + '%');&#13;
&#13;
        if (isPreview || presenter.configuration.animation === 'NONE') {&#13;
            $(element).css('background-position', backgroundPositionValue);&#13;
        } else {&#13;
            switch (presenter.configuration.animation) {&#13;
                case 'LINEAR':&#13;
                    if (isReverseOrder) {&#13;
                        if (presenter.configuration.currentFrame === presenter.configuration.frames - 1) {&#13;
                            animateLinearlyFirstElement(element);&#13;
                        } else {&#13;
                            animateLinearly(element, backgroundPositionValue);&#13;
                        }&#13;
                    } else {&#13;
                        if (presenter.configuration.currentFrame !== 0) {&#13;
                            animateLinearly(element, backgroundPositionValue);&#13;
                        } else {&#13;
                            animateLinearlyLastElement(element);&#13;
                        }&#13;
                    }&#13;
                    break;&#13;
                case 'FADING':&#13;
                    animateFading(element, backgroundPositionValue);&#13;
                    break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeFrameLogic = function (isPreview, triggerEvent) {&#13;
        presenter.changeCurrentDot();&#13;
&#13;
        if (presenter.configuration.currentFrame === 0) {&#13;
            if (!isPreview) presenter.stopAllAudio();&#13;
        } else {&#13;
            if (!isPreview) presenter.playAudio();&#13;
        }&#13;
&#13;
        if (presenter.configuration.currentVisibility) {&#13;
            presenter.displayLabels(presenter.configuration.currentFrame + 1);&#13;
        } else {&#13;
            presenter.hideLabels();&#13;
        }&#13;
&#13;
        if (triggerEvent &amp;&amp; !isPreview) {&#13;
            presenter.triggerFrameChangeEvent(presenter.configuration.currentFrame + 1);&#13;
        }&#13;
    };&#13;
    presenter.changeFrame = function(isPreview, isReverseOrder, triggerEvent, readFrame) {&#13;
        presenter.changeBackgroundPosition(isPreview, presenter.$element, isReverseOrder);&#13;
        presenter.changeFrameLogic(isPreview, triggerEvent);&#13;
        if (readFrame) {&#13;
            presenter.readFrame(presenter.configuration.currentFrame);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopAllAudio = function () {&#13;
        for (var i = 0; i &lt; audioElements.length; i++) {&#13;
            if (audioElements[i] !== null ) {&#13;
                stopAudio(audioElements[i]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function stopAudio(audio) {&#13;
        audio.pause();&#13;
        audio.setTime(0);&#13;
    }&#13;
&#13;
    presenter.playAudio = function() {&#13;
        presenter.stopAllAudio();&#13;
&#13;
        var audio = audioElements[presenter.configuration.currentFrame - 1];&#13;
        if (audio) {&#13;
            audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function(frameNumber, eventScore) {&#13;
        return {&#13;
            source : this.addonId,&#13;
            item : "" + frameNumber,&#13;
            value : '',&#13;
            score : eventScore&#13;
        }&#13;
    };&#13;
&#13;
    presenter.triggerFrameChangeEvent = function(frameNumber) {&#13;
        var eventScore;&#13;
&#13;
        if(presenter.configuration.correctFrames.frames){&#13;
            if(presenter.configuration.correctFrames.frames.indexOf(frameNumber-1) &gt; -1){&#13;
                eventScore = 1;&#13;
            }else{&#13;
                eventScore = 0;&#13;
            }&#13;
        }else{&#13;
            eventScore = '';&#13;
        }&#13;
&#13;
        var eventData = this.createEventData(frameNumber, eventScore);&#13;
&#13;
        if (playerController != null &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.isCurrentFrameCorrectlySelected = function () {&#13;
        var correctFrames = presenter.configuration.correctFrames.frames;&#13;
&#13;
        for (var i = 0, length = correctFrames.length; i &lt; length; i++) {&#13;
            if (presenter.configuration.currentFrame === correctFrames[i]) {&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            currentFrame : this.configuration.currentFrame,&#13;
            currentVisibility : this.configuration.currentVisibility,&#13;
            showWatermark : ($(watermarkElement).is(':visible')) ? true : false,&#13;
            showWatermarkbyDefault : this.configuration.showWatermarkbyDefault,&#13;
            isClickDisabled: presenter.configuration.isClickDisabled,&#13;
            isClickDisabledbyDefault : presenter.configuration.isClickDisabledbyDefault,&#13;
            shouldCalcScore: presenter.configuration.shouldCalcScore&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state_string) {&#13;
        var configuration = presenter.configuration;&#13;
        var state = JSON.parse(state_string);&#13;
        configuration.currentFrame = state.currentFrame;&#13;
        configuration.currentVisibility = state.currentVisibility;&#13;
        configuration.showWatermark = state.showWatermark;&#13;
        configuration.showWatermarkbyDefault = state.showWatermarkbyDefault;&#13;
        configuration.shouldCalcScore = state.shouldCalcScore;&#13;
        configuration.isClickDisabled = state.isClickDisabled;&#13;
        configuration.isClickDisabledbyDefault = state.isClickDisabledbyDefault;&#13;
&#13;
        $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
        presenter.configuration.isErrorMode = false;&#13;
&#13;
        if (presenter.configuration.isDoNotReset) return;&#13;
&#13;
        presenter.setCurrentFrame();&#13;
        presenter.changeFrame(false, false, false, false);&#13;
&#13;
        if (shouldShowWatermark()) {&#13;
            showWatermarkIfNotVisible();&#13;
        }&#13;
&#13;
        presenter.configuration.isClickDisabled = presenter.configuration.isClickDisabledbyDefault;&#13;
&#13;
        var isVisible = presenter.configuration.currentVisibility = presenter.configuration.defaultVisibility;&#13;
        presenter.setVisibility(isVisible);&#13;
        removeCorrectnessClasses();&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) return 0;&#13;
        if (!presenter.configuration.shouldCalcScore) return 0;&#13;
&#13;
        return presenter.isCurrentFrameCorrectlySelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.correctFrames.isExerciseMode) { return 0; }&#13;
        if (!presenter.configuration.shouldCalcScore) return 0;&#13;
&#13;
        return presenter.isCurrentFrameCorrectlySelected() ? 0 : 1;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if(presenter.configuration.correctFrames &amp;&amp; !presenter.configuration.correctFrames.isExerciseMode) { return 0; }&#13;
        return 1;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorMode = true;&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if(!presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        var isCorrect = presenter.isCurrentFrameCorrectlySelected();&#13;
&#13;
        presenter.$element.addClass(isCorrect ? 'correct' : 'wrong');&#13;
    };&#13;
&#13;
    function removeCorrectnessClasses() {&#13;
        presenter.$element.removeClass('correct');&#13;
        presenter.$element.removeClass('wrong');&#13;
    }&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorMode = false;&#13;
        if(!presenter.configuration.correctFrames.isExerciseMode) return;&#13;
&#13;
        removeCorrectnessClasses();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameCommandShowAnswers = function(params) {&#13;
        var framesCount = presenter.configuration.frames,&#13;
            currentFrame = presenter.configuration.currentFrame,&#13;
            validatedFrame = ModelValidationUtils.validateIntegerInRange(params[0], framesCount, 1);&#13;
&#13;
        presenter.configuration.shouldCalcScore = true;&#13;
&#13;
        if (validatedFrame.isValid &amp;&amp; validatedFrame.value - 1 !== currentFrame) {&#13;
            var isReverseOrder = currentFrame &gt; validatedFrame.value - 1;&#13;
            presenter.configuration.currentFrame = validatedFrame.value - 1;&#13;
&#13;
            presenter.changeFrameData = {&#13;
                isPreview: false,&#13;
                isReverseOrder: isReverseOrder,&#13;
                triggerEvent: true&#13;
            };&#13;
&#13;
            $.when(presenter.imageLoaded).then(loadImageEndCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.moveToFrameShowAnswers = function (frame) {&#13;
        presenter.moveToFrameCommandShowAnswers([frame]);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
&#13;
        if(presenter.configuration.correctFrames.frames){&#13;
            presenter.setWorkMode();&#13;
            presenter.currentFrameShowAnswers = presenter.configuration.currentFrame;&#13;
            presenter.moveToFrameShowAnswers(presenter.configuration.correctFrames.frames[0]+1);&#13;
            presenter.$element.addClass('show-answers');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        if(presenter.currentFrameShowAnswers != undefined){&#13;
            presenter.moveToFrameShowAnswers(presenter.currentFrameShowAnswers+1);&#13;
            presenter.$element.removeClass('show-answers');&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.readFrame = function (frameId) {&#13;
        if (playerController &amp;&amp; playerController.isWCAGOn()) {&#13;
            var voiceObjects = presenter.getTextVoiceObjectForFrame(frameId);&#13;
            if (presenter.isWCAGSelected) {&#13;
                presenter.speak(voiceObjects);&#13;
            } else {&#13;
                presenter.speakWhenIdle(voiceObjects);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
&#13;
        if (keycode == window.KeyboardControllerKeys.ENTER) {&#13;
            if (!isShiftKeyDown) {&#13;
                event.preventDefault();&#13;
                presenter.readFrame(presenter.configuration.currentFrame);&#13;
            } else {&#13;
                presenter.setWCAGStatus(false);&#13;
            }&#13;
&#13;
        } else if (keycode == window.KeyboardControllerKeys.SPACE) {&#13;
            event.preventDefault();&#13;
            if (!presenter.configuration.isClickDisabled) {&#13;
                hideWatermarkIfVisible();&#13;
                presenter.next();&#13;
            }&#13;
&#13;
        } else if (keycode == window.KeyboardControllerKeys.ESCAPE) {&#13;
            presenter.isWCAGSelected = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isOn) {&#13;
        presenter.isWCAGSelected = isOn;&#13;
    };&#13;
&#13;
    presenter.getTextVoiceObjectForFrame = function (frameId) {&#13;
        return [window.TTSUtils.getTextVoiceObject(presenter.configuration.altTexts[frameId], presenter.configuration.lang)];&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.speak = function(data, callback) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; playerController.isWCAGOn()) {&#13;
            tts.speakWithCallback(data, callback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.speakWhenIdle = function (data, callback) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts &amp;&amp; playerController.isWCAGOn()) {&#13;
            tts.speakWhenIdle(data, callback);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>