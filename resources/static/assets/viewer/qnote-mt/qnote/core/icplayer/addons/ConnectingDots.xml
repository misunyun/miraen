<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ConnectingDots" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Dots' coordinates" name="Dots" nameLabel="ConnectingDots_property_dots" type="text"/>
		<property displayName="Dots' indexes" name="Indexes" nameLabel="ConnectingDots_property_indexes" type="text"/>
		<property name="Is activity" nameLabel="ConnectingDots_property_is_activity" type="boolean"/>
		<property displayName="Animation time" name="Time" nameLabel="ConnectingDots_property_time" type="string"/>
		<property displayName="Start image" name="Image A" nameLabel="ConnectingDots_property_image_a" type="image"/>
		<property displayName="End image" name="Image B" nameLabel="ConnectingDots_property_image_b" type="image"/>
		<property name="Is disabled" nameLabel="ConnectingDots_property_is_disabled" type="boolean"/>
		<property name="Show all answers in gradual show answers mode" nameLabel="ConnectingDots_property_show_all_answers_in_gradual_show_answers_mode" type="boolean"/>
	</model>
<css>.connectingdots {&#13;
    border:3px solid #ccc;&#13;
    position:relative;&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
}&#13;
&#13;
.connectingdots .dot_container {&#13;
    position:absolute;&#13;
    min-height: 25px;&#13;
    min-width: 25px;&#13;
}&#13;
&#13;
.connectingdots .dot {&#13;
    position:relative;&#13;
    height:10px;&#13;
    width:10px;&#13;
    background-color:#000;&#13;
    border-radius:5px;&#13;
    float:left;&#13;
    margin:-5px -5px -5px -5px;&#13;
}&#13;
&#13;
.connectingdots .image-start {&#13;
    position:absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.connectingdots .image-end {&#13;
    position:absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.connectingdots .dot_number {&#13;
    position:relative;&#13;
    float:left;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.connectingdots .line {&#13;
    height:1px;&#13;
    position:absolute;&#13;
    background-color:#000;&#13;
}&#13;
.connectingdots .line-show-answer {&#13;
    height:1px;&#13;
    position:absolute;&#13;
    background-color:gray;&#13;
}&#13;
&#13;
.connectingdots .active .dot {&#13;
    background-color:#146CDD;&#13;
}&#13;
&#13;
.connectingdots .active .dot_number {&#13;
    color:#146CDD;&#13;
}&#13;
&#13;
.connectingdots .correct {&#13;
    border:3px solid #04B431;&#13;
}&#13;
&#13;
.connectingdots .wrong {&#13;
    border:3px solid #DF0101;&#13;
}&#13;
</css><view>&lt;div class="connectingdots"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="connectingdots"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonConnectingDots_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.toSelect = 0;&#13;
    presenter.lineIds = new Array();&#13;
    presenter.activity = false;&#13;
    presenter.error = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'PE': 'Points coordinates incorrect!',&#13;
        'PO': 'Points outside the addon!',&#13;
        'NP': 'Define the points!',&#13;
        'IE': 'Indexes incorrect!'&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        switch (eventName) {&#13;
            case "ShowAnswers":&#13;
                presenter.showAnswers();&#13;
                break;&#13;
            case "HideAnswers":&#13;
                presenter.hideAnswers();&#13;
                break;&#13;
            case "GradualShowAnswers":&#13;
                if (!presenter.isGradualShowAnswersActive) {&#13;
                    presenter.isGradualShowAnswersActive = true;&#13;
                }&#13;
                if (data.moduleID === presenter.addonID) {&#13;
                    presenter.gradualShowAnswers(parseInt(data.item, 10));&#13;
                }&#13;
                break;&#13;
            case "GradualHideAnswers":&#13;
                presenter.gradualHideAnswers();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    function checkIndexes(indexes,numberOfPoints) {&#13;
        indexes = indexes.replace(/\s/g, '');&#13;
        pointsIndexes = new Array(numberOfPoints);&#13;
        if (indexes == '') {&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = i+1;&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else if (indexes[0] == '*' &amp;&amp; !(isNaN(indexes.substring(1)))){&#13;
            for (var i = 0; i &lt; numberOfPoints; i++) {&#13;
                pointsIndexes[i] = (i+1)*indexes.substring(1);&#13;
            }&#13;
            return pointsIndexes;&#13;
        } else {&#13;
            pointsIndexes = indexes.split(',');&#13;
            if (pointsIndexes.length != numberOfPoints) {&#13;
                presenter.error = 'IE';&#13;
                return false;&#13;
            } else {&#13;
                return pointsIndexes;&#13;
            }&#13;
        }&#13;
    }&#13;
    function getPoint(con,coords) {&#13;
        coords = coords.replace(/\s/g, '');&#13;
        if (coords == '') {&#13;
            presenter.error = 'NP';&#13;
            return false;&#13;
        } else {&#13;
            var points = coords.split(']');&#13;
            var numberOfPoints = points.length - 1;&#13;
            var pointsCoordinates = new Array(numberOfPoints);&#13;
            var tmp_dane;&#13;
            if (points[numberOfPoints] != '') {&#13;
                presenter.error = 'PE';&#13;
                return false;&#13;
            }&#13;
            var i;&#13;
            for (i = 0; i&lt;points.length-1; i++) {&#13;
                tmp_dane = points[i].split(',');&#13;
                pointsCoordinates[i] = new Array(2);&#13;
                if (tmp_dane[0][0] != '[') {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][0] = tmp_dane[0].substring(1);&#13;
                pointsCoordinates[i][1] = tmp_dane[1];&#13;
                if (isNaN(pointsCoordinates[i][0]) || isNaN(pointsCoordinates[i][1])) {&#13;
                    presenter.error = 'PE';&#13;
                    return false;&#13;
                } else if (pointsCoordinates[i][0] &gt;= (con.width()) || pointsCoordinates[i][0] &lt;= 0 || pointsCoordinates[i][1] &lt;= 0 || pointsCoordinates[i][1] &gt;= (con.height())) {&#13;
                    presenter.error = 'PO';&#13;
                    return false;&#13;
                }&#13;
                pointsCoordinates[i][1] = parseInt(pointsCoordinates[i][1],10);&#13;
                pointsCoordinates[i][0] = parseInt(pointsCoordinates[i][0],10);&#13;
            }&#13;
        }&#13;
        return pointsCoordinates;&#13;
    }&#13;
&#13;
    presenter.drawPoints = function() {&#13;
        for(var i=0; i&lt;(presenter.points).length; i++) {&#13;
            div = $('&lt;div id="dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+i+'" order_value="'+i+'" class="dot_container" style="left: '+presenter.points[i][0]+'px; top: '+presenter.points[i][1]+'px;"&gt;&lt;div class="dot"&gt;&lt;/div&gt;&lt;div class="dot_number"&gt;'+presenter.indexes[i]+'&lt;/div&gt;&lt;/div&gt;');&#13;
            presenter.$view.find('.connectingdots').append(div);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawLine = function(i, time, fade, showAnswer) {&#13;
        var m, angle, d, transform, id, line, x1, y1, x2, y2;&#13;
        x1 = parseInt(presenter.points[i-1][0],10);&#13;
        y1 = parseInt(presenter.points[i-1][1],10);&#13;
        x2 = parseInt(presenter.points[i][0],10);&#13;
        y2 = parseInt(presenter.points[i][1],10);&#13;
        m = (y2-y1)/(x2-x1);&#13;
        angle = (Math.atan(m))*180/(Math.PI);&#13;
        d = Math.sqrt(((x2-x1)*(x2-x1)) + ((y2-y1)*(y2-y1)));&#13;
&#13;
        if (x2 &gt;= x1){&#13;
            transform = (360 + angle) % 360;&#13;
        } else {&#13;
            transform = 180 + angle;&#13;
        }&#13;
&#13;
        line = document.createElement("div");&#13;
        line.style = `left: ${x1}px; top: ${y1}px`;&#13;
        line.innerHTML = "&amp;nbsp;";&#13;
        if (showAnswer) {&#13;
            id ='line_' + i + '_' + new Date().getTime();&#13;
            line.classList.add("line-show-answer");&#13;
        } else {&#13;
            id ='line_' + new Date().getTime();&#13;
            line.classList.add("line");&#13;
            presenter.lineIds[i] = id;&#13;
        }&#13;
        line.id = id;&#13;
        presenter.$view.find('.connectingdots').append(line);&#13;
        $(line).css({&#13;
            'left': x1,&#13;
            'top': y1,&#13;
            'width': '0px',&#13;
            'transform' : 'rotate('+transform+'deg)',&#13;
            'transform-origin' : '0px 0px',&#13;
            '-ms-transform' : 'rotate('+transform+'deg)',&#13;
            '-ms-transform-origin' : '0px 0px',&#13;
            '-moz-transform' : 'rotate('+transform+'deg)',&#13;
            '-moz-transform-origin' : '0px 0px',&#13;
            '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
            '-webkit-transform-origin' : '0px 0px',&#13;
            '-o-transform' : 'rotate('+transform+'deg)',&#13;
            '-o-transform-origin' : '0px 0px'&#13;
        });&#13;
&#13;
        $(line).animate({&#13;
            width: d&#13;
        }, time, "linear", function(){&#13;
            if (i == (presenter.points).length-1 &amp;&amp; !showAnswer) {&#13;
                presenter.$view.find('.image-end').remove();&#13;
                if (presenter.imageSrcEnd != '') {&#13;
                    if (fade) {&#13;
                        presenter.$view.find('.image-start').fadeOut('slow');&#13;
                    } else {&#13;
                        presenter.$view.find('.image-start').remove();&#13;
                    }&#13;
                    var image2 = document.createElement('img');&#13;
                    $(image2).attr('src', presenter.imageSrcEnd);&#13;
                    $(image2).addClass('image-end');&#13;
                    presenter.$view.find('.connectingdots').prepend(image2);&#13;
                    if (fade) {&#13;
                        presenter.$view.find('.image-end').hide();&#13;
                        presenter.$view.find('.image-end').fadeIn('slow');&#13;
                    }&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.drawTempLine = function(i, x, y) {&#13;
        if (presenter.draw !== false) {&#13;
            var scaledPoint = scalePoint({x: x, y: y});&#13;
            x = scaledPoint.x;&#13;
            y = scaledPoint.y;&#13;
&#13;
            if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                presenter.$view.find('#line_tmp').remove();&#13;
            }&#13;
            var m, angle, d, transform, x1, y1;&#13;
            x1 = parseInt(presenter.points[i][0],10);&#13;
            y1 = parseInt(presenter.points[i][1],10);&#13;
            m = (y-y1)/(x-x1);&#13;
            angle = (Math.atan(m))*180/(Math.PI);&#13;
            d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
            if (x &gt;= x1){&#13;
                transform = (360 + angle) % 360;&#13;
            } else {&#13;
                transform = 180 + angle;&#13;
            }&#13;
&#13;
            const div = $('&lt;div&gt;');&#13;
            div.attr('id','line_tmp');&#13;
            div.attr('class','line');&#13;
            div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
            presenter.$view.find('.connectingdots').append(div);&#13;
            presenter.$view.find('#line_tmp').css({&#13;
                'left': x1,&#13;
                'top': y1,&#13;
                'width': d,&#13;
                'transform' : 'rotate('+transform+'deg)',&#13;
                'transform-origin' : '0px 0px',&#13;
                '-ms-transform' : 'rotate('+transform+'deg)',&#13;
                '-ms-transform-origin' : '0px 0px',&#13;
                '-moz-transform' : 'rotate('+transform+'deg)',&#13;
                '-moz-transform-origin' : '0px 0px',&#13;
                '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
                '-webkit-transform-origin' : '0px 0px',&#13;
                '-o-transform' : 'rotate('+transform+'deg)',&#13;
                '-o-transform-origin' : '0px 0px'&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        switch(name.toLowerCase()) {&#13;
            case 'hide'.toLowerCase():&#13;
                presenter.hide();&#13;
                break;&#13;
            case 'show'.toLowerCase():&#13;
                presenter.show();&#13;
                break;&#13;
            case 'reset'.toLowerCase():&#13;
                presenter.reset();&#13;
                break;&#13;
            case 'disable'.toLowerCase():&#13;
                presenter.disable();&#13;
                break;&#13;
            case 'enable'.toLowerCase():&#13;
                presenter.enable();&#13;
                break;&#13;
            case 'isAttempted'.toLowerCase():&#13;
                presenter.isAttempted();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
        presenter.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
        presenter.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isDisabled = true;&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isDisabled = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        if(presenter.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
        return (!(presenter.activity) || (presenter.toSelect &gt; 0));&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.createEventData = function(selected,mark) {&#13;
        var score = 0;&#13;
        if ((presenter.points).length == selected &amp;&amp; selected == presenter.toSelect) {&#13;
            score = 1;&#13;
        }&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : selected,&#13;
            value : mark,&#13;
            score : score&#13;
        };&#13;
    };&#13;
    presenter.triggerPointSelectedEvent = function(selected,mark) {&#13;
        var eventData = presenter.createEventData(selected,mark);&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.randomId = Math.floor(100000*Math.random());&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
        presenter.model = model;&#13;
        distance = 0;&#13;
        var con = presenter.$view.find('.connectingdots').parent();&#13;
        presenter.$view.find('.connectingdots').css({&#13;
            'width': con.width(),&#13;
            'height': con.height()&#13;
        });&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.initIsVisible = presenter.isVisible;&#13;
        var coords = presenter.model['Dots'];&#13;
        presenter.time = presenter.model['Time'];&#13;
        presenter.activity = ModelValidationUtils.validateBoolean(presenter.model['Is activity']);&#13;
&#13;
        presenter.imageSrcStart = presenter.model['Image A'];&#13;
        presenter.imageSrcEnd = presenter.model['Image B'];&#13;
&#13;
        presenter.points = getPoint(con,coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(presenter.model['Is disabled']);&#13;
        presenter.showAllAnswersInGradualShowAnswersMode = ModelValidationUtils.validateBoolean(presenter.model["Show all answers in gradual show answers mode"]);&#13;
        presenter.initIsDisabled = presenter.isDisabled;&#13;
&#13;
        var image1 = document.createElement('img');&#13;
        $(image1).attr('src', presenter.imageSrcStart);&#13;
        $(image1).addClass('image-start');&#13;
&#13;
        var image2 = document.createElement('img');&#13;
        $(image2).attr('src', presenter.imageSrcEnd);&#13;
        $(image2).addClass('image-end');&#13;
&#13;
        presenter.draw = false;&#13;
        presenter.isDown = false;&#13;
&#13;
        if (presenter.time == '') {&#13;
            presenter.time = 0;&#13;
        }&#13;
        var $div = presenter.$view.find('.connectingdots');&#13;
        var Width = $div.width();&#13;
        var Height = $div.height();&#13;
        var tmpTime;&#13;
        //var Left = parseInt(con[0].offsetLeft,10);&#13;
        //var Top = parseInt(con[0].offsetTop,10);&#13;
        var Left = parseInt($div.offset().left,10);&#13;
        var Top = parseInt($div.offset().top,10);&#13;
&#13;
        if (presenter.points == false || presenter.indexes == false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
        } else {&#13;
            presenter.drawPoints();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
&#13;
            $(view).find('.connectingdots').click(function(event){&#13;
                event.stopPropagation();&#13;
                presenter.isDown = false;&#13;
            });&#13;
&#13;
            presenter.$view.find('.dot').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowingAnswers()) {&#13;
                    presenter.isDown = false;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.find('.dot_number').on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowingAnswers()) {&#13;
                    presenter.isDown = false;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('mousedown', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowingAnswers()) {&#13;
                    presenter.isDown = true;&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('mousemove',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = presenter.toSelect - 1;&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; presenter.draw !== -1 &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    if (presenter.draw &lt; (presenter.points).length-1 &amp;&amp; presenter.isDown === true) {&#13;
                        presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                        presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                        presenter.drawTempLine(presenter.draw,presenter.mouseSX,presenter.mouseSY);&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            $(view).find('.dot_container').on('mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.isDisabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    i = parseInt($(this).attr('order_value'),10);&#13;
&#13;
                    if (i == presenter.toSelect){&#13;
                        if (i &gt; 0) {&#13;
                            presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i-1)).removeClass('active');&#13;
                            if (presenter.isDown) {&#13;
                                presenter.drawLine(i,0,true);&#13;
                            } else {&#13;
                                presenter.drawLine(i,presenter.time,true);&#13;
                            }&#13;
                        }&#13;
&#13;
                        if (i &lt; (presenter.points).length-1) {&#13;
                            presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(i)).addClass('active');&#13;
                        }&#13;
&#13;
                        presenter.toSelect++;&#13;
                        presenter.triggerPointSelectedEvent(i+1,1);&#13;
                    } else {&#13;
                        presenter.triggerPointSelectedEvent(i+1,0);&#13;
                    }&#13;
                }&#13;
                presenter.isDown = false;&#13;
            });&#13;
&#13;
            presenter.$view.on('mouseleave mouseup',function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.draw = false;&#13;
                presenter.isDown = false;&#13;
&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                }&#13;
            });&#13;
&#13;
&#13;
            presenter.$view.on('touchstart', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                if (!presenter.isErrorMode &amp;&amp; !presenter.disabled &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                    presenter.isDown = true;&#13;
                    presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                    presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                }&#13;
            });&#13;
            presenter.$view.on('touchmove', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                presenter.mouseX = parseInt(e.originalEvent.touches[0].pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseY = parseInt(e.originalEvent.touches[0].pageY,10) - parseInt($div.offset().top,10);&#13;
                if (presenter.draw !== false &amp;&amp; presenter.mouseX &lt;  Width &amp;&amp; presenter.mouseY &lt; Height &amp;&amp; presenter.mouseX &gt; 0 &amp;&amp; presenter.mouseY &gt; 0 &amp;&amp; !presenter.isErrorMode &amp;&amp; !presenter.isShowAnswersActive &amp;&amp; !presenter.disabled &amp;&amp; presenter.toSelect &lt; (presenter.points).length &amp;&amp; presenter.isDown === true) {&#13;
                    presenter.drawTempLine(presenter.toSelect-1,presenter.mouseX,presenter.mouseY);&#13;
                } else {&#13;
                    if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                        presenter.$view.find('#line_tmp').remove();&#13;
                        presenter.isDown = false;&#13;
                    }&#13;
                }&#13;
            });&#13;
&#13;
            presenter.$view.on('touchend', function(e){&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
                tmpTime = presenter.time;&#13;
                if (presenter.$view.find('#line_tmp').length &gt; 0) {&#13;
                    presenter.$view.find('#line_tmp').remove();&#13;
                    tmpTime = 0;&#13;
                }&#13;
&#13;
                var scaledPoint = scalePoint({x: presenter.mouseX, y: presenter.mouseY});&#13;
                presenter.mouseX = scaledPoint.x;&#13;
                presenter.mouseY = scaledPoint.y;&#13;
&#13;
                distance = Math.abs(parseInt(presenter.points[presenter.toSelect][0],10) - presenter.mouseX) + Math.abs(parseInt(presenter.points[presenter.toSelect][1],10) - presenter.mouseY);&#13;
                if (distance &lt; 35) {&#13;
                    if (presenter.toSelect &gt; 0) {&#13;
                        presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1)).removeClass('active');&#13;
                        presenter.drawLine(presenter.toSelect,tmpTime,true);&#13;
                    }&#13;
&#13;
                    if (presenter.toSelect &lt; (presenter.points).length-1) {&#13;
                        presenter.$view.find('div#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect)).addClass('active');&#13;
                    }&#13;
&#13;
                    presenter.toSelect++;&#13;
                    presenter.draw++;&#13;
                    presenter.triggerPointSelectedEvent(i+1,1);&#13;
                }&#13;
                presenter.isDown = false;&#13;
            });&#13;
        }&#13;
        const events = ["ShowAnswers", "HideAnswers", "GradualShowAnswers", "GradualHideAnswers"];&#13;
        for (let i = 0; i &lt; events.length; i++) {&#13;
            presenter.eventBus.addEventListener(events[i], this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
        presenter.model = model;&#13;
        var con = presenter.$view.find('.connectingdots').parent();&#13;
        presenter.$view.find('.connectingdots').css({&#13;
            'width': con.width(),&#13;
            'height': con.height()&#13;
        });&#13;
        presenter.imageSrcStart = presenter.model['Image A'];&#13;
&#13;
        var coords = presenter.model['Dots'];&#13;
        presenter.points = getPoint(con,coords);&#13;
        presenter.indexes = checkIndexes(presenter.model['Indexes'],(presenter.points).length);&#13;
&#13;
        var $div = presenter.$view.find('.connectingdots');&#13;
        var Width = $div.width();&#13;
        var Height = $div.height();&#13;
&#13;
        if (presenter.points == false || presenter.indexes == false) {&#13;
            con.text(presenter.ERROR_CODES[presenter.error]);&#13;
        } else {&#13;
            presenter.points = getPoint(con,coords);&#13;
            presenter.drawPoints();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                var image1 = document.createElement('img');&#13;
                $(image1).attr('src', presenter.imageSrcStart);&#13;
                $(image1).addClass('image-start');&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
&#13;
            var coordinatesContainer = $('&lt;div&gt;&lt;/div&gt;'),&#13;
                xContainer = $('&lt;div&gt;x: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                yContainer = $('&lt;div&gt;y: &lt;span class="value"&gt;&lt;/span&gt;&lt;/div&gt;'),&#13;
                coloringWrapper = presenter.$view.find('.connectingdots');&#13;
&#13;
            coordinatesContainer.css({&#13;
                'width' : 35,&#13;
                'height' : 22,&#13;
                'border' : '1px solid #696969',&#13;
                'borderRadius' : '3px',&#13;
                'position' : 'absolute',&#13;
                'top' : 3,&#13;
                'left' : 3,&#13;
                'fontSize' : '9px',&#13;
                'padding' : '5px',&#13;
                'lineHeight' : '11px'&#13;
            });&#13;
&#13;
            coordinatesContainer.append(xContainer).append(yContainer);&#13;
&#13;
            coloringWrapper.append(coordinatesContainer);&#13;
            coloringWrapper.css({&#13;
                'position' : 'relative',&#13;
                'minHeight' : Height,&#13;
                'minWidth' : Width&#13;
            });&#13;
&#13;
            function setCalculatedPosition(e) {&#13;
                presenter.mouseSX = parseInt(e.pageX,10) - parseInt($div.offset().left,10);&#13;
                presenter.mouseSY = parseInt(e.pageY,10) - parseInt($div.offset().top,10);&#13;
                xContainer.find('.value').html(presenter.mouseSX);&#13;
                yContainer.find('.value').html(presenter.mouseSY);&#13;
            }&#13;
&#13;
            var doesElementExist = function() {&#13;
                var $moduleSelector = $('.moduleSelector[data-id="'+presenter.addonID+'"]');&#13;
&#13;
                if ($moduleSelector.length &gt; 0) {&#13;
                    $moduleSelector.on('mousemove', function(e) {&#13;
                        setCalculatedPosition(e);&#13;
                    });&#13;
&#13;
                    clearInterval(interval);&#13;
                }&#13;
            };&#13;
&#13;
            var interval = setInterval(function() { doesElementExist(); }, 500);&#13;
&#13;
            presenter.$view.find('.connectingdots').on('mousemove', function(e) {&#13;
                setCalculatedPosition(e);&#13;
            });&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        return presenter.upgradeShowAllAnswersInGradualShowAnswersMode(model);&#13;
    };&#13;
&#13;
    presenter.upgradeShowAllAnswersInGradualShowAnswersMode = function (model) {&#13;
        const upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!upgradedModel["Show all answers in gradual show answers mode"]) {&#13;
            upgradedModel["Show all answers in gradual show answers mode"] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
        if (presenter.error != false) {&#13;
        } else {&#13;
            if (presenter.toSelect &gt; 0) {&#13;
                var temp_id = '#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1);&#13;
                presenter.$view.find(temp_id).removeClass('active');&#13;
            }&#13;
            for (var i = 1; i &lt; presenter.toSelect; i++) {&#13;
                presenter.$view.find('#'+presenter.lineIds[i]).remove();&#13;
            }&#13;
            presenter.$view.find('.image-start').remove();&#13;
            presenter.$view.find('.image-end').remove();&#13;
            if (presenter.imageSrcStart != '') {&#13;
                var image1 = document.createElement('img');&#13;
                $(image1).attr('src', presenter.imageSrcStart);&#13;
                $(image1).addClass('image-start');&#13;
                presenter.$view.find('.connectingdots').prepend(image1);&#13;
            }&#13;
            presenter.isDisabled = presenter.initIsDisabled;&#13;
            presenter.isVisible = presenter.initIsVisible;&#13;
            presenter.toSelect = 0;&#13;
            presenter.updateVisibility();&#13;
            presenter.setWorkMode();&#13;
        }&#13;
    };&#13;
&#13;
    function executeWithoutShownAnswers(funcToCall) {&#13;
        let wasShowAnswersActive = false;&#13;
        let wasGradualShowAnswersActive = false;&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
            wasShowAnswersActive = true;&#13;
        } else if (presenter.isGradualShowAnswersActive) {&#13;
            presenter.gradualHideAnswers();&#13;
            wasGradualShowAnswersActive = true;&#13;
        }&#13;
&#13;
        const result = funcToCall();&#13;
&#13;
        if (wasShowAnswersActive) {&#13;
            presenter.showAnswers();&#13;
        } else if (wasGradualShowAnswersActive) {&#13;
            presenter.gradualShowAnswers();&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        return executeWithoutShownAnswers(getState);&#13;
    };&#13;
&#13;
    function getState() {&#13;
        return JSON.stringify({&#13;
            toSelect: presenter.toSelect,&#13;
            isDisabled: presenter.isDisabled,&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setState = function(state) {&#13;
        presenter.toSelect = JSON.parse(state).toSelect;&#13;
        presenter.isVisible = JSON.parse(state).isVisible;&#13;
        presenter.isDisabled = JSON.parse(state).isDisabled;&#13;
&#13;
        if (presenter.toSelect &gt; 0 &amp;&amp; presenter.toSelect &lt; (presenter.points).length) {&#13;
            var temp_id = '#dot_container_'+presenter.randomId+'_'+presenter.addonID+'_'+(presenter.toSelect-1);&#13;
            $(temp_id).addClass('active');&#13;
        }&#13;
        for(var i = 1; i &lt; presenter.toSelect; i++) {&#13;
            presenter.drawLine(i,0,false);&#13;
        }&#13;
        presenter.updateVisibility();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return presenter.activity ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function (view, model) {&#13;
        if (!presenter.activity || presenter.error != false) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return (presenter.points).length === presenter.toSelect ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.toSelect == 0 || (presenter.error != false)) {&#13;
            return 0;&#13;
        } else {&#13;
            return presenter.getMaxScore() - presenter.getScore();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
&#13;
        presenter.isErrorMode = true;&#13;
        if (!presenter.activity) return 0;&#13;
        if (presenter.getScore() === presenter.getMaxScore())&#13;
            presenter.$view.find('.connectingdots').addClass('correct');&#13;
        if (presenter.getErrorCount() &gt; 0)&#13;
            presenter.$view.find('.connectingdots').addClass('wrong');&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isErrorMode = false;&#13;
        presenter.$view.find('.connectingdots').removeClass('wrong');&#13;
        presenter.$view.find('.connectingdots').removeClass('correct');&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.activity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode &amp;&amp; presenter.setWorkMode();&#13;
        presenter.isGradualShowAnswersActive &amp;&amp; presenter.gradualHideAnswers();&#13;
&#13;
        presenter.isShowAnswersActive = true;&#13;
        _showAnswers();&#13;
    };&#13;
&#13;
    presenter.gradualShowAnswers = function (itemIndex) {&#13;
        if (!presenter.activity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode &amp;&amp; presenter.setWorkMode();&#13;
        presenter.isShowAnswersActive &amp;&amp; presenter.hideAnswers();&#13;
&#13;
        if (presenter.showAllAnswersInGradualShowAnswersMode) {&#13;
            _showAnswers();&#13;
        } else {&#13;
            const isFirstGSA = itemIndex === 0;&#13;
            if (isFirstGSA) {&#13;
                presenter.toSelect &gt; 0 &amp;&amp; getCurrentDotContainer().removeClass("active");&#13;
                for (let i = 1; i &lt; presenter.toSelect; i++) {&#13;
                    presenter.$view.find('#' + presenter.lineIds[i]).remove();&#13;
                }&#13;
            }&#13;
            presenter.drawLine(itemIndex + 1,0,true,true);&#13;
        }&#13;
    };&#13;
&#13;
    function _showAnswers() {&#13;
        presenter.$view.find(".line").addClass("line-show-answer");&#13;
&#13;
        let i = presenter.toSelect;&#13;
        if (i === 0) {&#13;
            i++;&#13;
        } else {&#13;
            getCurrentDotContainer().removeClass("active");&#13;
        }&#13;
        for (; i &lt; (presenter.points).length; i++) {&#13;
            presenter.drawLine(i,0,true,true);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isShowingAnswers = function (){&#13;
        return presenter.isGradualShowAnswersActive || presenter.isShowAnswersActive;&#13;
    }&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.activity || !presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
        _hideAnswers();&#13;
    };&#13;
&#13;
    presenter.gradualHideAnswers = function () {&#13;
        if (!presenter.activity || !presenter.isGradualShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isGradualShowAnswersActive = false;&#13;
        _hideAnswers();&#13;
        if (!presenter.showAllAnswersInGradualShowAnswersMode) {&#13;
            for (let i = 1; i &lt; presenter.toSelect; i++) {&#13;
                presenter.drawLine(i,0,true,false);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function _hideAnswers() {&#13;
        presenter.$view.find(".line").removeClass("line-show-answer");&#13;
        presenter.$view.find(".line-show-answer").remove();&#13;
        if (presenter.toSelect &gt; 0 &amp;&amp; presenter.toSelect &lt; (presenter.points).length) {&#13;
            getCurrentDotContainer().addClass("active");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        if (presenter.error) {&#13;
            return 0;&#13;
        }&#13;
        if (presenter.showAllAnswersInGradualShowAnswersMode) {&#13;
            return 1;&#13;
        }&#13;
&#13;
        return (presenter.points).length - 1;&#13;
    };&#13;
&#13;
    function getCurrentDotContainer() {&#13;
        return getDotContainer(presenter.toSelect - 1);&#13;
    }&#13;
&#13;
    function getDotContainer(dotIndex) {&#13;
        return presenter.$view.find("div#dot_container_" + presenter.randomId + '_' + presenter.addonID + '_' + dotIndex);&#13;
    }&#13;
&#13;
    function scalePoint({x, y}) {&#13;
        var scaledPoint = {x: x, y: y};&#13;
        if (!presenter.playerController)&#13;
            return scaledPoint;&#13;
&#13;
        var scale = presenter.playerController.getScaleInformation();&#13;
        if (scale.scaleX !== 1.0 || scale.scaleY !== 1.0) {&#13;
            scaledPoint.x = Math.floor(scaledPoint.x / scale.scaleX);&#13;
            scaledPoint.y = Math.floor(scaledPoint.y / scale.scaleY);&#13;
        }&#13;
        return scaledPoint;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>