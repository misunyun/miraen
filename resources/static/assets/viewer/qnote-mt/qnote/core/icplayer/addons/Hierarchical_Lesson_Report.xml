<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Lesson_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Lesson_Report_property_title_label" type="string"/>
        <property displayName="Show results" name="results" nameLabel="Hierarchical_Lesson_Report_property_results" type="boolean"/>
        <property displayName="Results label" isLocalized="true" name="resultsLabel" nameLabel="Hierarchical_Lesson_Report_property_results_label" type="string"/>
        <property displayName="Show checks" name="checks" nameLabel="Hierarchical_Lesson_Report_property_checks" type="boolean"/>
        <property displayName="Checks label" isLocalized="true" name="checksLabel" nameLabel="Hierarchical_Lesson_Report_property_checks_label" type="string"/>
        <property displayName="Show errors" name="errors" nameLabel="Hierarchical_Lesson_Report_property_errors" type="boolean"/>
        <property displayName="Errors label" isLocalized="true" name="errorsLabel" nameLabel="Hierarchical_Lesson_Report_property_errors_label" type="string"/>
        <property displayName="Show mistakes" name="mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes" type="boolean"/>
        <property displayName="Mistakes label" isLocalized="true" name="mistakesLabel" nameLabel="Hierarchical_Lesson_Report_property_mistakes_label" type="string"/>
        <property displayName="Show total" name="total" nameLabel="Hierarchical_Lesson_Report_property_total" type="boolean"/>
        <property displayName="Total label" isLocalized="true" name="totalLabel" nameLabel="Hierarchical_Lesson_Report_property_total_label" type="string"/>
        <property displayName="Depth of expand" name="expandDepth" nameLabel="Hierarchical_Lesson_Report_property_expand_depth" type="string"/>
        <property displayName="Row classes" name="classes" nameLabel="Hierarchical_Lesson_Report_property_classes" type="text"/>
        <property displayName="Show page scores" name="showpagescore" nameLabel="Hierarchical_Lesson_Report_property_show_page_scores" type="boolean"/>
        <property displayName="Page scores label" isLocalized="true" name="pageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_page_scores_label" type="string"/>
        <property displayName="Show max score award" name="showmaxscorefield" nameLabel="Hierarchical_Lesson_Report_property_show_max_score_fields" type="boolean"/>
        <property displayName="Max score award label" isLocalized="true" name="maxScoreAwardLabel" nameLabel="Hierarchical_Lesson_Report_property_max_score_award_label" type="string"/>
        <property displayName="Unvisited page scores label" isLocalized="true" name="unvisitedPageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_unvisited_page_scores_label" type="string"/>
        <property displayName="Disable score on pages" name="scoredisabled" nameLabel="Hierarchical_Lesson_Report_property_score_disabled" type="string"/>
        <property displayName="Enable pages" name="enablePages" nameLabel="Hierarchical_Lesson_Report_property_enable_pages" type="string"/>

        <property displayName="Alternative page titles" name="alternativePageTitles" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_titles" type="list">
			<property displayName="Index" isLocalized="true" name="alternativePageNumber" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_number" type="string"/>
            <property displayName="Is chapter" name="alternativePageIsChapter" nameLabel="Hierarchical_Lesson_Report_property_show_is_alternative_page_chapter" type="boolean"/>
			<property displayName="Page name" isLocalized="true" name="alternativePageName" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_name" type="html"/>
		</property>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Hierarchical_Lesson_Report_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Hierarchical_Lesson_Report_property_speech_texts" type="staticlist">

            <property name="Expanded" nameLabel="Hierarchical_Lesson_Report_property_expanded_speech_text" type="staticrow">
                <property name="Expanded" nameLabel="Hierarchical_Lesson_Report_property_expanded_speech_text" type="string"/>
            </property>

            <property name="Collapsed" nameLabel="Hierarchical_Lesson_Report_property_collapsed_speech_text" type="staticrow">
                <property name="Collapsed" nameLabel="Hierarchical_Lesson_Report_property_collapsed_speech_text" type="string"/>
            </property>

            <property name="Results" nameLabel="Hierarchical_Lesson_Report_property_results_speech_text" type="staticrow">
                <property name="Results" nameLabel="Hierarchical_Lesson_Report_property_results_speech_text" type="string"/>
            </property>

            <property name="Checks" nameLabel="Hierarchical_Lesson_Report_property_checks_speech_text" type="staticrow">
                <property name="Checks" nameLabel="Hierarchical_Lesson_Report_property_checks_speech_text" type="string"/>
            </property>

            <property name="Mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes_speech_text" type="staticrow">
                <property name="Mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes_speech_text" type="string"/>
            </property>

            <property name="Errors" nameLabel="Hierarchical_Lesson_Report_property_errors_speech_text" type="staticrow">
                <property name="Errors" nameLabel="Hierarchical_Lesson_Report_property_errors_speech_text" type="string"/>
            </property>

            <property name="Score" nameLabel="Hierarchical_Lesson_Report_property_score_speech_text" type="staticrow">
                <property name="Score" nameLabel="Hierarchical_Lesson_Report_property_score_speech_text" type="string"/>
            </property>

            <property name="OutOf" nameLabel="Hierarchical_Lesson_Report_property_out_of_speech_text" type="staticrow">
                <property name="OutOf" nameLabel="Hierarchical_Lesson_Report_property_out_of_speech_text" type="string"/>
            </property>

            <property name="Total" nameLabel="Hierarchical_Lesson_Report_property_total_speech_text" type="staticrow">
                <property name="Total" nameLabel="Hierarchical_Lesson_Report_property_total_speech_text" type="string"/>
            </property>
        </property>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
        <property displayName="Use weighted arithmetic mean" name="isWeightedArithmeticMean" nameLabel="Hierarchical_Lesson_Report_property_is_weighted_arithmetic_mean" type="boolean"/>
    </model>
<css>.hier_report {&#13;
    padding: 15px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid gray;&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
.hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
&#13;
.hier_report-chapter{&#13;
    background-color: Lavender;&#13;
}&#13;
&#13;
.hier_report-odd{&#13;
    background-color: AliceBlue;&#13;
}&#13;
&#13;
.hier_report-even{&#13;
    background-color: #f0f1ff;&#13;
}&#13;
&#13;
.hier_report-progress {&#13;
    text-align:center;&#13;
    color:#0A8DBD;&#13;
    display: inline-block;&#13;
    width: 190px;&#13;
}&#13;
&#13;
.hier_report-checks {&#13;
    width: 10%;&#13;
    color: green;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-mistakes {&#13;
    width: 10%;&#13;
    color: #990000;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-errors {&#13;
    width: 10%;&#13;
    color: red;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-score {&#13;
    width: 10%;&#13;
    color: blue;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-non-max-score,&#13;
.hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.ui-progressbar {&#13;
    padding:2px;&#13;
    width:	130px  !important;&#13;
    height: 15px    !important;&#13;
    border-radius: 5px;&#13;
    border:2px solid #02789F;&#13;
    background-color: #3CC6CD;&#13;
    border-radius: 5px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hier_drag-source{&#13;
    border: 1px solid orange;&#13;
}&#13;
&#13;
.hier_report .treegrid-expander {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .treegrid-indent {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
&#13;
.printable_hier_report {&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.printable_hier_report-table {&#13;
    border-collapse: collapse;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.printable_hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.printable_hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    border-bottom: 1px solid #ccc;&#13;
}&#13;
&#13;
.printable_hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    border-top: 1px solid #ccc;&#13;
}&#13;
&#13;
.printable_hier_report-header-progress {&#13;
    width: 190px;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-progress {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-checks {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-mistakes {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-errors {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-page-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-page-non-max-score,&#13;
.printable_hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.printable_hier_report-indent {&#13;
    float: left;&#13;
	width: 16px;&#13;
    height: 16px;&#13;
    display: inline-block;&#13;
    position: relative;&#13;
}&#13;
&#13;
.printable_hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
</css><view> &lt;div class="hier_report"&gt;&#13;
     &lt;table  style="width: 100%"&gt;&#13;
     &lt;/table&gt;&#13;
 &lt;/div&gt;&#13;
&#13;
</view><preview>&lt;div class="hier_report"&gt;&#13;
    &lt;table  style="width: 100%"&gt;&#13;
    &lt;/table&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHierarchical_Lesson_Report_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
    var printableController;&#13;
    var isWCAGOn = false;&#13;
&#13;
    // Indexes used during tree building&#13;
    var relativeIndex = 0;            // Current chapter index + current reportable page index&#13;
    var absoluteIndex = 0;            // Current chapter index + current page index&#13;
    var chapterIndex = 0;             // current chapter index&#13;
    var pageIndex = 0;                // current page index&#13;
&#13;
    var currentRow = 1;&#13;
    var currentColumn = 0;&#13;
&#13;
    presenter.printableState = null;&#13;
    presenter.printableStateMode = null;&#13;
&#13;
    var CSS_CLASSES = {&#13;
        SELECTED_CELL: "keyboard_navigation_active_element",&#13;
        TEXT_WRAPPER: "text-wrapper",&#13;
        HIER_REPORT: "hier_report",&#13;
        HIER_REPORT_HEADER: "hier_report-header",&#13;
        HIER_REPORT_FOOTER: "hier_report-footer",&#13;
        HIER_REPORT_CHAPTER: "hier_report-chapter",&#13;
        HIER_REPORT_SEPARATOR: "hier_report-separator",&#13;
        HIER_REPORT_PROGRESSBAR: "hier_report-progressbar",&#13;
        HIER_REPORT_ODD: "hier_report-odd",&#13;
        HIER_REPORT_EVEN: "hier_report-even",&#13;
        HIER_REPORT_PROGRESS: "hier_report-progress",&#13;
        HIER_REPORT_CHECKS: "hier_report-checks",&#13;
        HIER_REPORT_MISTAKES: "hier_report-mistakes",&#13;
        HIER_REPORT_ERRORS: "hier_report-errors",&#13;
        HIER_REPORT_PAGE_SCORE: "hier_report-page-score",&#13;
        HIER_REPORT_PAGE_MAX_SCORE: "hier_report-page-max-score",&#13;
        HIER_REPORT_PAGE_NON_MAX_SCORE: "hier_report-page-non-max-score",&#13;
        HIER_REPORT_SCORE_DISABLED_ROW: "hier_report-score-disabled-row",&#13;
        PRINTABLE: "printable_addon_Hierarchical_Lesson_Report",&#13;
        PRINTABLE_HIER_REPORT: "printable_hier_report",&#13;
        PRINTABLE_HIER_REPORT_TABLE: "printable_hier_report-table",&#13;
        PRINTABLE_HIER_REPORT_PARENT: "printable_hier_report-parent",&#13;
        PRINTABLE_HIER_REPORT_NODE: "printable_hier_report-node",&#13;
        PRINTABLE_HIER_REPORT_CHAPTER: "printable_hier_report-chapter",&#13;
        PRINTABLE_HIER_REPORT_SEPARATOR: "printable_hier_report-separator",&#13;
        PRINTABLE_HIER_REPORT_ODD: "printable_hier_report-odd",&#13;
        PRINTABLE_HIER_REPORT_EVEN: "printable_hier_report-even",&#13;
        PRINTABLE_HIER_REPORT_HEADER: "printable_hier_report-header",&#13;
        PRINTABLE_HIER_REPORT_PROGRESS_HEADER: "printable_hier_report-header-progress",&#13;
        PRINTABLE_HIER_REPORT_FOOTER: "printable_hier_report-footer",&#13;
        PRINTABLE_HIER_REPORT_PROGRESS: "printable_hier_report-progress",&#13;
        PRINTABLE_HIER_REPORT_CHECKS: "printable_hier_report-checks",&#13;
        PRINTABLE_HIER_REPORT_MISTAKES: "printable_hier_report-mistakes",&#13;
        PRINTABLE_HIER_REPORT_ERRORS: "printable_hier_report-errors",&#13;
        PRINTABLE_HIER_REPORT_PAGE_SCORE: "printable_hier_report-page-score",&#13;
        PRINTABLE_HIER_REPORT_PAGE_MAX_SCORE: "printable_hier_report-page-max-score",&#13;
        PRINTABLE_HIER_REPORT_PAGE_NON_MAX_SCORE: "printable_hier_report-page-non-max-score",&#13;
        PRINTABLE_HIER_REPORT_SCORE_DISABLED_ROW: "printable_hier_report-score-disabled-row",&#13;
        PRINTABLE_HIER_REPORT_INDENT: "printable_hier_report-indent",&#13;
    };&#13;
&#13;
    function getTextVoiceObject (text, lang) {return {text: text, lang: lang};}&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        EXPAND_DEPTH_NOT_NUMERIC: "Depth of expand is not proper",&#13;
&#13;
        C01: "Wrong classes name format",&#13;
        C02: "Class names has to be separated by new line",&#13;
&#13;
        D01: "Values in Disable score on pages property should be numeric and non empty",&#13;
        D02: "Values in Disable score on pages property should be greater than 0",&#13;
        D03: "Values in Disable score on pages property should be unique",&#13;
&#13;
        P01: "Values in Disable pages property should be numeric and non empty",&#13;
        P02: "Values in Disable pages property should be greater than 0",&#13;
        P03: "Values in Disable pages property should be unique",&#13;
&#13;
        A01: "There should be at least one item in Alternative Page Names property",&#13;
        A02: "Values in Alternative Page Number property should be greater than 0"&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (substitutions.hasOwnProperty(key)) {&#13;
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
                }&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    /**&#13;
     * @param controller (PrintableController)&#13;
     */&#13;
    presenter.setPrintableController = function (controller) {&#13;
        printableController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    function addHeader(configuration, $view) {&#13;
        var labels = configuration.labels;&#13;
        var $row = generateHeaderRow();&#13;
&#13;
        addTitleCell($row, labels.title);&#13;
        if (configuration.showResults) {&#13;
            addResultsHeaderCell($row, labels.results);&#13;
        }&#13;
        if (configuration.showChecks) {&#13;
            addChecksCell($row, labels.checks);&#13;
        }&#13;
        if (configuration.showMistakes) {&#13;
            addMistakesCell($row, labels.mistakes);&#13;
        }&#13;
        if (configuration.showErrors) {&#13;
            addErrorsCell($row, labels.errors);&#13;
        }&#13;
        if (configuration.showPageScore) {&#13;
            addPageScoreCell($row, labels.pageScores);&#13;
        }&#13;
        if (configuration.showMaxScoreField) {&#13;
            addMaxScoreAwardCell($row, labels.maxScoreAward);&#13;
        }&#13;
&#13;
        $row.prependTo($view);&#13;
    }&#13;
&#13;
    function addFooter(configuration, $view) {&#13;
        var lessonScore = getLessonScore();&#13;
        var $row = generateFooterRow();&#13;
&#13;
        addTitleCell($row, configuration.labels.total);&#13;
        if (configuration.showResults) {&#13;
            addResultsFooterCell($row);&#13;
        }&#13;
        if (configuration.showChecks) {&#13;
            addChecksCell($row, lessonScore.checkCount);&#13;
        }&#13;
        if (configuration.showMistakes) {&#13;
            addMistakesCell($row, lessonScore.mistakeCount);&#13;
        }&#13;
        if (configuration.showErrors) {&#13;
            addErrorsCell($row, lessonScore.errorCount);&#13;
        }&#13;
        if (configuration.showPageScore) {&#13;
            addPageScoreFooterCell($row, lessonScore);&#13;
        }&#13;
        if (configuration.showMaxScoreField) {&#13;
            addMaxScoreAwardCell($row, undefined);&#13;
        }&#13;
&#13;
        $row.appendTo($view);&#13;
    }&#13;
&#13;
    function generateHeaderRow() {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_HEADER&#13;
            : CSS_CLASSES.HIER_REPORT_HEADER;&#13;
        return generateRow(className);&#13;
    }&#13;
&#13;
    function generateFooterRow() {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_FOOTER&#13;
            : CSS_CLASSES.HIER_REPORT_FOOTER;&#13;
        return generateRow(className);&#13;
    }&#13;
&#13;
    function generateRow(className) {&#13;
        var $row = $(document.createElement('tr'));&#13;
        $row.addClass(className);&#13;
        return $row;&#13;
    }&#13;
&#13;
    function addTitleCell($row, title) {&#13;
        addCell($row, title);&#13;
    }&#13;
&#13;
    function addResultsHeaderCell($row, header) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PROGRESS_HEADER&#13;
            : CSS_CLASSES.HIER_REPORT_PROGRESS;&#13;
        addCell($row, header, className);&#13;
    }&#13;
&#13;
    function addChecksCell($row, checks) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_CHECKS&#13;
            : CSS_CLASSES.HIER_REPORT_CHECKS;&#13;
        addCell($row, checks, className);&#13;
    }&#13;
&#13;
    function addMistakesCell($row, mistakes) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_MISTAKES&#13;
            : CSS_CLASSES.HIER_REPORT_MISTAKES;&#13;
        addCell($row, mistakes, className);&#13;
    }&#13;
&#13;
    function addErrorsCell($row, errors) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_ERRORS&#13;
            : CSS_CLASSES.HIER_REPORT_ERRORS;&#13;
        addCell($row, errors, className);&#13;
    }&#13;
&#13;
    function addPageScoreCell($row, pageScore) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PAGE_SCORE&#13;
            : CSS_CLASSES.HIER_REPORT_PAGE_SCORE;&#13;
        addCell($row, pageScore, className);&#13;
    }&#13;
&#13;
    function addMaxScoreAwardCell($row, maxScoreAward) {&#13;
        const className = maxScoreAward&#13;
            ? (isInPrintableStateMode()&#13;
                ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PAGE_MAX_SCORE&#13;
                : CSS_CLASSES.HIER_REPORT_PAGE_MAX_SCORE)&#13;
            : undefined;&#13;
        addCell($row, maxScoreAward, className);&#13;
    }&#13;
&#13;
    function addNameCell($row, node) {&#13;
        let $nameCell = generateTextWrapper(node.getName(), node.isChapter(), node.getId());&#13;
        $nameCell.appendTo($row);&#13;
    }&#13;
&#13;
    function generateTextWrapper(text, isChapter, pageId) {&#13;
        var $textWrapper = $(document.createElement('div'));&#13;
        $textWrapper.addClass(CSS_CLASSES.TEXT_WRAPPER);&#13;
        var innerHTML = text;&#13;
        if (!isChapter &amp;&amp; !isInPrintableStateMode()) {&#13;
            innerHTML = generatePageLinks(text, isChapter, pageId);&#13;
        }&#13;
        $textWrapper.html(innerHTML);&#13;
&#13;
        var $element = $(document.createElement('td'));&#13;
        $element.append($textWrapper);&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function generatePageLinks(text, isChapter, pageId) {&#13;
        return $("&lt;a&gt;&lt;/a&gt;").html(text).attr('href', '#').attr('data-page-id', pageId);&#13;
    }&#13;
&#13;
    function addCell($row, value, className) {&#13;
        var $cell = $(document.createElement('td'));&#13;
        if (className !== undefined) {&#13;
            $cell.addClass(className);&#13;
        }&#13;
        if (value !== undefined) {&#13;
            $cell.html(value);&#13;
        }&#13;
        $cell.appendTo($row);&#13;
    }&#13;
&#13;
    function addResultsFooterCell($row) {&#13;
        var calculateScore = !(isPreviewConsideringPrintableState() || isInPrintableEmptyStateMode());&#13;
&#13;
        createProgressCell($row, {&#13;
            score: calculateScore ? presenter.calculateLessonScore() : 0,&#13;
            count: 1&#13;
        }, undefined, undefined);&#13;
    }&#13;
&#13;
    function isPreviewConsideringPrintableState() {&#13;
        return isInPrintableStateMode()&#13;
           ? printableController.isPreview()&#13;
           : presenter.isPreview;&#13;
    }&#13;
&#13;
    function addPageScoreFooterCell($cell, lessonScore) {&#13;
        var $separator = generateSeparator();&#13;
        var content = lessonScore.score + $separator[0].outerHTML + lessonScore.maxScore;&#13;
        addPageScoreCell($cell, content);&#13;
    }&#13;
&#13;
    function addEmptyRow($view, node, index, parentIndex) {&#13;
        var configuration = getConfiguration();&#13;
        var isInPrintableState = isInPrintableStateMode();&#13;
        var $row = $(document.createElement('tr'));&#13;
        $row.appendTo($view.find('table'));&#13;
        $row.addClass(configuration.classes[index % configuration.classes.length]);&#13;
&#13;
        var nodeClassName = isInPrintableState&#13;
          ? CSS_CLASSES.PRINTABLE_HIER_REPORT_NODE + '-' + index&#13;
          : "treegrid-" + index;&#13;
        $row.addClass(nodeClassName);&#13;
&#13;
        if (parentIndex != null) {&#13;
            var parentNodeClassName = isInPrintableState&#13;
              ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PARENT + '-' + parentIndex&#13;
              : "treegrid-parent-" + parentIndex&#13;
            $row.addClass(parentNodeClassName);&#13;
        }&#13;
&#13;
        var isOdd = index % 2 &gt; 0;&#13;
        var typeClassName = node.isChapter()&#13;
          ? getRowChapterClassName()&#13;
          : getRowPageClassName(isOdd);&#13;
        $row.addClass(typeClassName);&#13;
&#13;
        return $row;&#13;
    }&#13;
&#13;
    function getRowChapterClassName() {&#13;
        return isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_CHAPTER&#13;
            : CSS_CLASSES.HIER_REPORT_CHAPTER;&#13;
    }&#13;
&#13;
    function  getRowPageClassName(isOdd) {&#13;
        if (isOdd) {&#13;
            return isInPrintableStateMode()&#13;
              ? CSS_CLASSES.PRINTABLE_HIER_REPORT_ODD&#13;
              : CSS_CLASSES.HIER_REPORT_ODD;&#13;
        }&#13;
        return isInPrintableStateMode()&#13;
          ? CSS_CLASSES.PRINTABLE_HIER_REPORT_EVEN&#13;
          : CSS_CLASSES.HIER_REPORT_EVEN;&#13;
    }&#13;
&#13;
    function createProgressCell($row, score, index, isChapter) {&#13;
        var isInPrintableState = isInPrintableStateMode();&#13;
        var $progressCell = $(document.createElement('td'));&#13;
        $progressCell.appendTo($row);&#13;
&#13;
        var progressCellClassName = isInPrintableState&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PROGRESS&#13;
            : CSS_CLASSES.HIER_REPORT_PROGRESS;&#13;
        $progressCell.addClass(progressCellClassName);&#13;
&#13;
        var percent = Math.round(score.score / score.count * 100);&#13;
        var innerHTML = percent + "%";&#13;
&#13;
        if (isInPrintableState) {&#13;
            $progressCell.html(innerHTML);&#13;
        } else {&#13;
            var $progressbar = $(document.createElement('div'));&#13;
            $progressbar.attr("id", "progressbar-" + index);&#13;
            $progressbar.addClass(CSS_CLASSES.HIER_REPORT_PROGRESSBAR);&#13;
            $progressbar.appendTo($progressCell);&#13;
&#13;
            var $progressInfo = $(document.createElement('div'));&#13;
            $progressInfo.attr("style", "float: right");&#13;
            $progressInfo.html(innerHTML);&#13;
            $progressInfo.appendTo($progressCell);&#13;
&#13;
            if (!isChapter) {&#13;
                $progressbar.progressbar({&#13;
                    value: Math.round(score.score * 100),&#13;
                    max: 100&#13;
                });&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isPageVisited = function (pageId) {&#13;
        if (isInPrintableStateMode()) {&#13;
            if (printableController.isPreview()) {&#13;
                return false;&#13;
            }&#13;
&#13;
            if (isInPrintableEmptyStateMode()) {&#13;
                return false;&#13;
            }&#13;
            return printableController.getContentInformation().find(x =&gt; x.id === pageId).isVisited === "true";&#13;
        }&#13;
        return presentationController.getPresentation().getPageById(pageId).isVisited();&#13;
    };&#13;
&#13;
    presenter.getPageScaledScore = function(maxScore, score, isChapter, pageID) {&#13;
        if (isInPrintableEmptyStateMode()) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (maxScore) {&#13;
            return score / maxScore;&#13;
        }&#13;
&#13;
        const isPreview = isPreviewConsideringPrintableState();&#13;
        if (!isPreview &amp;&amp; !isChapter) {&#13;
            return presenter.isPageVisited(pageID) ? 1 : 0;&#13;
        }&#13;
        return 0;&#13;
    };&#13;
&#13;
    function addScoreCellsWhenEnabledScoring($row, node, index) {&#13;
        const configuration = getConfiguration();&#13;
        let score = getScoreByPageIdForScoreCell(node.getId());&#13;
&#13;
        if (!node.isChapter()) {&#13;
            presenter.updateScaledScore(score, node.getId());&#13;
        }&#13;
&#13;
        if (configuration.showResults) {&#13;
            createProgressCell($row, {score: score.scaledScore, count: 1}, index, node.isChapter());&#13;
        }&#13;
        if (configuration.showChecks) {&#13;
            addChecksCell($row, score.checkCount);&#13;
        }&#13;
        if (configuration.showMistakes) {&#13;
            addMistakesCell($row, score.mistakeCount);&#13;
        }&#13;
        if (configuration.showErrors) {&#13;
            addErrorsCell($row, score.errorCount);&#13;
        }&#13;
        if (configuration.showPageScore) {&#13;
            addPageScoreRowCell($row, score);&#13;
        }&#13;
        if (configuration.showMaxScoreField) {&#13;
            addMaxScoreAwardRowCell($row, score, node.getId());&#13;
        }&#13;
&#13;
        updateLessonScore(score, node.getId(), node.isChapter());&#13;
    }&#13;
&#13;
    function addScoreCellsWhenDisabledScoring($row) {&#13;
        var c = getConfiguration();&#13;
        var columns = [c.showResults, c.showChecks, c.showMistakes, c.showErrors, c.showPageScore, c.showMaxScoreField].filter(function(a) { return a }).length;&#13;
        var $colspan = $("&lt;td colspan='" + columns + "'&gt;&lt;/td&gt;");&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_SCORE_DISABLED_ROW&#13;
            : CSS_CLASSES.HIER_REPORT_SCORE_DISABLED_ROW;&#13;
        $colspan.addClass(className);&#13;
        $colspan.appendTo($row);&#13;
    }&#13;
&#13;
    function getScoreByPageIdForScoreCell(pageId) {&#13;
        if (isPreviewConsideringPrintableState()) {&#13;
            return createEmptyScore();&#13;
        }&#13;
&#13;
        if (isInPrintableStateMode()) {&#13;
            return getPrintablePageScoreById(pageId);&#13;
        }&#13;
        return presentationController.getScore().getPageScoreById(pageId);&#13;
    }&#13;
&#13;
    function getPrintablePageScoreById(pageId) {&#13;
        var score = printableController.getScore();&#13;
        if (score === null) {&#13;
            return createEmptyScore();&#13;
        }&#13;
&#13;
        if (score.hasOwnProperty(pageId)) {&#13;
            return {...score[pageId]}&#13;
        }&#13;
        return createEmptyScore();&#13;
    }&#13;
&#13;
    function addPageScoreRowCell($view, score) {&#13;
        var innerHTML = createInnerHTMLForScoreCell(score);&#13;
        addPageScoreCell($view, innerHTML);&#13;
    }&#13;
&#13;
    function addMaxScoreAwardRowCell($view, score, pageId) {&#13;
        var isInPrintableState = isInPrintableStateMode();&#13;
        var $cell = $(document.createElement('td'));&#13;
&#13;
        var isMaxScore = score.maxScore !== 0 &amp;&amp; score.score === score.maxScore;&#13;
        const className = isMaxScore&#13;
            ? (isInPrintableState&#13;
                ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PAGE_MAX_SCORE&#13;
                : CSS_CLASSES.HIER_REPORT_PAGE_MAX_SCORE)&#13;
            : (isInPrintableState&#13;
                ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PAGE_NON_MAX_SCORE&#13;
                : CSS_CLASSES.HIER_REPORT_PAGE_NON_MAX_SCORE);&#13;
        $cell.addClass(className);&#13;
&#13;
        if (!isInPrintableState) {&#13;
            var $element = generateMaxScoreLinks(pageId, isMaxScore);&#13;
            $($cell).append($element);&#13;
        }&#13;
        $view.append($cell);&#13;
    }&#13;
&#13;
    function generateMaxScoreLinks(pageId, isMaxScore) {&#13;
        var $element = $(document.createElement('td'));&#13;
        const className = isMaxScore&#13;
            ? CSS_CLASSES.HIER_REPORT_PAGE_MAX_SCORE&#13;
            : CSS_CLASSES.HIER_REPORT_PAGE_NON_MAX_SCORE;&#13;
        $element.addClass(className);&#13;
&#13;
        var $link = $("&lt;a&gt;&lt;/a&gt;").attr('href', '#').attr('data-page-id', pageId);&#13;
        $link.append($element);&#13;
        return $link;&#13;
    }&#13;
&#13;
    function parsePrintableControllerLessonsScoresToValidForm() {&#13;
        if (isInPrintableShowResultsStateMode()) {&#13;
            var scores = printableController.getScore();&#13;
            for (const [key, value] of Object.entries(scores)) {&#13;
                parseValuesToIntInDict(value);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function parseValuesToIntInDict(dictionary) {&#13;
        for (const [key, value] of Object.entries(dictionary)) {&#13;
            dictionary[key] = parseInt(dictionary[key]);&#13;
        }&#13;
    }&#13;
&#13;
    function generateSeparator() {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_SEPARATOR&#13;
            : CSS_CLASSES.HIER_REPORT_SEPARATOR;&#13;
        var $separator = $('&lt;span&gt;&lt;/span&gt;');&#13;
        $separator.html('/');&#13;
        $separator.addClass(className);&#13;
        return $separator;&#13;
    }&#13;
&#13;
    function checkIfChapterHasChildren () {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
           if(!$(this).hasClass('treegrid-collapsed') &amp;&amp; !$(this).hasClass('treegrid-expanded')) {&#13;
               $(this).remove();&#13;
           }&#13;
        });&#13;
    }&#13;
&#13;
    function checkIfPageEnabled () {&#13;
        const configuration = getConfiguration();&#13;
        if (configuration.enablePages != '' &amp;&amp; configuration.enablePages != undefined){&#13;
            const realIndex = parseInt(getRelativeIndex() - getChapterIndex(), 10);&#13;
            return configuration.enablePages.indexOf(realIndex) &gt; -1;&#13;
        }&#13;
        return true;&#13;
    }&#13;
&#13;
    function addRow($view, node, index, parentIndex, isPreview) {&#13;
        const $row = addEmptyRow($view, node, index, parentIndex);&#13;
&#13;
        if (!isPreview) {&#13;
            updateNodeNameByAlternativeName(node);&#13;
        }&#13;
        addNameCell($row, node);&#13;
&#13;
        if (isScoringInPageEnabled(getAbsoluteIndex())) {&#13;
            addScoreCellsWhenEnabledScoring($row, node, index);&#13;
        } else {&#13;
            addScoreCellsWhenDisabledScoring($row);&#13;
        }&#13;
        return $row;&#13;
    }&#13;
&#13;
    function updateNodeNameByAlternativeName (node) {&#13;
        const alternativeNameIndex = node.isChapter() ? getChapterIndex() : getPageIndex();&#13;
        const alternativeName = presenter.findAlternativeName(alternativeNameIndex, node.isChapter());&#13;
        node.setName(alternativeName || node.getName());&#13;
    }&#13;
&#13;
    presenter.findAlternativeName = function (index, isChapter){&#13;
        let result = undefined;&#13;
        const configuration = getConfiguration();&#13;
        const alternativeTitles = configuration.alternativePageTitles;&#13;
&#13;
        alternativeTitles.forEach(alternativeTitle =&gt; {&#13;
            if ((alternativeTitle.alternativePageNumber - 1) === index &amp;&amp; alternativeTitle.alternativePageIsChapter === isChapter){&#13;
                result = alternativeTitle.alternativePageName;&#13;
            }&#13;
        });&#13;
        return result;&#13;
    };&#13;
&#13;
    function updateChapterRow($row, chapterIndex, score) {&#13;
        const hasChildren = score.pageCount &gt; 0;&#13;
        const configuration = getConfiguration();&#13;
&#13;
        if (configuration.showResults) {&#13;
            updateChapterRowResultsCell($row, chapterIndex, score, hasChildren);&#13;
        }&#13;
        if (configuration.showChecks) {&#13;
            updateChapterRowChecksCell($row, score.checkCount, hasChildren);&#13;
        }&#13;
        if (configuration.showMistakes) {&#13;
            updateChapterRowMistakesCell($row, score.mistakeCount, hasChildren);&#13;
        }&#13;
        if (configuration.showErrors) {&#13;
            updateChapterRowErrorsCell($row, score.errorCount, hasChildren);&#13;
        }&#13;
        if (configuration.showPageScore) {&#13;
            updateChapterRowScoreCell($row, score, hasChildren);&#13;
        }&#13;
    }&#13;
&#13;
    function updateChapterRowResultsCell($row, pageIndex, score, hasChildren) {&#13;
        if (isInPrintableStateMode()) {&#13;
            updateChapterRowResultsPrintableCell($row, score, hasChildren);&#13;
        } else {&#13;
            updateChapterRowResultsRunCell($row, pageIndex, score, hasChildren);&#13;
        }&#13;
    }&#13;
&#13;
    function updateChapterRowResultsPrintableCell($row, score, hasChildren) {&#13;
        const className = CSS_CLASSES.PRINTABLE_HIER_REPORT_PROGRESS;&#13;
        const value = hasChildren ? score.weightedScaledScoreNumerator / score.weightedScaledScoreDenominator : 0;&#13;
        const percent = (Math.round(value * 100) || 0) + '%';&#13;
        updateCell($row, percent, hasChildren, className);&#13;
    }&#13;
&#13;
    function updateChapterRowResultsRunCell($row, pageIndex, score, hasChildren) {&#13;
        var percent = Math.round((score.weightedScaledScoreNumerator / score.weightedScaledScoreDenominator) * 100) || 0;&#13;
        var $progressbar = $($row.find("#progressbar-" + pageIndex));&#13;
        if (hasChildren) {&#13;
            const value = score.weightedScaledScoreNumerator / score.weightedScaledScoreDenominator;&#13;
            $progressbar.progressbar({value: Math.round(value * 100), max: 100});&#13;
            $progressbar.closest("div").next().html(percent + '%');&#13;
        } else {&#13;
            $progressbar.closest("div").next().html('-').attr('style', '');&#13;
        }&#13;
    }&#13;
&#13;
    function updateChapterRowChecksCell($row, checks, hasChildren) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_CHECKS&#13;
            : CSS_CLASSES.HIER_REPORT_CHECKS;&#13;
        updateCell($row, checks, hasChildren, className);&#13;
    }&#13;
&#13;
    function updateChapterRowMistakesCell($row, mistakes, hasChildren) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_MISTAKES&#13;
            : CSS_CLASSES.HIER_REPORT_MISTAKES;&#13;
        updateCell($row, mistakes, hasChildren, className);&#13;
    }&#13;
&#13;
    function updateChapterRowErrorsCell($row, errors, hasChildren) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_ERRORS&#13;
            : CSS_CLASSES.HIER_REPORT_ERRORS;&#13;
        updateCell($row, errors, hasChildren, className);&#13;
    }&#13;
&#13;
    function updateChapterRowScoreCell($row, score, hasChildren) {&#13;
        const className = isInPrintableStateMode()&#13;
            ? CSS_CLASSES.PRINTABLE_HIER_REPORT_PAGE_SCORE&#13;
            : CSS_CLASSES.HIER_REPORT_PAGE_SCORE;&#13;
        const innerHTML = createInnerHTMLForScoreCell(score);&#13;
        updateCell($row, innerHTML, hasChildren, className);&#13;
    }&#13;
&#13;
    function createInnerHTMLForScoreCell (score) {&#13;
        if (score.score === 0 &amp;&amp; score.maxScore === 0 &amp;&amp; score.scaledScore === 0) {&#13;
            return getConfiguration().labels.unvisitedPageScore;&#13;
        }&#13;
        const $separator = generateSeparator();&#13;
        return score.score + $separator[0].outerHTML + score.maxScore;&#13;
    }&#13;
&#13;
    function updateCell($row, value, hasChildren, searchClassName) {&#13;
        const innerHTML = hasChildren ? value : '-';&#13;
        $row.find(`.${searchClassName}`).html(innerHTML);&#13;
    }&#13;
&#13;
    presenter.calculateLessonScore = function () {&#13;
        let lessonScore = getLessonScore();&#13;
        if (lessonScore.weightedScaledScoreDenominator === 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return Math.round((lessonScore.weightedScaledScoreNumerator / lessonScore.weightedScaledScoreDenominator) * 100) / 100;&#13;
    };&#13;
&#13;
    function updateLessonScore (pageScore, pageId, isChapter) {&#13;
        pageScore.weightedScaledScoreNumerator = 0;&#13;
        pageScore.weightedScaledScoreDenominator = 0;&#13;
&#13;
        let lessonScore = getLessonScore();&#13;
        updateChapterOrLessonScore(lessonScore, pageScore, pageId, isChapter);&#13;
    }&#13;
&#13;
    function updateChapterScore (chapterScore, score, pageId, isChapter) {&#13;
        updateChapterOrLessonScore(chapterScore, score, pageId, isChapter);&#13;
    }&#13;
&#13;
    /**&#13;
     * Update chapter's/lesson's score by given score. Only to execute when scoring is enabled.&#13;
     *  @method updateChapterOrLessonScore&#13;
     *  @param {Object} mainScore Lesson or chapter scores to be updated&#13;
     *      @param {Number} mainScore.errorCount&#13;
     *      @param {Number} mainScore.checkCount&#13;
     *      @param {Number} mainScore.mistakeCount&#13;
     *      @param {Number} mainScore.maxScore&#13;
     *      @param {Number} mainScore.score&#13;
     *      @param {Number} mainScore.pageCount&#13;
     *      @param {Number} mainScore.weightedScaledScoreNumerator&#13;
     *      @param {Number} mainScore.weightedScaledScoreDenominator&#13;
     *  @param {Object} score Chapter (representation of scores for more than one page) or page scores to update&#13;
     *  @param {String} pageId Page unique ID&#13;
     *  @param {boolean} isChapter: If score is a chapter (representation of scores for more than one page) score&#13;
     */&#13;
    function updateChapterOrLessonScore (mainScore, score, pageId, isChapter) {&#13;
        if (isChapter &amp;&amp; score.pageCount) {&#13;
            mainScore.pageCount += score.pageCount;&#13;
        } else {&#13;
            mainScore.pageCount += 1;&#13;
        }&#13;
&#13;
        if (isInPrintableEmptyStateMode() || isPreviewConsideringPrintableState()) {&#13;
            return;&#13;
        }&#13;
&#13;
        mainScore.errorCount += score.errorCount;&#13;
        mainScore.checkCount += score.checkCount;&#13;
        mainScore.mistakeCount += score.mistakeCount;&#13;
        mainScore.maxScore += score.maxScore;&#13;
        mainScore.score += score.score;&#13;
&#13;
        _updateWeightedScaledScoreParts(mainScore, score, pageId, isChapter);&#13;
    }&#13;
&#13;
    function _updateWeightedScaledScoreParts (mainScore, score, pageId, isChapter) {&#13;
        if (isChapter) {&#13;
            mainScore.weightedScaledScoreNumerator += score.weightedScaledScoreNumerator;&#13;
            mainScore.weightedScaledScoreDenominator += score.weightedScaledScoreDenominator;&#13;
            return;&#13;
        }&#13;
&#13;
        let weight = 1;&#13;
        if (getConfiguration().isWeightedArithmeticMean) {&#13;
            weight = score.weight;&#13;
        }&#13;
&#13;
        if (score.maxScore) {&#13;
            mainScore.weightedScaledScoreNumerator += score.score * weight / score.maxScore;&#13;
            mainScore.weightedScaledScoreDenominator += weight;&#13;
        } else if (presenter.isPageVisited(pageId)) {&#13;
            mainScore.weightedScaledScoreNumerator += weight;&#13;
            mainScore.weightedScaledScoreDenominator += weight;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.updateScaledScore = function (score, pageId) {&#13;
        if (isInPrintableEmptyStateMode() || isPreviewConsideringPrintableState()) {&#13;
            score.scaledScore = 0&#13;
            return;&#13;
        }&#13;
&#13;
        if (score.maxScore) {&#13;
            score.scaledScore = score.score / score.maxScore;&#13;
        } else if (presenter.isPageVisited(pageId)) {&#13;
            score.scaledScore = 1;&#13;
        } else {&#13;
            score.scaledScore = 0;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createPreviewTree = function() {&#13;
        let contentInformation = generatePreviewContentInformation();&#13;
        let rootRepresentation = createDeepNodeRepresentationOfContentInformation(contentInformation);&#13;
&#13;
        let chapterScore = createEmptyScore();&#13;
        let $view = $("#" + presenter.treeID);&#13;
        for (let i = 0; i &lt; rootRepresentation.size(); i++) {&#13;
            addRow($view, rootRepresentation.get(i), i, contentInformation[i].parentId, true);&#13;
        }&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    presenter.createTree = function($view, parentNodeRepresentation, parentIndex) {&#13;
        let pageScore = createEmptyScore();&#13;
        let chapterScore = createEmptyScore();&#13;
&#13;
        for (let i = 0; i &lt; parentNodeRepresentation.size(); i++) {&#13;
            let nodeRepresentation = parentNodeRepresentation.get(i);&#13;
&#13;
            if (!nodeRepresentation.isChapter() &amp;&amp; !nodeRepresentation.isReportable()) {&#13;
                updateIndexesWhenNotReportablePage(nodeRepresentation);&#13;
                continue;&#13;
            }&#13;
&#13;
            if (nodeRepresentation.isChapter() || checkIfPageEnabled()) {&#13;
                addRow($view, nodeRepresentation, getRelativeIndex(), parentIndex, false);&#13;
            }&#13;
&#13;
            const currentNodeRelativeIndex = getRelativeIndex();&#13;
            const currentNodeAbsoluteIndex = getAbsoluteIndex();&#13;
            updateIndexesWhenChapterOrReportablePage(nodeRepresentation.isChapter());&#13;
&#13;
            if (nodeRepresentation.isChapter()) {&#13;
                const childChapterScore = presenter.createTree($view, nodeRepresentation, currentNodeRelativeIndex);&#13;
                let $row = findChapterElement($view, currentNodeRelativeIndex);&#13;
                updateChapterRow($row, currentNodeRelativeIndex, childChapterScore);&#13;
                pageScore = childChapterScore;&#13;
            } else {&#13;
                pageScore = getScoreByPageIdForScoreCell(nodeRepresentation.getId());&#13;
            }&#13;
&#13;
            if (isScoringInPageEnabled(currentNodeAbsoluteIndex) || nodeRepresentation.isChapter()) {&#13;
                updateChapterScore(chapterScore, pageScore, nodeRepresentation.getId(), nodeRepresentation.isChapter());&#13;
            }&#13;
        }&#13;
&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    function findChapterElement($view, chapterIndex) {&#13;
        return isInPrintableStateMode()&#13;
            ? $($view.find(`.${CSS_CLASSES.PRINTABLE_HIER_REPORT_NODE}-` + chapterIndex))&#13;
            : $($view.find(".treegrid-" + chapterIndex));&#13;
    }&#13;
&#13;
    function isScoringInPageEnabled(index) {&#13;
        return getConfiguration().disabledScorePages.indexOf(index) === -1;&#13;
    }&#13;
&#13;
    function updateIndexesWhenNotReportablePage() {&#13;
        const configuration = getConfiguration();&#13;
        increaseAbsoluteIndex();&#13;
&#13;
        if (configuration.enablePages != '' &amp;&amp; configuration.enablePages != undefined) {&#13;
            increaseRelativeIndex();&#13;
        }&#13;
        increasePageIndex();&#13;
    }&#13;
&#13;
    function updateIndexesWhenChapterOrReportablePage(isChapter) {&#13;
        increaseAbsoluteIndex();&#13;
        increaseRelativeIndex();&#13;
&#13;
        if (isChapter) {&#13;
            increaseChapterIndex();&#13;
        } else {&#13;
            increasePageIndex();&#13;
        }&#13;
    }&#13;
&#13;
    function getAbsoluteIndex() {&#13;
        return absoluteIndex;&#13;
    }&#13;
&#13;
    function getRelativeIndex() {&#13;
        return relativeIndex;&#13;
    }&#13;
&#13;
    function getPageIndex() {&#13;
        return pageIndex;&#13;
    }&#13;
&#13;
    function getChapterIndex() {&#13;
        return chapterIndex;&#13;
    }&#13;
&#13;
    function increaseAbsoluteIndex() {&#13;
        absoluteIndex += 1;&#13;
    }&#13;
&#13;
    function increaseRelativeIndex() {&#13;
        relativeIndex += 1;&#13;
    }&#13;
&#13;
    function increasePageIndex() {&#13;
        pageIndex += 1;&#13;
    }&#13;
&#13;
    function increaseChapterIndex() {&#13;
        chapterIndex += 1;&#13;
    }&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            $report = presenter.$view.find('.hier_report tr');&#13;
&#13;
        $report.find('td a').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
                commander.gotoPageId($(this).attr('data-page-id'));&#13;
            });&#13;
        });&#13;
&#13;
        $report.find('.treegrid-expander').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function expandTree(level) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            if ($(this).treegrid('getDepth') &lt; level) {&#13;
                $(this).treegrid('expand');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function saveTreeState() {&#13;
        var state = [];&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            state.push($(this).treegrid('isExpanded'));&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    function restoreTreeState(state) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function (index) {&#13;
            $(this).treegrid(state[index] ? 'expand' : 'collapse');&#13;
        });&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'treeState': saveTreeState(),&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        restoreTreeState(state.treeState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
    };&#13;
&#13;
    function parseClasses(classes_text) {&#13;
        function isValidClassName(class_name) {&#13;
            return /^[a-z_-][a-z\d_-]*$/i.test(class_name);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(classes_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var classes = classes_text.split('\n');&#13;
        for (var i=0; i&lt;classes.length; i++) {&#13;
            if (classes[i].indexOf(' ') !== -1) {&#13;
                return returnErrorObject("C02");&#13;
            }&#13;
&#13;
            if (!isValidClassName(classes[i])) {&#13;
                return returnErrorObject("C01");&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(classes);&#13;
    }&#13;
&#13;
    function parseScoreDisable(pages_text, disabledType) {&#13;
        if (ModelValidationUtils.isStringEmpty(pages_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var i;&#13;
&#13;
        var pages = pages_text.split(';');&#13;
        for (i=0; i&lt;pages.length; i++) {&#13;
            var numberObject = ModelValidationUtils.validateInteger(pages[i]);&#13;
            if (!numberObject.isValid) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D01");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P01");&#13;
                }&#13;
            }&#13;
&#13;
            pages[i] = numberObject.value - 1; // indexing from 0&#13;
&#13;
            if (pages[i] &lt; 0) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D02");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P02");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        for (i=1; i&lt;pages.length; i++) {&#13;
            if (pages.sort()[i] === pages.sort()[i-1]) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D03");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P03");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(pages.sort());&#13;
    }&#13;
&#13;
    presenter.validateAlternativePageTitles = function (listOfPages) {&#13;
        var validatedList = [];&#13;
&#13;
        if (listOfPages.length === undefined || listOfPages.length === 0) {&#13;
            return returnErrorObject('A01');&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; listOfPages.length; i++) {&#13;
             var alternativePageName = listOfPages[i].alternativePageName;&#13;
             var isChapter = ModelValidationUtils.validateBoolean(listOfPages[i].alternativePageIsChapter);&#13;
&#13;
             var alternativePageNumber = "";&#13;
&#13;
             if (!ModelValidationUtils.isStringEmpty(listOfPages[i].alternativePageNumber)) {&#13;
                var alternativePageNumberObject = ModelValidationUtils.validatePositiveInteger(listOfPages[i].alternativePageNumber);&#13;
                if (!alternativePageNumberObject.isValid) {&#13;
                    return returnErrorObject('A02');&#13;
                }&#13;
&#13;
                alternativePageNumber = alternativePageNumberObject.value;&#13;
             }&#13;
&#13;
             validatedList[i] = {&#13;
                 alternativePageName: alternativePageName,&#13;
                 alternativePageNumber: alternativePageNumber,&#13;
                 alternativePageIsChapter: isChapter&#13;
             };&#13;
        }&#13;
&#13;
        return returnCorrectObject(validatedList);&#13;
    };&#13;
&#13;
    presenter.upgradeAlternativePageNamesProperty = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (model["alternativePageTitles"] === undefined) {&#13;
            upgradedModel["alternativePageTitles"] = [{&#13;
                alternativePageNumber: "",&#13;
                alternativePageName: "",&#13;
                alternativePageIsChapter: "false"&#13;
            }];&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeTextToSpeechSupport = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['speechTexts'] === undefined) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Expanded: {Expanded: "Expanded"},&#13;
                Collapsed: {Collapsed: "Collapsed"},&#13;
                Results: {Results: "Results"},&#13;
                Checks: {Checks: "Checks"},&#13;
                Mistakes: {Mistakes: "Mistakes"},&#13;
                Errors: {Errors: "Errors"},&#13;
                Score: {Score: "Score"},&#13;
                OutOf: {OutOf: "Out of"},&#13;
                Total: {Total: "Total"}&#13;
            };&#13;
        }&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] = "";&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeIsWeightedArithmeticMean = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel["isWeightedArithmeticMean"] === undefined) {&#13;
            upgradedModel["isWeightedArithmeticMean"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeAlternativePageNamesProperty(model);&#13;
        upgradedModel = presenter.upgradeTextToSpeechSupport(upgradedModel);&#13;
        upgradedModel = presenter.upgradeIsWeightedArithmeticMean(upgradedModel);&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            expanded:  'Expanded',&#13;
            collapsed: 'Collapsed',&#13;
            results: 'Percentage results',&#13;
            checks: 'Number of checks',&#13;
            mistakes: 'Number of mistakes',&#13;
            errors: 'Number of errors',&#13;
            score: 'Score',&#13;
            outOf: 'out of',&#13;
            Total: 'Total'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            expanded:    getSpeechTextProperty(speechTexts['Expanded']['Expanded'], presenter.speechTexts.expanded),&#13;
            collapsed: getSpeechTextProperty(speechTexts['Collapsed']['Collapsed'], presenter.speechTexts.collapsed),&#13;
            results:  getSpeechTextProperty(speechTexts['Results']['Results'], presenter.speechTexts.results),&#13;
            checks:     getSpeechTextProperty(speechTexts['Checks']['Checks'], presenter.speechTexts.checks),&#13;
            mistakes:   getSpeechTextProperty(speechTexts['Mistakes']['Mistakes'], presenter.speechTexts.mistakes),&#13;
            errors:      getSpeechTextProperty(speechTexts['Errors']['Errors'], presenter.speechTexts.errors),&#13;
            score:        getSpeechTextProperty(speechTexts['Score']['Score'], presenter.speechTexts.score),&#13;
            outOf:        getSpeechTextProperty(speechTexts['OutOf']['OutOf'], presenter.speechTexts.outOf),&#13;
            total:        getSpeechTextProperty(speechTexts['Total']['Total'], presenter.speechTexts.total)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        var expandDepth = returnCorrectObject(0);&#13;
&#13;
        if (model['expandDepth'].length &gt; 0) {&#13;
            expandDepth = ModelValidationUtils.validateInteger(model['expandDepth']);&#13;
            if (!expandDepth.isValid) {&#13;
                return returnErrorObject('EXPAND_DEPTH_NOT_NUMERIC');&#13;
            }&#13;
        }&#13;
&#13;
        var validatedClasses = parseClasses(model["classes"]);&#13;
        if (!validatedClasses.isValid) {&#13;
            return returnErrorObject(validatedClasses.errorCode);&#13;
        }&#13;
&#13;
        var validatedDisabledScorePages = parseScoreDisable(model["scoredisabled"], 'score');&#13;
        if (!validatedDisabledScorePages.isValid) {&#13;
            return returnErrorObject(validatedDisabledScorePages.errorCode);&#13;
        }&#13;
&#13;
        var validatedEnablePages = parseScoreDisable(model["enablePages"], 'pages');&#13;
        if (!validatedEnablePages.isValid) {&#13;
            return returnErrorObject(validatedEnablePages.errorCode);&#13;
        }&#13;
&#13;
        var validatedAlternativePageTitles = presenter.validateAlternativePageTitles(model["alternativePageTitles"]);&#13;
        if (!validatedAlternativePageTitles.isValid) {&#13;
            return returnErrorObject(validatedAlternativePageTitles.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            labels: {&#13;
                results: model['resultsLabel'],&#13;
                errors: model['errorsLabel'],&#13;
                checks: model['checksLabel'],&#13;
                mistakes: model['mistakesLabel'],&#13;
                total: model['totalLabel'],&#13;
                title: model['titleLabel'],&#13;
                pageScores: model['pageScoresLabel'] || "",&#13;
                maxScoreAward: model['maxScoreAwardLabel'] || "",&#13;
                unvisitedPageScore: model['unvisitedPageScoresLabel'] || ""&#13;
            },&#13;
            showResults: ModelValidationUtils.validateBoolean(model["results"]),&#13;
            showErrors: ModelValidationUtils.validateBoolean(model["errors"]),&#13;
            showChecks: ModelValidationUtils.validateBoolean(model["checks"]),&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model["mistakes"]),&#13;
            showTotal: ModelValidationUtils.validateBoolean(model["total"]),&#13;
            expandDepth: expandDepth.value,&#13;
            classes: validatedClasses.value,&#13;
            showPageScore: ModelValidationUtils.validateBoolean(model["showpagescore"]),&#13;
            showMaxScoreField: ModelValidationUtils.validateBoolean(model["showmaxscorefield"]),&#13;
            disabledScorePages: validatedDisabledScorePages.value,&#13;
            enablePages: validatedEnablePages.value,&#13;
            alternativePageTitles: validatedAlternativePageTitles.value,&#13;
            langTag: model['langAttribute'],&#13;
            isWeightedArithmeticMean: ModelValidationUtils.validateBoolean(model["isWeightedArithmeticMean"])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
        initLessonScore();&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        var padding_width = parseInt(presenter.$view.find('.hier_report').css('padding'));&#13;
        if(isNaN(padding_width)) padding_width = 0;&#13;
        var border_width = parseInt(presenter.$view.find('.hier_report').css('border-width'));&#13;
        if(isNaN(border_width)) border_width = 0;&#13;
        var actual_height = presenter.configuration.height + ( padding_width + border_width ) *2; // makes it so hier_report and the addons view are the same height&#13;
&#13;
        presenter.$view.css('height',actual_height+'px');&#13;
        presenter.$view.find('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");&#13;
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");&#13;
        presenter.$view.find("div").first().attr('id', presenter.treeID);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        var $table = $("#" + presenter.treeID).find('table');&#13;
        addHeader(presenter.configuration, $table);&#13;
        resetIndexes();&#13;
        if (isPreview) {&#13;
            presenter.createPreviewTree();&#13;
        } else {&#13;
            var $view = $("#" + presenter.treeID);&#13;
            var rootNode = createRunStructure();&#13;
            presenter.createTree($view, rootNode, null);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showTotal) {&#13;
            addFooter(presenter.configuration, $table);&#13;
        }&#13;
&#13;
        $("#" + presenter.treeID).find('table').not('.hier_report-header').not('.hier_report-footer').treegrid({&#13;
            'initialState': 'collapsed',&#13;
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'&#13;
        });&#13;
&#13;
        expandTree(presenter.configuration.expandDepth);&#13;
        if (!isPreview) {&#13;
            handleMouseClickActions();&#13;
        }&#13;
&#13;
        checkIfChapterHasChildren();&#13;
    };&#13;
&#13;
    function initLessonScore() {&#13;
        var initLessonScore = createEmptyScore();&#13;
&#13;
        if (isInPrintableStateMode()) {&#13;
            presenter.printableLessonScore = initLessonScore;&#13;
        } else {&#13;
            presenter.lessonScore = initLessonScore;&#13;
        }&#13;
    }&#13;
&#13;
    function createEmptyScore() {&#13;
        return {&#13;
            // Native score fields&#13;
            checkCount: 0,&#13;
            errorCount: 0,&#13;
            mistakeCount: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0,&#13;
            weight: 0,&#13;
&#13;
            // Score fields to calculate result&#13;
            pageCount: 0,&#13;
            weightedScaledScoreNumerator: 0,&#13;
            weightedScaledScoreDenominator: 0,&#13;
        };&#13;
    }&#13;
&#13;
    function getLessonScore() {&#13;
        if (isInPrintableStateMode())&#13;
            return presenter.printableLessonScore;&#13;
        return presenter.lessonScore;&#13;
    }&#13;
&#13;
    function getConfiguration() {&#13;
        if (isInPrintableStateMode())&#13;
            return presenter.printableConfiguration;&#13;
        return presenter.configuration;&#13;
    }&#13;
&#13;
    function getCell(rowNumber, columnNumber) {&#13;
        var $cell = presenter.$view.find('tr:eq('+rowNumber+') &gt; td:eq('+columnNumber+')');&#13;
        if($cell.size()&gt;0){&#13;
            return $cell[0];&#13;
        }&#13;
        return null;&#13;
    }&#13;
&#13;
    presenter.cellIsVisible = function(rowNumber, columnNumber) {&#13;
        var cell = getCell(rowNumber, columnNumber);&#13;
        return cell &amp;&amp; $(cell).is(':visible');&#13;
    };&#13;
&#13;
    function getTableMaxHeight() {&#13;
            return presenter.$view.find('tr').size();&#13;
        }&#13;
&#13;
        function getTableWidth() {&#13;
            return presenter.$view.find('tr:eq(0) &gt; td').size();&#13;
        }&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        event.preventDefault();&#13;
        presenter.shiftPressed = event.shiftKey;&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ESCAPE: 27,&#13;
            SPACE: 32,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40,&#13;
            TAB: 9&#13;
        };&#13;
&#13;
        function moveTo(newRow, newColumn) {&#13;
            if(!presenter.cellIsVisible(newRow,newColumn)) {&#13;
                return;&#13;
            }&#13;
            currentColumn = newColumn;&#13;
            currentRow = newRow;&#13;
            presenter.$view.find('.' + CSS_CLASSES.SELECTED_CELL).removeClass(CSS_CLASSES.SELECTED_CELL);&#13;
            var cell = getCell(currentRow, currentColumn);&#13;
            $(cell).addClass(CSS_CLASSES.SELECTED_CELL);&#13;
            scrollCellIntoView();&#13;
&#13;
        }&#13;
&#13;
        function scrollCellIntoView () {&#13;
            var cell = getCell(currentRow,currentColumn);&#13;
            var $cell = $(cell);&#13;
            var $hier_report = presenter.$view.find('.hier_report');&#13;
            var scrollPos = $hier_report.scrollTop();&#13;
&#13;
            if($cell.outerHeight() + cell.offsetTop &gt; $hier_report.height() + scrollPos) {&#13;
                $hier_report.scrollTop($cell.height() + parseInt($cell.css('padding-top')) + cell.offsetTop - $hier_report.height() );&#13;
            } else if(cell.offsetTop &lt; scrollPos) {&#13;
                $hier_report.scrollTop(cell.offsetTop + parseInt($cell.css('padding-top')));&#13;
            }&#13;
        };&#13;
&#13;
        function getNextVisibleRowNumber(rowNumber) {&#13;
            var newRow = rowNumber;&#13;
            var nRows = getTableMaxHeight();&#13;
            while (true) {&#13;
                newRow+=1;&#13;
                if(newRow&gt;=nRows) {&#13;
                    return rowNumber;&#13;
                }&#13;
                if(presenter.cellIsVisible(newRow,0)){&#13;
                    return newRow;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        function getPrevVisibleRowNumber(rowNumber) {&#13;
            var newRow = rowNumber;&#13;
            while (true) {&#13;
                newRow-=1;&#13;
                if(newRow&lt;=0) {&#13;
                    return rowNumber;&#13;
                }&#13;
                if(presenter.cellIsVisible(newRow,0)){&#13;
                    return newRow;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var enter = function (){&#13;
            if(isShiftKeyDown) {&#13;
                return escape();&#13;
            }&#13;
&#13;
            moveTo(currentRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var next_element = function (){&#13;
            moveTo(currentRow,currentColumn+1);&#13;
            presenter.readCurrentCell();&#13;
        };&#13;
&#13;
        var previous_element = function (){&#13;
            moveTo(currentRow,currentColumn-1);&#13;
            presenter.readCurrentCell();&#13;
        };&#13;
&#13;
        var next_row = function () {&#13;
            var newRow = getNextVisibleRowNumber(currentRow);&#13;
            moveTo(newRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var previous_row = function () {&#13;
            var newRow = getPrevVisibleRowNumber(currentRow);&#13;
            moveTo(newRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var space = function (){&#13;
            var $cell = $(getCell(currentRow,currentColumn));&#13;
            var $link = $cell.find('a');&#13;
            if ($link.size()&gt;0) {&#13;
                $link.trigger('click');&#13;
            } else {&#13;
                var $expand = $cell.find('.treegrid-expander');&#13;
                if ($expand.size()&gt;0) {&#13;
                    $expand.trigger("click");&#13;
                    if ($expand.hasClass("treegrid-expander-collapsed")) {&#13;
                        speak([getTextVoiceObject(presenter.speechTexts.collapsed,"")]);&#13;
                    } else if ($expand.hasClass("treegrid-expander-expanded")) {&#13;
                        speak([getTextVoiceObject(presenter.speechTexts.expanded,"")]);&#13;
                    }&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        var escape = function (){&#13;
            presenter.$view.find('.' + CSS_CLASSES.SELECTED_CELL).removeClass(CSS_CLASSES.SELECTED_CELL);&#13;
            currentColumn = 0;&#13;
            currentRow = 1;&#13;
        };&#13;
&#13;
        function tabHandler() {&#13;
            var rowChange = false;&#13;
            var maxWidth = getTableWidth();&#13;
&#13;
            var newColumn = currentColumn;&#13;
            var newRow = currentRow;&#13;
&#13;
            if (isShiftKeyDown) {&#13;
                newColumn -= 1;&#13;
            } else {&#13;
                newColumn += 1;&#13;
            }&#13;
&#13;
            if(newColumn&gt;=maxWidth) {&#13;
                newRow = getNextVisibleRowNumber(newRow);&#13;
                if(newRow!==currentRow) {&#13;
                    newColumn = 0;&#13;
                    rowChange=true;&#13;
                } else {&#13;
                    newColumn = maxWidth-1;&#13;
                }&#13;
            } else if(newColumn&lt;0) {&#13;
                newRow = getPrevVisibleRowNumber(newRow);&#13;
                 if(newRow!==currentRow) {&#13;
                    newColumn = maxWidth-1;&#13;
                    rowChange=true;&#13;
                } else {&#13;
                    newColumn = 0;&#13;
                }&#13;
            }&#13;
&#13;
            moveTo(newRow, newColumn);&#13;
            if(rowChange) {&#13;
                presenter.readCurrentRowAndCell();&#13;
            } else {&#13;
                presenter.readCurrentCell();&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var mapping = {};&#13;
        mapping[keys.ENTER] = enter;&#13;
        mapping[keys.ESCAPE] = escape;&#13;
        mapping[keys.SPACE] = space;&#13;
        mapping[keys.ARROW_LEFT] = previous_element;&#13;
        mapping[keys.ARROW_UP] = previous_row;&#13;
        mapping[keys.ARROW_RIGHT] = next_element;&#13;
        mapping[keys.ARROW_DOWN] = next_row;&#13;
        mapping[keys.TAB] = tabHandler;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    function getColumnList() {&#13;
        var columns = ['page_title'];&#13;
        if(presenter.configuration.showResults){&#13;
            columns.push('results');&#13;
        }&#13;
        if(presenter.configuration.showChecks){&#13;
            columns.push('checks');&#13;
        }&#13;
        if(presenter.configuration.showMistakes){&#13;
            columns.push('mistakes');&#13;
        }&#13;
        if(presenter.configuration.showErrors){&#13;
            columns.push('errors');&#13;
        }&#13;
        if(presenter.configuration.showPageScore){&#13;
            columns.push('score');&#13;
        }&#13;
        return columns;&#13;
    }&#13;
&#13;
    function getCurrentCellTextVoiceArray() {&#13;
        var TextVoiceArray = [];&#13;
        var $cell = $(getCell(currentRow,currentColumn));&#13;
&#13;
        if (currentColumn===0) {&#13;
            if(currentRow === getTableMaxHeight()-1 &amp;&amp; presenter.configuration.showTotal) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.total, ""));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text(), presenter.configuration.langTag));&#13;
            }&#13;
        } else {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts[getColumnList()[currentColumn]],""));&#13;
            if (-1 !== getColumnList()[currentColumn].indexOf('score')) {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text().replace('/', presenter.speechTexts.outOf, "")));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text(), ""));&#13;
            }&#13;
        }&#13;
&#13;
        if ($cell.find(".treegrid-expander-collapsed").size()&gt;0) {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.collapsed,""));&#13;
        } else if($cell.find(".treegrid-expander-expanded").size()&gt;0) {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.expanded,""));&#13;
        }&#13;
&#13;
        return TextVoiceArray;&#13;
    }&#13;
&#13;
    presenter.readCurrentCell = function() {&#13;
        speak(getCurrentCellTextVoiceArray());&#13;
    };&#13;
&#13;
    presenter.readCurrentRowAndCell = function() {&#13;
        var TextVoiceArray = [];&#13;
&#13;
        if (currentColumn!==0) {&#13;
            if(currentRow === getTableMaxHeight()-1 &amp;&amp; presenter.configuration.showTotal) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.total, ""));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($(getCell(currentRow,0)).text(), presenter.configuration.langTag));&#13;
            }&#13;
        }&#13;
&#13;
        TextVoiceArray = TextVoiceArray.concat(getCurrentCellTextVoiceArray());&#13;
&#13;
        speak(TextVoiceArray);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        presenter.speak(data);&#13;
    }&#13;
&#13;
    presenter.speak = function(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presentationController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
        presenter.printableState = JSON.parse(state);&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype = Object.create(NodeRepresentation.prototype);&#13;
    NodeRepresentation.prototype.constructor = NodeRepresentation;&#13;
&#13;
    /**&#13;
     * @param id&#13;
     * @param name&#13;
     * @param type&#13;
     * @param reportable&#13;
     * @param visited&#13;
     * @constructor&#13;
     */&#13;
    function NodeRepresentation (id, name, type, reportable, visited) {&#13;
        this.id = id;&#13;
        this.name = name;&#13;
        this.type = type;&#13;
        this.reportable = reportable;&#13;
        this.visited = visited;&#13;
        this.children = [];&#13;
&#13;
        this._isChapter = this.type === "chapter";&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype = Object.create(NodeRepresentation.prototype);&#13;
    NodeRepresentation.prototype.constructor = NodeRepresentation;&#13;
&#13;
    NodeRepresentation.prototype.get = function (index) {&#13;
        return this.children[index];&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.getId = function () {&#13;
        return this.id;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.setId = function (id) {&#13;
        this.id = id;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.getName = function () {&#13;
        return this.name;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.setName = function (name) {&#13;
        this.name = name;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.isReportable = function () {&#13;
        return this.reportable;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.isVisited = function () {&#13;
        return this.visited;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.isChapter = function () {&#13;
        return this._isChapter;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.size = function () {&#13;
        return this.children.length;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.setChildren = function (children) {&#13;
        this.children = children;&#13;
    }&#13;
&#13;
    NodeRepresentation.prototype.toString = function () {&#13;
        return (&#13;
            `[id: "${this.getId()}", ` +&#13;
            `name: "${this.getName()}", ` +&#13;
            `type: "${this.type}", ` +&#13;
            `isReportable: ${this.isReportable()}, ` +&#13;
            `isVisited: ${this.isVisited()}, ` +&#13;
            `isChapter: ${this.isChapter()}, ` +&#13;
            `size: ${this.size()}]`&#13;
        );&#13;
    }&#13;
&#13;
    function createDeepNodeRepresentationOfContentInformation(contentInformation, nodeRepresentation) {&#13;
        if (!nodeRepresentation) {&#13;
            nodeRepresentation = createEmptyNodeRepresentation();&#13;
        }&#13;
        let nodeRepresentationChildren = [];&#13;
        const childrenInformation = getChildrenContentInformation(contentInformation, nodeRepresentation.getId());&#13;
        childrenInformation.forEach((information) =&gt; {&#13;
            let childNodeRepresentation = createNodeRepresentationBaseOnContentInformation(information);&#13;
            if (childNodeRepresentation.isChapter()) {&#13;
                createDeepNodeRepresentationOfContentInformation(contentInformation, childNodeRepresentation);&#13;
                childNodeRepresentation.setId("chapter");&#13;
            }&#13;
            nodeRepresentationChildren.push(childNodeRepresentation);&#13;
        });&#13;
        nodeRepresentation.setChildren(nodeRepresentationChildren);&#13;
        return nodeRepresentation;&#13;
    }&#13;
&#13;
    function getChildrenContentInformation(contentInformation, parentId) {&#13;
        let nodesInformation = [];&#13;
        contentInformation.forEach((information) =&gt; {&#13;
            if (information.parentId === parentId)&#13;
                nodesInformation.push(information);&#13;
        });&#13;
        return nodesInformation;&#13;
    }&#13;
&#13;
    function createDeepNodeRepresentationOfNode(node, nodeRepresentation) {&#13;
        if (!nodeRepresentation) {&#13;
            nodeRepresentation = createEmptyNodeRepresentation();&#13;
        }&#13;
        let nodeRepresentationChildren = [];&#13;
        for (let i = 0; i &lt; node.size(); i++) {&#13;
            const childNode = node.get(i);&#13;
            let childNodeRepresentation = createNodeRepresentationBaseOnNode(childNode);&#13;
            if (childNodeRepresentation.isChapter()) {&#13;
                createDeepNodeRepresentationOfNode(childNode, childNodeRepresentation);&#13;
            }&#13;
            nodeRepresentationChildren.push(childNodeRepresentation);&#13;
        }&#13;
        nodeRepresentation.setChildren(nodeRepresentationChildren);&#13;
        return nodeRepresentation;&#13;
    }&#13;
&#13;
    function createNodeRepresentationBaseOnNode (node) {&#13;
        const isChapter = node.type === "chapter";&#13;
        const id = isChapter ? "chapter" : node.getId();&#13;
        const name = node.getName();&#13;
        const reportable = node.isReportable ? node.isReportable() : false;&#13;
        const visited = node.isVisited ? node.isVisited() : false;&#13;
        return new NodeRepresentation(id, name, node.type, reportable, visited);&#13;
    }&#13;
&#13;
    function createNodeRepresentationBaseOnContentInformation (contentInformation) {&#13;
        const id = contentInformation.id;&#13;
        const name = contentInformation.name;&#13;
        const reportable = contentInformation.isReportable === "true";&#13;
        const visited = contentInformation.isVisited === "true";&#13;
        return new NodeRepresentation(id, name, contentInformation.type, reportable, visited);&#13;
    }&#13;
&#13;
    presenter.PRINTABLE_STATE_MODE = {&#13;
        EMPTY: 0,&#13;
        SHOW_RESULTS: 1,&#13;
    };&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.printableConfiguration = presenter.validateModel(upgradedModel);&#13;
        var $view = createViewForPrintable(presenter.printableConfiguration);&#13;
&#13;
        chosePrintableStateMode();&#13;
        initLessonScore();&#13;
        parsePrintableControllerLessonsScoresToValidForm();&#13;
&#13;
        var $hierReport = $(findPrintableHierReport($view));&#13;
        var $table = $hierReport.find('table');&#13;
        addHeader(presenter.printableConfiguration, $table);&#13;
&#13;
        var rootRepresentation = printableController.isPreview()&#13;
            ? createPreviewPrintableStructure()&#13;
            : createPrintableStructure();&#13;
&#13;
        resetIndexes();&#13;
        presenter.createTree($hierReport, rootRepresentation,null);&#13;
&#13;
        if (presenter.printableConfiguration.showTotal) {&#13;
            addFooter(presenter.printableConfiguration, $table);&#13;
        }&#13;
        addIndentationsInTable($table);&#13;
&#13;
        cleanAfterPrintableState();&#13;
        return $view[0].outerHTML;&#13;
    };&#13;
&#13;
    function addIndentationsInTable($table) {&#13;
        let contentInformation = [];&#13;
        const elementRegExp = new RegExp(CSS_CLASSES.PRINTABLE_HIER_REPORT_NODE + "-[0-9]+");&#13;
        const parentElementNodeRegExp = new RegExp(CSS_CLASSES.PRINTABLE_HIER_REPORT_PARENT + "-[0-9]+");&#13;
&#13;
        let $rowsWithAddons = $table&#13;
            .find(`tr`)&#13;
            .not(`.${CSS_CLASSES.PRINTABLE_HIER_REPORT_HEADER}`)&#13;
            .not(`.${CSS_CLASSES.PRINTABLE_HIER_REPORT_FOOTER}`);&#13;
&#13;
        $rowsWithAddons.each(&#13;
            function() {&#13;
                const classes = $(this).attr('class').split(' ');&#13;
                let elementRepresentation = {&#13;
                    "id": getElementIdUsingClassNameWithId(classes, elementRegExp),&#13;
                    "name": $(this),&#13;
                    "parentId": getElementIdUsingClassNameWithId(classes, parentElementNodeRegExp),&#13;
                    "type": "chapter",&#13;
                    "isReportable": null,&#13;
                    "isVisited": null,&#13;
                };&#13;
                contentInformation.push(elementRepresentation)&#13;
            }&#13;
        );&#13;
&#13;
        let nodeRepresentation = createDeepNodeRepresentationOfContentInformation(contentInformation);&#13;
        addIndentationsInTableBaseOnPrintableNodesStructure(nodeRepresentation);&#13;
    }&#13;
&#13;
    function getElementIdUsingClassNameWithId(elementClasses, classNameRegExp) {&#13;
        for (var i = 0; i &lt; elementClasses.length; i++) {&#13;
            var matches = classNameRegExp.exec(elementClasses[i]);&#13;
            if (matches != null) {&#13;
                var pieces = matches[0].split('-');&#13;
                return pieces[pieces.length-1];&#13;
            }&#13;
        }&#13;
        return null;&#13;
    }&#13;
&#13;
    function addIndentationsInTableBaseOnPrintableNodesStructure(mainNode, indentNumber = 0) {&#13;
        var $indent = $(document.createElement('span'));&#13;
        $indent.addClass(CSS_CLASSES.PRINTABLE_HIER_REPORT_INDENT);&#13;
&#13;
        for (var i = 0; i &lt; mainNode.size(); i++ ) {&#13;
            var child = mainNode.get(i);&#13;
            var $childElement = child.getName().find(`.${CSS_CLASSES.TEXT_WRAPPER}`);&#13;
            for (var indentId = 0; indentId &lt; indentNumber; indentId++) {&#13;
                $childElement.before($indent.clone());&#13;
            }&#13;
            addIndentationsInTableBaseOnPrintableNodesStructure(child, indentNumber+1);&#13;
        }&#13;
    }&#13;
&#13;
    function createPreviewPrintableStructure() {&#13;
        const contentInformation = generatePreviewContentInformation();&#13;
        return createDeepNodeRepresentationOfContentInformation(contentInformation);&#13;
    }&#13;
&#13;
    function generatePreviewContentInformation() {&#13;
        return [&#13;
           generatePreviewPageForContentInformation("0", "Page1", null),&#13;
           generatePreviewChapterForContentInformation("1", "Unit1", null),&#13;
           generatePreviewPageForContentInformation("2", "Page2", "1"),&#13;
           generatePreviewChapterForContentInformation("3", "Chapter1", "1"),&#13;
           generatePreviewPageForContentInformation("4", "Page3", "3"),&#13;
           generatePreviewPageForContentInformation("5", "Page4", "3"),&#13;
           generatePreviewChapterForContentInformation("6", "Chapter2", "1"),&#13;
           generatePreviewPageForContentInformation("7", "Page5", "6"),&#13;
           generatePreviewPageForContentInformation("8", "Page6", "1"),&#13;
           generatePreviewPageForContentInformation("9", "Page7", null),&#13;
           generatePreviewPageForContentInformation("10", "Page8", null),&#13;
           generatePreviewPageForContentInformation("11", "Page9", null),&#13;
           generatePreviewPageForContentInformation("12", "Page10", null),&#13;
           generatePreviewPageForContentInformation("13", "Page11", null),&#13;
       ];&#13;
    }&#13;
&#13;
    function generatePreviewChapterForContentInformation(id, name, parentId) {&#13;
        return generatePreviewObjectForContentInformation(&#13;
            id, name, parentId, "chapter");&#13;
    }&#13;
&#13;
    function generatePreviewPageForContentInformation(id, name, parentId) {&#13;
        return generatePreviewObjectForContentInformation(&#13;
            id, name, parentId, "page");&#13;
    }&#13;
&#13;
    function generatePreviewObjectForContentInformation(id, name, parentId, type) {&#13;
        return {&#13;
            "id": id,&#13;
            "parentId": parentId,&#13;
            "name": name,&#13;
            "isReportable": "true",&#13;
            "isVisited": "false",&#13;
            "type": type&#13;
        }&#13;
    }&#13;
&#13;
    function createEmptyNodeRepresentation() {&#13;
        return new NodeRepresentation(null, null, null, null, false, false);&#13;
    }&#13;
&#13;
    function createPrintableStructure() {&#13;
        const contentInformation = printableController.getContentInformation();&#13;
        return createDeepNodeRepresentationOfContentInformation(contentInformation);&#13;
    }&#13;
&#13;
    function createRunStructure() {&#13;
        const root = presentationController.getPresentation().getTableOfContents();&#13;
        return createDeepNodeRepresentationOfNode(root);&#13;
    }&#13;
&#13;
    function createViewForPrintable(configuration) {&#13;
        var $table = $('&lt;table&gt;&lt;/table&gt;');&#13;
        $table.addClass(CSS_CLASSES.PRINTABLE_HIER_REPORT_TABLE);&#13;
&#13;
        var $hier_report = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $hier_report.addClass(CSS_CLASSES.PRINTABLE_HIER_REPORT);&#13;
        $hier_report.append($table);&#13;
&#13;
        var $view = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $view.attr("id", configuration.ID);&#13;
        $view.addClass(CSS_CLASSES.PRINTABLE);&#13;
        $view.css("max-width", configuration.width + "px");&#13;
        $view.css("min-height", configuration.height + "px");&#13;
        $view.append($hier_report);&#13;
        return $view;&#13;
    }&#13;
&#13;
    function chosePrintableStateMode() {&#13;
        if (presenter.printableState) {&#13;
            presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_RESULTS;&#13;
        } else {&#13;
            presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
        }&#13;
    }&#13;
&#13;
    function isInPrintableShowResultsStateMode() {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.SHOW_RESULTS;&#13;
    }&#13;
&#13;
    function isInPrintableEmptyStateMode() {&#13;
        return presenter.printableStateMode === presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
    }&#13;
&#13;
    function findPrintableHierReport($view) {&#13;
        return $view.find(`.${CSS_CLASSES.PRINTABLE_HIER_REPORT}`);&#13;
    }&#13;
&#13;
    function isInPrintableStateMode() {&#13;
        return presenter.printableStateMode !== null;&#13;
    }&#13;
&#13;
    function cleanAfterPrintableState() {&#13;
        presenter.printableStateMode = null;&#13;
        presenter.printableLessonScore = null;&#13;
    }&#13;
&#13;
    function resetIndexes() {&#13;
        absoluteIndex = 0;&#13;
        relativeIndex = 0;&#13;
        chapterIndex = 0;&#13;
        pageIndex = 0;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>