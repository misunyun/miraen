<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Page_Progress_Panel" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Show Progress Bar" name="Show_Progress_Bar" nameLabel="Page_Progress_Panel_property_show_progress_bar" type="boolean"/>
		<property displayName="Progress Bar text" name="Progress_Bar_text" nameLabel="Page_Progress_Panel_property_progress_bar_text" type="string"/>
		<property displayName="Show Correct Answers" name="Show_Correct_Answers" nameLabel="Page_Progress_Panel_property_show_correct_answer" type="boolean"/>
		<property displayName="Correct Answers text" name="Correct_Answers_text" nameLabel="Page_Progress_Panel_property_correct_answers_text" type="string"/>
		<property displayName="Show All Answers" name="Show_All_Answers" nameLabel="Page_Progress_Panel_property_show_all_answers" type="boolean"/>
		<property displayName="All Answers text" name="All_Answers_text" nameLabel="Page_Progress_Panel_property_all_answers_text" type="string"/>
		<property displayName="Show Mistakes" name="Show_Mistakes" nameLabel="Page_Progress_Panel_property_show_mistakes" type="boolean"/>
		<property displayName="Mistakes text" name="Mistakes_text" nameLabel="Page_Progress_Panel_property_mistakes_text" type="string"/>
		<property displayName="Show Checks" name="Show_Checks" nameLabel="Page_Progress_Panel_property_show_checks" type="boolean"/>
		<property displayName="Checks text" name="Checks_text" nameLabel="Page_Progress_Panel_property_checks_text" type="string"/>
		<property displayName="Show Errors" name="Show_Errors" nameLabel="Page_Progress_Panel_property_show_errors" type="boolean"/>
		<property displayName="Errors text" name="Errors_text" nameLabel="Page_Progress_Panel_property_errors_text" type="string"/>
	</model>
<css>.page-progress-panel-container .progress-bar-container.hidden, .page-progress-panel-container .progress-box.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.page-progress-panel-container .progress-bar-container {&#13;
    width: 200px;&#13;
    height: 50px;&#13;
    position: relative;&#13;
    border-radius: 5px;&#13;
    border: 2px solid #02789F;&#13;
    padding: 2px;&#13;
    display: inline-block;&#13;
    float: left;&#13;
}&#13;
&#13;
.page-progress-panel-container .progress-bar-container .text{&#13;
    min-height: 30px;&#13;
    text-align: center;&#13;
    font-size: 12px;&#13;
}&#13;
&#13;
&#13;
.page-progress-panel-container .progress-bar {&#13;
    background-color: #3CC6CD;&#13;
    position: absolute;&#13;
    border-radius: 5px;&#13;
    height: 50px;&#13;
}&#13;
&#13;
.page-progress-panel-container .progress-text {&#13;
    width: 100%;&#13;
    text-align: center;&#13;
    font-size: 12px;&#13;
    position: inherit;&#13;
}&#13;
&#13;
.page-progress-panel-container .text {&#13;
    width: 100%;&#13;
    text-align: center;&#13;
    font-size: 12px;&#13;
    position:inherit;&#13;
}&#13;
&#13;
.page-progress-panel-container .progress-box .text {&#13;
    min-height: 35px;&#13;
}&#13;
&#13;
.page-progress-panel-container .progress-box {&#13;
    line-height: 14px;&#13;
    display: inline-block;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
    padding: 3px;&#13;
    border: 1px solid #02789F;&#13;
    margin-left: 5px;&#13;
    text-align: center;&#13;
    border-radius: 5px;&#13;
    font-size: 10px;&#13;
    float: left;&#13;
}&#13;
</css><view>&lt;div class="page-progress-panel-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar" style="width: 0%;"&gt;&lt;/div&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;0%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="page-progress-panel-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar" style="width: 50%;"&gt;&lt;/div&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;50%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonPage_Progress_Panel_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
	presenter.configuration = {&#13;
		showProgressBar: false,&#13;
		showChecks: false,&#13;
		showErrors: false,&#13;
		showMistakes: false,&#13;
		showMaxScore: false,&#13;
		showCorrectAnswers: false,&#13;
		isVisible: true&#13;
	};&#13;
&#13;
	presenter.state = {&#13;
		isVisible: true&#13;
	};&#13;
&#13;
	presenter.lastScores = {&#13;
		progress: 0,&#13;
        sumOfMaxScore: 0,&#13;
		sumOfMistakes: 0,&#13;
		sumOfErrors: 0,&#13;
		sumOfChecks: 0,&#13;
		sumOfScores: 0&#13;
	};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            showProgressBar: ModelValidationUtils.validateBoolean(model['Show_Progress_Bar']),&#13;
			progressBarText: model['Progress_Bar_text'],&#13;
            showChecks: ModelValidationUtils.validateBoolean(model['Show_Checks']),&#13;
			checksText: model['Checks_text'],&#13;
            showErrors: ModelValidationUtils.validateBoolean(model['Show_Errors']),&#13;
			errorsText: model['Errors_text'],&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model['Show_Mistakes']),&#13;
			mistakesText: model['Mistakes_text'],&#13;
            showMaxScore: ModelValidationUtils.validateBoolean(model['Show_All_Answers']),&#13;
			maxScoreText: model['All_Answers_text'],&#13;
            showCorrectAnswers: ModelValidationUtils.validateBoolean(model['Show_Correct_Answers']),&#13;
			correctAnswersText: model['Correct_Answers_text'],&#13;
			isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"])&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
		presenter.view = view;&#13;
        presenter.$progressBarContainer = presenter.$view.find('.progress-bar-container');&#13;
        presenter.$progressBar = presenter.$view.find('.progress-bar');&#13;
        presenter.$progressText = presenter.$view.find('.progress-text');&#13;
        presenter.$checks = presenter.$view.find('.checks');&#13;
        presenter.$errors = presenter.$view.find('.errors');&#13;
        presenter.$mistakes = presenter.$view.find('.mistakes');&#13;
        presenter.$maxScore = presenter.$view.find('.max-score');&#13;
        presenter.$correctAnswers = presenter.$view.find('.correct-answers');&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
		presenter.displayText();&#13;
		presenter.state.isVisible = presenter.configuration.isVisible;&#13;
&#13;
        removeHidden(presenter.configuration.showProgressBar, presenter.$progressBarContainer);&#13;
        removeHidden(presenter.configuration.showChecks, presenter.$checks);&#13;
        removeHidden(presenter.configuration.showErrors, presenter.$errors);&#13;
        removeHidden(presenter.configuration.showMistakes, presenter.$mistakes);&#13;
        removeHidden(presenter.configuration.showMaxScore, presenter.$maxScore);&#13;
        removeHidden(presenter.configuration.showCorrectAnswers, presenter.$correctAnswers);&#13;
		if (!isPreview) {&#13;
		    presenter.updateVisibility();&#13;
			var currentPageIndex = presenter.playerController.getCurrentPageIndex();&#13;
			var pageId = presenter.playerController.getPresentation().getPage(currentPageIndex).getId();&#13;
			var score = presenter.playerController.getScore().getPageScoreById(pageId);&#13;
			presenter.lastScores.sumOfMaxScore = score.maxScore;&#13;
			presenter.displayScores(presenter.lastScores);&#13;
			presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(event) {&#13;
				if (event.target === this) {&#13;
					presenter.destroy();&#13;
				}&#13;
			});&#13;
			presenter.view.addEventListener('ShowAnswers', this);&#13;
		}&#13;
&#13;
    };&#13;
&#13;
	presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
			presenter.showAnswers();&#13;
		}&#13;
    };&#13;
&#13;
	presenter.showAnswers = function() {&#13;
		var currentPageIndex = presenter.playerController.getCurrentPageIndex();&#13;
		var pageId = presenter.playerController.getPresentation().getPage(currentPageIndex).getId();&#13;
		var score = presenter.playerController.getScore().getPageScoreById(pageId);&#13;
		presenter.lastScores.sumOfMistakes = score.mistakeCount;&#13;
		presenter.lastScores.sumOfChecks = score.checkCount;&#13;
		presenter.displayScores(presenter.lastScores);&#13;
	};&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    function removeHidden(shouldRemove, $element) {&#13;
        if (shouldRemove) {&#13;
            $element.removeClass('hidden');&#13;
        } else {&#13;
            $element.addClass('hidden');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    function getPageScore(){&#13;
        var currentPageIndex = presenter.playerController.getCurrentPageIndex();&#13;
		var page = presenter.playerController.getPresentation().getPage(currentPageIndex);&#13;
        var pageId = page.getId();&#13;
        var score = presenter.playerController.getScore().getPageScoreById(pageId);&#13;
&#13;
		if (!page.isReportable()) {&#13;
			var percentageScore = 0;&#13;
		} else if (score.maxScore &gt; 0) {&#13;
            var percentageScore = (score.score*100.0) / score.maxScore;&#13;
        }&#13;
        return {&#13;
            progress: parseInt(percentageScore, 10),&#13;
            sumOfMaxScore: score.maxScore,&#13;
            sumOfMistakes: score.mistakeCount,&#13;
            sumOfErrors: score.errorCount,&#13;
            sumOfChecks: score.checkCount,&#13;
            sumOfScores: score.score&#13;
        };&#13;
    }&#13;
&#13;
	presenter.displayText = function() {&#13;
		if (presenter.configuration.showProgressBar) {&#13;
            presenter.$progressBarContainer.find('.text').html(presenter.configuration.progressBarText);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            presenter.$checks.find('.text').html(presenter.configuration.checksText);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            presenter.$mistakes.find('.text').html(presenter.configuration.mistakesText);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            presenter.$errors.find('.text').html(presenter.configuration.errorsText);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScore) {&#13;
            presenter.$maxScore.find('.text').html(presenter.configuration.maxScoreText);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showCorrectAnswers) {&#13;
            presenter.$correctAnswers.find('.text').html(presenter.configuration.correctAnswersText);&#13;
        }&#13;
	};&#13;
&#13;
	presenter.displayScores = function (pageScore) {&#13;
		if (presenter.configuration.showProgressBar) {&#13;
            presenter.$progressBar.css('width', pageScore.progress + '%');&#13;
            presenter.$progressText.html(pageScore.progress + '%');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            presenter.$checks.find('.value').html(pageScore.sumOfChecks);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            presenter.$mistakes.find('.value').html(pageScore.sumOfMistakes);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            presenter.$errors.find('.value').html(pageScore.sumOfErrors);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScore) {&#13;
            presenter.$maxScore.find('.value').html(pageScore.sumOfMaxScore);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showCorrectAnswers) {&#13;
            presenter.$correctAnswers.find('.value').html(pageScore.sumOfScores);&#13;
        }&#13;
	}&#13;
    presenter.setShowErrorsMode = function(){&#13;
        presenter.lastScores = getPageScore();&#13;
		presenter.displayScores(presenter.lastScores);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.updateVisibility = function() {&#13;
        (presenter.state.isVisible) ? presenter.show() : presenter.hide();&#13;
    };&#13;
	&#13;
    presenter.updateMistakes = function() {&#13;
	presenter.lastScores.sumOfMistakes = getPageScore().sumOfMistakes;&#13;
	if (presenter.configuration.showMistakes) {&#13;
		presenter.$mistakes.find('.value').html(presenter.lastScores.sumOfMistakes);&#13;
	}&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show' : presenter.show,&#13;
            'hide' : presenter.hide,&#13;
	    'updateMistakes' : presenter.updateMistakes,&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
		var currentPageIndex = presenter.playerController.getCurrentPageIndex();&#13;
        var pageId = presenter.playerController.getPresentation().getPage(currentPageIndex).getId();&#13;
        var score = presenter.playerController.getScore().getPageScoreById(pageId);&#13;
		presenter.lastScores = {&#13;
			progress: 0,&#13;
            sumOfMaxScore: score.maxScore,&#13;
            sumOfMistakes: score.mistakeCount,&#13;
            sumOfErrors: 0,&#13;
            sumOfChecks: score.checkCount,&#13;
            sumOfScores: 0&#13;
		};&#13;
		presenter.displayScores(presenter.lastScores);&#13;
		presenter.state.isVisible = presenter.configuration.isVisible;&#13;
		presenter.updateVisibility();&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
		return JSON.stringify({&#13;
            progress: presenter.lastScores.progress,&#13;
            sumOfMaxScore: presenter.lastScores.sumOfMaxScore,&#13;
            sumOfMistakes: presenter.lastScores.sumOfMistakes,&#13;
            sumOfErrors: presenter.lastScores.sumOfErrors,&#13;
            sumOfChecks: presenter.lastScores.sumOfChecks,&#13;
            sumOfScores: presenter.lastScores.sumOfScores,&#13;
			isVisible: presenter.state.isVisible&#13;
        });&#13;
    };&#13;
    presenter.setState = function(state){&#13;
		var parsedState = JSON.parse(state);&#13;
		presenter.lastScores = {&#13;
			progress: parsedState.progress,&#13;
			sumOfMaxScore: parsedState.sumOfMaxScore,&#13;
			sumOfMistakes: parsedState.sumOfMistakes,&#13;
			sumOfErrors: parsedState.sumOfErrors,&#13;
			sumOfChecks: parsedState.sumOfChecks,&#13;
			sumOfScores: parsedState.sumOfScores&#13;
		};&#13;
		presenter.state.isVisible = parsedState.isVisible;&#13;
		presenter.updateVisibility();&#13;
		presenter.displayScores(presenter.lastScores);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>