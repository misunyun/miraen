<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MenuPanel" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Menu Items" isDefault="true" name="MenuItems" nameLabel="MenuPanel_property_menu_items" type="list">
            <property displayName="Id" name="id" nameLabel="MenuPanel_property_id" type="string"/>
            <property displayName="Title" name="title" nameLabel="MenuPanel_property_title" type="string"/>
            <property displayName="Parent Id" name="parentId" nameLabel="MenuPanel_property_parent_id" type="string"/>

            <property displayName="Image" name="image" nameLabel="MenuPanel_property_image" type="image"/>

            <property displayName="Is Expanded" name="isExpanded" nameLabel="MenuPanel_property_is_expanded" type="boolean"/>
            <property displayName="Is Selected" name="isSelected" nameLabel="MenuPanel_property_is_selected" type="boolean"/>
            <property displayName="Is Disabled" name="isDisabled" nameLabel="MenuPanel_property_is_disabled" type="boolean"/>
        </property>

        <property name="HorizontalAlignment" nameLabel="MenuPanel_property_horizontal_alignment" type="{default,left,center,right}"/>
        <property name="VerticalAlignment" nameLabel="MenuPanel_property_vertical_alignment" type="{default,top,center,bottom}"/>
        <property displayName="Auto Expand" name="autoExpand" nameLabel="MenuPanel_property_auto_expand" type="boolean"/>
        <property name="Disable" nameLabel="MenuPanel_property_disable" type="boolean"/>
    </model>
<css>.menu-panel-wrapper{&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.menu-panel-item{&#13;
    display: inline-block;&#13;
    width: 100%;&#13;
    cursor: pointer;&#13;
    border: 1px solid #aaaaaa;&#13;
}&#13;
.menu-panel-wrapper .children{&#13;
    position: absolute;&#13;
    left: 100%;&#13;
}&#13;
.menu-panel-wrapper .horizontal-right .children{&#13;
    position: absolute;&#13;
    right: 100%;&#13;
}&#13;
.menu-panel-wrapper .disabled{&#13;
    cursor: default;&#13;
    border: 1px solid #dddddd;&#13;
}&#13;
.menu-panel-errors{&#13;
    position: absolute;&#13;
}&#13;
.menu-panel-errors p.mpError{&#13;
    color: red;&#13;
    font-size: 12px;&#13;
}&#13;
</css><view>&lt;div class="menu-panel-wrapper"&gt;&lt;/div&gt;&#13;
&lt;div class="menu-panel-errors"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="menu-panel-wrapper"&gt;&lt;/div&gt;&#13;
&lt;div class="menu-panel-errors"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonMenuPanel_create(){&#13;
    /* ChangeLog&#13;
     - added &lt;img&gt; to appended div in drawElements&#13;
     - changed select to selectCommand in presenter.executeCommand, same for deselect&#13;
     */&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.currentIndex = controller.getCurrentPageIndex();&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
        presenter.addonID = model.ID;&#13;
        presenter.isError = false;&#13;
&#13;
        presenter.HorizontalAlignment = presenter.HorizontalAlignmentByDefault = model.HorizontalAlignment;&#13;
        presenter.VerticalAlignment = presenter.VerticalAlignmentByDefault = model.VerticalAlignment;&#13;
        presenter.setAlignment(presenter.HorizontalAlignment, presenter.VerticalAlignment);&#13;
&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = presenter.isVisible;&#13;
        presenter.originalDisplay = presenter.$view.css('display') ? presenter.$view.css('display') : 'block';&#13;
&#13;
        presenter.isDisabled = ModelValidationUtils.validateBoolean(model["Disable"]);&#13;
        presenter.isDisabledByDefault = presenter.isDisabled;&#13;
        presenter.setAbilityAll(!presenter.isDisabledByDefault);&#13;
&#13;
        presenter.menuItemsByDefault = presenter.model.MenuItems;&#13;
        presenter.menuItems = presenter.buildElementsArray(presenter.model.MenuItems);&#13;
        presenter.drawElements();&#13;
&#13;
        presenter.autoExpand = ModelValidationUtils.validateBoolean(model["autoExpand"]);&#13;
&#13;
        presenter.$view.on('click', function(e){e.stopPropagation();});&#13;
    }&#13;
&#13;
    presenter.buildElementsArray = function(itemsArray){&#13;
        if(!presenter.isError){&#13;
            var nestedItems = new Array;&#13;
&#13;
            $(itemsArray).each(function(i, menuItem){&#13;
                if(menuItem.id == ''){&#13;
                    presenter.errorHandler('Id in item '+(i+1)+' is empty!');&#13;
                    return false;&#13;
                }&#13;
&#13;
                var isSelected = ModelValidationUtils.validateBoolean(menuItem.isSelected);&#13;
                var isExpanded = ModelValidationUtils.validateBoolean(menuItem.isExpanded);&#13;
                var isDisabled = ModelValidationUtils.validateBoolean(menuItem.isDisabled);&#13;
&#13;
                nestedItems[i] = {};&#13;
                nestedItems[i].id = menuItem.id;&#13;
                nestedItems[i].parentId = menuItem.parentId;&#13;
                nestedItems[i].title = menuItem.title;&#13;
                nestedItems[i].image = menuItem.image;&#13;
                nestedItems[i].isSelected = isSelected;&#13;
                nestedItems[i].isExpanded = isExpanded;&#13;
                nestedItems[i].isDisabled = isDisabled;&#13;
                nestedItems[i].children = [];&#13;
&#13;
                if(menuItem.parentId != ''){&#13;
                    $(nestedItems).each(function(i, menuItem2){&#13;
                        if(menuItem2['id'] == menuItem['parentId']){&#13;
                            nestedItems[i].children.push(menuItem.id);&#13;
                        }&#13;
                    });&#13;
                }&#13;
            });&#13;
&#13;
            return nestedItems;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.drawElements = function(){&#13;
        if(!presenter.isError){&#13;
            var wrapper = presenter.$view.find('.menu-panel-wrapper')[0];&#13;
            $(wrapper).html('')&#13;
&#13;
            $(presenter.menuItems).each(function(i, menuItem){&#13;
                var elementClassPrefix = 'item';&#13;
&#13;
                var parent = presenter.menuItems[i].parentId == '' ? wrapper : presenter.$view.find('.'+elementClassPrefix+presenter.menuItems[i].parentId+'.children')[0];&#13;
                var content = presenter.menuItems[i].title;&#13;
&#13;
                var selected = presenter.menuItems[i].isSelected ? ' selected' : '';&#13;
                var disabled = presenter.menuItems[i].isDisabled ? ' disabled' : '';&#13;
&#13;
                var div = '&lt;div class="menu-panel-item '+elementClassPrefix+menuItem.id+selected+disabled+'"&gt;';&#13;
                if(presenter.menuItems[i].image != ''){&#13;
                    div += '&lt;img src="'+presenter.menuItems[i].image+'" alt="" /&gt;';&#13;
                }&#13;
                div += content+'&lt;/div&gt;';&#13;
&#13;
                $(parent).append(div);&#13;
&#13;
                if(presenter.menuItems[i].children != ''){&#13;
                    var visibility = presenter.menuItems[i].isExpanded ? 'visible' : 'hidden';&#13;
                    var display = presenter.menuItems[i].isExpanded ? 'block' : 'none';&#13;
                    var expanded = presenter.menuItems[i].isExpanded ? 'expanded' : 'contracted';&#13;
&#13;
                    $(parent).append('&lt;div class="'+elementClassPrefix+menuItem.id+' children '+expanded+'" style="visibility: '+visibility+'; display:'+display+';"&gt;&lt;/div&gt;');&#13;
                }&#13;
&#13;
                var clickableElement = presenter.$view.find('.'+elementClassPrefix+menuItem.id)[0];&#13;
                var clickData = {item: i};&#13;
                $(clickableElement).on('click', clickData, presenter.clickHandler);&#13;
&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    presenter.clickHandler = function(e){&#13;
        if(!presenter.isDisabled &amp;&amp; !presenter.menuItems[e.data.item].isDisabled){&#13;
            var value;&#13;
&#13;
            if(presenter.menuItems[e.data.item].isSelected){&#13;
                presenter.menuItems[e.data.item].isSelected = false;&#13;
                $(presenter.$view.find('.item'+presenter.menuItems[e.data.item].id)[0]).removeClass("selected");&#13;
                value = 0;&#13;
            }else{&#13;
                presenter.menuItems[e.data.item].isSelected = true;&#13;
                $(presenter.$view.find('.item'+presenter.menuItems[e.data.item].id)[0]).addClass("selected");&#13;
                value = 1;&#13;
            }&#13;
&#13;
            presenter.sendEventData(presenter.menuItems[e.data.item].id,value);&#13;
&#13;
            //Auto Expand control&#13;
            if(presenter.autoExpand){&#13;
                var parentId = presenter.menuItems[e.data.item].parentId;&#13;
                var parent = getItemById(parentId);&#13;
                var siblings = [];&#13;
&#13;
                if(parentId != ''){&#13;
                    $(presenter.menuItems[parent].children).each(function(i,child){&#13;
                        if(child != presenter.menuItems[e.data.item].id){&#13;
                            siblings.push(child);&#13;
                        }&#13;
                    });&#13;
                }else{&#13;
                    $(presenter.menuItems).each(function(i,menuItem){&#13;
                        if(menuItem.parentId == '' &amp;&amp; menuItem.id != presenter.menuItems[e.data.item].id){&#13;
                            siblings.push(menuItem.id);&#13;
                        }&#13;
                    });&#13;
                }&#13;
&#13;
                if(presenter.menuItems[e.data.item].children.length != 0){&#13;
                    $(siblings).each(function(i,sibling){&#13;
                        //sprawdzić, czy sibling ma dzieci!&#13;
                        var item = getItemById(sibling);&#13;
                        if(presenter.menuItems[item].children.length != 0){&#13;
                            presenter.contract(sibling);&#13;
                            presenter.deselect(sibling);&#13;
                        }&#13;
                    });&#13;
                }&#13;
&#13;
                presenter.toggleExpand(presenter.menuItems[e.data.item].id);&#13;
            }&#13;
&#13;
        }&#13;
    }&#13;
&#13;
    presenter.errorHandler = function(msg){&#13;
        presenter.isError = true;&#13;
        presenter.$view.find('.menu-panel-errors').append('&lt;p class="mpError"&gt;'+msg+'&lt;/p&gt;');&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params){&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enableCommand,&#13;
            'disable': presenter.disableCommand,&#13;
            'select': presenter.selectCommand,&#13;
            'deselect': presenter.deselectCommand,&#13;
            'setAlignment': presenter.setAlignmentCommand,&#13;
            'expand': presenter.expandCommand,&#13;
            'contract': presenter.contractCommand,&#13;
            'toggleExpand': presenter.toggleExpandCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.createEventData = function(item,value) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item : item,&#13;
            value : value,&#13;
            score : ''&#13;
        };&#13;
    };&#13;
    presenter.sendEventData = function (item,value) {&#13;
        var eventData = presenter.createEventData(item,value);&#13;
        if (presenter.playerController !== null) {&#13;
            presenter.playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.select = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isSelected = true;&#13;
        $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).addClass("selected");&#13;
    }&#13;
    presenter.selectCommand = function(params){&#13;
        presenter.select(params[0]);&#13;
    }&#13;
    presenter.deselect = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isSelected = false;&#13;
        $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).removeClass("selected");&#13;
    }&#13;
    presenter.deselectCommand = function(params){&#13;
        presenter.deselect(params[0]);&#13;
    }&#13;
&#13;
    presenter.toggleExpand = function(item){&#13;
        var i = getItemById(item);&#13;
        presenter.menuItems[i].isExpanded ? presenter.contract(item) : presenter.expand(item);&#13;
    }&#13;
    presenter.toggleExpandCommand = function(params){&#13;
        presenter.toggleExpand(params[0]);&#13;
    }&#13;
&#13;
    presenter.expand = function(item){&#13;
        var i = getItemById(item);&#13;
        var itemClasss = '.item'+presenter.menuItems[i].id+'.children';&#13;
        presenter.menuItems[i].isExpanded = true;&#13;
        $(presenter.$view.find(itemClasss)[0]).addClass('expanded');&#13;
        $(presenter.$view.find(itemClasss)[0]).removeClass('contracted');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('visibility','visible');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('display','block');&#13;
        //show this item's parents if exists&#13;
        if(presenter.menuItems[i].parentId != ''){&#13;
            presenter.expand(presenter.menuItems[i].parentId);&#13;
        }&#13;
&#13;
    }&#13;
    presenter.expandCommand = function(params){&#13;
        presenter.expand(params[0]);&#13;
    }&#13;
    presenter.contract = function(item){&#13;
        var i = getItemById(item);&#13;
        var itemClasss = '.item'+presenter.menuItems[i].id+'.children';&#13;
        presenter.menuItems[i].isExpanded = false;&#13;
        $(presenter.$view.find(itemClasss)[0]).removeClass('expanded');&#13;
        $(presenter.$view.find(itemClasss)[0]).addClass('contracted');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('visibility','hidden');&#13;
        $(presenter.$view.find(itemClasss)[0]).css('display','none');&#13;
        //hide all children&#13;
        $(presenter.menuItems[i].children).each(function(i,child){&#13;
            presenter.contract(child);&#13;
&#13;
            if(presenter.autoExpand){&#13;
                var childItem = getItemById(child);&#13;
                if(presenter.menuItems[childItem].children.length != 0){&#13;
                    presenter.deselect(child);&#13;
                }&#13;
            }&#13;
        });&#13;
    }&#13;
    presenter.contractCommand = function(params){&#13;
        presenter.contract(params[0]);&#13;
    }&#13;
&#13;
    presenter.setAlignment = function(horizontal, vertical){&#13;
        presenter.HorizontalAlignment = horizontal;&#13;
        presenter.VerticalAlignment = vertical;&#13;
&#13;
        switch(horizontal){&#13;
            case "left": {&#13;
                presenter.$view.css({"left":"0","right":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-right horizontal-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-left');&#13;
                break;&#13;
            }&#13;
            case "right": {&#13;
                presenter.$view.css({"left":"auto","right":"0"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-left horizontal-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-right');&#13;
                break;&#13;
            }&#13;
            case "center": {&#13;
                var pageWidth = parseInt(presenter.$view.parent().css('width'),10);&#13;
                var leftPos = (pageWidth / 2) - (presenter.model.Width / 2);&#13;
                presenter.$view.css({"left":leftPos,"right":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('horizontal-right horizontal-left');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('horizontal-center');&#13;
                break;&#13;
            }&#13;
            //Na przyszłość&#13;
            //DODAĆ obsługę defaulta, żeby można było z komendy przywrócić&#13;
            //do tego trzeba będzie pewnie zapamiętać stan pozycji z edytora&#13;
        }&#13;
&#13;
        switch(vertical){&#13;
            case "top": {&#13;
                presenter.$view.css({"top":"0","bottom":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-bottom vertical-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-top');&#13;
                break;&#13;
            }&#13;
            case "bottom": {&#13;
                presenter.$view.css({"top":"auto","bottom":"0"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-top vertical-center');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-bottom');&#13;
                break;&#13;
            }&#13;
            case "center": {&#13;
                var pageHeight = parseInt(presenter.$view.parent().css('height'),10);&#13;
                var topPos = (pageHeight / 2) - (presenter.model.Height / 2);&#13;
                presenter.$view.css({"top":topPos,"bottom":"auto"});&#13;
                presenter.$view.find('.menu-panel-wrapper').removeClass('vertical-bottom vertical-top');&#13;
                presenter.$view.find('.menu-panel-wrapper').addClass('vertical-center');&#13;
                break;&#13;
            }&#13;
            //Na przyszłość&#13;
            //DODAĆ obsługę defaulta, żeby można było z komendy przywrócić&#13;
            //do tego trzeba będzie pewnie zapamiętać stan pozycji z edytora&#13;
        }&#13;
    }&#13;
    presenter.setAlignmentCommand = function (params) {&#13;
        presenter.setAlignment(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
    presenter.hide = function(){&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.$view.css("display", isVisible ? presenter.originalDisplay : "none");&#13;
    };&#13;
&#13;
    presenter.enable = function(item) {&#13;
        if(typeof item === 'undefined'){&#13;
            presenter.setAbilityAll(true);&#13;
        }else{&#13;
            var i = getItemById(item);&#13;
            presenter.menuItems[i].isDisabled = false;&#13;
            $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).removeClass("disabled");&#13;
        }&#13;
    };&#13;
    presenter.enableCommand = function(params) {&#13;
        presenter.enable(params[0]);&#13;
    };&#13;
    presenter.disable = function(item){&#13;
        if(typeof item === 'undefined'){&#13;
            presenter.setAbilityAll(false);&#13;
        }else{&#13;
            var i = getItemById(item);&#13;
            presenter.menuItems[i].isDisabled = true;&#13;
            $(presenter.$view.find('.item'+presenter.menuItems[i].id)[0]).addClass("disabled");&#13;
        }&#13;
    };&#13;
    presenter.disableCommand = function(params) {&#13;
        presenter.disable(params[0]);&#13;
    };&#13;
    presenter.setAbilityAll = function(ability) {&#13;
        presenter.isDisabled = !ability;&#13;
        var wrapper = presenter.$view.find('.menu-panel-wrapper')[0];&#13;
        if(ability){&#13;
            $(wrapper).removeClass("disabled");&#13;
        }else{&#13;
            $(wrapper).addClass("disabled");&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.setAbilityAll(!presenter.isDisabledByDefault);&#13;
        presenter.setAlignment(presenter.HorizontalAlignmentByDefault, presenter.VerticalAlignmentByDefault);&#13;
        presenter.menuItems = presenter.buildElementsArray(presenter.menuItemsByDefault);&#13;
        presenter.drawElements();&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.isVisible,&#13;
            isDisabled: presenter.isDisabled,&#13;
            HorizontalAlignment: presenter.HorizontalAlignment,&#13;
            VerticalAlignment: presenter.VerticalAlignment,&#13;
            menuItems: presenter.menuItems&#13;
        });&#13;
    };&#13;
    presenter.setState = function(stateString){&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        presenter.isVisible = state.isVisible;&#13;
        presenter.isDisabled = state.isDisabled;&#13;
        presenter.HorizontalAlignment = state.HorizontalAlignment;&#13;
        presenter.VerticalAlignment = state.VerticalAlignment;&#13;
        presenter.menuItems = state.menuItems;&#13;
&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        presenter.setAbilityAll(!presenter.isDisabled);&#13;
        presenter.setAlignment(presenter.HorizontalAlignment, presenter.VerticalAlignment);&#13;
        presenter.drawElements();&#13;
    };&#13;
&#13;
    function getItemById(id){&#13;
        var itemToReturn = false;&#13;
        $(presenter.menuItems).each(function(i, menuItem){&#13;
            if(menuItem.id === id){&#13;
                itemToReturn = i;&#13;
                return false;&#13;
            }&#13;
        });&#13;
        return itemToReturn;&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){ };&#13;
    presenter.setWorkMode = function(){ };&#13;
    presenter.showAnswers = function(){ };&#13;
    presenter.hideAnswers = function(){ };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>