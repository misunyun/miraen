<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Animated_Page_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Ranges" nameLabel="Animated_Page_Progress_property_ranges" type="list">
            <property name="Score" nameLabel="Animated_Page_Progress_property_score" type="string"/>
		    <property name="Image" nameLabel="Animated_Page_Progress_property_image" type="image"/>
		</property>
        <property name="Initial image" nameLabel="Animated_Page_Progress_property_initial_image" type="image"/>
        <property displayName="Work in Check Mode" name="Work in Check Mode" nameLabel="Animated_Page_Progress_property_work_in_check_mode" type="boolean"/>
	</model>
<css>.animated-page-progress-wrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.animated-page-progress-rate {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-size: 100% 100%;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
</css><view>&lt;div class="animated-page-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="animated-page-progress-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAnimated_Page_Progress_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.displayedImage = null;&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "All ranges must be in ascending order",&#13;
        'E_02': "Last range must equal 100",&#13;
        'E_03': "All ranges must be positive",&#13;
        'E_04': "First range must equal 0",&#13;
        'E_05': "All scores must be filled"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    presenter.sanitizeModel = function (model) {&#13;
        var rangeImage = [], rangeMaxScore = [], i;&#13;
&#13;
        for (i = 0; i &lt; model.Ranges.length; i++) {&#13;
            rangeImage[i] = model.Ranges[i].Image;&#13;
            rangeMaxScore[i] = parseFloat(model.Ranges[i].Score);&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; model.Ranges.length; i++) {&#13;
            if (!model.Ranges[i].Score) {&#13;
                return returnErrorObject('E_05');&#13;
            }&#13;
            if (rangeMaxScore[i] &gt; rangeMaxScore[i + 1]) {&#13;
                return returnErrorObject('E_01');&#13;
            }&#13;
            if (rangeMaxScore[i] &lt; 0) {&#13;
                return returnErrorObject('E_03');&#13;
            }&#13;
        }&#13;
&#13;
        if (rangeMaxScore[model.Ranges.length - 1] != 100) {&#13;
            return returnErrorObject('E_02');&#13;
        }&#13;
&#13;
        if (rangeMaxScore[0] != 0) {&#13;
            return returnErrorObject('E_04');&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            ranges: {&#13;
                images: rangeImage,&#13;
                maxScores: rangeMaxScore&#13;
            },&#13;
            length: model.Ranges.length,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            initialImage: model['Initial image'],&#13;
            workInCheckMode: ModelValidationUtils.validateBoolean(model['Work in Check Mode'])&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        var currentPageIndex = playerController.getCurrentPageIndex();&#13;
        presenter.pageID = playerController.getPresentation().getPage(currentPageIndex).getId();&#13;
        presenter.scoreService = playerController.getScore();&#13;
    };&#13;
&#13;
    presenter.cleanView = function () {&#13;
        presenter.$view.find('.animated-page-progress-rate').each(function () {&#13;
            $(this).css('display', 'none');&#13;
            $(this).attr('data-name', 'invisible');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setViewImage = function (rate) {&#13;
        var $rate;&#13;
&#13;
        if (rate == "initial") {&#13;
            $rate = presenter.$view.find('.rate-initial');&#13;
        } else {&#13;
            $rate = presenter.$view.find('.rate-' + (rate + 1));&#13;
        }&#13;
&#13;
        $rate.css('display', 'block');&#13;
        $rate.attr('data-name', 'visible');&#13;
&#13;
        presenter.displayedImage = rate;&#13;
    };&#13;
&#13;
    presenter.getRange = function (pageScore) {&#13;
        var score = pageScore.score,&#13;
            maxScore = pageScore.maxScore,&#13;
            percentageScore = (score / maxScore) * 100,&#13;
            maxScores = presenter.configuration.ranges.maxScores;&#13;
&#13;
        if (isNaN(percentageScore)) {&#13;
            percentageScore = 0;&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; maxScores.length; i++) {&#13;
            if (percentageScore == 0) {&#13;
                return 0;&#13;
            }&#13;
            if (percentageScore == 100 &amp;&amp; maxScores[i] == 100) {&#13;
                return i;&#13;
            }&#13;
            if (percentageScore &gt;= maxScores[i] &amp;&amp; percentageScore &lt; maxScores[i + 1]) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeRange = function () {&#13;
        var pageScore = presenter.scoreService.getPageScoreById(presenter.pageID),&#13;
            range = presenter.getRange(pageScore);&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(range);&#13;
    };&#13;
&#13;
    presenter.appendImages = function (length) {&#13;
        var $wrapper = presenter.$view.find('.animated-page-progress-wrapper'),&#13;
            images = presenter.configuration.ranges.images;&#13;
&#13;
        for (var i = 0; i &lt; length; i++) {&#13;
            var $rate = $(document.createElement('div'));&#13;
&#13;
            $rate.addClass('animated-page-progress-rate rate-' + (i + 1)).css('display', 'none');&#13;
&#13;
            if (images[i] != "") {&#13;
                $rate.css('background-image', 'url(' + images[i] + ')');&#13;
            }&#13;
&#13;
            $wrapper.append($rate);&#13;
        }&#13;
&#13;
        if (presenter.configuration.initialImage) {&#13;
            var $initialRate = $(document.createElement('div'));&#13;
&#13;
            $initialRate.addClass('animated-page-progress-rate rate-initial');&#13;
            $initialRate.css({&#13;
                'display': 'none',&#13;
                'background-image': 'url(' + presenter.configuration.initialImage + ')'&#13;
            });&#13;
&#13;
            $wrapper.append($initialRate);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.eventListener = function () {&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('ValueChanged', this, true);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
        eventBus.addEventListener('PageLoaded', this);&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.configuration = presenter.sanitizeModel(model);&#13;
&#13;
        if (presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.appendImages(presenter.configuration.ranges.images.length);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.eventListener();&#13;
        }&#13;
&#13;
        presenter.setViewImage(presenter.configuration.initialImage ? "initial" : 0);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        switch (eventName) {&#13;
            case "ValueChanged":&#13;
                if (!presenter.isShowAnswersActive &amp;&amp; !presenter.configuration.workInCheckMode ||&#13;
                    !presenter.isShowAnswersActive &amp;&amp; presenter.configuration.workInCheckMode &amp;&amp; eventData.value === "resetClicked") {&#13;
                    presenter.changeRange();&#13;
                }&#13;
                break;&#13;
&#13;
            case "ShowAnswers":&#13;
                presenter.showAnswers();&#13;
                break;&#13;
&#13;
            case "HideAnswers":&#13;
                presenter.hideAnswers();&#13;
                break;&#13;
&#13;
            case "PageLoaded":&#13;
                presenter.changeRange();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getImageId = function () {&#13;
        return presenter.$view.find('[data-name="visible"]').attr('id');&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.isCommonsPage = function() {&#13;
        return presenter.pageID != presenter.$view.parent().attr("id");&#13;
    };&#13;
&#13;
    presenter.getCurrentPageIndex = function() {&#13;
        return playerController.getCurrentPageIndex();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        if (presenter.configuration.isError) {&#13;
            return "";&#13;
        }&#13;
&#13;
        var currentPageIndex = presenter.getCurrentPageIndex();&#13;
&#13;
        if(presenter.isCommonsPage()) {&#13;
            if (typeof presenter.states == "undefined") {&#13;
                presenter.states = {};&#13;
                presenter.pageState = {};&#13;
            }&#13;
&#13;
            presenter.pageState = {&#13;
                displayedImage: presenter.displayedImage,&#13;
                isVisible: presenter.configuration.isVisible&#13;
            };&#13;
&#13;
            presenter.states[currentPageIndex] = presenter.pageState;&#13;
&#13;
            return JSON.stringify(presenter.states);&#13;
        } else {&#13;
            return JSON.stringify({&#13;
                pageIndex: currentPageIndex,&#13;
                displayedImage: presenter.displayedImage,&#13;
                isVisible: presenter.configuration.isVisible&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        var currentPageIndex = presenter.getCurrentPageIndex(),&#13;
            displayedImage,&#13;
            parsedState;&#13;
&#13;
        presenter.states = JSON.parse(state);&#13;
&#13;
        if(presenter.isCommonsPage()) {&#13;
            parsedState = presenter.states[currentPageIndex];&#13;
        } else {&#13;
            parsedState = presenter.states;&#13;
        }&#13;
&#13;
        if (typeof parsedState == "undefined") {&#13;
            parsedState = '';&#13;
            displayedImage = presenter.configuration.initialImage ? "initial" : 0;&#13;
        } else {&#13;
            displayedImage = parsedState.displayedImage;&#13;
        }&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(displayedImage);&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        if(presenter.configuration.workInCheckMode){&#13;
            presenter.changeRange();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.cleanView();&#13;
        presenter.setViewImage(presenter.configuration.initialImage ? "initial" : 0);&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>