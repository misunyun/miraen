<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ProgrammingCommandPrompt" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="sceneID" nameLabel="ProgrammingCommandPrompt_property_scene_id" type="string"/>
		<property displayName="Hide Run" name="hideRun" nameLabel="ProgrammingCommandPrompt_property_hide_run" type="boolean"/>
	</model>
<css>.CommandPrompt-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
&#13;
}&#13;
&#13;
.CommandPrompt-wrapper :first-child {&#13;
  opacity: .99;&#13;
}&#13;
&#13;
.CommandPrompt-wrapper.editor {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.CommandPrompt-wrapper button {&#13;
    margin-top: 10px;&#13;
}&#13;
</css><view>&lt;div class="CommandPrompt-wrapper"&gt;&#13;
  &lt;div class="editor"&gt;&lt;/div&gt;&#13;
  &lt;button class="run"&gt;Run&lt;/button&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="CommandPrompt-wrapper"&gt;&#13;
  &lt;div class="editor"&gt;&lt;/div&gt;&#13;
  &lt;button class="run"&gt;Run&lt;/button&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonProgrammingCommandPrompt_create () {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        TTC01: "You need to fill Scene Module ID.",&#13;
    };&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.runLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this, true);&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.configuration.sceneModule = null;&#13;
        presenter.configuration = null;&#13;
        presenter.editor.destroy();&#13;
        presenter.editor.container.remove();&#13;
        presenter.editor = null;&#13;
    };&#13;
&#13;
    presenter.runLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.view = view;&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        var editor = presenter.$view.find(".editor");&#13;
        editor.css({&#13;
            width: presenter.$view.width(),&#13;
            height: presenter.$view.height()&#13;
        });&#13;
        presenter.editor = ace.edit(editor[0]);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
        presenter.setRunButton();&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.connectHandlers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
    };&#13;
    &#13;
    presenter.connectHandlers = function () {&#13;
        presenter.configuration.sceneModule = presenter.playerController.getModule(presenter.configuration.sceneID);&#13;
        presenter.$view.find(".run").click(function () {&#13;
            if (presenter.configuration.sceneModule !== null) {&#13;
                var code = presenter.getWorkspaceCode();&#13;
                presenter.configuration.sceneModule.executeCode(code);&#13;
            }&#13;
        });        &#13;
    };&#13;
&#13;
    presenter.setCode = function Programming_Command_Prompt_set_code (code) {&#13;
        presenter.editor.setValue(code, code.length+1);&#13;
    };&#13;
&#13;
    presenter.setRunButton = function () {&#13;
        if (presenter.configuration.hideRun) {&#13;
            presenter.$view.find(".run").css({&#13;
                "display": "none"&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'getWorkspaceCode' : presenter.getWorkspaceCode,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getWorkspaceCode = function () {&#13;
        return presenter.editor.getValue();&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var sceneID = model["sceneID"].trim();&#13;
        if (sceneID == "") {&#13;
            return {&#13;
                isValid: false,&#13;
                errorCode: "TTC01"&#13;
            };&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            sceneID: sceneID,&#13;
            sceneModule: null,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            defaultVisibility: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            hideRun: ModelValidationUtils.validateBoolean(model["hideRun"]),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName == "PageLoaded") {&#13;
            if (presenter.configuration.sceneModule === null || presenter.configuration.sceneModule === undefined) {&#13;
                presenter.configuration.sceneModule = presenter.playerController.getModule(presenter.configuration.sceneID);&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.getState = function Programming_Command_Prompt_get_state () {&#13;
        return JSON.stringify({&#13;
            code: presenter.getWorkspaceCode(),&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function Programming_Command_Prompt_set_state (state) {&#13;
        var object = JSON.parse(state);&#13;
        presenter.setCode(object.code);&#13;
        presenter.setVisibility(object.isVisible);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setCode("");&#13;
        presenter.setVisibility(presenter.configuration.defaultVisibility);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>