<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Lesson_Progress" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Show Progress Bar" name="Show_Progress_Bar" nameLabel="Lesson_Progress_property_show_progress_bar" type="boolean"/>
        <property displayName="Show Checks" name="Show_Checks" nameLabel="Lesson_Progress_property_show_checks" type="boolean"/>
        <property displayName="Show Correct Answers" name="Show_Correct_Answers" nameLabel="Lesson_Progress_property_show_correct_answers" type="boolean"/>
        <property displayName="Show Errors" name="Show_Errors" nameLabel="Lesson_Progress_property_show_errors" type="boolean"/>
        <property displayName="Show Mistakes" name="Show_Mistakes" nameLabel="Lesson_Progress_property_show_mistakes" type="boolean"/>
        <property displayName="Show All Answers" name="Show_All_Answers" nameLabel="Lesson_Progress_property_show_all_answers" type="boolean"/>
        <property displayName="Calculate score on page change" name="Calculate_Score_On_Page_Change" nameLabel="Lesson_Progress_property_calculate_score_on_page_change" type="boolean"/>
	</model>
<css>.lesson-progress-container .progress-bar-container.hidden, .lesson-progress-container .progress-box.hidden {&#13;
    display: none;&#13;
}&#13;
&#13;
.lesson-progress-container {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
&#13;
}&#13;
&#13;
.lesson-progress-container .progress-bar-container {&#13;
    width: 200px;&#13;
    height: 50px;&#13;
    position: relative;&#13;
    border-radius: 5px;&#13;
    border: 2px solid #02789F;&#13;
    padding: 2px;&#13;
    display: inline-block;&#13;
    float: left;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-bar {&#13;
    background-color: #3CC6CD;&#13;
    position: absolute;&#13;
    height: 50px;&#13;
    border-radius: 5px;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-text {&#13;
    line-height: 50px;&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-box .text {&#13;
    min-height: 35px;&#13;
}&#13;
&#13;
.lesson-progress-container .progress-box {&#13;
    line-height: 14px;&#13;
    display: inline-block;&#13;
    width: 50px;&#13;
    height: 50px;&#13;
    padding: 3px;&#13;
    border: 1px solid #02789F;&#13;
    margin-left: 5px;&#13;
    text-align: center;&#13;
    border-radius: 5px;&#13;
    font-size: 10px;&#13;
    float: left;&#13;
}&#13;
</css><view>&lt;div class="lesson-progress-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;0%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;Correct&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;Max Score&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;Mistakes&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;Checks&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;Errors&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="lesson-progress-container"&gt;&#13;
    &lt;div class="progress-bar-container hidden"&gt;&#13;
        &lt;div class="progress-bar" style="width: 50%;"&gt;&lt;/div&gt;&#13;
        &lt;div class="progress-text"&gt;50%&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box correct-answers hidden"&gt;&#13;
        &lt;div class="text"&gt;Correct&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box max-score hidden"&gt;&#13;
        &lt;div class="text"&gt;Max Score&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box mistakes hidden"&gt;&#13;
        &lt;div class="text"&gt;Mistakes&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box checks hidden"&gt;&#13;
        &lt;div class="text"&gt;Checks&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="progress-box errors hidden"&gt;&#13;
        &lt;div class="text"&gt;Errors&lt;/div&gt;&#13;
        &lt;div class="value"&gt;0&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonLesson_Progress_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.eventBus.addEventListener('ShowErrors', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, _) {&#13;
        if (eventName == 'ShowErrors') {&#13;
            presenter.setShowErrorsMode();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        runLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        return {&#13;
            showProgressBar: ModelValidationUtils.validateBoolean(model['Show_Progress_Bar']),&#13;
            showChecks: ModelValidationUtils.validateBoolean(model['Show_Checks']),&#13;
            showErrors: ModelValidationUtils.validateBoolean(model['Show_Errors']),&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model['Show_Mistakes']),&#13;
            showMaxScore: ModelValidationUtils.validateBoolean(model['Show_All_Answers']),&#13;
            showCorrectAnswers: ModelValidationUtils.validateBoolean(model['Show_Correct_Answers']),&#13;
            calculateScoreOnPageChange: ModelValidationUtils.validateBoolean(model['Calculate_Score_On_Page_Change'])&#13;
        }&#13;
    };&#13;
&#13;
    function runLogic(view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$progressBarContainer = presenter.$view.find('.progress-bar-container');&#13;
        presenter.$progressBar = presenter.$view.find('.progress-bar');&#13;
        presenter.$progressText = presenter.$view.find('.progress-text');&#13;
        presenter.$checks = presenter.$view.find('.checks');&#13;
        presenter.$errors = presenter.$view.find('.errors');&#13;
        presenter.$mistakes = presenter.$view.find('.mistakes');&#13;
        presenter.$maxScore = presenter.$view.find('.max-score');&#13;
        presenter.$correctAnswers = presenter.$view.find('.correct-answers');&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        removeHidden(presenter.configuration.showProgressBar, presenter.$progressBarContainer);&#13;
        removeHidden(presenter.configuration.showChecks, presenter.$checks);&#13;
        removeHidden(presenter.configuration.showErrors, presenter.$errors);&#13;
        removeHidden(presenter.configuration.showMistakes, presenter.$mistakes);&#13;
        removeHidden(presenter.configuration.showMaxScore, presenter.$maxScore);&#13;
        removeHidden(presenter.configuration.showCorrectAnswers, presenter.$correctAnswers);&#13;
&#13;
        if (presenter.configuration.calculateScoreOnPageChange &amp;&amp; !isPreview) {&#13;
            presenter.setShowErrorsMode();&#13;
        }&#13;
    }&#13;
&#13;
    function removeHidden(shouldRemove, $element) {&#13;
        if (shouldRemove) {&#13;
            $element.removeClass('hidden');&#13;
        } else {&#13;
            $element.addClass('hidden');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        runLogic(view, model, false);&#13;
    };&#13;
&#13;
    function getLessonScore() {&#13;
        var sumOfScore = 0.0, sumOfErrors = 0, sumOfChecks = 0,&#13;
            sumOfMaxScore = 0.0,&#13;
            sumOfScaledScore = 0.0,&#13;
            sumOfMistakes = 0,&#13;
            sumOfWeights = 0,&#13;
            pageScaledScore = 0,&#13;
            count = 0, i, page, score,&#13;
            paginatedResults = [];&#13;
        var presentation = presenter.playerController.getPresentation();&#13;
        var scoreService = presenter.playerController.getScore();&#13;
&#13;
        for (var i = 0; i &lt; presentation.getPageCount(); i++) {&#13;
            var page = presentation.getPage(i);&#13;
&#13;
            if (page.isReportable()) {&#13;
                score = scoreService.getPageScoreById(page.getId());&#13;
&#13;
                if (score['maxScore']) {&#13;
                    pageScaledScore = score['score'] / score['maxScore'];&#13;
                } else {&#13;
                    pageScaledScore = page.isVisited() ? 1 : 0;&#13;
                }&#13;
&#13;
                var _weight = page.getPageWeight();&#13;
                var weight =  !_weight &amp;&amp; _weight !== 0 ? 1 : _weight;&#13;
                sumOfScaledScore += pageScaledScore * weight;&#13;
                sumOfScore += score.score;&#13;
                sumOfErrors += score.errorCount;&#13;
                sumOfChecks += score.checkCount;&#13;
                sumOfMaxScore += score.maxScore;&#13;
                sumOfMistakes += score.mistakeCount;&#13;
                sumOfWeights += weight;&#13;
                count += 1;&#13;
            }&#13;
        }&#13;
&#13;
        var scaledScore = 0;&#13;
        if (count &gt; 0) {&#13;
            if (sumOfWeights) {&#13;
                scaledScore = Math.round((sumOfScaledScore / sumOfWeights) * 100);&#13;
            } else {&#13;
                scaledScore = 1;&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
           progress: parseInt(scaledScore, 10),&#13;
           sumOfMaxScore: scoreService.getMaxScore(),&#13;
           sumOfMistakes: sumOfMistakes,&#13;
           sumOfErrors: sumOfErrors,&#13;
           sumOfChecks: sumOfChecks,&#13;
           sumOfScores: sumOfScore&#13;
       };&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        var lessonScore = getLessonScore();&#13;
        if (presenter.configuration.showProgressBar) {&#13;
            presenter.$progressBar.css('width', lessonScore.progress + '%');&#13;
            presenter.$progressText.html(lessonScore.progress + '%');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            presenter.$checks.find('.value').html(lessonScore.sumOfChecks);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            presenter.$mistakes.find('.value').html(lessonScore.sumOfMistakes);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            presenter.$errors.find('.value').html(lessonScore.sumOfErrors);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScore) {&#13;
            presenter.$maxScore.find('.value').html(lessonScore.sumOfMaxScore);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showCorrectAnswers) {&#13;
            presenter.$correctAnswers.find('.value').html(lessonScore.sumOfScores);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function(){&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.$view.show();&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.$view.hide();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show' : presenter.show,&#13;
            'hide' : presenter.hide,&#13;
            'getLessonProgress' : presenter.getLessonProgress,&#13;
            'getLessonScore' : presenter.getLessonScore,&#13;
            'getLessonMaxScore' : presenter.getLessonMaxScore,&#13;
            'getLessonMistakes' : presenter.getLessonMistakes,&#13;
            'getLessonChecks' : presenter.getLessonChecks,&#13;
            'getLessonErrors' : presenter.getLessonErrors&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getLessonProgress = function() {&#13;
        return getLessonScore().progress;&#13;
    };&#13;
&#13;
    presenter.getLessonScore = function() {&#13;
        return getLessonScore().sumOfScores;&#13;
    };&#13;
&#13;
    presenter.getLessonMaxScore = function() {&#13;
        return getLessonScore().sumOfMaxScore;&#13;
    };&#13;
&#13;
    presenter.getLessonMistakes = function() {&#13;
        return getLessonScore().sumOfMistakes;&#13;
    };&#13;
&#13;
    presenter.getLessonChecks = function() {&#13;
        return getLessonScore().sumOfChecks;&#13;
    };&#13;
&#13;
    presenter.getLessonErrors = function() {&#13;
        return getLessonScore().sumOfErrors;&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        var upgradedModel = $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel['Calculate_Score_On_Page_Change']) {&#13;
            upgradedModel['Calculate_Score_On_Page_Change'] = 'False';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
&#13;
</presenter></addon>