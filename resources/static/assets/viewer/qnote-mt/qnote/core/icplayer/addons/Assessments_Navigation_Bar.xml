<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon id="Assessments_Navigation_Bar">
    <model>
        <property name="Sections" nameLabel="Assessments_Navigation_Bar_property_sections" type="text"/>
        <property displayName="Real-time navigationbar-page-attempted" name="addClassAreAllAttempted" nameLabel="Assessments_Navigation_Bar_property_add_class_are_all_attempted" type="boolean"/>
        <property displayName="Number of buttons" name="userButtonsNumber" nameLabel="Assessments_Navigation_Bar_property_number_of_buttons" type="string"/>
        <property displayName="Width of buttons" name="userButtonsWidth" nameLabel="Assessments_Navigation_Bar_property_width_of_buttons" type="string"/>
        <property displayName="Default order" name="defaultOrder" nameLabel="Assessments_Navigation_Bar_property_default_order" type="boolean"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Assessments_Navigation_Bar_property_speech_texts" type="staticlist">
            <property name="PreviousPage" nameLabel="Assessments_Navigation_Bar_speech_text_previous_page" type="staticrow">
                <property name="PreviousPage" nameLabel="Assessments_Navigation_Bar_speech_text_previous_page" type="string"/>
            </property>
            <property name="ShowPreviousPages" nameLabel="Assessments_Navigation_Bar_speech_text_show_previous_pages" type="staticrow">
                <property name="ShowPreviousPages" nameLabel="Assessments_Navigation_Bar_speech_text_show_previous_pages" type="string"/>
            </property>
            <property name="Title" nameLabel="Assessments_Navigation_Bar_speech_text_title" type="staticrow">
                <property name="Title" nameLabel="Assessments_Navigation_Bar_speech_text_title" type="string"/>
            </property>
            <property name="GoToPage" nameLabel="Assessments_Navigation_Bar_speech_text_go_to_page" type="staticrow">
                <property name="GoToPage" nameLabel="Assessments_Navigation_Bar_speech_text_go_to_page" type="string"/>
            </property>
            <property name="ShowNextPages" nameLabel="Assessments_Navigation_Bar_speech_text_show_next_pages" type="staticrow">
                <property name="ShowNextPages" nameLabel="Assessments_Navigation_Bar_speech_text_show_next_pages" type="string"/>
            </property>
            <property name="NextPage" nameLabel="Assessments_Navigation_Bar_speech_text_next_page" type="staticrow">
                <property name="NextPage" nameLabel="Assessments_Navigation_Bar_speech_text_next_page" type="string"/>
            </property>
        </property>
    </model>
<css>.assessments-navigation-bar-wrapper .navigation-buttons-first .previous {&#13;
    width: 40px;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .navigation-buttons-first {&#13;
    display: inline-block;&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .navigation-buttons-last {&#13;
    display: inline-block;&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .inactive {&#13;
    background-color: #80BBC8;&#13;
    color: #C0C0C0;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper {&#13;
    background-color: #F3F3F3;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .sections {&#13;
    display: inline-block;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .section {&#13;
    display: inline-block;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .section_name {&#13;
    text-align: center;&#13;
    height: 20%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .element {&#13;
    display: inline-block;&#13;
    text-align: center;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .buttons {&#13;
    height: 80%;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .button_text {&#13;
    position: relative;&#13;
    top: 50%;&#13;
    transform: translateY(-50%);&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .mouse-over {&#13;
    background-color: #7F7F7F;&#13;
    color: #F3F3F3;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .current_page {&#13;
    background-color: #2091AB;&#13;
    color: white;&#13;
}&#13;
&#13;
.assessments-navigation-bar-wrapper .bookmark {&#13;
    color: red;&#13;
}&#13;
</css><view>&lt;div class="assessments-navigation-bar-wrapper"&gt;&#13;
    &lt;div class="navigation-buttons-first"&gt;&#13;
        &lt;div class="previous"&gt;&amp;hellip;&lt;/div&gt;&#13;
        &lt;div class="turn_backward"&gt;&amp;lt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="sections"&gt;&#13;
        &lt;div class ="section_0"&gt;&#13;
            &lt;div class="section_name"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="navigation-buttons-last"&gt;&#13;
          &lt;div class="turn_forward"&gt;&amp;hellip;&lt;/div&gt;&#13;
          &lt;div class="next"&gt;&amp;gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="assessments-navigation-bar-wrapper"&gt;&#13;
    &lt;div class="navigation-buttons-first"&gt;&#13;
        &lt;div class="previous"&gt;&amp;hellip;&lt;/div&gt;&#13;
        &lt;div class="turn_backward"&gt;&amp;lt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="sections"&gt;&#13;
        &lt;div class ="section_0"&gt;&#13;
            &lt;div class="section_name"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&#13;
    &lt;div class="navigation-buttons-last"&gt;&#13;
          &lt;div class="turn_forward"&gt;&amp;hellip;&lt;/div&gt;&#13;
          &lt;div class="next"&gt;&amp;gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAssessments_Navigation_Bar_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.SECTION_NAME_HEIGHT = 20;&#13;
    presenter.isFirstEnter = true;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        S_00: "Section property cant be empty string",&#13;
        S_01: "Pages range are invalid on section %section% in sections property. Numbers have to be integers only.",&#13;
        S_02: "Pages range is invalid on section: %section% in sections property.",&#13;
        S_03: "Pages descriptions are invalid on section: %section% in sections property. Number of descriptions is too small.",&#13;
        S_04: "Pages descriptions are invalid on section: %section% in sections property. Number of descriptions is too big.",&#13;
        S_05: "Section: %section_1% pages numbers cant intersect with page numbers of section: %section_2%.",&#13;
        S_06: "Number of buttons property can't be equal or below 0.",&#13;
        S_07: "Number of buttons property have to be an integer",&#13;
        S_08: "Number of buttons can't be greater than number of pages in sections",&#13;
        S_09: "Buttons width property can't be equal or below 0.",&#13;
        S_10: "Buttons width property have to be an integer",&#13;
        S_11: "Pages CSS classes are invalid on section: %section% in sections property. Number of CSS classes is too small.",&#13;
        S_12: "Pages CSS classes are invalid on section: %section% in sections property. At least one of CSS classes is invalid.",&#13;
    };&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        PreviousPage: "Go to previous page",&#13;
        ShowPreviousPages: "Show previous pages",&#13;
        Title: "Title",&#13;
        GoToPage: "Go to page",&#13;
        ShowNextPages: "Show next pages",&#13;
        NextPage: "Go to next page",&#13;
    };&#13;
&#13;
    presenter.CSS_CLASSES = {&#13;
        ALL_ATTEMPTED: "all-attempted",&#13;
        PREVIOUS: "previous",&#13;
        BUTTON_TEXT: "button_text",&#13;
        SECTION_NAME: "section_name",&#13;
        NEXT: "next",&#13;
        BUTTON: "button",&#13;
        ELEMENT: "element",&#13;
        TURN_BACK: "turn_back",&#13;
        TURN_FORWARD: "turn_forward",&#13;
        CURRENT_PAGE: "current_page",&#13;
        BOOKMARK: "bookmark",&#13;
        INACTIVE: "inactive"&#13;
    };&#13;
&#13;
    presenter.attemptedButtons = [];&#13;
&#13;
    presenter.configuration = {&#13;
        isValid: undefined,&#13;
        addonID: undefined,&#13;
        sections: undefined,&#13;
        addClassAreAllAttempted: undefined,&#13;
        userButtonsNumber: undefined,&#13;
        userButtonsWidth: undefined,&#13;
        numberOfButtons: undefined,&#13;
        navigationLeftIndex: 0,&#13;
        navigationRightIndex: 0,&#13;
        numberOfPages: 0,&#13;
        defaultOrder: false&#13;
    };&#13;
&#13;
    presenter.keyboardControllerObject = null;&#13;
    //this field is set based on the metadata. It overrides the defaultOrder property&#13;
    // If set to false it prevents state import&#13;
    presenter.randomizeLesson = null;&#13;
&#13;
    presenter.ASSESSMENT_USER_TYPES = {&#13;
        NONE: 0,&#13;
        TEACHER: 1,&#13;
        STUDENT: 2,&#13;
    }&#13;
    presenter.assessmentUser = presenter.ASSESSMENT_USER_TYPES.NONE;&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for(var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    function getErrorObject (errorCode, errorData) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: errorCode,&#13;
            errorData: errorData&#13;
        };&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.presentation = controller.getPresentation();&#13;
        var currentIndex = presenter.playerController.getCurrentPageIndex();&#13;
        var mappings = presenter.playerController.getPagesMapping();&#13;
        mappings.forEach(function (value, index) {&#13;
            if (value === currentIndex) {&#13;
                presenter.currentPageIndex = index;&#13;
            }&#13;
        });&#13;
        var context = controller.getContextMetadata();&#13;
         if (context != null) {&#13;
            if ("randomizeLesson" in context) {&#13;
                 presenter.randomizeLesson = context["randomizeLesson"];&#13;
            }&#13;
            if ("assessmentUser" in context) {&#13;
               if (context["assessmentUser"] == "teacher") {&#13;
                    presenter.assessmentUser = presenter.ASSESSMENT_USER_TYPES.TEACHER;&#13;
               } else if (context["assessmentUser"] == "student") {&#13;
                    presenter.assessmentUser = presenter.ASSESSMENT_USER_TYPES.STUDENT;&#13;
               }&#13;
            }&#13;
         }&#13;
        presenter.commander = controller.getCommands();&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.addEventListeners();&#13;
    };&#13;
&#13;
    presenter.addEventListeners = function () {&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.changeToPage = function (index) {&#13;
        var mappings = presenter.playerController.getPagesMapping();&#13;
        var i = mappings[index];&#13;
        if (index !== presenter.currentPageIndex) {&#13;
            presenter.commander.gotoPageIndex(i);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'bookmarkCurrentPage': presenter.bookmarkCurrentPage,&#13;
            'removeBookmark' : presenter.removeBookmark,&#13;
            'moveToPage': presenter.moveToPageCommand,&#13;
            'moveToPreviousPage': presenter.moveToPreviousPage,&#13;
            'moveToNextPage': presenter.moveToNextPage&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.moveToPreviousPage = function() {&#13;
        presenter.navigationManager.goLeft();&#13;
    };&#13;
&#13;
    presenter.moveToNextPage = function() {&#13;
        presenter.navigationManager.goRight();&#13;
    };&#13;
&#13;
    presenter.moveToPageCommand = function (params) {&#13;
        presenter.moveToPage(params[0]);&#13;
    };&#13;
&#13;
    presenter.moveToPage = function (pageIndex) {&#13;
        var validatedPageIndex = presenter.validatePageIndex(pageIndex);&#13;
&#13;
        if (validatedPageIndex.isValid) {&#13;
            var page = presenter.sections.getPageByIndex(validatedPageIndex.index);&#13;
&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validatePageIndex = function (pageIndex) {&#13;
        var parsedIndex = Number(pageIndex);&#13;
&#13;
        if (isNaN(parsedIndex)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        if (presenter.isFloat(parsedIndex)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        if ((parsedIndex &lt; 1) || (parsedIndex &gt; presenter.configuration.numberOfPages)) {&#13;
            return getErrorObject();&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            index: (parsedIndex - 1)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.bookmarkCurrentPage = function () {&#13;
        presenter.sections.setBookmarkCurrentPage(true);&#13;
        presenter.navigationManager.bookmarkCurrentButton();&#13;
    };&#13;
&#13;
    presenter.removeBookmark = function () {&#13;
        presenter.sections.setBookmarkCurrentPage(false);&#13;
        presenter.navigationManager.removeBookmarkFromCurrentButton();&#13;
    };&#13;
&#13;
    // Fisher-Yates algorithm&#13;
    // based on http://sedition.com/perl/javascript-fy.html&#13;
    function shuffleArray (a) {&#13;
        var i = a.length;&#13;
        if ( i == 0 ) return [];&#13;
&#13;
        while ( --i ) {&#13;
            var j = Math.floor( Math.random() * ( i + 1 ) );&#13;
            var tempi = a[i];&#13;
            a[i] = a[j];&#13;
            a[j] = tempi;&#13;
        }&#13;
&#13;
        return a;&#13;
    }&#13;
&#13;
    presenter.Button = function (viewDescription, customCssClassNames) {&#13;
        this.description = viewDescription;&#13;
        this.customCssClassNames = customCssClassNames;&#13;
        this.$view = this.createView();&#13;
        this.$view_text;&#13;
        this.actualCommand;&#13;
        this.navigateToPage;&#13;
        this.isActualButton = false;&#13;
&#13;
        this.connectEvents();&#13;
    };&#13;
&#13;
    presenter.Button.prototype.connectEvents = function () {&#13;
        this.$view[0].addEventListener("click", this, false);&#13;
        this.$view[0].addEventListener("mouseover", this, false);&#13;
        this.$view[0].addEventListener("mouseout", this, false);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.addCssClass = function (cssClass) {&#13;
        this.$view.addClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeCssClass = function (cssClass) {&#13;
        this.$view.removeClass(cssClass);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setCommand = function (command) {&#13;
        this.actualCommand = command;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setNavigateToPage = function (navigateToPage) {&#13;
        this.navigateToPage = navigateToPage;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.execute = function () {&#13;
        this.actualCommand();&#13;
    };&#13;
&#13;
    presenter.Button.prototype.handleEvent = function (event) {&#13;
        if (presenter.isPreview) {&#13;
            return;&#13;
        }&#13;
&#13;
        switch (event.type) {&#13;
            case "click":&#13;
                this.execute();&#13;
                break;&#13;
            case "mouseover":&#13;
                this.$view.addClass("mouse-over");&#13;
                break;&#13;
            case "mouseout":&#13;
                this.$view.removeClass("mouse-over");&#13;
                break;&#13;
        }&#13;
&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.Button.prototype.setAsCurrent = function () {&#13;
        this.isActualButton = true;&#13;
        this.$view.addClass(presenter.CSS_CLASSES.CURRENT_PAGE);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.addBookmark = function () {&#13;
        this.$view.addClass(presenter.CSS_CLASSES.BOOKMARK);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeBookmark = function () {&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.BOOKMARK);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeAttempted = function () {&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.createView = function () {&#13;
        var $view = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
        $view.css({&#13;
            width: presenter.configuration.sizes.elementWidth + "px"&#13;
        });&#13;
&#13;
        this.$view_text = $('&lt;div&gt;&lt;/div&gt;');&#13;
        this.$view_text.text(this.description);&#13;
        this.$view_text.addClass(presenter.CSS_CLASSES.BUTTON_TEXT);&#13;
&#13;
        $view.append(this.$view_text);&#13;
        $view.addClass(presenter.CSS_CLASSES.BUTTON);&#13;
        $view.addClass(presenter.CSS_CLASSES.ELEMENT);&#13;
&#13;
        if (this.customCssClassNames &amp;&amp; this.customCssClassNames.length !== 0) {&#13;
            this.customCssClassNames.map((cssClassName) =&gt; {&#13;
                $view.addClass(cssClassName);&#13;
            })&#13;
        }&#13;
&#13;
        return $view;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.getView = function () {&#13;
        return this.$view;&#13;
    };&#13;
&#13;
    presenter.Button.prototype.addInactiveClass = function () {&#13;
        this.$view.addClass(presenter.CSS_CLASSES.INACTIVE);&#13;
    };&#13;
&#13;
    presenter.Button.prototype.removeInactiveClass = function () {&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.INACTIVE);&#13;
    };&#13;
&#13;
    presenter.NavigationButtonLeft = function () {&#13;
        presenter.Button.call(this, "&lt;");&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.BUTTON);&#13;
        this.$view.addClass(presenter.CSS_CLASSES.PREVIOUS);&#13;
        this.setCommand(function () {&#13;
            presenter.navigationManager.goLeft();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationButtonLeft.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.NavigationButtonLeft.constructor = presenter.NavigationButtonLeft;&#13;
&#13;
    presenter.NavigationButtonRight = function () {&#13;
        presenter.Button.call(this, "&gt;");&#13;
        this.$view.addClass(presenter.CSS_CLASSES.NEXT);&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.BUTTON);&#13;
        this.setCommand(function () {&#13;
            presenter.navigationManager.goRight();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationButtonRight.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.NavigationButtonRight.constructor = presenter.NavigationButtonRight;&#13;
&#13;
    presenter.HellipButton = function (hellipFunction, className) {&#13;
        presenter.Button.call(this, "&amp;hellip;"); // ...&#13;
        this.$view_text.html(this.description);&#13;
        this.$view.removeClass(presenter.CSS_CLASSES.BUTTON);&#13;
        this.$view.addClass(className);&#13;
&#13;
        this.setCommand(hellipFunction);&#13;
    };&#13;
&#13;
    presenter.HellipButton.prototype = Object.create(presenter.Button.prototype);&#13;
    presenter.HellipButton.constructor = presenter.HellipButton;&#13;
&#13;
    presenter.Page = function (page, view_description, sectionName, sectionCssClass, buttonCssClassNames) {&#13;
        this.description = view_description;&#13;
        this.page = page;&#13;
        this.isBookmarkOn = false;&#13;
        this.sectionName = sectionName;&#13;
        this.sectionCssClass = sectionCssClass;&#13;
        this.buttonCssClassNames = buttonCssClassNames;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.setBookmarkOn = function (bookmark) {&#13;
        this.isBookmarkOn = bookmark;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getSectionClassName = function () {&#13;
        return this.sectionCssClass;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getSectionName = function () {&#13;
        return this.sectionName;&#13;
    };&#13;
&#13;
    presenter.Page.prototype.getChangeToPageCommand = function () {&#13;
        return function () {&#13;
            var index = Number(this);&#13;
            presenter.changeToPage(index);&#13;
        }.bind(this.page);&#13;
    };&#13;
&#13;
    presenter.Page.prototype.isActualPage = function () {&#13;
        return presenter.currentPageIndex === this.page;&#13;
    };&#13;
&#13;
    presenter.Section = function (pages, sectionName, pagesDescriptions, sectionCssClassName, buttonsCssClassNames) {&#13;
        this.name = sectionName;&#13;
        this.cssClassName = sectionCssClassName;&#13;
        this.buttonsCssClassNames = buttonsCssClassNames;&#13;
        this.pages = this.createPages(pages, pagesDescriptions);&#13;
    };&#13;
&#13;
    presenter.Section.prototype.createPages = function (pages, pagesDescriptions) {&#13;
        var keepDefaultOrder = presenter.configuration.defaultOrder;&#13;
        if (presenter.assessmentUser != presenter.ASSESSMENT_USER_TYPES.NONE) {&#13;
            if (presenter.assessmentUser == presenter.ASSESSMENT_USER_TYPES.TEACHER) {&#13;
                keepDefaultOrder = true;&#13;
            } else {&#13;
                // presenter.assessmentUser set to student&#13;
                keepDefaultOrder = false;&#13;
            }&#13;
        } else if (presenter.randomizeLesson != null) {&#13;
            keepDefaultOrder = !presenter.randomizeLesson;&#13;
        }&#13;
        var pagesToCreate = keepDefaultOrder ? pages : shuffleArray(pages);&#13;
&#13;
        return pagesToCreate.map(function (page, index) {&#13;
            if (page == -1) return null;&#13;
            return new presenter.Page(&#13;
                page, pagesDescriptions[index], this.name,&#13;
                this.cssClassName, this.buttonsCssClassNames&#13;
            );&#13;
        }, this).filter(function(page) {&#13;
            return page != null;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Sections = function (sections) {&#13;
        this.sections = this.createSections(sections);&#13;
        this.allPages = this.getAllPagesInOrder(this.sections);&#13;
        this.attemptedPages = [];&#13;
        this.pagesIndexes = this.getPagesIndexes(this.allPages);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.markPageAsAttempted = function (page) {&#13;
        if(!(this.attemptedPages.indexOf(page) &gt; -1)){&#13;
            this.attemptedPages.push(page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.markPageAsNotAttempted = function (page) {&#13;
        var attempted_page_index = this.attemptedPages.indexOf(page);&#13;
        if (attempted_page_index !== -1) {&#13;
            this.attemptedPages.splice(attempted_page_index, 1);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.markAllPagesAsNotAttempted = function () {&#13;
        this.attemptedPages = [];&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPagesIndexes = function (pages) {&#13;
        return pages.map(function (page) {&#13;
            return page.page;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPageByIndex = function (index) {&#13;
        return this.allPages[index];&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.isHomeCurrentPage = function () {&#13;
        return this.allPages[0].isActualPage();&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.isLastCurrentPage = function () {&#13;
        return this.allPages[this.allPages.length - 1].isActualPage();&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getActualPageIndex = function () {&#13;
        for (var i = 0; i &lt; this.allPages.length; i++) {&#13;
            if (this.allPages[i].isActualPage()) {&#13;
                return i;&#13;
            }&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.doesActualPageExists = function () {&#13;
        return this.pagesIndexes.indexOf(presenter.currentPageIndex) !== -1;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getNextPageToCurrent = function () {&#13;
        var pageIndex = this.getActualPageIndex();&#13;
&#13;
        if ((pageIndex !== undefined) &amp;&amp; (pageIndex &lt; presenter.configuration.numberOfPages - 1)) {&#13;
            pageIndex = pageIndex + 1;&#13;
            return this.getPageByIndex(pageIndex);&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPreviousPageToCurrent = function () {&#13;
        var pageIndex = this.getActualPageIndex();&#13;
&#13;
        if ((pageIndex !== undefined) &amp;&amp; (pageIndex &gt; 0)) {&#13;
            pageIndex = pageIndex - 1;&#13;
            return this.getPageByIndex(pageIndex);&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getAllPagesInOrder = function (sections) {&#13;
        return sections.reduce(function (result, section) {&#13;
            return result.concat(section.pages);&#13;
        }, []);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.addClassAllAttemptedToPage = function (current_page_index) {&#13;
        presenter.navigationManager.markCurrentButtonWithAttemptedClass();&#13;
        presenter.sections.markPageAsAttempted(current_page_index);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.removeClassAllAttemptedToPage = function (current_page_index) {&#13;
        presenter.navigationManager.removeCurrentButtonAttemptedClass();&#13;
        presenter.sections.markPageAsNotAttempted(current_page_index);&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.setBookmarkCurrentPage = function (bookmark) {&#13;
        for (var i = 0; i &lt; this.allPages.length; i++) {&#13;
            if (this.allPages[i].isActualPage()) {&#13;
                this.allPages[i].isBookmarkOn = bookmark;&#13;
                break&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.getPages = function (leftIndex, numberOfPages) {&#13;
        var pages = [];&#13;
&#13;
        if (leftIndex + numberOfPages &gt;= this.allPages.length) {&#13;
            leftIndex = ((this.allPages.length) - numberOfPages)&#13;
        }&#13;
&#13;
        if (leftIndex &lt; 0) {&#13;
            leftIndex = 0;&#13;
        }&#13;
&#13;
        for (var i = leftIndex; i &lt; this.allPages.length; i++) {&#13;
            if (numberOfPages == 0) {&#13;
                break;&#13;
            }&#13;
&#13;
            pages.push(this.allPages[i]);&#13;
            numberOfPages--;&#13;
        }&#13;
&#13;
        return pages;&#13;
    };&#13;
&#13;
    presenter.filterSectionsWithTooManyPages = function(sections) {&#13;
        var mapping = presenter.playerController.getPagesMapping();&#13;
&#13;
        if (presenter.assessmentUser == presenter.ASSESSMENT_USER_TYPES.TEACHER) {&#13;
            for (var i = 0; i &lt; sections.length; i++) {&#13;
                for(var j = 0; j &lt; sections[i].pages.length; j++) {&#13;
                    var page = sections[i].pages[j];&#13;
                    if (mapping[page] == -1) {&#13;
                        sections[i].pages[j] = -1;&#13;
                    }&#13;
                }&#13;
            }&#13;
        } else {&#13;
            for (var i = 0; i &lt; sections.length; i++) {&#13;
                sections[i].pages = sections[i].pages.filter(function (page) {&#13;
                    return mapping[page] &gt;= 0;&#13;
                });&#13;
            }&#13;
        }&#13;
&#13;
        sections = sections.filter(function(section) {&#13;
            return section.pages.length &gt; 0;&#13;
        });&#13;
&#13;
        return sections;&#13;
    };&#13;
&#13;
    presenter.Sections.prototype.createSections = function (sections) {&#13;
        if (presenter.playerController) {&#13;
            sections = presenter.filterSectionsWithTooManyPages(sections);&#13;
        }&#13;
&#13;
        return sections.map(&#13;
            function (section, index) {&#13;
                var sectionCssClass = "section_" + index;&#13;
                return new presenter.Section(&#13;
                    section.pages, section.sectionName,&#13;
                    section.pagesDescriptions, sectionCssClass,&#13;
                    section.sectionButtonsCssClassNames&#13;
                );&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager = function () {&#13;
        this.leftSideIndex = 0;&#13;
        this.actualSections = [];&#13;
        this.actualSectionsNames = [];&#13;
        this.$navigationButtonsFirst;&#13;
        this.$navigationButtonsLast;&#13;
        this.navigationButtonLeft;&#13;
        this.navigationButtonRight;&#13;
        this.$sections;&#13;
        this.buttons = [];&#13;
        this.shiftCount = 0;&#13;
&#13;
        this.initView();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.restartLeftSideIndex = function () {&#13;
        this.leftSideIndex = 0;&#13;
        this.shiftCount = 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.goRight = function () {&#13;
        var page = presenter.sections.getNextPageToCurrent();&#13;
&#13;
        if (page) {&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.goLeft = function () {&#13;
        var page = presenter.sections.getPreviousPageToCurrent();&#13;
&#13;
        if (page) {&#13;
            presenter.changeToPage(page.page);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.bookmarkCurrentButton = function () {&#13;
        var currentButton = this.buttons.filter(function (element) {&#13;
            return element.isActualButton;&#13;
        })[0];&#13;
        if (currentButton !== undefined) currentButton.addBookmark();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeBookmarksFromButtons = function () {&#13;
        this.buttons.forEach(function(button) {&#13;
            button.removeBookmark();&#13;
        });&#13;
&#13;
        presenter.sections.allPages.map(function (page) {&#13;
            page.isBookmarkOn = false;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeBookmarkFromCurrentButton = function () {&#13;
        var currentButton = this.buttons.filter(function (element) {&#13;
            return element.isActualButton;&#13;
        })[0];&#13;
        if (currentButton !== undefined) currentButton.removeBookmark();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.markButtonsWithAttempted = function (attemptedPages) {&#13;
        this.buttons.filter(function (button) {&#13;
            return (attemptedPages.indexOf(button.navigateToPage) !== -1);&#13;
        }).forEach(function (button) {&#13;
            button.addCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeAttemptedFromButtons = function () {&#13;
        this.buttons.forEach(function(button) {&#13;
            button.removeAttempted();&#13;
        });&#13;
        presenter.sections.markAllPagesAsNotAttempted();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.initView = function () {&#13;
        this.appendNavigationButtonsFirst();&#13;
        this.appendSectionsContainer();&#13;
        this.appendNavigationButtonsLast();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendSectionsContainer = function () {&#13;
        this.$sections = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
        this.$sections.addClass("sections");&#13;
&#13;
        presenter.$wrapper.append(this.$sections);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getActualButtonsArray = function () {&#13;
        return this.buttons.filter(function (button) {&#13;
            return button.isActualButton&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.markCurrentButtonWithAttemptedClass = function () {&#13;
        var button = this.getActualButtonsArray();&#13;
&#13;
        if (button.length === 1) {&#13;
            button[0].addCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeCurrentButtonAttemptedClass = function () {&#13;
        var button = this.getActualButtonsArray();&#13;
&#13;
        if (button.length === 1) {&#13;
            button[0].removeCssClass(presenter.CSS_CLASSES.ALL_ATTEMPTED);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendNavigationButtonsFirst = function () {&#13;
        const $navigationButtonsFirst = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $navigationButtonsFirst.addClass("navigation-buttons-first");&#13;
&#13;
        this.navigationButtonLeft = new presenter.NavigationButtonLeft();&#13;
        $navigationButtonsFirst.append(this.navigationButtonLeft.getView());&#13;
&#13;
        this.$navigationButtonsFirst = $navigationButtonsFirst;&#13;
        presenter.$wrapper.append(this.$navigationButtonsFirst);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendNavigationButtonsLast = function () {&#13;
        const $navigationButtonsLast = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $navigationButtonsLast.addClass("navigation-buttons-last");&#13;
&#13;
        this.navigationButtonRight = new presenter.NavigationButtonRight();&#13;
        $navigationButtonsLast.append(this.navigationButtonRight.getView());&#13;
&#13;
        this.$navigationButtonsLast = $navigationButtonsLast;&#13;
        presenter.$wrapper.append(this.$navigationButtonsLast);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.clearStateAndButtons = function () {&#13;
        this.removeSections();&#13;
        this.removeHellips();&#13;
        this.removeInactiveClassFromNavigationButtons();&#13;
        this.buttons = [];&#13;
        this.actualPages = [];&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeInactiveClassFromNavigationButtons = function () {&#13;
        this.navigationButtonLeft.removeInactiveClass();&#13;
        this.navigationButtonRight.removeInactiveClass();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addLeftHellip = function () {&#13;
        if (this.shouldAddLeftHellip()) {&#13;
            this.getHellip($.fn.append.bind(this.$navigationButtonsFirst), this.shiftPagesToLeft.bind(this), presenter.CSS_CLASSES.TURN_BACK);&#13;
            return 1;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addRightHellip = function () {&#13;
        if (this.shouldAddRightHellip()) {&#13;
            this.rightHellip = this.getHellip($.fn.prepend.bind(this.$navigationButtonsLast), this.shiftPagesToRight.bind(this), presenter.CSS_CLASSES.TURN_FORWARD);&#13;
            return 1&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.calculateNumberOfPages = function (hellipsCount) {&#13;
        var number = presenter.configuration.numberOfButtons - 2 - hellipsCount;&#13;
        if (number &lt; 1) {&#13;
            return 1;&#13;
        } else {&#13;
            return number;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getHellip = function (containerAddFunction, hellipFunction, className) {&#13;
        var button = new presenter.HellipButton(hellipFunction, className);&#13;
&#13;
        containerAddFunction(button.getView());&#13;
&#13;
        return button;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setSections = function () {&#13;
        this.clearStateAndButtons();&#13;
&#13;
        this.hellipsCount = 0;&#13;
&#13;
        this.hellipsCount += this.addLeftHellip();&#13;
        this.hellipsCount += this.addRightHellip();&#13;
&#13;
        this.addSections(this.calculateNumberOfPages(this.hellipsCount));&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.deactivateNavigationButtons = function () {&#13;
        if (presenter.sections.isHomeCurrentPage()) {&#13;
            this.navigationButtonLeft.addInactiveClass();&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.sections.isLastCurrentPage()) {&#13;
            this.navigationButtonRight.addInactiveClass();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeSections = function () {&#13;
        presenter.$wrapper.find(".sections").children().remove();&#13;
        this.actualSections = [];&#13;
        this.actualSectionsNames = [];&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.moveToCurrentPage = function () {&#13;
        if (presenter.sections.doesActualPageExists()) {&#13;
            this.moveToCurrentPageLogic();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.moveToCurrentPageLogic = function () {&#13;
        for (var i = 0; i &lt; this.actualPages.length; i++) {&#13;
            var page = this.actualPages[i];&#13;
            if (page != undefined &amp;&amp; page.isActualPage != undefined &amp;&amp; page.isActualPage()) {&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        this.rightHellip.execute();&#13;
        this.moveToCurrentPage();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.removeHellips = function () {&#13;
        presenter.$wrapper.find("." + presenter.CSS_CLASSES.TURN_FORWARD).remove();&#13;
        presenter.$wrapper.find("." + presenter.CSS_CLASSES.TURN_BACK).remove();&#13;
        delete this.rightHellip;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shiftPagesToLeft = function () {&#13;
        if (this.shiftCount === 1) {&#13;
            this.leftSideIndex = 0;&#13;
        } else {&#13;
            if (presenter.configuration.numberOfButtons - 4 &gt; 0) {&#13;
                this.leftSideIndex -=  (presenter.configuration.numberOfButtons - 4);&#13;
            } else {&#13;
                this.leftSideIndex -= 1;&#13;
            }&#13;
        }&#13;
&#13;
        this.shiftCount--;&#13;
        this.setSections();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shiftPagesToRight = function () {&#13;
        var shift;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            shift = (presenter.configuration.numberOfButtons - 2 - this.hellipsCount);&#13;
        } else {&#13;
            shift = this.getNormalRightShift();&#13;
        }&#13;
&#13;
        if (shift &lt;= 0) {&#13;
            shift = 1;&#13;
        }&#13;
&#13;
        this.leftSideIndex += shift;&#13;
&#13;
        this.shiftCount++;&#13;
        this.setSections();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getNormalRightShift = function () {&#13;
        if (this.shiftCount === 0) {&#13;
            return (presenter.configuration.numberOfButtons - 3);&#13;
        } else {&#13;
            return (presenter.configuration.numberOfButtons - 4);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setSectionWidth = function ($section) {&#13;
        var numOfButtons = $section.find(".buttons").children().length;&#13;
        $section.css({&#13;
            width: (numOfButtons*presenter.configuration.sizes.elementWidth) + "px"&#13;
        });&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonCurrentPage = function (button, page) {&#13;
        if (page.isActualPage()) {&#13;
            button.setAsCurrent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonBookmark = function (button, page) {&#13;
        if (page.isBookmarkOn) {&#13;
            button.addBookmark();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.setButtonProperties = function (button, page) {&#13;
        if (presenter.isPreview) {&#13;
            return;&#13;
        }&#13;
        this.setButtonCurrentPage(button, page);&#13;
        this.setButtonBookmark(button, page);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addSections = function (numberOfPages) {&#13;
        this.actualPages = presenter.sections.getPages(this.leftSideIndex, numberOfPages);&#13;
        var sectionIterator = -1;&#13;
&#13;
        var len = this.actualPages.length;&#13;
        for (var i = 0; i &lt; len; i++) {&#13;
            var button = this.getPageButton(this.actualPages[i]);&#13;
            this.setButtonProperties(button, this.actualPages[i]);&#13;
            this.buttons.push(button);&#13;
&#13;
            sectionIterator = this.addButtonToSection(button, sectionIterator, this.actualPages[i]);&#13;
        }&#13;
&#13;
        this.appendSectionsToView();&#13;
        this.deactivateNavigationButtons();&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendSectionsToView = function () {&#13;
        this.actualSections.forEach(function ($section) {&#13;
            this.setSectionWidth($section);&#13;
            this.$sections.append($section);&#13;
        }, this);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getPageButton = function (page) {&#13;
        var button = new presenter.Button(page.description, page.buttonCssClassNames);&#13;
        button.setCommand(page.getChangeToPageCommand());&#13;
        button.setNavigateToPage(page.page);&#13;
&#13;
        return button;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addButtonToSection = function (button, sectionIterator, page) {&#13;
        if (page.getSectionClassName() === this.actualSectionsNames[sectionIterator]) {&#13;
            this.appendButtonToSection(button, sectionIterator);&#13;
        } else {&#13;
            this.addNewSection(page);&#13;
            sectionIterator++;&#13;
            this.appendButtonToSection(button, sectionIterator);&#13;
        }&#13;
&#13;
        return sectionIterator&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.appendButtonToSection = function (button, sectionIterator) {&#13;
        this.actualSections[sectionIterator].find(".buttons").append(button.getView());&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.addNewSection = function (page) {&#13;
        var $section = this.getSection(page.getSectionName(), page.getSectionClassName());&#13;
        this.actualSectionsNames.push(page.getSectionClassName());&#13;
        this.actualSections.push($section);&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.getSection = function (sectionName, cssClass) {&#13;
        var $section = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $section.addClass(cssClass);&#13;
        $section.addClass("section");&#13;
&#13;
        var $sectionName = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $sectionName.text(sectionName);&#13;
        $sectionName.addClass(presenter.CSS_CLASSES.SECTION_NAME);&#13;
&#13;
        var $sectionButtons = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $sectionButtons.addClass("buttons");&#13;
&#13;
        $section.append($sectionName);&#13;
        $section.append($sectionButtons);&#13;
&#13;
        return $section;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shouldAddLeftHellip = function () {&#13;
        return this.leftSideIndex !== 0;&#13;
    };&#13;
&#13;
    presenter.NavigationManager.prototype.shouldAddRightHellip = function () {&#13;
        var buttonsWithoutNavigation = presenter.configuration.numberOfButtons - 2;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            if (presenter.configuration.userButtonsNumber == 1) {&#13;
                return this.leftSideIndex + buttonsWithoutNavigation - this.hellipsCount &lt; presenter.configuration.numberOfPages - 1;&#13;
            }&#13;
        }&#13;
        return this.leftSideIndex + buttonsWithoutNavigation - this.hellipsCount &lt; presenter.configuration.numberOfPages;&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.isPreview = false;&#13;
        presenter.runLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.isPreview = true;&#13;
        presenter.currentPageIndex = 0;&#13;
        presenter.runLogic(view, model);&#13;
    };&#13;
&#13;
    function deleteCommands () {&#13;
        delete presenter.setState;&#13;
        delete presenter.getState;&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeNumberAndWidthOfButtons(model);&#13;
        upgradedModel = presenter.upgradeDefaultOrder(upgradedModel);&#13;
        upgradedModel = presenter.upgradeLangTag(upgradedModel);&#13;
        return presenter.upgradeSpeechTexts(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeNumberAndWidthOfButtons = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.userButtonsWidth == undefined) {&#13;
            upgradedModel["userButtonsWidth"] = "";&#13;
        }&#13;
&#13;
        if(model.userButtonsNumber == undefined) {&#13;
            upgradedModel["userButtonsNumber"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeDefaultOrder = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if(model.defaultOrder === undefined) {&#13;
            upgradedModel["defaultOrder"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeLangTag = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] =  '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!model['speechTexts']) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                PreviousPage: {PreviousPage: ""},&#13;
                ShowPreviousPages: {ShowPreviousPages: ""},&#13;
                Title: {Title: ""},&#13;
                GoToPage: {GoToPage: ""},&#13;
                ShowNextPages: {ShowNextPages: ""},&#13;
                NextPage: {NextPage: ""},&#13;
            }&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            PreviousPage: presenter.DEFAULT_TTS_PHRASES.PreviousPage,&#13;
            ShowPreviousPages: presenter.DEFAULT_TTS_PHRASES.ShowPreviousPages,&#13;
            Title: presenter.DEFAULT_TTS_PHRASES.Title,&#13;
            GoToPage: presenter.DEFAULT_TTS_PHRASES.GoToPage,&#13;
            ShowNextPages: presenter.DEFAULT_TTS_PHRASES.ShowNextPages,&#13;
            NextPage: presenter.DEFAULT_TTS_PHRASES.NextPage,&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            PreviousPage: presenter.getSpeechTextProperty(&#13;
                speechTexts.PreviousPage.PreviousPage,&#13;
                presenter.speechTexts.PreviousPage),&#13;
            ShowPreviousPages: presenter.getSpeechTextProperty(&#13;
                speechTexts.ShowPreviousPages.ShowPreviousPages,&#13;
                presenter.speechTexts.ShowPreviousPages),&#13;
            Title: presenter.getSpeechTextProperty(&#13;
                speechTexts.Title.Title,&#13;
                presenter.speechTexts.Title),&#13;
            GoToPage: presenter.getSpeechTextProperty(&#13;
                speechTexts.GoToPage.GoToPage,&#13;
                presenter.speechTexts.GoToPage),&#13;
            ShowNextPages: presenter.getSpeechTextProperty(&#13;
                speechTexts.ShowNextPages.ShowNextPages,&#13;
                presenter.speechTexts.ShowNextPages),&#13;
            NextPage: presenter.getSpeechTextProperty(&#13;
                speechTexts.NextPage.NextPage,&#13;
                presenter.speechTexts.NextPage)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getSpeechTextProperty = function (rawValue, defaultValue) {&#13;
        if (rawValue === undefined || rawValue === null) {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        var value = rawValue.trim();&#13;
        if (value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.runLogic = function (view, model) {&#13;
    	presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.assessments-navigation-bar-wrapper');&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        var validatedModel = presenter.validateModel(upgradedModel);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[validatedModel.errorCode], validatedModel.errorData);&#13;
            deleteCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        presenter.configuration = validatedModel;&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$wrapper);&#13;
&#13;
        presenter.calculateObjectsSizes();&#13;
&#13;
        presenter.initializeAddon();&#13;
&#13;
        if (presenter.isPreview) {&#13;
            presenter.navigationManager.buttons[0].setAsCurrent();&#13;
        } else {&#13;
            presenter.navigationManager.moveToCurrentPage();&#13;
        }&#13;
&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    function removeMockupDOM () {&#13;
        presenter.$wrapper.find(".navigation-buttons-first").remove();&#13;
        presenter.$wrapper.find(".navigation-buttons-last").remove();&#13;
        presenter.$wrapper.find(".sections").remove();&#13;
    }&#13;
&#13;
    presenter.initializeAddon = function () {&#13;
        removeMockupDOM();&#13;
&#13;
        presenter.sections = new presenter.Sections(presenter.configuration.sections);&#13;
        presenter.navigationManager = new presenter.NavigationManager();&#13;
&#13;
        presenter.navigationManager.setSections();&#13;
    };&#13;
&#13;
    function calculateMaxNumberOfButtons () {&#13;
        var numberOfButtons;&#13;
        if (presenter.configuration.userButtonsNumber) {&#13;
            numberOfButtons = presenter.configuration.maxElementCount &gt; (presenter.configuration.userButtonsNumber + 2) ?&#13;
                (presenter.configuration.userButtonsNumber + 2) : presenter.configuration.maxElementCount;&#13;
&#13;
            if (numberOfButtons &gt; presenter.configuration.numberOfPages + 2) {&#13;
                numberOfButtons = (presenter.configuration.numberOfPages + 2);&#13;
            }&#13;
        } else {&#13;
            numberOfButtons = presenter.configuration.maxElementCount &gt; (presenter.configuration.numberOfPages + 2) ?&#13;
                (presenter.configuration.numberOfPages + 2) : presenter.configuration.maxElementCount;&#13;
        }&#13;
&#13;
        presenter.configuration.numberOfButtons = numberOfButtons;&#13;
        presenter.configuration.navigationLeftIndex = 0;&#13;
        presenter.configuration.navigationRightIndex = numberOfButtons - 1;&#13;
    }&#13;
&#13;
    function calculateButtonsSize(elementDistances) {&#13;
        var elementWidth;&#13;
        if (presenter.configuration.userButtonsWidth) {&#13;
            elementWidth = presenter.configuration.userButtonsWidth;&#13;
        } else {&#13;
            elementWidth = parseInt(presenter.$wrapper.width() / presenter.configuration.numberOfButtons - elementDistances.horizontal, 10);&#13;
        }&#13;
&#13;
        var horizontalGap = presenter.$wrapper.width() - (elementWidth + elementDistances.horizontal) * presenter.configuration.maxElementCount;&#13;
&#13;
        presenter.configuration.sizes = {&#13;
            elementWidth: elementWidth,&#13;
            horizontalGap: horizontalGap&#13;
        };&#13;
    }&#13;
&#13;
    presenter.calculateObjectsSizes =   function() {&#13;
        var $element = presenter.$wrapper.find("." + presenter.CSS_CLASSES.PREVIOUS);&#13;
&#13;
        var elementDimensions = DOMOperationsUtils.getOuterDimensions($element);&#13;
        var elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
&#13;
        var elementBaseWidth;&#13;
&#13;
        if (presenter.configuration.userButtonsWidth) {&#13;
            elementBaseWidth = presenter.configuration.userButtonsWidth;&#13;
        } else {&#13;
            elementBaseWidth = parseInt($element.width(), 10) + elementDistances.horizontal;&#13;
        }&#13;
        presenter.configuration.maxElementCount = parseInt((presenter.$wrapper.width()) / elementBaseWidth, 10) - 4;&#13;
&#13;
        calculateMaxNumberOfButtons();&#13;
        calculateButtonsSize(elementDistances);&#13;
    };&#13;
&#13;
    presenter.calculateNumberOfPages = function (sections) {&#13;
        return sections.reduce(function (result, section) {&#13;
            return result + section.pages.length;&#13;
        }, 0);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedSections = presenter.validateSections(model["Sections"]);&#13;
&#13;
        if (!validatedSections.isValid) {&#13;
            return validatedSections;&#13;
        }&#13;
&#13;
        var numberOfPages = presenter.calculateNumberOfPages(validatedSections.sections);&#13;
&#13;
        var validateButtonsNumber = presenter.parseButtonsNumber(model["userButtonsNumber"], numberOfPages);&#13;
        if (!validateButtonsNumber.isValid) {&#13;
            return validateButtonsNumber;&#13;
        }&#13;
&#13;
        var validateButtonsWidth = presenter.parseButtonsWidth(model["userButtonsWidth"]);&#13;
        if (!validateButtonsNumber.isValid) {&#13;
            return validateButtonsNumber;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonID: model["ID"],&#13;
            sections: validatedSections.sections,&#13;
            addClassAreAllAttempted: ModelValidationUtils.validateBoolean(model["addClassAreAllAttempted"]),&#13;
            defaultOrder: ModelValidationUtils.validateBoolean(model["defaultOrder"]),&#13;
            userButtonsNumber: validateButtonsNumber.value,&#13;
            userButtonsWidth: validateButtonsWidth.value,&#13;
            numberOfPages: numberOfPages&#13;
        };&#13;
    };&#13;
&#13;
    presenter.parseButtonsNumber = function (value, numberOfPages) {&#13;
        var buttonsNumber = presenter.parseNumericProperty(value, "S_06", "S_07");&#13;
&#13;
        if (!buttonsNumber.isValid) {&#13;
            return buttonsNumber;&#13;
        }&#13;
&#13;
        if (buttonsNumber.value &amp;&amp; buttonsNumber.value &gt; numberOfPages) {&#13;
            return getErrorObject("S_08");&#13;
        }&#13;
&#13;
        return buttonsNumber;&#13;
    };&#13;
&#13;
    presenter.parseButtonsWidth = function (value) {&#13;
        return presenter.parseNumericProperty(value, "S_09", "S_10");&#13;
    };&#13;
&#13;
    presenter.parseNumericProperty = function (value, belowZeroError, nanError) {&#13;
        var trimmedValue = value.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(trimmedValue)) {&#13;
            return {&#13;
                isValid: true,&#13;
                value: undefined&#13;
            };&#13;
        }&#13;
&#13;
        var parsedValue = Number(trimmedValue);&#13;
&#13;
        if (isNaN(parsedValue)) {&#13;
            return getErrorObject(nanError);&#13;
        }&#13;
&#13;
        if (parsedValue &lt;= 0) {&#13;
            return getErrorObject(belowZeroError);&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            value: parseInt(parsedValue, 10)&#13;
        };&#13;
    };&#13;
&#13;
    function isNotValid (element) {&#13;
        return element.isValid === false;&#13;
    }&#13;
&#13;
    function isSectionPagesIntersecting (pagesA, pagesB) {&#13;
        return pagesA.some(function (element) {&#13;
            return this.indexOf(element) != -1;&#13;
        }, pagesB);&#13;
    }&#13;
&#13;
&#13;
    function validateSectionsIntersecting (sections) {&#13;
        var firstSection;&#13;
        var secondSection;&#13;
        var result = sections.every(function (section, sectionIndex) {&#13;
            for (var i = 0; i &lt; this.length; i++) {&#13;
                if (sectionIndex == i) {&#13;
                    continue;&#13;
                }&#13;
&#13;
                if (isSectionPagesIntersecting(section.pages, this[i].pages)) {&#13;
                    firstSection = sectionIndex;&#13;
                    secondSection = i;&#13;
                    return false;&#13;
                }&#13;
            }&#13;
&#13;
            return true;&#13;
        }, sections);&#13;
&#13;
        return {&#13;
            isValid: result,&#13;
            firstSection: (firstSection + 1),&#13;
            secondSection: (secondSection + 1)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateSections = function (sections) {&#13;
        sections = sections.trim();&#13;
        if (ModelValidationUtils.isStringEmpty(sections)) {&#13;
            return getErrorObject("S_00");&#13;
        }&#13;
&#13;
        var parsedSections = Helpers.splitLines(sections).map(getTrimmedStringElement).map(parseSection);&#13;
        var notValidSections = parsedSections.filter(isNotValid);&#13;
&#13;
        if (notValidSections.length &gt; 0) {&#13;
            return notValidSections[0];&#13;
        }&#13;
&#13;
        var validatedSections = validateSectionsIntersecting(parsedSections);&#13;
&#13;
        if (!validatedSections.isValid) {&#13;
            return getErrorObject("S_05", {&#13;
                section_1: validatedSections.firstSection,&#13;
                section_2: validatedSections.secondSection&#13;
            });&#13;
        }&#13;
&#13;
        parsedSections.map(function (element) {&#13;
            delete element.isValid;&#13;
            return element;&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            sections: parsedSections&#13;
        };&#13;
    };&#13;
&#13;
    function getTrimmedStringElement(element) {&#13;
        return element.trim();&#13;
    }&#13;
&#13;
    function parseDescriptions(descriptions, expectedLength, sectionIndex) {&#13;
        if (ModelValidationUtils.isStringEmpty(descriptions)) {&#13;
            return getErrorObject("S_03", {section: sectionIndex});&#13;
        }&#13;
&#13;
        var parsedDescriptions = descriptions.split(",").map(getTrimmedStringElement);&#13;
&#13;
        if (parsedDescriptions.length &gt; expectedLength) {&#13;
            return getErrorObject("S_04", {section: sectionIndex});&#13;
        }&#13;
&#13;
        if (parsedDescriptions.length &lt; expectedLength) {&#13;
            return getErrorObject("S_03", {section: sectionIndex});&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            descriptions: parsedDescriptions&#13;
        };&#13;
    }&#13;
&#13;
    presenter.parseSectionButtonsCssClassNames = function (cssClasses, sectionIndex) {&#13;
        if (ModelValidationUtils.isStringEmpty(cssClasses)) {&#13;
            return getErrorObject("S_11", {section: sectionIndex});&#13;
        }&#13;
&#13;
        var parsedCssClasses = cssClasses.split(",").map(getTrimmedStringElement);&#13;
        var cssClassesWithoutDuplication = removeDuplicatedCssClassNames(parsedCssClasses);&#13;
&#13;
        for (var i = 0; i &lt; cssClassesWithoutDuplication.length; i++) {&#13;
            if (ModelValidationUtils.isStringEmpty(cssClassesWithoutDuplication[i])) {&#13;
                return getErrorObject("S_11", {section: sectionIndex});&#13;
            }&#13;
&#13;
            if (!isValidClassName(cssClassesWithoutDuplication[i])) {&#13;
                return getErrorObject("S_12", {section: sectionIndex});&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            cssClasses: cssClassesWithoutDuplication&#13;
        };&#13;
    }&#13;
&#13;
    function removeDuplicatedCssClassNames(cssClassNames) {&#13;
        return [...new Set(cssClassNames)];&#13;
    }&#13;
&#13;
    function isValidClassName(className) {&#13;
        return /^[a-z_-][a-z\d_-]*$/i.test(className);&#13;
    }&#13;
&#13;
    function changeToStringOneBigger (element) {&#13;
        return ((element + 1) + "");&#13;
    }&#13;
&#13;
    function parseSection(section, sectionIndex) {&#13;
        section = section.split(";").map(getTrimmedStringElement);&#13;
        var len = section.length;&#13;
        var sectionName = "";&#13;
        var descriptions = [];&#13;
        var sectionButtonsCssClassNames = {cssClasses: []};&#13;
&#13;
        var pages = presenter.parsePagesFromRange(section[0], (sectionIndex + 1));&#13;
&#13;
        if (!pages.isValid) {&#13;
            return pages;&#13;
        }&#13;
&#13;
        if (len &gt; 1) {&#13;
            sectionName = getTrimmedStringElement(section[1]);&#13;
        }&#13;
&#13;
        if (len &gt; 2) {&#13;
            descriptions = parseDescriptions(section[2], pages.pages.length, (sectionIndex + 1));&#13;
            if (!descriptions.isValid) {&#13;
                return descriptions;&#13;
            }&#13;
        } else {&#13;
            descriptions = {&#13;
                descriptions: pages.pages.map(changeToStringOneBigger)&#13;
            };&#13;
        }&#13;
&#13;
        if (len &gt; 3) {&#13;
            sectionButtonsCssClassNames = presenter.parseSectionButtonsCssClassNames(section[3], (sectionIndex + 1));&#13;
            if (!sectionButtonsCssClassNames.isValid) {&#13;
                return sectionButtonsCssClassNames;&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            pages: pages.pages,&#13;
            sectionName: sectionName,&#13;
            pagesDescriptions: descriptions.descriptions,&#13;
            sectionButtonsCssClassNames: sectionButtonsCssClassNames.cssClasses,&#13;
        }&#13;
    }&#13;
&#13;
    function parseDashRange (section) {&#13;
        var result = [];&#13;
        var ranges = section.split("-");&#13;
&#13;
        var min = Math.min(ranges[0], ranges[1]);&#13;
        var max = Math.max(ranges[0], ranges[1]);&#13;
&#13;
        for (; max &gt;= min; min++) {&#13;
            result.push((min - 1));&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    function changeToIndexesZeroBased(element) {&#13;
        return (element - 1);&#13;
    }&#13;
&#13;
    function parseCommaSeparatedRange (section) {&#13;
        return section.split(",").map(getTrimmedStringElement).map(Number).map(changeToIndexesZeroBased);&#13;
    }&#13;
&#13;
    function getArrayOfPagesFromSection (section) {&#13;
        // 1-4 -&gt; true,&#13;
        // asdfa-123980fda -&gt; false,&#13;
        // 1, 2, 3, 4 -&gt; false&#13;
        var dashRangeTest = /^\d+-\d+$/;&#13;
&#13;
        if (dashRangeTest.test(section)) {&#13;
            return parseDashRange(section);&#13;
        } else {&#13;
            return parseCommaSeparatedRange(section);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isFloat = function (number) {&#13;
        return number % 1 !== 0;&#13;
    };&#13;
&#13;
    function isNegativeOrZero (number) {&#13;
        return number &lt; 0;&#13;
    }&#13;
&#13;
&#13;
    presenter.parsePagesFromRange = function (section, sectionIndex) {&#13;
        var pages = getArrayOfPagesFromSection(section);&#13;
&#13;
        for (var i = 0; i &lt; pages.length; i++) {&#13;
            if (isNaN(pages[i])) {&#13;
                return getErrorObject("S_02", {section: sectionIndex});&#13;
            }&#13;
&#13;
            if (presenter.isFloat(pages[i])) {&#13;
                return getErrorObject("S_01", {section: sectionIndex});&#13;
            }&#13;
&#13;
            if (isNegativeOrZero(pages[i])) {&#13;
                return getErrorObject("S_01", {section: sectionIndex});&#13;
            }&#13;
        }&#13;
&#13;
        var sortedPages = pages.sort(function (a,b) {&#13;
            return a - b;&#13;
        });&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            pages: sortedPages&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        var pages = presenter.sections.allPages.map(function (page) {&#13;
            return {&#13;
                page: page.page,&#13;
                description: page.description,&#13;
                sectionName: page.sectionName,&#13;
                sectionCssClass: page.sectionCssClass,&#13;
                buttonCssClassNames: page.buttonCssClassNames,&#13;
                isBookmarkOn: page.isBookmarkOn&#13;
            };&#13;
        });&#13;
&#13;
        var state = {&#13;
            pages: pages,&#13;
            attemptedPages: presenter.sections.attemptedPages&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    function getRestorePagesObjectArray (pages) {&#13;
        var restoredPages = pages.map(function (page) {&#13;
            var restoredPage = new presenter.Page(&#13;
                page.page, page.description, page.sectionName,&#13;
                page.sectionCssClass, page.buttonCssClassNames&#13;
            );&#13;
            restoredPage.setBookmarkOn(page.isBookmarkOn);&#13;
&#13;
            return restoredPage;&#13;
        });&#13;
&#13;
        if (presenter.sections.allPages.length &gt; 0) {&#13;
            var pagesIndexesInSections = presenter.sections.allPages.map(function(page) {&#13;
                return page.page;&#13;
            });&#13;
&#13;
            return restoredPages.filter(function (page) {&#13;
                return pagesIndexesInSections.indexOf(page.page) !== -1;&#13;
            });&#13;
        } else {&#13;
            // if all pages are empty, then just return given state&#13;
            return restoredPages;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (state === null || state === "" || state === undefined) {&#13;
            return;&#13;
        }&#13;
        if (presenter.randomizeLesson === false&#13;
        || presenter.assessmentUser == presenter.ASSESSMENT_USER_TYPES.TEACHER) {&#13;
            //Randomize lesson == false and assessmentUser == teacher override state&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
        var upgradedState = presenter.upgradeState(parsedState);&#13;
&#13;
        var restoredPages = getRestorePagesObjectArray(upgradedState.pages);&#13;
        // This if fix on wrong state when filter of sections worked wrong&#13;
        presenter.sections.allPages = restoredPages.length === presenter.sections.allPages.length ? restoredPages : presenter.sections.allPages;&#13;
        presenter.navigationManager.restartLeftSideIndex();&#13;
        presenter.navigationManager.setSections();&#13;
        presenter.navigationManager.moveToCurrentPage();&#13;
&#13;
        if (presenter.keyboardControllerObject != null) {&#13;
            presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
&#13;
            var keyboardElements = presenter.keyboardControllerObject.keyboardNavigationElements;&#13;
            for (var i = 0; i &lt; keyboardElements.length; i++) {&#13;
                if ($(keyboardElements[i]).hasClass(presenter.CSS_CLASSES.CURRENT_PAGE)) {&#13;
                    presenter.keyboardControllerObject.keyboardNavigationCurrentElementIndex = i;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.sections.attemptedPages = upgradedState.attemptedPages;&#13;
        presenter.navigationManager.markButtonsWithAttempted(presenter.sections.attemptedPages);&#13;
    };&#13;
&#13;
    presenter.upgradeState = function (state) {&#13;
        var upgradedState = presenter.upgradeAttemptedPages(state);&#13;
        return presenter.upgradePagesButtonCssClassNames(upgradedState);&#13;
    };&#13;
&#13;
    presenter.upgradeAttemptedPages = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        if(state.attemptedPages === undefined) {&#13;
            upgradedState["attemptedPages"] = [];&#13;
        }&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    presenter.upgradePagesButtonCssClassNames = function (state) {&#13;
        var upgradedState = {};&#13;
        jQuery.extend(true, upgradedState, state); // Deep copy of model object&#13;
&#13;
        if (upgradedState.pages) {&#13;
            upgradedState.pages.map(function (page) {&#13;
                if(page.buttonCssClassNames === undefined) {&#13;
                    page["buttonCssClassNames"] = [];&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        return upgradedState;&#13;
    };&#13;
&#13;
    function getPlayerIndex(lessonIndex) {&#13;
        var mapping = presenter.playerController.getPagesMapping();&#13;
        return mapping[lessonIndex];&#13;
    }&#13;
&#13;
    function currentPageAreAllAttempted() {&#13;
        var playerIndex = getPlayerIndex(presenter.currentPageIndex);&#13;
        if(presenter.presentation.getPage(playerIndex).isReportable()){&#13;
&#13;
            var modules = getAllModulesImplementingIsAttempted(playerIndex);&#13;
&#13;
            if(areAllModulesAttempted(modules)){&#13;
                presenter.sections.addClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
            }else{&#13;
                presenter.sections.removeClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function getAllModulesImplementingIsAttempted(page) {&#13;
        var ids = presenter.playerController.getPresentation().getPage(page).getModulesAsJS(),&#13;
            modules = [];&#13;
&#13;
        for(var i = 0; i &lt; ids.length; i++){&#13;
            var currentModule = presenter.playerController.getModule(ids[i]);&#13;
&#13;
            if (currentModule &amp;&amp; currentModule.isAttempted !== undefined) {&#13;
                modules.push(currentModule);&#13;
            }&#13;
        }&#13;
&#13;
        return modules;&#13;
    }&#13;
&#13;
    function areAllModulesAttempted(modules) {&#13;
        if(modules.length === 0) return false;&#13;
&#13;
        return modules.every(module =&gt; module.isAttempted());&#13;
    }&#13;
&#13;
    presenter.areAllModulesAttempted = function () {&#13;
        currentPageAreAllAttempted();&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.sections.removeClassAllAttemptedToPage(presenter.currentPageIndex);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        switch (eventName) {&#13;
            case "PageLoaded":&#13;
                if (presenter.configuration.addClassAreAllAttempted) {&#13;
                    presenter.areAllModulesAttempted();&#13;
                }&#13;
                break;&#13;
            case "ValueChanged":&#13;
                presenter.handleValueChanged(eventData);&#13;
                break;&#13;
            case "ShowAnswers":&#13;
                presenter.showAnswers();&#13;
                break;&#13;
            case "HideAnswers":&#13;
                presenter.hideAnswers();&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleValueChanged = function (eventData) {&#13;
        if (presenter.configuration.addClassAreAllAttempted &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.areAllModulesAttempted();&#13;
        }&#13;
        if (eventData.item === "Lesson Reset") {&#13;
            presenter.navigationManager.removeBookmarksFromButtons();&#13;
            presenter.navigationManager.removeAttemptedFromButtons();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    function AssesmentsNavigationKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    AssesmentsNavigationKeyboardController.prototype.constructor = AssesmentsNavigationKeyboardController;&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.selectAction = function () {&#13;
        var $element = this.getTarget(this.keyboardNavigationCurrentElement, true);&#13;
        $element[0].click();&#13;
        if ($element.hasClass(presenter.CSS_CLASSES.TURN_BACK) || $element.hasClass(presenter.CSS_CLASSES.TURN_FORWARD)) {&#13;
            AssesmentsNavigationKeyboardController.prototype.setNewElements.call(this);&#13;
        };&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.setNewElements = function () {&#13;
          if (presenter.isTTS()) {&#13;
              KeyboardController.prototype.setElements.call(this, presenter.getElementsForTTS());&#13;
          } else {&#13;
              KeyboardController.prototype.setElements.call(this, presenter.getElementsForKeyboardNavigation());&#13;
          }&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.switchElement = function (move) {&#13;
        var new_position_index = this.keyboardNavigationCurrentElementIndex + move;&#13;
        if (new_position_index &lt; this.keyboardNavigationElementsLen &amp;&amp; new_position_index &gt;= 0) {&#13;
            KeyboardController.prototype.markCurrentElement.call(this, new_position_index);&#13;
        }&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.enter = function (event) {&#13;
        if (presenter.isTTS() &amp;&amp; presenter.isFirstEnter) {&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getElementsForTTS());&#13;
            presenter.isFirstEnter = false;&#13;
        }&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.exitWCAGMode = function () {&#13;
        presenter.isFirstEnter = true;&#13;
        KeyboardController.prototype.setElements.call(this, presenter.getElementsForKeyboardNavigation());&#13;
        KeyboardController.prototype.exitWCAGMode.call(this);&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject = new AssesmentsNavigationKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForTTS = function () {&#13;
        return this.$view.find(".element:visible, .section_name:visible").filter(":not(.inactive)");&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        return this.$view.find(".element:visible").filter(":not(.inactive)");&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event)&#13;
    };&#13;
&#13;
    AssesmentsNavigationKeyboardController.prototype.readCurrentElement = function () {&#13;
        var $element = this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
        if ($element.hasClass(presenter.CSS_CLASSES.PREVIOUS)) {&#13;
            presenter.speak(presenter.speechTexts.PreviousPage);&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.TURN_BACK)) {&#13;
            presenter.speak(presenter.speechTexts.ShowPreviousPages);&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.SECTION_NAME)) {&#13;
            presenter.speak(getSpeechForSectionName($element));&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.BUTTON)) {&#13;
            presenter.speak(getSpeechForGoToPage($element));&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.TURN_FORWARD)) {&#13;
            presenter.speak(presenter.speechTexts.ShowNextPages);&#13;
        } else if ($element.hasClass(presenter.CSS_CLASSES.NEXT)) {&#13;
            presenter.speak(presenter.speechTexts.NextPage);&#13;
        }&#13;
    };&#13;
&#13;
    getSpeechForSectionName = function (element) {&#13;
        return `${presenter.speechTexts.Title} ${element[0].innerText}`;&#13;
    };&#13;
&#13;
    getSpeechForGoToPage = function (element) {&#13;
        let pageName = element.find("." + presenter.CSS_CLASSES.BUTTON_TEXT).val();&#13;
        return `${presenter.speechTexts.GoToPage} ${element[0].innerText}`;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function Assessments_Navigation_Bar_getTextToSpeechOrNull(playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.speak = function Assessments_Navigation_Bar_speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isTTS = function () {&#13;
        return presenter.getTextToSpeechOrNull(presenter.playerController) &amp;&amp; presenter.isWCAGOn;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>