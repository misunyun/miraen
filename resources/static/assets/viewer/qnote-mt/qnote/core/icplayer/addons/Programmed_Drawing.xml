<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Programmed_Drawing" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property name="Rows" nameLabel="Programmed_Drawing_property_rows" type="string"/>
        <property name="Columns" nameLabel="Programmed_Drawing_property_columns" type="string"/>
        <property name="Color" nameLabel="Programmed_Drawing_property_color" type="string"/>
        <property name="Initial design" nameLabel="Programmed_Drawing_property_initial_design" type="text"/>
	</model>
<css>.cellGridWrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.cellGrid {&#13;
    margin: 0;&#13;
    padding: 0;&#13;
    border: none;&#13;
}&#13;
&#13;
.cell-element {&#13;
    float: left;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    color: black;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.cell-element-wrapper {&#13;
    float: left;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    border-style: solid;&#13;
    border-color: black;&#13;
    border-width: 1px;&#13;
    -webkit-box-sizing:border-box;&#13;
    -moz-box-sizing:border-box;&#13;
    box-sizing:border-box;&#13;
}&#13;
</css><view>&lt;div class="cellGridWrapper"&gt;&#13;
    &lt;div class="cellGrid"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="cellGridWrapper"&gt;&#13;
    &lt;div class="cellGrid"&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonProgrammed_Drawing_create(){&#13;
&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.lastEvent = null;&#13;
&#13;
&#13;
    var viewContainer;&#13;
    var gridContainerWrapper;&#13;
    var gridContainer;&#13;
&#13;
    function initGrid(model, preview) {&#13;
        var rows = presenter.configuration.rows;&#13;
        var columns = presenter.configuration.columns;&#13;
&#13;
        for(var row = 0; row &lt; rows; row++) {&#13;
            for(var column = 0; column &lt; columns; column++) {&#13;
                var wrapperElement = $(document.createElement('div'));&#13;
                wrapperElement.addClass('cell-element-wrapper');&#13;
&#13;
                var selectableElement = $(document.createElement('div'));&#13;
                selectableElement.addClass('cell-element');&#13;
                selectableElement.attr('coordinates', (column+1)+"-"+((rows-row)));&#13;
&#13;
                wrapperElement.append(selectableElement);&#13;
                gridContainer.append(wrapperElement);&#13;
            }&#13;
        }&#13;
&#13;
        var gridContainerWrapperDimensions = getElementDimensions(gridContainerWrapper);&#13;
        var gridContainerWrapperDistances = calculateInnerDistance(gridContainerWrapperDimensions);&#13;
&#13;
        var wrapperDimensions = getElementDimensions(gridContainerWrapper.find('.cell-element-wrapper:first')[0]);&#13;
        var wrapperDistances = calculateInnerDistance(wrapperDimensions);&#13;
&#13;
        var elementDimensions = getElementDimensions(gridContainerWrapper.find('.cell-element:first')[0]);&#13;
        var elementDistances = calculateInnerDistance(elementDimensions);&#13;
&#13;
        var wrapperWidth = parseInt((model.Width - gridContainerWrapperDistances.horizontal - (wrapperDistances.horizontal * columns)) / columns, 10);&#13;
        var wrapperHeight = parseInt((model.Height - gridContainerWrapperDistances.vertical - (wrapperDistances.vertical * rows)) / rows, 10);&#13;
&#13;
        var elementWidth = wrapperWidth - elementDistances.horizontal;&#13;
        var elementHeight = wrapperHeight - elementDistances.vertical;&#13;
&#13;
        var newContainerWrapperHeight = wrapperHeight * rows + wrapperDistances.vertical * rows;&#13;
        var newContainerWrapperWidth = wrapperWidth * columns + wrapperDistances.horizontal * columns;&#13;
&#13;
        var verticalGapHeight = model.Height - newContainerWrapperHeight;&#13;
        var horizontalGapHeight = model.Width - newContainerWrapperWidth;&#13;
&#13;
        gridContainerWrapper.css('height', model.Height + 'px');&#13;
        gridContainerWrapper.css('width', model.Width + 'px');&#13;
        gridContainer.css('height', model.Height + 'px');&#13;
        gridContainer.css('width', (parseInt(model.Width)+parseInt(elementWidth/2)) + 'px');&#13;
&#13;
        var vertical = verticalGapHeight / rows;&#13;
        var horizontal = horizontalGapHeight / columns;&#13;
&#13;
        gridContainer.find(".cell-element-wrapper").each(function() {&#13;
            var index = $(this).index();&#13;
            var selectedRow = parseInt(index / columns, 10);&#13;
            var selectedColumn = parseInt(index % columns, 10);&#13;
&#13;
            $(this).width(wrapperWidth + horizontal + 2);&#13;
            $(this).height(wrapperHeight + vertical + 2);&#13;
&#13;
            var selectableElement = $(this).find('.cell-element:first');&#13;
&#13;
            var lineHeight = selectedRow === rows -1 ? elementHeight + verticalGapHeight : elementHeight;&#13;
            selectableElement.css('line-height', lineHeight + "px");&#13;
        });&#13;
    }&#13;
&#13;
    function getElementDimensions(element) {&#13;
        element = $(element);&#13;
&#13;
        return {&#13;
            border:{&#13;
                top:parseInt(element.css('border-top-width'), 10),&#13;
                bottom:parseInt(element.css('border-bottom-width'), 10),&#13;
                left:parseInt(element.css('border-left-width'), 10),&#13;
                right:parseInt(element.css('border-right-width'), 10)&#13;
            },&#13;
            margin:{&#13;
                top:parseInt(element.css('margin-top'), 10),&#13;
                bottom:parseInt(element.css('margin-bottom'), 10),&#13;
                left:parseInt(element.css('margin-left'), 10),&#13;
                right:parseInt(element.css('margin-right'), 10)&#13;
            },&#13;
            padding:{&#13;
                top:parseInt(element.css('padding-top'), 10),&#13;
                bottom:parseInt(element.css('padding-bottom'), 10),&#13;
                left:parseInt(element.css('padding-left'), 10),&#13;
                right:parseInt(element.css('padding-right'), 10)&#13;
            }&#13;
        };&#13;
    }&#13;
&#13;
    function calculateInnerDistance(elementDimensions) {&#13;
        var vertical = elementDimensions.border.top + elementDimensions.border.bottom;&#13;
        vertical += elementDimensions.margin.top + elementDimensions.margin.bottom;&#13;
        vertical += elementDimensions.padding.top + elementDimensions.padding.top;&#13;
&#13;
        var horizontal = elementDimensions.border.left + elementDimensions.border.right;&#13;
        horizontal += elementDimensions.margin.left + elementDimensions.margin.right;&#13;
        horizontal += elementDimensions.padding.left + elementDimensions.padding.right;&#13;
&#13;
        return {&#13;
            vertical : vertical,&#13;
            horizontal : horizontal&#13;
        };&#13;
    }&#13;
&#13;
    presenter.validateInstructions = function (modelInstructions) {&#13;
        var instructions = modelInstructions.split("\n");&#13;
        for(var i=0; i &lt; instructions.length; i++) {&#13;
            var instruction = instructions[i].split(' ');&#13;
            presenter.colorSquare(instruction[0], instruction[1]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.colorSquareCommand = function (command) {&#13;
        presenter.colorSquare(command[0], command[1]);&#13;
    };&#13;
&#13;
    presenter.colorSquare = function (x, y){&#13;
        var coordinates = x+"-"+ y,&#13;
            element = presenter.$view.find('.cell-element[coordinates="'+ coordinates +'"]');&#13;
&#13;
        element.css('background-color', presenter.configuration.color);&#13;
        element.attr('colored', 'true');&#13;
    };&#13;
&#13;
    presenter.resetSquareCommand = function (command) {&#13;
        presenter.resetSquare(command[0], command[1]);&#13;
    };&#13;
&#13;
    presenter.resetSquare = function (x, y){&#13;
        var coordinates = x+"-"+ y,&#13;
            element = presenter.$view.find('.cell-element[coordinates="'+ coordinates +'"]');&#13;
&#13;
        element.css('background-color', 'transparent');&#13;
        element.attr('colored', 'false');&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view = $(view);&#13;
        viewContainer = $(view);&#13;
        gridContainerWrapper = viewContainer.find(".cellGridWrapper:first");&#13;
        gridContainer = gridContainerWrapper.find(".cellGrid:first");&#13;
&#13;
        initGrid(model, true);&#13;
&#13;
        if(presenter.configuration.initialDesign){&#13;
            presenter.validateInstructions(presenter.configuration.initialDesign);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        E01: "Columns and rows must be a positive integer"&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validatedIsVisible = ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            addonID = model['ID'],&#13;
            rows = ModelValidationUtils.validatePositiveInteger(model['Rows']),&#13;
            columns = ModelValidationUtils.validatePositiveInteger(model['Columns']);&#13;
&#13;
        if(!rows.isValid || !columns.isValid){&#13;
            return returnErrorObject('E01');&#13;
        }&#13;
&#13;
        var color = model['Color'];&#13;
        if(color == ''){&#13;
            color = 'black';&#13;
        }&#13;
&#13;
        return {&#13;
            'isError' : false,&#13;
            'isVisible' : validatedIsVisible,&#13;
            'visibleByDefault' : validatedIsVisible,&#13;
            'addonID' : addonID,&#13;
            'rows' : rows.value,&#13;
            'columns' : columns.value,&#13;
            'initialDesign' : model['Initial design'],&#13;
            'color' : color&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getErrorObject = function (errorCode) {&#13;
        return {isValid: false, isError: true, errorCode: errorCode};&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'colorSquare' : presenter.colorSquareCommand,&#13;
            'resetSquare' : presenter.resetSquareCommand,&#13;
            'reset' : presenter.reset&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.resetAll = function () {&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            $(this).css('background-color', 'transparent');&#13;
            $(this).attr('colored', 'false');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.reset = function(){&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            if($(this).attr('colored') == 'true'){&#13;
                var coordinates = $(this).attr('coordinates').split('-');&#13;
                presenter.resetSquare(coordinates[0], coordinates[1]);&#13;
            }&#13;
        });&#13;
&#13;
        if(presenter.configuration.initialDesign){&#13;
            presenter.validateInstructions(presenter.configuration.initialDesign);&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.configuration.visibleByDefault);&#13;
    };&#13;
&#13;
    presenter.getState = function(){&#13;
        var coordinates = [];&#13;
        presenter.$view.find('.cell-element').each(function () {&#13;
            if($(this).attr('colored') == 'true'){&#13;
                coordinates.push($(this).attr('coordinates'));&#13;
            }&#13;
        });&#13;
&#13;
        var state = {&#13;
            'coordinates' : coordinates&#13;
        };&#13;
&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (ModelValidationUtils.isStringEmpty(state)) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsed = JSON.parse(state);&#13;
&#13;
        var coordinates = parsed.coordinates;&#13;
&#13;
        presenter.resetAll();&#13;
&#13;
        if(coordinates){&#13;
            for(var i = 0; i &lt; coordinates.length; i++){&#13;
                var coordinate = coordinates[i].split('-');&#13;
                presenter.colorSquare(coordinate[0], coordinate[1]);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
//    presenter.getErrorCount = function(){&#13;
//    };&#13;
//    presenter.getMaxScore = function(){&#13;
//    };&#13;
//    presenter.getScore = function(){&#13;
//    };&#13;
//    presenter.setShowErrorsMode = function(){&#13;
//    };&#13;
//    presenter.setWorkMode = function(){&#13;
//    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>