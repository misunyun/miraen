<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Navigation_Bar" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property displayName="Show Next and Prev arrows" name="ShowNextPrevArrows" nameLabel="Navigation_Bar_property_show_next_prev_arrows" type="boolean"/>
		<property displayName="Hide Home and Last arrows" name="HideHomeLastArrows" nameLabel="Navigation_Bar_property_show_home_last_arrows" type="boolean"/>
		<property name="Numericals" nameLabel="Navigation_Bar_property_numericals" type="{Western Arabic,Eastern Arabic,Perso-Arabic}"/>
        <property displayName="Styles" name="Styles" nameLabel="Navigation_Bar_property_styles" type="list">
            <property name="Pages" nameLabel="Navigation_Bar_property_pages" type="string"/>
            <property name="Class" nameLabel="Navigation_Bar_property_class" type="string"/>
            <property name="Style" nameLabel="Navigation_Bar_property_style" type="string"/>
        </property>
        <property displayName="Real-time navigationbar-page-ok" name="AddClassNBPageOK" nameLabel="Navigation_Bar_property_add_class_nb_page_ok" type="boolean"/>
        <property displayName="First page as cover" name="firstPageAsCover" nameLabel="Navigation_Bar_property_first_page_as_cover" type="boolean"/>
        <property displayName="Last page separated" name="lastPageSeparated" nameLabel="Navigation_Bar_property_last_page_separated" type="boolean"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Navigation_Bar_property_speech_texts" type="staticlist">
            <property name="GoToPageNumber" nameLabel="Navigation_Bar_property_go_to_page_number" type="staticrow">
                <property name="GoToPageNumber" nameLabel="Navigation_Bar_property_go_to_page_number" type="string"/>
            </property>
            <property name="NextPage" nameLabel="Navigation_Bar_property_go_to_next_page" type="staticrow">
                <property name="NextPage" nameLabel="Navigation_Bar_property_go_to_next_page" type="string"/>
            </property>
            <property name="PrevPage" nameLabel="Navigation_Bar_property_go_to_prev_page" type="staticrow">
                <property name="PrevPage" nameLabel="Navigation_Bar_property_go_to_prev_page" type="string"/>
            </property>
            <property name="Titled" nameLabel="Navigation_Bar_property_titled" type="staticrow">
                <property name="Titled" nameLabel="Navigation_Bar_property_titled" type="string"/>
            </property>
            <property name="DottedRight" nameLabel="Navigation_Bar_property_show_more" type="staticrow">
                <property name="DottedRight" nameLabel="Navigation_Bar_property_show_more" type="string"/>
            </property>
            <property name="DottedLeft" nameLabel="Navigation_Bar_property_show_prev" type="staticrow">
                <property name="DottedLeft" nameLabel="Navigation_Bar_property_show_prev" type="string"/>
            </property>
            <property name="DisabledPage" nameLabel="Navigation_Bar_property_disabled_page" type="staticrow">
                <property name="DisabledPage" nameLabel="Navigation_Bar_property_disabled_page" type="string"/>
            </property>
        </property>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Navigation_Bar_property_lang_attribute" type="string"/>
        <property name="playTitle" nameLabel="Navigation_Bar_property_play_title" type="boolean"/>
        <property displayName="Block not visited pages" name="blockNotVisited" nameLabel="Navigation_Bar_property_block_not_visited" type="boolean"/>
	</model>
<css>.navigationbar-wrapper {&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.navigationbar-wrapper * {&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.navigationbar-wrapper a {&#13;
    text-decoration: none !important;&#13;
}&#13;
&#13;
.navigationbar-wrapper a span {&#13;
    display: block;&#13;
    float: left;&#13;
    text-align: center;&#13;
    white-space: nowrap;&#13;
    text-decoration: none;&#13;
    height: auto;&#13;
    font: 1.5em "Lucida Grande", Geneva, Verdana, Arial, Helvetica, sans-serif;&#13;
    width: 40px;&#13;
}&#13;
&#13;
.navigationbar-element,&#13;
.navigationbar-element-first,&#13;
.navigationbar-element-next,&#13;
.navigationbar-element-previous,&#13;
.navigationbar-element-last {&#13;
    color: #7F7F7F;&#13;
    background-color: #F3F3F3;&#13;
}&#13;
&#13;
.navigationbar-element-current {&#13;
    background-color: #2091AB;&#13;
    color: white;&#13;
}&#13;
&#13;
.navigationbar-element-mouse-hover,&#13;
.navigationbar-element-first-mouse-hover,&#13;
.navigationbar-element-next-mouse-hover,&#13;
.navigationbar-element-previous-mouse-hover,&#13;
.navigationbar-element-last-mouse-hover {&#13;
    background-color: #7F7F7F;&#13;
    color: #F3F3F3;&#13;
}&#13;
&#13;
.navigationbar-element-current-mouse-hover {&#13;
    background-color: #17697B;&#13;
}&#13;
&#13;
.navigationbar-element-first-inactive,&#13;
.navigationbar-element-next-inactive,&#13;
.navigationbar-element-previous-inactive,&#13;
.navigationbar-element-last-inactive {&#13;
    background-color: #80BBC8;&#13;
    color: #C0C0C0;&#13;
}&#13;
&#13;
.navigationbar-element-mouse-click,&#13;
.navigationbar-element-current-mouse-click,&#13;
.navigationbar-element-first-mouse-click,&#13;
.navigationbar-element-next-mouse-click,&#13;
.navigationbar-element-previous-mouse-click,&#13;
.navigationbar-element-last-mouse-click {&#13;
    background-color: #0A7058;&#13;
    color: white;&#13;
}&#13;
&#13;
.navigationbar-wrapper .disabled {&#13;
    color: #C0C0C0;&#13;
}&#13;
&#13;
.navigationbar-wrapper .bookmark {&#13;
    color: red;&#13;
}&#13;
</css><view>&lt;div class="navigationbar-wrapper"&gt;&#13;
    &lt;a title="First page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-first"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a title="Last page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-last"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="navigationbar-wrapper"&gt;&#13;
    &lt;a title="First page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-first"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
    &lt;a title="Last page" href="#"&gt;&#13;
        &lt;span class="navigationbar-element-last"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#13;
    &lt;/a&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonNavigation_Bar_create() {&#13;
    var presenter = function () { };&#13;
    presenter.eventBus = null;&#13;
    presenter.pagesOk = [];&#13;
    presenter.allPagesDisplayed = false;&#13;
    presenter.pageTitles = [];&#13;
    presenter.visitedPages = [];&#13;
    presenter.originalIndex = 0;&#13;
&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.state = {&#13;
        bookmarks: []&#13;
    };&#13;
&#13;
    presenter.__internalElements = {&#13;
        goToPage: goToPage&#13;
    };&#13;
&#13;
    var NAVIGATION_PAGE = {&#13;
        FIRST: 0,&#13;
        LAST: 1,&#13;
        PREVIOUS: 2,&#13;
        NEXT: 3,&#13;
        OTHER: 4&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'E_01': "Pages and Style or Class attribute in 'Styles' must be filled",&#13;
        'E_04': "Pages attribute in Styles may contain only previous, next, first, last and positive integer page numbers",&#13;
        'P_01': "Cannot load module - HTML element doesn't exists"&#13;
    };&#13;
&#13;
    function returnErrorObject(errorCode) {&#13;
        return { isError: true, errorCode: errorCode };&#13;
    }&#13;
&#13;
    var DOTTED_SIDE = {&#13;
        LEFT: { CSSClass: "dotted-element-left" },&#13;
        RIGHT: { CSSClass: "dotted-element-right" }&#13;
    };&#13;
&#13;
    var movedFromIndex,&#13;
        maxElementCount;&#13;
&#13;
    function getLanguage(model) {&#13;
    	if (model['Numericals'] == 'Eastern Arabic') {&#13;
    		return Internationalization.EASTERN_ARABIC;&#13;
    	}&#13;
    	if (model['Numericals'] == 'Perso-Arabic') {&#13;
    		return Internationalization.PERSO_ARABIC;&#13;
    	}&#13;
    	return Internationalization.WESTERN_ARABIC;&#13;
    }&#13;
&#13;
    function getTextVoiceObject (text, lang) { return {text: text, lang: lang}; }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShift, event) {&#13;
        event.preventDefault();&#13;
&#13;
        var elements = presenter.$view.find("span").not("[class*='inactive']");&#13;
&#13;
        function getCurrentPosition() {&#13;
            var pos;&#13;
            $.each(elements, function(i, el) {&#13;
                if ($(el).is("[class*='mouse-hover']")) {&#13;
                    pos = i;&#13;
                    return false;&#13;
                }&#13;
            });&#13;
&#13;
            if (typeof pos === "undefined") {&#13;
                $.each(elements, function(i, el) {&#13;
                    if ($(el).is("[class*='current']")) {&#13;
                        pos = i;&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
            // dotted&#13;
            if (typeof pos === "undefined") {&#13;
                $.each(elements, function(i, el) {&#13;
                    if ($(el).hasClass("navigationbar-dotted-element")) {&#13;
                        pos = i;&#13;
                        return false;&#13;
                    }&#13;
                });&#13;
            }&#13;
&#13;
            return pos;&#13;
        }&#13;
&#13;
        function select(element) {&#13;
            if (!element) return;&#13;
&#13;
            deselect();&#13;
&#13;
            $(element).removeClass('navigationbar-element');&#13;
            $(element).addClass('navigationbar-element-mouse-hover');&#13;
&#13;
            var pageNumber = $(element).attr('data-page-number');&#13;
        }&#13;
&#13;
        function skipToPage() {&#13;
            $(elements[getCurrentPosition()]).trigger('click');&#13;
        }&#13;
&#13;
        function back() {&#13;
            select(elements[getCurrentPosition() - 1]);&#13;
            presenter.playButton(elements[getCurrentPosition()]);&#13;
        }&#13;
&#13;
        function forward() {&#13;
            select(elements[getCurrentPosition() + 1]);&#13;
            presenter.playButton(elements[getCurrentPosition()]);&#13;
        }&#13;
&#13;
        function deselect() {&#13;
            var activeElement = presenter.$view.find('span.navigationbar-element-mouse-hover');&#13;
            activeElement.removeClass('navigationbar-element-mouse-hover');&#13;
            activeElement.addClass('navigationbar-element');&#13;
        }&#13;
&#13;
        switch(keycode) {&#13;
            case 13: // enter&#13;
                if(isShift) { // isShift is true when ctrl or shift is pressed&#13;
                    deselect();&#13;
                } else {&#13;
                    presenter.playButton(elements[getCurrentPosition()]);&#13;
                }&#13;
                break;&#13;
            case 32: // space&#13;
                skipToPage();&#13;
                break;&#13;
            case 37: // left arrow&#13;
                back();&#13;
                break;&#13;
            case 39: // right arrow&#13;
                forward();&#13;
                break;&#13;
            case 27: // escape&#13;
                deselect();&#13;
                break;&#13;
            case 9: // tab&#13;
                if(isShift) {&#13;
                    back();&#13;
                } else {&#13;
                    forward();&#13;
                };&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.presentation = controller.getPresentation();&#13;
        presenter.commander = controller.getCommands();&#13;
        presenter.pageCount = controller.getPresentation().getPageCount();&#13;
        presenter.currentIndex = controller.getCurrentPageIndex();&#13;
        presenter.scoreService = controller.getScore();&#13;
        presenter.eventBus.addEventListener('PageLoaded', this);&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener('closePage', this);&#13;
        presenter.eventBus.addEventListener('visitedPagesUpdate', this);&#13;
&#13;
        reloadVisitedPages();&#13;
        presenter.originalIndex = presenter.playerController.getCurrentPageIndex();&#13;
    };&#13;
&#13;
    function reloadVisitedPages() {&#13;
        presenter.pageTitles = [];&#13;
        presenter.visitedPages = [];&#13;
        for(var i = 0; i &lt; presenter.pageCount; i++) {&#13;
            var page = presenter.presentation.getPage(i);&#13;
            presenter.pageTitles.push(page.getName());&#13;
            presenter.visitedPages.push(page.isVisited(true));&#13;
        }&#13;
    }&#13;
&#13;
    presenter.playButton = function(element){&#13;
        var $element = $(element);&#13;
        if($element.hasClass('navigationbar-element-previous')) {&#13;
            presenter.playPage(presenter.currentIndex - 1 , presenter.configuration.speechTexts.prevPage);&#13;
        } else if ($element.hasClass('navigationbar-element-next')){&#13;
            presenter.playPage(presenter.currentIndex + 1 , presenter.configuration.speechTexts.nextPage);&#13;
        } else if ($element.hasClass('dotted-element-left')) {&#13;
            speak([getTextVoiceObject(presenter.configuration.speechTexts.dottedLeft)]);&#13;
        } else if ($element.hasClass('dotted-element-right')) {&#13;
            speak([getTextVoiceObject(presenter.configuration.speechTexts.dottedRight)]);&#13;
        } else {&#13;
            var pageNumber = $element.attr('data-page-number');&#13;
            if (pageNumber !== null &amp;&amp; pageNumber !== undefined &amp;&amp; !isNaN(pageNumber)){&#13;
                if ($element.hasClass('disabled')) {&#13;
                   presenter.playPage(pageNumber - 1, presenter.configuration.speechTexts.disabledPage + ' ' + pageNumber);&#13;
                } else {&#13;
                    presenter.playPage(pageNumber - 1, presenter.configuration.speechTexts.goToPageNumber + ' ' + pageNumber);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playPage = function (index, text) {&#13;
        if (index &gt;= 0 &amp;&amp; index &lt; presenter.pageTitles.length) {&#13;
            var textVoiceArray = [];&#13;
            if(presenter.configuration.playTitle) {&#13;
                textVoiceArray.push(getTextVoiceObject(text + ' ' + presenter.configuration.speechTexts.titled));&#13;
                textVoiceArray.push(getTextVoiceObject(presenter.pageTitles[index], presenter.configuration.langTag));&#13;
            } else {&#13;
                textVoiceArray.push(getTextVoiceObject(text));&#13;
            }&#13;
            speak(textVoiceArray);&#13;
        } else {&#13;
            speak(getTextVoiceObject(text));&#13;
        }&#13;
    };&#13;
&#13;
    function goToPage(whereTo, index) {&#13;
        var currentIndex = 0;&#13;
        if (movedFromIndex) {&#13;
            currentIndex = movedFromIndex;&#13;
        } else {&#13;
            currentIndex = presenter.playerController.getCurrentPageIndex();&#13;
        }&#13;
        var goToIndex = 0;&#13;
        switch (whereTo) {&#13;
            case NAVIGATION_PAGE.FIRST:&#13;
                if (currentIndex !== 0) {&#13;
                    goToIndex = 0;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.LAST:&#13;
                if (currentIndex !== (presenter.pageCount - 1)) {&#13;
                    goToIndex = presenter.pageCount - 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.NEXT:&#13;
                if (currentIndex !== (presenter.pageCount - 1)) {&#13;
                    goToIndex = currentIndex + 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.PREVIOUS:&#13;
                if (currentIndex !== 0) {&#13;
                    goToIndex = currentIndex - 1;&#13;
                }&#13;
                break;&#13;
            case NAVIGATION_PAGE.OTHER:&#13;
                if ((index &gt;= 0) &amp;&amp; (index &lt;= (presenter.pageCount - 1))) {&#13;
                    goToIndex = index;&#13;
                }&#13;
                break;&#13;
        }&#13;
&#13;
         if (presenter.visitedPages[goToIndex] || !presenter.configuration.blockNotVisited) {&#13;
             presenter.commander.gotoPageIndex(goToIndex);&#13;
         }&#13;
    }&#13;
&#13;
    function handleMouseActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        handleArrowClickActions();&#13;
        handleIndexClickActions();&#13;
        handleDottedClickActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        handleHoverAndMouseDownActions();&#13;
    }&#13;
&#13;
    function handleArrowClickActions() {&#13;
        presenter.$view.find('[class="navigationbar-element-first"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.FIRST);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-previous"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.PREVIOUS);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-next"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.NEXT);&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find('[class="navigationbar-element-last"]').parent().click(function () {&#13;
            goToPage(NAVIGATION_PAGE.LAST);&#13;
            return false;&#13;
        });&#13;
    }&#13;
&#13;
    function handleIndexClickActions() {&#13;
        presenter.$view.find('[class*="navigationbar-indexed-element"]').each(function () {&#13;
            var pageIndex = parseInt($(this).attr("data-page-number"), 10) - 1;&#13;
&#13;
            $(this).parent().click(function (event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
&#13;
                goToPage(NAVIGATION_PAGE.OTHER, pageIndex);&#13;
            });&#13;
        });&#13;
&#13;
    }&#13;
&#13;
    presenter.checkIfPagesOk = function () {&#13;
        presenter.$view.find(".navigationbar-indexed-element").each(function () {&#13;
            if($(this).hasClass('navigationbar-page-ok')){&#13;
                var pageIndex = parseInt($(this).attr("data-page-number"), 10);&#13;
                presenter.pagesOk.push(pageIndex);&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addClassPageOK = function () {&#13;
        for (var i=0; i &lt; presenter.pagesOk.length; i++){&#13;
            presenter.$wrapper.find("[data-page-number='" + presenter.pagesOk[i] + "']").addClass('navigationbar-page-ok');&#13;
        }&#13;
    };&#13;
&#13;
    function handleDottedClickActions(dotsLeftIndex, dotsRightIndex, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        presenter.$view.find(".dotted-element-left:first").click(function () {&#13;
            if (dotsLeftIndex === undefined || dotsLeftIndex &lt; 0) {&#13;
                dotsLeftIndex = 0;&#13;
            }&#13;
&#13;
            removeAllElements();&#13;
            if (movedFromIndex == undefined) {&#13;
                movedFromIndex = presenter.currentIndex;&#13;
            }&#13;
            presenter.currentIndex = dotsLeftIndex;&#13;
&#13;
            generateElements(elementWidth, elementHeight, true, preview, horizontalGap, false);&#13;
&#13;
            presenter.addClassPageOK();&#13;
&#13;
            presenter.isPageOK();&#13;
&#13;
            if(presenter.configuration.styles) {&#13;
                presenter.setPageStyles();&#13;
            }&#13;
&#13;
            presenter.refreshBookmarks();&#13;
            if(isWCAGOn) {&#13;
                presenter.$view.find(".dotted-element-right:first").addClass('navigationbar-element-mouse-hover');&#13;
            }&#13;
            return false;&#13;
        });&#13;
&#13;
        presenter.$view.find(".dotted-element-right:first").click(function () {&#13;
            if (dotsRightIndex === undefined || dotsRightIndex &gt; presenter.pageCount - 1) {&#13;
                dotsRightIndex = presenter.pageCount - 1;&#13;
            }&#13;
&#13;
            removeAllElements();&#13;
            if (movedFromIndex == undefined) {&#13;
                movedFromIndex = presenter.currentIndex;&#13;
            }&#13;
            presenter.currentIndex = dotsRightIndex;&#13;
&#13;
            generateElements(elementWidth, elementHeight, true, preview, horizontalGap, false);&#13;
&#13;
            presenter.addClassPageOK();&#13;
&#13;
            presenter.isPageOK();&#13;
&#13;
            if(presenter.configuration.styles) {&#13;
                presenter.setPageStyles();&#13;
            }&#13;
&#13;
            presenter.refreshBookmarks();&#13;
            if(isWCAGOn) {&#13;
                presenter.$view.find(".dotted-element-left:first").addClass('navigationbar-element-mouse-hover');&#13;
            }&#13;
            return false;&#13;
        });&#13;
    }&#13;
&#13;
    function handleHoverAndMouseDownActions() {&#13;
        var isHomeInactive = presenter.currentIndex === 0;&#13;
        var isReportInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-first', isHomeInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-previous', isHomeInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-next', isReportInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-last', isReportInactive);&#13;
        handleSpecificElementHoverAndMouseDown('navigationbar-element-current', false);&#13;
&#13;
        handleElementHoverAndMouseDown();&#13;
    }&#13;
&#13;
    function handleSpecificElementHoverAndMouseDown(selector, inactive) {&#13;
        var removeClassNames = selector + ' ' + selector + '-mouse-hover' +&#13;
            ' ' + selector + '-mouse-click' + ' ' + selector + '-inactive';&#13;
&#13;
        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );&#13;
&#13;
        presenter.$wrapper.find("span[class^=" + selector + "]").each(function() {&#13;
            var addClassName = inactive ? selector + '-inactive' : selector;&#13;
&#13;
            if (!iOS) {&#13;
            	$(this).hover(&#13;
            		function() {&#13;
                    	$(this).removeClass(removeClassNames);&#13;
                    	$(this).addClass(selector + '-mouse-hover');&#13;
                	},&#13;
                	function() {&#13;
                    	$(this).removeClass(removeClassNames);&#13;
                    	$(this).addClass(addClassName);&#13;
                    	if (presenter.configuration.blockNotVisited) {&#13;
                            presenter.setDisabledPagesStyle();&#13;
                        }&#13;
                	}&#13;
            	);&#13;
            }&#13;
&#13;
            $(this).mousedown(&#13;
                function() {&#13;
                    $(this).removeClass(removeClassNames);&#13;
                    $(this).addClass(selector + '-mouse-click');&#13;
                }&#13;
            );&#13;
&#13;
            $(this).mouseup(&#13;
                function() {&#13;
                    $(this).removeClass(removeClassNames);&#13;
                    $(this).addClass(addClassName);&#13;
                    if (presenter.configuration.blockNotVisited) {&#13;
                        presenter.setDisabledPagesStyle();&#13;
                    }&#13;
                }&#13;
            );&#13;
        });&#13;
    }&#13;
&#13;
    function handleElementHoverAndMouseDown() {&#13;
        var notSelectorsList = '.navigationbar-element-first,.navigationbar-element-last,' +&#13;
            '.navigationbar-element-next,.navigationbar-element-previous,.navigationbar-element-current';&#13;
&#13;
        var iOS = ( navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false );&#13;
&#13;
        presenter.$wrapper.find('.navigationbar-element').not(notSelectorsList).each(function() {&#13;
            if (!iOS) {&#13;
            	$(this).hover(&#13;
            		function() {&#13;
                    	$(this).removeClass('navigationbar-element');&#13;
                    	$(this).addClass('navigationbar-element-mouse-hover');&#13;
                	},&#13;
                	function() {&#13;
                    	$(this).removeClass('navigationbar-element-mouse-hover');&#13;
                    	$(this).addClass('navigationbar-element');&#13;
                    	 if (presenter.configuration.blockNotVisited) {&#13;
                            presenter.setDisabledPagesStyle();&#13;
                        }&#13;
                	}&#13;
            	);&#13;
            }&#13;
&#13;
            $(this).mousedown(&#13;
                function() {&#13;
                    $(this).removeClass('navigationbar-element');&#13;
                    $(this).addClass('navigationbar-element-mouse-click');&#13;
                }&#13;
            );&#13;
&#13;
            $(this).mouseup(&#13;
                function() {&#13;
                    $(this).removeClass('navigationbar-element-mouse-click');&#13;
                    $(this).addClass('navigationbar-element');&#13;
                    if (presenter.configuration.blockNotVisited) {&#13;
                        presenter.setDisabledPagesStyle();&#13;
                    }&#13;
                }&#13;
            );&#13;
        });&#13;
    }&#13;
&#13;
    function removeAllElements() {&#13;
        presenter.$view.find("span[class*=navigationbar-element]").parent().remove();&#13;
    }&#13;
&#13;
    function generateHomeArrowElement() {&#13;
        var isElementInactive = presenter.currentIndex === 0;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-first-inactive" : "navigationbar-element-first";&#13;
&#13;
        if (presenter.$view.has('[class*="navigationbar-element-first"]').length &lt; 1) {&#13;
            var homeElementArrow = '&lt;a href="#"&gt;' +&#13;
                '&lt;span class="' + elementStyle + '"&gt;&amp;lt;&amp;lt;&lt;/span&gt;' +&#13;
                '&lt;/a&gt;';&#13;
&#13;
            presenter.$wrapper.append(homeElementArrow);&#13;
        }&#13;
    }&#13;
&#13;
    function generatePreviousArrowElement() {&#13;
        var homeElement = presenter.$view.find('[class*="navigationbar-element-first"]:first').parent();&#13;
        var isElementInactive = presenter.currentIndex === 0;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-previous-inactive inactive" : "navigationbar-element-previous";&#13;
&#13;
        var previousElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;lt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
        if (presenter.configuration.hideHomeLastArrows) {&#13;
            presenter.$wrapper.append(previousElementArrow);&#13;
        } else {&#13;
            homeElement.after(previousElementArrow);&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    function generateNextArrowElement() {&#13;
        var previousElement = presenter.$view.find('[class*="navigationbar-element-previous"]:first').parent();&#13;
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-next-inactive inactive" : "navigationbar-element-next";&#13;
&#13;
        var nextElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
        presenter.$wrapper.append(nextElementArrow);&#13;
    }&#13;
&#13;
    function generateReportArrowElement() {&#13;
        var isElementInactive = presenter.currentIndex === presenter.pageCount - 1;&#13;
        var elementStyle = isElementInactive ? "navigationbar-element-last-inactive" : "navigationbar-element-last";&#13;
&#13;
        if (presenter.$view.has('[class*="navigationbar-element-last"]').length &lt; 1) {&#13;
            var reportElementArrow = '&lt;a href="#"&gt;&lt;span class="' + elementStyle + '"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/a&gt;';&#13;
&#13;
            presenter.$wrapper.append(reportElementArrow);&#13;
        }&#13;
    }&#13;
&#13;
    function generateHomeAndPreviousArrowsElements() {&#13;
        if (!presenter.configuration.hideHomeLastArrows) {&#13;
            generateHomeArrowElement();&#13;
        }&#13;
&#13;
        if (presenter.configuration.showNextPrevArrows) {&#13;
            generatePreviousArrowElement();&#13;
        }&#13;
    }&#13;
&#13;
    function generateReportAndNextArrowsElements() {&#13;
        if (presenter.configuration.showNextPrevArrows) {&#13;
            generateNextArrowElement();&#13;
        }&#13;
&#13;
        if (!presenter.configuration.hideHomeLastArrows) {&#13;
            generateReportArrowElement();&#13;
        }&#13;
    }&#13;
&#13;
    function generateDottedElement(dotsSide) {&#13;
        return '&lt;a href="#"&gt;' +&#13;
            '&lt;span class="navigationbar-element navigationbar-dotted-element ' + dotsSide.CSSClass + '"&gt;&amp;hellip;&lt;/span&gt;' +&#13;
            '&lt;/a&gt;';&#13;
    }&#13;
&#13;
    // Index is displayed page number&#13;
    function generateIndexElementStub(index, navigationBarMoved) {&#13;
        var isCurrentElement, pageIndex;&#13;
&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            isCurrentElement = !navigationBarMoved ? (index - 1 + 1) === presenter.currentIndex : (index - 1 + 1) === movedFromIndex;&#13;
            pageIndex = parseInt(index, 10) + 1;&#13;
        }else{&#13;
            isCurrentElement = !navigationBarMoved ? (index - 1) === presenter.currentIndex : (index - 1) === movedFromIndex;&#13;
            pageIndex = parseInt(index, 10);&#13;
        }&#13;
&#13;
        var currentElementStyle = isCurrentElement ? "navigationbar-element-current" : "navigationbar-element";&#13;
        var elementId = '';&#13;
        if (isCurrentElement) {&#13;
            var addonID = presenter.configuration.ID;&#13;
            elementId = 'id="current-page-number' + (addonID ? '-' + addonID : '') + '" ';&#13;
        }&#13;
&#13;
        return '&lt;a href="#"&gt;' +&#13;
            '&lt;span ' + elementId + 'class="' + currentElementStyle + ' navigationbar-indexed-element' +'" data-page-number="' + pageIndex + '"&gt;' + Internationalization.translate(index, presenter.configuration.language) + '&lt;/span&gt;' +&#13;
            '&lt;/a&gt;';&#13;
    }&#13;
&#13;
    function generateIndexedElements(navigationBarMoved, triggerOnRun) {&#13;
        var firstElementSelector = presenter.configuration.showNextPrevArrows ? '[class*="navigationbar-element-previous"]' : '[class*="navigationbar-element-first"]';&#13;
        //var firstElement = presenter.$view.find(firstElementSelector).parent();&#13;
&#13;
        var element; // Works as temporary indexed element&#13;
        var dottedElement; // Works as temporary dotted element&#13;
&#13;
        var dotsLeftTargetIndex;&#13;
        var dotsRightTargetIndex;&#13;
        var n = 0;&#13;
&#13;
        var pageCount;&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            pageCount = presenter.pageCount-1;&#13;
        }else{&#13;
            pageCount = presenter.pageCount;&#13;
        }&#13;
&#13;
        if (maxElementCount &gt;= pageCount) { // All pages will be displayed&#13;
            if(presenter.configuration.lastPageSeparated){&#13;
                for (n = 1; n &lt;= pageCount; n++) {&#13;
                    if(n != pageCount){&#13;
                        element = generateIndexElementStub(n, navigationBarMoved);&#13;
                        presenter.$wrapper.append(element);&#13;
                    }&#13;
                }&#13;
                presenter.allPagesDisplayed = true;&#13;
            }else{&#13;
                for (n = 1; n &lt;= pageCount; n++) {&#13;
                    element = generateIndexElementStub(n, navigationBarMoved);&#13;
                    presenter.$wrapper.append(element);&#13;
                }&#13;
            }&#13;
            presenter.allPagesDisplayed = true;&#13;
        } else {&#13;
            var dottedElementCount = -1;&#13;
            if(presenter.configuration.firstPageAsCover &amp;&amp; triggerOnRun) {&#13;
                dottedElementCount = 0;&#13;
            }&#13;
&#13;
            if (presenter.currentIndex &lt; (maxElementCount + dottedElementCount)) { // -1 for dotted element&#13;
                for (n = 0; n &lt; maxElementCount - 1; n++) {&#13;
                    element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                    presenter.$wrapper.append(element);&#13;
                }&#13;
&#13;
                // Dots are displayed on the right&#13;
                dotsRightTargetIndex = maxElementCount - 1;&#13;
                presenter.$wrapper.append(generateDottedElement(DOTTED_SIDE.RIGHT));&#13;
            } else if (presenter.currentIndex &gt; (presenter.pageCount - maxElementCount)) {&#13;
                // Dots are displayed on the left -&gt; -1 to max element count&#13;
                dotsLeftTargetIndex = (pageCount - 1) - (maxElementCount - 2) - 1;&#13;
                dottedElement = generateDottedElement(DOTTED_SIDE.LEFT);&#13;
                presenter.$wrapper.append(dottedElement);&#13;
&#13;
                if(presenter.configuration.lastPageSeparated){&#13;
                    for (n = pageCount - maxElementCount; n &lt; pageCount; n++) {&#13;
                        if(presenter.configuration.lastPageSeparated &amp;&amp; n != (pageCount-1)){&#13;
                            element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                            presenter.$wrapper.append(element);&#13;
                        }&#13;
                    }&#13;
                }else{&#13;
                    for (n = pageCount - maxElementCount + 1; n &lt; pageCount; n++) {&#13;
                        element = generateIndexElementStub(n + 1, navigationBarMoved);&#13;
                        presenter.$wrapper.append(element);&#13;
                    }&#13;
                }&#13;
            } else {&#13;
                var numberOfElement = maxElementCount - 2;&#13;
&#13;
                var temp = presenter.currentIndex - (numberOfElement + 1);&#13;
                var multiplier = parseInt(temp / numberOfElement, 10);&#13;
                var startIndex = (numberOfElement + 1) + multiplier * numberOfElement;&#13;
&#13;
                dotsLeftTargetIndex = startIndex - 1;&#13;
                dottedElement = generateDottedElement(DOTTED_SIDE.LEFT);&#13;
                presenter.$wrapper.append(dottedElement);&#13;
&#13;
                if(startIndex == presenter.currentIndex &amp;&amp; presenter.configuration.firstPageAsCover) {&#13;
                    startIndex = startIndex - 1;&#13;
                }&#13;
&#13;
                for (n = 0; n &lt; numberOfElement; n++) {&#13;
                    var indexedElement = generateIndexElementStub(startIndex + 1 + n, navigationBarMoved);&#13;
                    presenter.$wrapper.append(indexedElement);&#13;
                }&#13;
&#13;
                dotsRightTargetIndex = startIndex + numberOfElement;&#13;
                presenter.$wrapper.append(generateDottedElement(DOTTED_SIDE.RIGHT));&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            leftIndex: dotsLeftTargetIndex,&#13;
            rightIndex: dotsRightTargetIndex&#13;
        };&#13;
    }&#13;
&#13;
    function generateElements(elementWidth, elementHeight, navigationBarMoved, preview, horizontalGap, triggerOnRun) {&#13;
        removeAllElements();&#13;
&#13;
        generateHomeAndPreviousArrowsElements();&#13;
&#13;
        var dotsIndexes = generateIndexedElements(navigationBarMoved, triggerOnRun);&#13;
&#13;
        generateReportAndNextArrowsElements();&#13;
&#13;
        if (!preview) {&#13;
            handleMouseActions(dotsIndexes.leftIndex, dotsIndexes.rightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
&#13;
        if (presenter.$wrapper.css('direction') === 'rtl') {&#13;
            reorderElements(dotsIndexes, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
&#13;
        if(presenter.configuration.lastPageSeparated &amp;&amp; presenter.allPagesDisplayed){&#13;
            var elementsCount = presenter.$view.find("span[class^=navigationbar-element]").length;&#13;
            var missingWidth = parseInt(elementWidth/elementsCount, 10);&#13;
            elementWidth = elementWidth + missingWidth;&#13;
        }&#13;
&#13;
        presenter.$view.find("span[class^=navigationbar-element]").each(function () {&#13;
            var width = $(this).hasClass('navigationbar-element-last') ? elementWidth + horizontalGap : elementWidth;&#13;
            $(this).width(width + 'px');&#13;
            $(this).height(elementHeight + 'px');&#13;
            $(this).css('line-height', elementHeight + 'px');&#13;
        });&#13;
&#13;
        if (presenter.configuration.blockNotVisited) {&#13;
            presenter.setDisabledPagesStyle();&#13;
        }&#13;
&#13;
        return dotsIndexes;&#13;
    }&#13;
&#13;
    function reorderElements(dotsIndexes, elementWidth, elementHeight, preview, horizontalGap) {&#13;
        var elements = [];&#13;
&#13;
        presenter.$wrapper.children('a').each(function () {&#13;
            elements.push($(this));&#13;
            $(this).remove();&#13;
        });&#13;
&#13;
        for (var i = elements.length - 1; i &gt;= 0; i--) {&#13;
            presenter.$wrapper.append(elements[i]);&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            handleMouseActions(dotsIndexes.leftIndex, dotsIndexes.rightIndex, elementWidth, elementHeight, preview, horizontalGap);&#13;
        }&#13;
&#13;
        if (presenter.configuration.blockNotVisited) {&#13;
            presenter.setDisabledPagesStyle();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.arePagesNamesCorrect = function (pageNames, length) {&#13;
        for (var i = 0; i &lt; pageNames.length; i++) {&#13;
            if (length &gt; 1 &amp;&amp; pageNames[i] == "") {&#13;
                return false;&#13;
            }&#13;
            if (isNaN(pageNames[i])) {&#13;
                switch (pageNames[i]) {&#13;
                    case "previous":&#13;
                        break;&#13;
                    case "first":&#13;
                        break;&#13;
                    case "last":&#13;
                        break;&#13;
                    case "next":&#13;
                        break;&#13;
                    default:&#13;
                        return false;&#13;
                }&#13;
            } else {&#13;
                if(length&gt;1) {&#13;
                    if (pageNames[i] % 1 !== 0 || pageNames[i] &lt;= 0) {&#13;
                        return false;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeFrom_01(model);&#13;
        upgradedModel = presenter.upgradeFrom_02(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel['langAttribute']) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
         if (!upgradedModel['speechTexts']) {&#13;
            upgradedModel['speechTexts'] =&#13;
                {&#13;
                    DottedLeft: {DottedLeft: ''},&#13;
                    DottedRight: {DottedRight: ''},&#13;
                    GoToPageNumber: {GoToPageNumber: ''},&#13;
                    NextPage: {NextPage: ''},&#13;
                    PrevPage: {PrevPage: ''},&#13;
                    Titled: {Titled: ''}&#13;
                };&#13;
        }&#13;
&#13;
        if (!upgradedModel['playTitle']) {&#13;
            upgradedModel['playTitle'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
     presenter.upgradeFrom_02 = function (model) {&#13;
         var upgradedModel = {};&#13;
         $.extend(true, upgradedModel, model);&#13;
&#13;
         if (!upgradedModel['blockNotVisited']) {&#13;
             upgradedModel['blockNotVisited'] = 'False';&#13;
         }&#13;
         if (!upgradedModel['speechTexts']['DisabledPage']) {&#13;
             upgradedModel['speechTexts']['DisabledPage'] = {DisabledPage: ''};&#13;
         }&#13;
         return upgradedModel;&#13;
     };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedModel = {&#13;
            isError: false,&#13;
            styles: model['Styles'],&#13;
            showNextPrevArrows: model.ShowNextPrevArrows === 'True',&#13;
            hideHomeLastArrows: model.HideHomeLastArrows === 'True',&#13;
            language: getLanguage(model),&#13;
            addClassNBPageOK: model.AddClassNBPageOK === 'True',&#13;
            ID: model.ID,&#13;
            firstPageAsCover: ModelValidationUtils.validateBoolean(model["firstPageAsCover"]),&#13;
            lastPageSeparated: ModelValidationUtils.validateBoolean(model["lastPageSeparated"]),&#13;
            langTag: model['langAttribute'],&#13;
            speechTexts: getSpeechTexts(model['speechTexts']),&#13;
            playTitle: 0 === model['playTitle'].toLowerCase().localeCompare('true'),&#13;
            blockNotVisited: ModelValidationUtils.validateBoolean(model["blockNotVisited"])&#13;
        };&#13;
&#13;
        if (!model['Styles']) {&#13;
            return validatedModel;&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; model['Styles'].length; i++) {&#13;
            var pages = model['Styles'][i].Pages;&#13;
            var pageNames = pages.trim().split(',');&#13;
            if (model['Styles'].length &gt; 1) {&#13;
                if (!pages) {&#13;
                    return returnErrorObject('E_01');&#13;
                }&#13;
                if (!model['Styles'][i]['Style'] &amp;&amp; !model['Styles'][i]['Class']) {&#13;
                    return returnErrorObject('E_01');&#13;
                }&#13;
            }&#13;
            if(!presenter.arePagesNamesCorrect(pageNames, model['Styles'].length)){&#13;
                return returnErrorObject('E_04');&#13;
            }&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function getSpeechTexts (speechTexts) {&#13;
        var speechTextsModel = {&#13;
            goToPageNumber:  'Go to page number',&#13;
            nextPage: 'Go to next page',&#13;
            prevPage: 'Go to previous page',&#13;
            titled: 'Titled',&#13;
            dottedRight: 'Show more pages',&#13;
            dottedLeft: 'Show earlier pages',&#13;
            disabledPage: 'Disabled page'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return speechTextsModel;&#13;
        }&#13;
&#13;
        speechTextsModel = {&#13;
            goToPageNumber:    getSpeechTextProperty(speechTexts['GoToPageNumber']['GoToPageNumber'], speechTextsModel.goToPageNumber),&#13;
            nextPage: getSpeechTextProperty(speechTexts['NextPage']['NextPage'], speechTextsModel.nextPage),&#13;
            prevPage:  getSpeechTextProperty(speechTexts['PrevPage']['PrevPage'], speechTextsModel.prevPage),&#13;
            titled:     getSpeechTextProperty(speechTexts['Titled']['Titled'], speechTextsModel.titled),&#13;
            dottedRight:   getSpeechTextProperty(speechTexts['DottedRight']['DottedRight'], speechTextsModel.dottedRight),&#13;
            dottedLeft:      getSpeechTextProperty(speechTexts['DottedLeft']['DottedLeft'], speechTextsModel.dottedLeft),&#13;
            disabledPage:      getSpeechTextProperty(speechTexts['DisabledPage']['DisabledPage'], speechTextsModel.disabledPage),&#13;
        };&#13;
        return speechTextsModel;&#13;
    }&#13;
&#13;
    presenter.getArrowsCount = function () {&#13;
        var arrowsCount = 0;&#13;
&#13;
        if (!presenter.configuration.hideHomeLastArrows) arrowsCount += 2;&#13;
        if (presenter.configuration.showNextPrevArrows) arrowsCount += 2;&#13;
&#13;
        return arrowsCount;&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyleToPage = function (page, styleName, styleValue, clazz) {&#13;
        if (isNaN(page)) {&#13;
            presenter.$wrapper.find("span[class^='navigationbar-element-"+ page +"']").css(styleName, styleValue);&#13;
            presenter.$wrapper.find("span[class^='navigationbar-element-"+ page +"']").addClass(clazz);&#13;
&#13;
        } else {&#13;
            presenter.$wrapper.find("[data-page-number='" + page + "']").addClass(clazz);&#13;
            presenter.$wrapper.find("[data-page-number='" + page + "']").css(styleName, styleValue);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPageStyles = function() {&#13;
        $.each(presenter.configuration.styles, function() {&#13;
            var pages = this['Pages'].split(',');&#13;
            var cssStyle = this['Style'];&#13;
            var styles = cssStyle.split(';');&#13;
&#13;
            for (var page = 0; page &lt; pages.length; page++) {&#13;
                var pageElement = pages[page].trim();&#13;
                for(var pageStyle = 0; pageStyle &lt; styles.length; pageStyle++) {&#13;
                    var oneStyle =  styles[pageStyle].split(':');&#13;
                    if(oneStyle[0]) {&#13;
                        oneStyle[0] = oneStyle[0].trim();&#13;
                    }&#13;
                    if(oneStyle[1]) {&#13;
                        oneStyle[1] = oneStyle[1].trim();&#13;
                    }&#13;
                    presenter.addAdditionalStyleToPage(pageElement, oneStyle[0], oneStyle[1], this['Class']);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setDisabledPagesStyle = function() {&#13;
        if (!presenter.playerController) return;&#13;
&#13;
        for (var page = 0; page &lt; presenter.pageCount; page++) {&#13;
            if (!presenter.visitedPages[page]) {&#13;
                presenter.addAdditionalStyleToPage(page+1, '', '', 'disabled');&#13;
            }&#13;
        }&#13;
        var currentIndex = 0;&#13;
        if (movedFromIndex) {&#13;
            currentIndex = movedFromIndex;&#13;
        } else {&#13;
            currentIndex = presenter.playerController.getCurrentPageIndex();&#13;
        }&#13;
        if (!presenter.visitedPages[0] || currentIndex == 0) {&#13;
            var $el = presenter.$wrapper.find('.navigationbar-element-first:first');&#13;
            $el.addClass('navigationbar-element-first-inactive disabled');&#13;
        }&#13;
        if (currentIndex &gt; 0 &amp;&amp; !presenter.visitedPages[currentIndex-1]) {&#13;
            var $el = presenter.$wrapper.find('.navigationbar-element-previous:first');&#13;
            $el.addClass('navigationbar-element-previous-inactive disabled');&#13;
        }&#13;
        if (currentIndex &lt; presenter.pageCount - 1 &amp;&amp; !presenter.visitedPages[currentIndex+1]) {&#13;
            var $el = presenter.$wrapper.find('.navigationbar-element-next:first');&#13;
            $el.addClass('navigationbar-element-next-inactive disabled');&#13;
        }&#13;
        if (!presenter.visitedPages[presenter.pageCount-1] || currentIndex == presenter.pageCount-1) {&#13;
            var $el = presenter.$wrapper.find('.navigationbar-element-last:first');&#13;
            $el.addClass('navigationbar-element-last-inactive disabled');&#13;
        }&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
    	presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.navigationbar-wrapper:first');&#13;
        var $element = presenter.$view.find('.navigationbar-element-first');&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        var arrowsCount = presenter.getArrowsCount();&#13;
&#13;
        if(presenter.configuration.isError){&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            presenter.currentIndex = 0;&#13;
            presenter.pageCount = 21;&#13;
        }&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, presenter.$wrapper);&#13;
        var elementDimensions = DOMOperationsUtils.getOuterDimensions($element),&#13;
            elementDistances = DOMOperationsUtils.calculateOuterDistances(elementDimensions);&#13;
&#13;
        var elementBaseWidth = parseInt($element.width(), 10) + elementDistances.horizontal;&#13;
        maxElementCount = parseInt((presenter.$wrapper.width() - (arrowsCount * elementBaseWidth)) / elementBaseWidth, 10) - 4;&#13;
        var pageCount;&#13;
        if(presenter.configuration.firstPageAsCover){&#13;
            pageCount = presenter.pageCount-1;&#13;
        }else{&#13;
            pageCount = presenter.pageCount;&#13;
        }&#13;
        var numberOfElements = pageCount &lt; maxElementCount ? pageCount + arrowsCount : maxElementCount + arrowsCount;&#13;
        var elementWidth = parseInt(presenter.$wrapper.width() / numberOfElements  - elementDistances.horizontal, 10);&#13;
        var elementHeight = parseInt(presenter.$wrapper.height() - elementDistances.vertical, 10);&#13;
        var horizontalGap = presenter.$wrapper.width() - (elementWidth + elementDistances.horizontal) * numberOfElements;&#13;
&#13;
        removeAllElements();&#13;
&#13;
        generateElements(elementWidth, elementHeight, false, isPreview, horizontalGap, true);&#13;
        if(model['Styles']) {&#13;
            presenter.setPageStyles();&#13;
        }&#13;
        if (presenter.configuration.blockNotVisited &amp;&amp; !isPreview) {&#13;
            presenter.setDisabledPagesStyle();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function(){&#13;
        presenter.isCurrentPageOk();&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.isCurrentPageOk();&#13;
        if (presenter.configuration.blockNotVisited) {&#13;
            reloadVisitedPages();&#13;
            presenter.setDisabledPagesStyle();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getPercentageScore = function (pageIndex) {&#13;
        var id = presenter.presentation.getPage(pageIndex).getId();&#13;
        var pageScore = presenter.scoreService.getPageScoreById(id);&#13;
&#13;
        return (pageScore.score/pageScore.maxScore) * 100;&#13;
    };&#13;
&#13;
    presenter.isCurrentPageOk = function () {&#13;
        if(presenter.presentation.getPage(presenter.originalIndex).isReportable()){&#13;
            var percentageScore = presenter.getPercentageScore(presenter.originalIndex);&#13;
            var $page = presenter.$wrapper.find("[data-page-number='" + (presenter.originalIndex + 1) + "']");&#13;
            var id = presenter.presentation.getPage(presenter.originalIndex).getId();&#13;
            var pageScore = presenter.scoreService.getPageScoreById(id);&#13;
&#13;
            if((percentageScore == 100 &amp;&amp; pageScore.errorCount == 0) || isNaN(percentageScore)){&#13;
                $page.addClass("navigationbar-page-ok");&#13;
                presenter.pagesOk.push(presenter.originalIndex + 1);&#13;
            }&#13;
&#13;
            if(percentageScore &lt; 100 || pageScore.errorCount &gt; 0){&#13;
                $page.removeClass("navigationbar-page-ok");&#13;
                for(var k = presenter.pagesOk.length - 1; k &gt;= 0; k--) {&#13;
                    if(presenter.pagesOk[k] === (presenter.originalIndex + 1)) {&#13;
                        presenter.pagesOk.splice(k, 1);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isPageOK = function () {&#13;
        var visibleElements = presenter.$view.find('.navigationbar-indexed-element');&#13;
        visibleElements.each( function () {&#13;
            var pageNumber = $(this).attr('data-page-number');&#13;
            if(presenter.presentation.getPage(pageNumber-1).isReportable() &amp;&amp; presenter.presentation.getPage(pageNumber-1).isVisited()){&#13;
              var percentageScore = presenter.getPercentageScore(pageNumber-1);&#13;
              var id = presenter.presentation.getPage(pageNumber-1).getId();&#13;
              var pageScore = presenter.scoreService.getPageScoreById(pageNumber-1);&#13;
&#13;
              if(isNaN(percentageScore)){&#13;
                  percentageScore = 100;&#13;
              }&#13;
&#13;
              if(percentageScore == 100 &amp;&amp; pageScore.errorCount == 0){&#13;
                  presenter.$wrapper.find("[data-page-number='" + pageNumber + "']").addClass("navigationbar-page-ok");&#13;
              }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.pageLoadedDeferred = new $.Deferred();&#13;
        presenter.pageLoaded = presenter.pageLoadedDeferred.promise();&#13;
&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        presenter.pageLoaded.then(function() {&#13;
            presenter.isPageOK();&#13;
        });&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.currentIndex = presenter.playerController.getCurrentPageIndex();&#13;
            presenter.pageIndex = presenter.currentIndex;&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
        if (eventName == "ValueChanged" &amp;&amp; presenter.configuration.addClassNBPageOK &amp;&amp; !presenter.isShowAnswersActive) {&#13;
            presenter.currentIndex = presenter.pageIndex;&#13;
            presenter.isCurrentPageOk();&#13;
        }&#13;
        if(eventData.value == "resetClicked"){&#13;
            presenter.currentIndex = presenter.pageIndex;&#13;
            presenter.isCurrentPageOk();&#13;
        }&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "visitedPagesUpdate") {&#13;
            presenter.visitedPagesUpdate();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.isShowAnswersActive = false;&#13;
    };&#13;
&#13;
    presenter.visitedPagesUpdate = function () {&#13;
    if (presenter.configuration.blockNotVisited) {&#13;
            reloadVisitedPages();&#13;
            presenter.$wrapper.find('.disabled').removeClass('disabled');&#13;
            if (presenter.currentIndex !== presenter.pageCount - 1) {&#13;
                presenter.$wrapper.find('.navigationbar-element-next-inactive').removeClass('navigationbar-element-next-inactive');&#13;
            }&#13;
            presenter.setDisabledPagesStyle();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getState = function(){&#13;
        return JSON.stringify(presenter.state);&#13;
    };&#13;
&#13;
    presenter.setState = function(state){&#13;
        if (state === null || state === "" || state === undefined) {&#13;
            return;&#13;
        }&#13;
        var parsedState = JSON.parse(state);&#13;
        if (parsedState.bookmarks != null) {&#13;
            presenter.state.bookmarks = parsedState.bookmarks;&#13;
        }&#13;
        presenter.refreshBookmarks();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'bookmarkCurrentPage': presenter.bookmarkCurrentPage,&#13;
            'removeBookmark' : presenter.removeBookmark,&#13;
            'removeAllBookmarks' : presenter.removeallBookmarks&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.bookmarkCurrentPage = function() {&#13;
        var page = presenter.originalIndex + 1;&#13;
        if ( presenter.state.bookmarks.indexOf(page) == -1) {&#13;
            presenter.state.bookmarks.push(page);&#13;
        }&#13;
        presenter.refreshBookmarks();&#13;
    };&#13;
&#13;
    presenter.removeBookmark = function() {&#13;
        var page = presenter.originalIndex + 1;&#13;
        var index = presenter.state.bookmarks.indexOf(page);&#13;
        if ( index != -1) {&#13;
            presenter.state.bookmarks.splice(index, 1);&#13;
        }&#13;
        presenter.refreshBookmarks();&#13;
    };&#13;
&#13;
    presenter.removeAllBookmarks = function() {&#13;
        presenter.state.bookmarks = [];&#13;
        presenter.refreshBookmarks();&#13;
    };&#13;
&#13;
    presenter.refreshBookmarks = function() {&#13;
        for (var i = 0; i &lt; presenter.pageCount; i++) {&#13;
            var page = i+1;&#13;
            if ( presenter.state.bookmarks.indexOf(page) != -1) {&#13;
                presenter.$wrapper.find("span[data-page-number='" + page + "']").addClass('bookmark');&#13;
            } else {&#13;
                presenter.$wrapper.find("span[data-page-number='" + page + "']").removeClass('bookmark');&#13;
            }&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>