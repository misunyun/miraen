<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Glossary" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="List of words" nameLabel="Glossary_property_list_of_words" type="list">
            <property name="ID" nameLabel="Glossary_property_id" type="string"/>
            <property isLocalized="true" name="Text" nameLabel="Glossary_property_text" type="string"/>
            <property isLocalized="true" name="Description" nameLabel="Glossary_property_description" type="html"/>
        </property>
        <property displayName="Show In Editor" name="Visible" nameLabel="Glossary_property_show_in_editor" type="boolean"/>
        <property name="Open external link in" nameLabel="Glossary_property_open_external_link_in" type="{New tab, Same tab}"/>
	</model>
<css/><view>&lt;div class="modal-dialog"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="modal-dialog"&gt;&lt;/div&gt;&#13;
</preview><presenter>/*&#13;
    currentScrollTop is used to get around a problem with jQuery-ui, where on opening the dialog&#13;
    it would scroll up to an incorrect position. It is used to store the correct value of scrollTop&#13;
    (before jquery-ui scrolling it up), provide it for the needs of open dialog event handler,&#13;
    and then restore the correct value of scrollTop afterwards.&#13;
 */&#13;
&#13;
function AddonGlossary_create(){&#13;
    var presenter = function() {};&#13;
    presenter.$ICPage = null;&#13;
    presenter.lastReceivedEvent = null;&#13;
    presenter.isPinchZoom = false;&#13;
    presenter.isPreview = false;&#13;
    var currentScrollTop = 0;&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        UNIQUE_ID: "Id of each word must be unique."&#13;
    };&#13;
&#13;
    presenter.addTitle = function(element, title) {&#13;
        $(element).attr('title', title);&#13;
    };&#13;
&#13;
    presenter.addDescription = function(element, description) {&#13;
        $(element).html(description);&#13;
    };&#13;
&#13;
    presenter.updateLaTeX = function(text) {&#13;
        var div = MathJax.HTML.Element("div", {id: "MathDiv"}, [text] );&#13;
        var math = MathJax.Hub.getAllJax(div)[0];&#13;
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, math]);&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var validated = true;&#13;
        var idList = [];&#13;
        for(var i = 0; i &lt; model["List of words"].length; i++) {&#13;
            var id = model["List of words"][i]["ID"];&#13;
            if(idList.indexOf(id) &gt;= 0) { // check if id already exist in model&#13;
                validated = false;&#13;
                break;&#13;
            }&#13;
            idList[i] = id;&#13;
        }&#13;
        return validated;&#13;
    };&#13;
&#13;
    presenter.setDisplay = function(element, display) {&#13;
        var currentDisplay = $(element).css('display') === 'block';&#13;
        if (currentDisplay != display) {&#13;
            $(element).css({&#13;
                "display":"block",&#13;
                "width":"95%",&#13;
                "height":"90%"&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getDialogDataById = function(words, wordID) {&#13;
        for(var i = 0; i &lt; words.length; i++) {&#13;
            if(words[i].ID == wordID) {&#13;
                return {&#13;
                    title: words[i].Text,&#13;
                    description: words[i].Description&#13;
                };&#13;
            }&#13;
        }&#13;
&#13;
        return undefined;&#13;
    };&#13;
&#13;
    presenter.findICPage = function () {&#13;
        presenter.$ICPage = $(presenter.$view.parent('.ic_page:first')[0]);&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_popup_page:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_header:first')[0]);&#13;
        }&#13;
        if (presenter.$ICPage.offset() == null){&#13;
            presenter.$ICPage = $(presenter.$view.parent('.ic_footer:first')[0]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.openDialogEventHandler = function(event, ui) {&#13;
        try{&#13;
            var $dialog  = $(event.target).closest('.ui-dialog');&#13;
            var isPreview = $(".gwt-DialogBox").is('.gwt-DialogBox');&#13;
            var isPopup =  $(presenter.$ICPage).is('.ic_popup_page');&#13;
            var isMarginalPage =  $(presenter.$ICPage).is('.ic_footer') || (presenter.$ICPage).is('.ic_header');&#13;
&#13;
            var presentationPosition = $(presenter.$ICPage).offset();&#13;
            var presentationWidth = $(presenter.$ICPage).outerWidth();&#13;
            var presentationHeight = isMarginalPage ?  $('.ic_page').outerHeight() : $(presenter.$ICPage).outerHeight();&#13;
            var dialogWidth = $dialog.outerWidth();&#13;
            var dialogHeight = $dialog.outerHeight();&#13;
            var topWindow = window;&#13;
            if (playerController &amp;&amp; !playerController.isPlayerInCrossDomain()) topWindow = top.window;&#13;
            var windowHeight = $(topWindow).height();&#13;
            var scrollTop = currentScrollTop;&#13;
            var previewFrame = 0;&#13;
            var popupTop = 0;&#13;
            var popupLeft = 0;&#13;
            var topPosition = 0;&#13;
&#13;
            if (presenter.isPreview) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
&#13;
                if (scrollTop &gt; 0) {&#13;
                    previewFrame = $(presenter.$ICPage).parent().parent().parent().offset().top - $(".gwt-DialogBox").offset().top;&#13;
                }&#13;
&#13;
                windowHeight = ($(presenter.$ICPage).parent().parent().parent().height());&#13;
                presentationPosition.top = 0;&#13;
            }&#13;
&#13;
            if (isPopup) {&#13;
                scrollTop = $(presenter.$ICPage).scrollTop();&#13;
                popupTop =  presentationPosition.top;&#13;
                if ($(topWindow).scrollTop() &gt; 0) presentationPosition.top = 0;&#13;
            }&#13;
&#13;
            var visibleArea = presenter.estimateVisibleArea(presentationPosition.top, presentationHeight, scrollTop, windowHeight);&#13;
            var availableHeight = visibleArea.bottom - visibleArea.top;&#13;
&#13;
            if (dialogHeight &gt;= availableHeight) {&#13;
                dialogHeight = presenter.calculateReducedDialogHeight($dialog, availableHeight);&#13;
                $dialog.css({&#13;
                    height: dialogHeight + 'px'&#13;
                });&#13;
            }&#13;
&#13;
            // Check if the addon needs to account for transform css&#13;
            var scaleInfo = playerController.getScaleInformation();&#13;
            if(scaleInfo.scaleY!==1.0) {&#13;
                $dialog.css('transform', scaleInfo.transform);&#13;
                $dialog.css('transform-origin', scaleInfo.transformOrigin);&#13;
            }&#13;
&#13;
            if(parseFloat(window.MobileUtils.getAndroidVersion())=='4.1'){&#13;
                if (window !== window.top) {&#13;
                    var ancestorData;&#13;
                    for (var i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                    {&#13;
                        ancestorData = presenter.ancestorsData[i];&#13;
                        $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                    }&#13;
                    presenter.ancestorsData = undefined;&#13;
                }&#13;
            }&#13;
&#13;
            if (isPopup || presenter.isPreview) {&#13;
                popupLeft = presentationPosition.left;&#13;
                topPosition = parseInt((availableHeight - dialogHeight) / 2, 10);&#13;
            }&#13;
            else {&#13;
                topPosition = parseInt(( windowHeight - dialogHeight) / 2, 10) ;&#13;
            }&#13;
&#13;
            var presentationHorizontalOffset = parseInt((presentationWidth - dialogWidth) * scaleInfo.scaleY / 2, 10);&#13;
            var leftPosition = presentationPosition.left + presentationHorizontalOffset;&#13;
&#13;
            // adjust top position if Player was embedded in iframe (i.e. EverTeach)&#13;
            if (window !== window.top) {&#13;
                var iframeDialogHeight = parseInt($dialog.height(), 10);&#13;
                iframeDialogHeight += DOMOperationsUtils.calculateOuterDistances(DOMOperationsUtils.getOuterDimensions($dialog)).vertical;&#13;
&#13;
                //topPosition -= scrollTop;&#13;
&#13;
                if (topPosition &lt; 0) {&#13;
                    topPosition = 0;&#13;
                } else if (topPosition &gt; $(window).height() - iframeDialogHeight) {&#13;
                    topPosition = $(window).height() - iframeDialogHeight;&#13;
                }&#13;
            }&#13;
&#13;
&#13;
            if ($(window).scrollTop() &gt; popupTop &amp;&amp; isPopup) {&#13;
                topPosition += ($(window).scrollTop() - popupTop);&#13;
            }&#13;
&#13;
            $dialog.css({&#13;
                left: (leftPosition - popupLeft) + 'px',&#13;
                top: (topPosition + scrollTop + previewFrame) + 'px',&#13;
                'font-size': '18px',&#13;
                'font-family': 'Trebuchet MS, Tahoma, Verdana, Arial, sans-serif'&#13;
            });&#13;
&#13;
            $dialog.find('.ui-dialog-content').css({&#13;
                color: 'black'&#13;
            });&#13;
&#13;
            if(isPopup || presenter.isPreview) {&#13;
                // For Preview and Popup dialog is moved to appropriate page&#13;
                var $overlay = $(".ui-widget-overlay");&#13;
                $(presenter.$view.closest(".ui-widget-overlay")).remove();&#13;
                if (isPreview) {&#13;
                    $(".ic_page_panel").children(".ic_page").children().last().after($overlay);&#13;
                }&#13;
                else {&#13;
                    $dialog.before($overlay);&#13;
                }&#13;
            }&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.closeDialogEventHandler = function() {&#13;
        // due to the inability to close the dialog, when any video is under close button&#13;
        try{&#13;
            presenter.dialog.css("maxHeight", "none");&#13;
&#13;
            if (presenter.ancestorsData !== undefined) {&#13;
                var ancestorData;&#13;
                for (i=0; i&lt;presenter.ancestorsData.length; i++)&#13;
                {&#13;
                    ancestorData = presenter.ancestorsData[i];&#13;
                    $(ancestorData.wnd).scrollTop(ancestorData.offset);&#13;
                }&#13;
                presenter.ancestorsData = undefined;&#13;
            }&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.show = function(id) {&#13;
        // due to event propagation player issue, it's necessary to make sure page with glossary still exist.&#13;
        var pageClass = "." + $(presenter.$ICPage).attr('class').split(' ').join('.');&#13;
        if (!$(pageClass).length &gt; 0) {&#13;
            return&#13;
        }&#13;
&#13;
        var dialog = presenter.dialog;&#13;
        var dialogData = presenter.getDialogDataById(presenter.model["List of words"], id);&#13;
        // don't display dialog if glossary hasn't needed ID&#13;
        if (!dialogData) return;&#13;
&#13;
        dialog.dialog("option", "title", dialogData.title);&#13;
        presenter.addDescription(dialog, dialogData.description);&#13;
&#13;
        currentScrollTop = playerController.iframeScroll();&#13;
&#13;
        dialog.dialog("open");&#13;
&#13;
        if (!playerController.isPlayerInCrossDomain()) {&#13;
            $(top.window).scrollTop(currentScrollTop);&#13;
        }&#13;
&#13;
        presenter.updateLaTeX(dialogData.description);&#13;
&#13;
        var openLinkOption = presenter.model["Open external link in"];&#13;
&#13;
        if (openLinkOption == "New tab" || openLinkOption == "" || openLinkOption == undefined) {&#13;
            presenter.$view.find('.modal-dialog').find('a').attr("target", "_blank");&#13;
        } else {&#13;
            presenter.$view.find('.modal-dialog').find('a').attr("target", "_self");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.catchScroll = function() {&#13;
        try{&#13;
            if (window.parent != window &amp;&amp; presenter.ancestorsData === undefined) {&#13;
                var current_window = window;&#13;
                presenter.ancestorsData = [];&#13;
                while (current_window != current_window.parent) {&#13;
                    presenter.ancestorsData.push({&#13;
                        wnd: current_window.parent,&#13;
                        offset: $(current_window.parent).scrollTop()&#13;
                    });&#13;
                    current_window = current_window.parent;&#13;
                }&#13;
            }&#13;
        }catch(e){}&#13;
    };&#13;
&#13;
    presenter.initializeView = function(view, model) {&#13;
        presenter.model = model;&#13;
        presenter.$view = $(view);&#13;
        presenter.findICPage();&#13;
        presenter.title = "";&#13;
        presenter.description = "";&#13;
        var position = playerController.isPlayerInCrossDomain() ? window : window.top;&#13;
&#13;
        var dialog = presenter.$view.find(".modal-dialog");&#13;
        dialog.dialog({&#13;
            modal: true,&#13;
            autoOpen: false,&#13;
            draggable: false,&#13;
            width: model.Width,&#13;
            minHeight: 'auto',&#13;
            resizable: false,&#13;
            focus: presenter.catchScroll,&#13;
            open: presenter.openDialogEventHandler,&#13;
            close: presenter.closeDialogEventHandler,&#13;
            position: {&#13;
                of: position&#13;
            }&#13;
        });&#13;
&#13;
        var $popup = $('#icplayer').parent().find('.ic_popup');&#13;
        var dialogWidget = dialog.dialog("widget");&#13;
        var outsideView = presenter.$view;&#13;
        outsideView.css({'display': 'block',&#13;
                        'width': 0,&#13;
                        'height': 0,&#13;
                        'position': 'static'&#13;
                        });&#13;
        outsideView.append(dialogWidget);&#13;
        if ($popup.is('.ic_popup') &amp;&amp; presenter.$view.parent().is('.ic_popup_page')) {&#13;
            // Dialog must be placed in popup page&#13;
            $popup.children().last().after(outsideView);&#13;
        }&#13;
        else if ($(".gwt-DialogBox").is('.gwt-DialogBox') ) {&#13;
            // Dialog must be placed in preview page&#13;
            $(".ic_page_panel").children(".ic_page").children().last().after(outsideView);&#13;
        }&#13;
        else {&#13;
            // Dialog must be placed outside Player so that position:absolute wouldn't be suppressed by Player's overflow:hidden&#13;
            $('#icplayer').after(outsideView);&#13;
        }&#13;
        presenter.dialog = dialog;&#13;
        presenter.$view = outsideView;&#13;
    };&#13;
&#13;
    presenter.calculateReducedDialogHeight = function($dialog, pageHeight) {&#13;
        var titleHeight = $dialog.find(".ui-dialog-titlebar").outerHeight();&#13;
        var padding = parseInt($dialog.css("padding-top")) + parseInt($dialog.css("padding-bottom"));&#13;
&#13;
        var $content = $dialog.find('.ui-dialog-content');&#13;
        var contentPadding = parseInt($content.css('paddingTop'), 10) + parseInt($content.css('paddingBottom'), 10);&#13;
        var contentBorder = parseInt($content.css('borderTopWidth'), 10) + parseInt($content.css('borderBottomWidth'), 10);&#13;
        var contentMargin = parseInt($content.css('marginTop'), 10) + parseInt($content.css('marginBottom'), 10);&#13;
&#13;
        return pageHeight - padding - titleHeight - contentPadding - contentBorder - contentMargin;&#13;
    };&#13;
&#13;
    presenter.estimateVisibleArea = function(presentationTop, presentationHeight, scrollTop, windowHeight) {&#13;
        var borders = {&#13;
            top: presentationTop,&#13;
            bottom: presentationTop + presentationHeight&#13;
        };&#13;
&#13;
        if (presentationTop &lt; scrollTop) {&#13;
            borders.top = scrollTop;&#13;
        }&#13;
&#13;
        if (presentationTop + presentationHeight &gt; scrollTop + windowHeight) {&#13;
            borders.bottom = scrollTop + windowHeight;&#13;
        }&#13;
&#13;
        return borders;&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.isPreview = true;&#13;
        var validated = presenter.validateModel(model);&#13;
        if(validated) {&#13;
            var dialog = $(view).find(".modal-dialog");&#13;
            var visible = ModelValidationUtils.validateBoolean(model["Visible"]);&#13;
            var title = model["List of words"][0]["Text"];&#13;
            var description = model["List of words"][0]["Description"];&#13;
&#13;
            presenter.addTitle(dialog, title);&#13;
            presenter.addDescription(dialog, description);&#13;
&#13;
            dialog.dialog({&#13;
                modal: false,&#13;
                autoOpen: false,&#13;
                zIndex : 0,&#13;
                stack: false,&#13;
                draggable: false,&#13;
                width: model.Width,&#13;
                resizable: false&#13;
            });&#13;
&#13;
            var preview = dialog.dialog("widget");&#13;
            presenter.setDisplay(preview, visible);&#13;
&#13;
            $(view).append(preview);&#13;
        } else {&#13;
            $(view).html(presenter.ERROR_MESSAGES["UNIQUE_ID"]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCommand = function (params) {&#13;
        presenter.show(params[0]);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.showCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
        presenter.show(eventData.word);&#13;
    };&#13;
&#13;
    function areTwoFingersOnTheScreen(event) {&#13;
        return !!(event.originalEvent.touches.length &gt;= 2);&#13;
    }&#13;
&#13;
    function isTap(event) {&#13;
        return presenter.lastReceivedEvent == "touchstart"&#13;
            &amp;&amp; event.type == "touchend"&#13;
            &amp;&amp; !presenter.isPinchZoom;&#13;
    }&#13;
&#13;
    presenter.shouldCloseDialog = function(event) {&#13;
        if(event.type == "click" || isTap(event)) return true;&#13;
&#13;
        if(areTwoFingersOnTheScreen(event)) {&#13;
            this.isPinchZoom = true;&#13;
            return false;&#13;
        }&#13;
&#13;
        this.isPinchZoom = false;&#13;
        this.lastReceivedEvent = event.type;&#13;
        return false;&#13;
    };&#13;
&#13;
    function bindEvents() {&#13;
        $(".ui-widget-overlay").live("click touchstart touchend touchmove", function(event){&#13;
            if(presenter.shouldCloseDialog(event)){&#13;
                presenter.dialog.dialog("close");&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenter.isPreview = false;&#13;
        presenter.initializeView(view, model);&#13;
        eventBus = playerController.getEventBus();&#13;
        eventBus.addEventListener('Definition', this);&#13;
        bindEvents();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>