<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Gradual_Show_Answer" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Is disabled" name="Is Disabled" nameLabel="Gradual_Show_Answer_property_disabled" type="boolean"/>
        <property displayName="Is hide answers" name="Is hide answers" nameLabel="Gradual_Show_Answer_property_is_hide_answers" type="boolean"/>
        <property name="worksWith" nameLabel="Gradual_Show_Answer_property_works_with" type="text"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Gradual_Show_Answer_property_speech_texts" type="staticlist">
            <property name="AnswerHasBeenShown" nameLabel="Gradual_Show_Answer_speech_text_answer_has_been_shown" type="staticrow">
                <property name="AnswerHasBeenShown" nameLabel="Gradual_Show_Answer_speech_text_answer_has_been_shown" type="string"/>
            </property>
            <property name="AnswersAreHidden" nameLabel="Gradual_Show_Answer_speech_text_answers_are_hidden" type="staticrow">
                <property name="AnswersAreHidden" nameLabel="Gradual_Show_Answer_speech_text_answers_are_hidden" type="string"/>
            </property>
            <property name="NoNewAnswerToShow" nameLabel="Gradual_Show_Answer_speech_text_no_new_answer_to_show" type="staticrow">
                <property name="NoNewAnswerToShow" nameLabel="Gradual_Show_Answer_speech_text_no_new_answer_to_show" type="string"/>
            </property>
            <property name="EditionIsBlocked" nameLabel="Gradual_Show_Answer_speech_text_edition_is_blocked" type="staticrow">
                <property name="EditionIsBlocked" nameLabel="Gradual_Show_Answer_speech_text_edition_is_blocked" type="string"/>
            </property>
            <property name="EditionIsNotBlocked" nameLabel="Gradual_Show_Answer_speech_text_edition_is_not_blocked" type="staticrow">
                <property name="EditionIsNotBlocked" nameLabel="Gradual_Show_Answer_speech_text_edition_is_not_blocked" type="string"/>
            </property>
            <property name="Disabled" nameLabel="Gradual_Show_Answer_speech_text_disabled" type="staticrow">
                <property name="Disabled" nameLabel="Gradual_Show_Answer_speech_text_disabled" type="string"/>
            </property>
        </property>
	</model>
<css>.gradual-show-answers-button {&#13;
    background: url('resources/show-answer.png') no-repeat center;&#13;
    cursor: pointer;&#13;
    text-align: center;&#13;
&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.gradual-hide-answers-button {&#13;
    background: url('resources/hide-answer.png') no-repeat center;&#13;
}&#13;
&#13;
.gradual-show-answers-container {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.gradual-show-answers-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
</css><view>&lt;div class="gradual-show-answers-wrapper"&gt;&#13;
    &lt;div class="gradual-show-answers-container"&gt;&#13;
        &lt;div class="gradual-show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="gradual-show-answers-wrapper"&gt;&#13;
    &lt;div class="gradual-show-answers-container"&gt;&#13;
        &lt;div class="gradual-show-answers-button"&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonGradual_Show_Answer_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    var classList = {&#13;
        HIDE_ANSWERS: "gradual-hide-answers-button",&#13;
        BUTTON: "gradual-show-answers-button",&#13;
        GRADUAL_ACTIVE: "gradual-show-answers-active"&#13;
    }&#13;
&#13;
    presenter.state = {&#13;
        isVisible: true,&#13;
        isDisabled: false,&#13;
        isErrorMode: false,&#13;
        isGradualShowAnswers: false&#13;
    };&#13;
&#13;
    presenter.isWCAGOn = false;&#13;
    presenter.playerController = null;&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        ANSWER_HAS_BEEN_SHOWN: "One answer has been shown",&#13;
        ANSWERS_ARE_HIDDEN: "All answers are hidden",&#13;
        NO_NEW_ANSWER_TO_SHOW: "No new answer to show",&#13;
        EDITION_IS_BLOCKED: "Page edition is blocked",&#13;
        EDITION_IS_NOT_BLOCKED: "Page edition is not blocked",&#13;
        DISABLED: "Disabled",&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        return modelValidator.validate(model, [&#13;
            ModelValidators.utils.FieldRename("Is Visible", "isVisible", ModelValidators.Boolean('isVisible')),&#13;
            ModelValidators.utils.FieldRename("Is Disabled", "isDisabled", ModelValidators.Boolean('isDisabled')),&#13;
            ModelValidators.utils.FieldRename("Is hide answers", "isHideAnswers", ModelValidators.Boolean('isHideAnswers')),&#13;
            ModelValidators.String("worksWith", {default: ""}),&#13;
            ModelValidators.DumbString('ID'),&#13;
        ]);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeModelAddDefaultWorksWith(model);&#13;
        return presenter.upgradeModelAddSpeechTextsProperty(upgradedModel);&#13;
    }&#13;
&#13;
    presenter.upgradeModelAddDefaultWorksWith = function(model){&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["worksWith"]) {&#13;
            upgradedModel["worksWith"] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeModelAddSpeechTextsProperty = function(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["AnswerHasBeenShown"]) {&#13;
            upgradedModel["speechTexts"]["AnswerHasBeenShown"] = {AnswerHasBeenShown: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["AnswersAreHidden"]) {&#13;
            upgradedModel["speechTexts"]["AnswersAreHidden"] = {AnswersAreHidden: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["NoNewAnswerToShow"]) {&#13;
            upgradedModel["speechTexts"]["NoNewAnswerToShow"] = {NoNewAnswerToShow: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["EditionIsBlocked"]) {&#13;
            upgradedModel["speechTexts"]["EditionIsBlocked"] = {EditionIsBlocked: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["EditionIsNotBlocked"]) {&#13;
            upgradedModel["speechTexts"]["EditionIsNotBlocked"] = {EditionIsNotBlocked: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["Disabled"]) {&#13;
            upgradedModel["speechTexts"]["Disabled"] = {Disabled: ""};&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.presenterLogic(view, model, presenter.isPreview)&#13;
    };&#13;
&#13;
    presenter.isDisabled = function () {&#13;
        return presenter.state.isDisabled;&#13;
    }&#13;
&#13;
    /**&#13;
     Handle click event.&#13;
&#13;
     @method clickHandler&#13;
     @return {boolean} - command associated with the click event was fully completed correctly&#13;
    */&#13;
    presenter.clickHandler = function AddonGradualShowAnswer_clickHandler(event) {&#13;
        if (event !== undefined) {&#13;
            event.stopPropagation();&#13;
        }&#13;
&#13;
        if (!isClickable()) {&#13;
            return false;&#13;
        }&#13;
  &#13;
        var eventData = {&#13;
            'source': presenter.addonID,&#13;
            'value': presenter.configuration.isHideAnswers ? "HideAllAnswers" : "ShowNextAnswer",&#13;
        };&#13;
        presenter.sendEvent(eventData);&#13;
        return presenter.triggerButtonClickedEvent();&#13;
    };&#13;
&#13;
    /**&#13;
     Check if button is clickable.&#13;
&#13;
     @method isClickable&#13;
     @return {boolean} - true if button clickable, otherwise false&#13;
    */&#13;
    function isClickable() {&#13;
        return !(presenter.isDisabled()&#13;
            &amp;&amp; (!presenter.state.isGradualShowAnswers&#13;
                || presenter.configuration.isHideAnswers));&#13;
    }&#13;
&#13;
    presenter.sendEvent = function (eventData) {&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    /**&#13;
     Trigger button clicked event.&#13;
&#13;
     @method triggerButtonClickedEvent&#13;
     @return {boolean} - command associated with the event was completed correctly&#13;
    */&#13;
    presenter.triggerButtonClickedEvent = function () {&#13;
        if (presenter.playerController == null) {&#13;
            return false;&#13;
        }&#13;
        if (presenter.configuration.isHideAnswers) {&#13;
            presenter.playerController.getCommands().hideGradualAnswers();&#13;
            return true;&#13;
        } else {&#13;
            return presenter.playerController.getCommands().showNextAnswer(presenter.configuration.worksWith);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
&#13;
        const upgradedModel = presenter.upgradeModel(model);&#13;
        const validatedModel = presenter.validateModel(upgradedModel);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.viewElements = {&#13;
            button: presenter.view.getElementsByClassName(classList.BUTTON)[0]&#13;
        };&#13;
&#13;
        presenter.configuration = validatedModel.value;&#13;
&#13;
        if (presenter.configuration.isHideAnswers) {&#13;
            presenter.viewElements.button.classList.add(classList.HIDE_ANSWERS);&#13;
        }&#13;
&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.disable();&#13;
        }&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.addHandleOfMouseActions();&#13;
            presenter.addHandlingGradualShowAnswers();&#13;
        }&#13;
&#13;
        presenter.setSpeechTexts(model["speechTexts"]);&#13;
        presenter.buildKeyboardController();&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.isErrorCheckingMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable,&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.state.isVisible,&#13;
            isDisabled: presenter.state.isDisabled&#13;
        })&#13;
    }&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
        presenter.state.isVisible = parsedState.isVisible;&#13;
        presenter.state.isDisabled = parsedState.isDisabled;&#13;
&#13;
        if (presenter.state.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    }&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    }&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.disable = function () {&#13;
        presenter.state.isDisabled = true;&#13;
    }&#13;
&#13;
    presenter.enable = function () {&#13;
        presenter.state.isDisabled = false;&#13;
    }&#13;
&#13;
    presenter.addHandleOfMouseActions = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            presenter.viewElements.button.addEventListener("touchend", presenter.clickHandler);&#13;
        } else {&#13;
            presenter.viewElements.button.addEventListener("click", presenter.clickHandler);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.addHandlingGradualShowAnswers = function () {&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.addEventListener("GradualShowAnswers", this);&#13;
        eventBus.addEventListener("GradualHideAnswers", this);&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName === "GradualShowAnswers") {&#13;
            presenter.viewElements.button.classList.add(classList.GRADUAL_ACTIVE);&#13;
            presenter.state.isGradualShowAnswers = true;&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.state.isGradualShowAnswers = false;&#13;
            presenter.viewElements.button.classList.remove(classList.GRADUAL_ACTIVE);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isEnabledInGSAMode = function () {&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.reset = function () {&#13;
        if (presenter.configuration.isDisabled) {&#13;
            presenter.disable();&#13;
        } else {&#13;
            presenter.enable();&#13;
        }&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonGradual_Show_Answer__destroy() {&#13;
        presenter.playerController = null;&#13;
        presenter.viewElements.button.removeEventListener("click", presenter.clickHandler);&#13;
        presenter.viewElements.button.removeEventListener("touchend", presenter.clickHandler);&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            AnswerHasBeenShown: presenter.DEFAULT_TTS_PHRASES.ANSWER_HAS_BEEN_SHOWN,&#13;
            AnswersAreHidden: presenter.DEFAULT_TTS_PHRASES.ANSWERS_ARE_HIDDEN,&#13;
            NoNewAnswerToShow: presenter.DEFAULT_TTS_PHRASES.NO_NEW_ANSWER_TO_SHOW,&#13;
            EditionIsBlocked: presenter.DEFAULT_TTS_PHRASES.EDITION_IS_BLOCKED,&#13;
            EditionIsNotBlocked: presenter.DEFAULT_TTS_PHRASES.EDITION_IS_NOT_BLOCKED,&#13;
            Disabled: presenter.DEFAULT_TTS_PHRASES.DISABLED,&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            AnswerHasBeenShown: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.AnswerHasBeenShown.AnswerHasBeenShown,&#13;
                presenter.speechTexts.AnswerHasBeenShown),&#13;
            AnswersAreHidden: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.AnswersAreHidden.AnswersAreHidden,&#13;
                presenter.speechTexts.AnswersAreHidden),&#13;
            NoNewAnswerToShow: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.NoNewAnswerToShow.NoNewAnswerToShow,&#13;
                presenter.speechTexts.NoNewAnswerToShow),&#13;
            EditionIsBlocked: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.EditionIsBlocked.EditionIsBlocked,&#13;
                presenter.speechTexts.EditionIsBlocked),&#13;
            EditionIsNotBlocked: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.EditionIsNotBlocked.EditionIsNotBlocked,&#13;
                presenter.speechTexts.EditionIsNotBlocked),&#13;
            Disabled: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.Disabled.Disabled,&#13;
                presenter.speechTexts.Disabled),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftDown, event);&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject&#13;
            = new GradualShowAnswerKeyboardController([], 1);&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    function GradualShowAnswerKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
        this.updateMapping();&#13;
    }&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    GradualShowAnswerKeyboardController.prototype.constructor = GradualShowAnswerKeyboardController;&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.exitWCAGMode = function () {&#13;
        KeyboardController.prototype.exitWCAGMode.call(this);&#13;
        presenter.setWCAGStatus(false);&#13;
    };&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.updateMapping = function () {&#13;
        this.mapping[window.KeyboardControllerKeys.ENTER] = this.select;&#13;
        this.mapping[window.KeyboardControllerKeys.ARROW_UP] = this.preventDefaultEvent;&#13;
        this.mapping[window.KeyboardControllerKeys.ARROW_DOWN] = this.preventDefaultEvent;&#13;
        this.mapping[window.KeyboardControllerKeys.ARROW_RIGHT] = this.preventDefaultEvent;&#13;
        this.mapping[window.KeyboardControllerKeys.ARROW_LEFT] = this.preventDefaultEvent;&#13;
        this.mapping[window.KeyboardControllerKeys.SPACE] = this.preventDefaultEvent;&#13;
&#13;
        // Functionality of moving to previous/next element is handled by&#13;
        // changeCurrentModule method of KeyboardNavigationController KeyDownHandler&#13;
        this.mapping[window.KeyboardControllerKeys.TAB] = this.preventDefaultEvent;&#13;
        this.shiftKeysMapping[window.KeyboardControllerKeys.TAB] = this.preventDefaultEvent;&#13;
    };&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.preventDefaultEvent = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
    };&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.select = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        if (!this.isSelectEnabled) {&#13;
            return;&#13;
        }&#13;
        const fullyCompletedClickEvent = presenter.clickHandler(event);&#13;
        this.readCurrentElement(fullyCompletedClickEvent);&#13;
    };&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.readCurrentElement = function (fullyCompletedClickEvent = false) {&#13;
        var textVoices = [];&#13;
&#13;
        if (isClickable()) {&#13;
            this.addSpeechTextVoicesOfClickableButton(textVoices, fullyCompletedClickEvent);&#13;
        } else {&#13;
            this.addSpeechTextVoicesOfNotClickableButton(textVoices, fullyCompletedClickEvent);&#13;
        }&#13;
&#13;
        presenter.speak(textVoices);&#13;
    };&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.addSpeechTextVoicesOfClickableButton = function (textVoices, fullyCompletedClickEvent = false) {&#13;
        if (presenter.configuration.isHideAnswers) {&#13;
            addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.AnswersAreHidden);&#13;
            addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.EditionIsNotBlocked);&#13;
        } else {&#13;
            if (fullyCompletedClickEvent) {&#13;
                addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.AnswerHasBeenShown);&#13;
            } else {&#13;
                addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.NoNewAnswerToShow);&#13;
            }&#13;
            addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.EditionIsBlocked);&#13;
        }&#13;
    }&#13;
&#13;
    GradualShowAnswerKeyboardController.prototype.addSpeechTextVoicesOfNotClickableButton = function (textVoices) {&#13;
        addSpeechTextToVoicesArray(textVoices, presenter.speechTexts.Disabled);&#13;
    }&#13;
&#13;
    function addSpeechTextToVoicesArray(textVoices, message) {&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(message));&#13;
    }&#13;
&#13;
    presenter.speak = function (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
        return null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
AddonGradual_Show_Answer_create.__supported_player_options__ = {&#13;
    interfaceVersion: 2&#13;
};&#13;
</presenter></addon>