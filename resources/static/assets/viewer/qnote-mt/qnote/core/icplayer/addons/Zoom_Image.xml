<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Zoom_Image" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Full Screen image" name="Full Screen image" nameLabel="Zoom_Image_property_full_screen_image" type="image"/>
        <property displayName="Page image" name="Page image" nameLabel="Zoom_Image_property_page_image" type="image"/>
        <property name="Alternative text" nameLabel="Zoom_Image_property_alternative_text" type="string"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Zoom_image_property_lang_attribute" type="string"/>
         <property displayName="Speech texts" name="speechTexts" nameLabel="Zoom_image_property_speech_texts" type="staticlist">
            <property name="Closed" nameLabel="Zoom_image_property_closed" type="staticrow">
                <property name="Closed" nameLabel="Zoom_image_property_closed" type="string"/>
            </property>
        </property>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
    </model>
<css>.addon_Zoom_Image .content {&#13;
    position: relative;&#13;
}&#13;
&#13;
.addon_Zoom_Image .content div.icon {&#13;
    position: absolute;&#13;
    background-color: #adff2f;&#13;
    width: 30px;&#13;
    height: 30px;&#13;
    bottom: 0;&#13;
    right: 0;&#13;
}&#13;
&#13;
img.big {&#13;
    display: table;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.close-button-ui-dialog {&#13;
    display: table;&#13;
    top: 0;&#13;
    right: 0;&#13;
    position: absolute;&#13;
    height: 25px;&#13;
    width: 25px;&#13;
    background: rgba(255, 255, 255, 0.15);&#13;
    border-radius: 5px;&#13;
    text-align: center;&#13;
    font-family: monospace;&#13;
    cursor: pointer;&#13;
    color: #FFF;&#13;
}&#13;
&#13;
.close-cross-ui-dialog {&#13;
    font-size: 15px;&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
</css><view>&lt;div class="content"&gt;&#13;
    &lt;div class="icon"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="content"&gt;&#13;
    &lt;div class="icon"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonZoom_Image_create() {&#13;
&#13;
    var presenter = function() {};&#13;
    var eventBus;&#13;
    var playerController = null;&#13;
    var isWCAGOn = false;&#13;
    var oldFocus = null;&#13;
    var backgroundColorStyle;&#13;
    var opacity;&#13;
&#13;
    function setup_presenter() {&#13;
        presenter.$player = null;&#13;
        presenter.view = null;&#13;
        presenter.$view = null;&#13;
        presenter.$image = null;&#13;
        presenter.removeOpenedDialog = null;&#13;
        presenter.bigImageCreated = null;&#13;
        presenter.bigImageLoaded = null;&#13;
        presenter.createPopUp = null;&#13;
        presenter.isOpened = false;&#13;
    }&#13;
&#13;
    setup_presenter();&#13;
&#13;
    function setSmallImage(url) {&#13;
        var $image = $('&lt;img class="small"&gt;');&#13;
        $image.attr("src", url);&#13;
        $image.attr("height", presenter.configuration.height);&#13;
        $image.attr("width", presenter.configuration.width);&#13;
        $image.attr("alt", presenter.configuration.alt);&#13;
        presenter.$view.find("div.content").append($image);&#13;
        if ( presenter.configuration.isTabindexEnabled) {$image.attr('tabindex', '0');}&#13;
    }&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        IMAGE01: "Property Full Screen image and Page image cannot be empty"&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    function parseImage(image) {&#13;
        if (ModelValidationUtils.isStringWithPrefixEmpty(image, "/file/")) {&#13;
            return returnErrorObject("IMAGE01");&#13;
        }&#13;
&#13;
        return returnCorrectObject(image);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        playerController = controller;&#13;
        eventBus = controller.getEventBus();&#13;
    };&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
&#13;
        setSpeechTexts(model['speechTexts']);&#13;
        var validatedBigImage = parseImage(model["Full Screen image"]);&#13;
        if (!validatedBigImage.isValid) {&#13;
            return returnErrorObject(validatedBigImage.errorCode);&#13;
        }&#13;
&#13;
        var validatedSmallImage = parseImage(model["Page image"]);&#13;
        if (!validatedSmallImage.isValid) {&#13;
            return returnErrorObject(validatedSmallImage.errorCode);&#13;
        }&#13;
&#13;
        var isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);&#13;
&#13;
        return {&#13;
            bigImage: validatedBigImage.value,&#13;
            smallImage: validatedSmallImage.value,&#13;
            ID: model.ID,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            isValid: true,&#13;
            alt: model['Alternative text'],&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            langTag: model['langAttribute']&#13;
        }&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function(view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        setSmallImage(presenter.configuration.smallImage);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.eventType = MobileUtils.isMobileUserAgent(navigator.userAgent) ? "touchend" : "click";&#13;
            presenter.$view.find(".icon").on(presenter.eventType, presenter.createPopUp);&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
        }&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {&#13;
                Closed: {Closed: 'closed'}&#13;
            };&#13;
        }&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            closed:  'closed'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            closed: getSpeechTextProperty(speechTexts['Closed']['Closed'], presenter.speechTexts.closed)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.destroy = function () {&#13;
        if (presenter.isOpened) {&#13;
            presenter.removeOpenedDialog();&#13;
            presenter.$image.dialog("close");&#13;
        }&#13;
        presenter.unbindEvents();&#13;
&#13;
        setup_presenter();&#13;
        setup_presenter = null;&#13;
    };&#13;
&#13;
    presenter.unbindEvents = function () {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        presenter.$view.find(".icon").off(presenter.eventType, presenter.createPopUp);&#13;
        if (presenter.$image !== null) {&#13;
            if (presenter.isOpened) {&#13;
                presenter.$view.find('.close-button-ui-dialog').off('click', presenter.removeOpenedDialog);&#13;
            }&#13;
            presenter.$image.off();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        presenter.configuration.isVisible = isVisible;&#13;
    };&#13;
&#13;
    function calculateImageSize(image) {&#13;
        var $player;&#13;
        if(document.getElementById('_icplayer') != null){&#13;
            $player = $('#_icplayer');&#13;
        }else{&#13;
            $player = $('.ic_page_panel');&#13;
        }&#13;
&#13;
        var dialog = {};&#13;
        var x = image.width;&#13;
        var y = image.height;&#13;
        var playerWidth = $player[0].getBoundingClientRect()?.width || $player.width();&#13;
        var playerHeight = $player[0].getBoundingClientRect()?.height || $player.height();&#13;
        var xProportion = x / playerWidth;&#13;
        var yProportion = y / playerHeight;&#13;
&#13;
        if (xProportion &lt; 1 &amp;&amp; yProportion &lt; 1) {&#13;
            dialog.width = x;&#13;
            dialog.height = y;&#13;
        } else if (xProportion &gt; yProportion) {&#13;
            dialog.width = playerWidth;&#13;
            dialog.height = y / xProportion;&#13;
        } else {&#13;
            dialog.height = playerHeight;&#13;
            dialog.width = x / yProportion;&#13;
        }&#13;
&#13;
        return dialog;&#13;
    }&#13;
&#13;
    function sendEvent(value) {&#13;
        var eventData = {&#13;
            source: presenter.configuration.ID,&#13;
            value: value&#13;
        };&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    presenter.removeOpenedDialog = function (e) {&#13;
        $('.ui-widget-overlay').css("opacity", opacity);&#13;
        $('.ui-widget-overlay').css("background", backgroundColorStyle);&#13;
        if(e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        }&#13;
&#13;
        $(".zoom-image-wraper").remove();&#13;
        $(".big").remove();&#13;
        sendEvent(0);&#13;
        presenter.isOpened = false;&#13;
    };&#13;
&#13;
    presenter.bigImageCreated = function() {&#13;
        var $close = $('&lt;div class="close-button-ui-dialog"&gt;');&#13;
        $close.on('click', presenter.removeOpenedDialog);&#13;
&#13;
        $(this).parents(".ui-dialog").append($close);&#13;
&#13;
        var $closeCross= $('&lt;div class="close-cross-ui-dialog"&gt;');&#13;
        $closeCross.html('&amp;times;');&#13;
        $(this).parents(".ui-dialog").children(".close-button-ui-dialog").append($closeCross);&#13;
&#13;
        $(this).parents(".ui-dialog:first").find(".ui-dialog-titlebar").css("display", "none");&#13;
        $(this).parents(".ui-dialog").css("padding", 0);&#13;
        $(this).parents(".ui-dialog").css("border", 0);&#13;
        $(this).parents(".ui-dialog:first").find(".ui-dialog-content").css("padding", 0);&#13;
        sendEvent(1);&#13;
    };&#13;
&#13;
    presenter.bigImageLoaded = function(){&#13;
        if(document.getElementById('_icplayer') != null){&#13;
            presenter.$player  = document.getElementById('_icplayer');&#13;
        }else{&#13;
            presenter.$player  = document.getElementsByClassName('ic_page_panel');&#13;
        }&#13;
&#13;
        var dialogSize = calculateImageSize(this);&#13;
&#13;
        presenter.$image.appendTo(presenter.$view);&#13;
&#13;
        if(!oldFocus &amp;&amp; isWCAGOn &amp;&amp; $.browser.mozilla) {&#13;
            // This hack is meant to prevent issues between TTS and NVDA on Firefox&#13;
            // When the dialog is created, jquery.ui changes browser focus, causing NVDA to speak&#13;
            // simultaneously with TTS. In order to prevent that, jQuery.focus() function is temporarily disabled&#13;
            // and then restored after dialog has been created&#13;
            oldFocus = $.fn.focus;&#13;
            $.fn.focus = function () {&#13;
                return this;&#13;
            };&#13;
        }&#13;
        presenter.$image.dialog({&#13;
            height: dialogSize.height,&#13;
            width: dialogSize.width,&#13;
            modal: true,&#13;
            resizable: false,&#13;
            draggable: false,&#13;
            show: {&#13;
                effect: "fade",&#13;
                duration: 1000&#13;
            },&#13;
            position: {&#13;
                my: "center",&#13;
                at: "center",&#13;
                of: presenter.$player&#13;
            },&#13;
            create: presenter.bigImageCreated,&#13;
            open: function() {&#13;
                opacity = $('.ui-widget-overlay').css("opacity");&#13;
                backgroundColorStyle = $('.ui-widget-overlay').css("background");&#13;
                $('.ui-widget-overlay').css("background", "black");&#13;
                $('.ui-widget-overlay').css("opacity", "0.7");&#13;
                $('.ui-widget-overlay').on(presenter.eventType, presenter.removeOpenedDialog);&#13;
            }&#13;
        });&#13;
        presenter.$image.parent().wrap("&lt;div class='zoom-image-wraper'&gt;&lt;/div&gt;");&#13;
        presenter.$image.on(presenter.eventType, presenter.removeOpenedDialog);&#13;
&#13;
        if(oldFocus) {&#13;
            // Restoring jQuery.focus() after the hack meant to prevent issues between TTS and NVDA on Firefox&#13;
            $.fn.focus = oldFocus;&#13;
            oldFocus = null;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createPopUp = function createPopUp(e) {&#13;
        if(e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        }&#13;
        presenter.$image = $("&lt;img class='big' src='" + presenter.configuration.bigImage + "' alt='"+presenter.configuration.alt+"'&gt;");&#13;
        presenter.$image.on("load", presenter.bigImageLoaded);&#13;
        presenter.isOpened = true;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isVisibleByDefault ? presenter.show() : presenter.hide();&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.isVisible == undefined) {&#13;
            parsedState.isVisible = true;&#13;
        }&#13;
&#13;
        return parsedState;&#13;
    };&#13;
&#13;
    presenter.upgradeState = function(parsedState) {&#13;
        return presenter.upgradeStateForVisibility(parsedState);&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
&#13;
        var parsedState = JSON.parse(state),&#13;
            upgradedState = presenter.upgradeState(parsedState);&#13;
&#13;
        presenter.setVisibility(upgradedState.isVisible);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShift, event) {&#13;
         if (keyCode == window.KeyboardControllerKeys.SPACE ||&#13;
             keyCode == window.KeyboardControllerKeys.ESC ||&#13;
             keyCode == window.KeyboardControllerKeys.ARROW_UP ||&#13;
             keyCode == window.KeyboardControllerKeys.ARROW_DOWN)&#13;
         {&#13;
             event.preventDefault();&#13;
         }&#13;
&#13;
         if (keyCode === 13 &amp;&amp; !isShift) { // Enter button&#13;
            if (!presenter.isOpened) {&#13;
                presenter.createPopUp();&#13;
            }&#13;
            presenter.readAltText();&#13;
        }&#13;
&#13;
        if (keyCode === 27 || keyCode === 9) { // ESC or TAB button&#13;
            presenter.removeOpenedDialog();&#13;
            presenter.$view.removeClass('ic_active_module');&#13;
            if (keyCode === 27) {&#13;
                presenter.readClosed();&#13;
            } else {&#13;
                playerController.getKeyboardController().moveActiveModule(isShift);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readAltText = function() {&#13;
        var speechVoices = [];&#13;
        speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.configuration.alt, presenter.configuration.langTag));&#13;
        speak(speechVoices);&#13;
    };&#13;
&#13;
    presenter.readClosed = function() {&#13;
        var speechVoices = [];&#13;
        speechVoices.push(window.TTSUtils.getTextVoiceObject(presenter.speechTexts.closed));&#13;
        speak(speechVoices);&#13;
    };&#13;
&#13;
    presenter.isEnterable = function() {return presenter.isOpened};&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        model = presenter.upgradeModel(model);&#13;
        var $root = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $root.attr('id',model.ID);&#13;
        $root.addClass('printable_addon_Zoom_Image');&#13;
&#13;
&#13;
        var $img = $('&lt;img&gt;&lt;/img&gt;');&#13;
        $img.attr('src', model['Full Screen image']);&#13;
        $root.append($img);&#13;
        return $root[0].outerHTML;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>