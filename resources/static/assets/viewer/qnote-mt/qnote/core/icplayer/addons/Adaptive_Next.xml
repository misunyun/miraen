<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Adaptive_Next" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Direction" nameLabel="Adaptive_Next_property_next_direction" type="{Next,Previous}"/>
		<property name="Is disabled" nameLabel="Adaptive_Next_property_next_is_disabled" type="boolean"/>
		<property isDefault="true" name="Image" nameLabel="Adaptive_Next_property_next_image" type="image"/>
	</model>
<css>.adaptive-next-button-wrapper {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.adaptive-next-button-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.adaptive-next-button-element-disabled {&#13;
    opacity: .35;&#13;
}&#13;
&#13;
.adaptive-next-button-image {&#13;
    background-repeat: no-repeat;&#13;
    background-size: contain;&#13;
}&#13;
&#13;
</css><view>&lt;div class="adaptive-next-wrapper"&gt;&#13;
    &lt;img class="adaptive-next-button-element adaptive-next-button-image"&gt;&#13;
&#13;
    &lt;/img&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="adaptive-next-wrapper"&gt;&#13;
    &lt;div class="adaptive-next-button-element adaptive-next-button-image"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonAdaptive_Next_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.isAdaptivePreviewMode = false;&#13;
&#13;
    presenter.CONSTANTS = {&#13;
        NEXT_IMAGE: 'baseline-navigate_next-24px.svg',&#13;
        PREV_IMAGE: 'baseline-navigate_before-24px.svg',&#13;
        DISABLED_CLASS: 'adaptive-next-button-element-disabled',&#13;
        ELEMENT_CLASS: 'adaptive-next-button-element'&#13;
    };&#13;
&#13;
    presenter.BUTTON_TYPE = {&#13;
        NEXT: 'Next',&#13;
        PREV: 'Previous'&#13;
    };&#13;
&#13;
    presenter.state = {&#13;
        isVisible: true,&#13;
        isDisabled: false, // based on commands&#13;
        isErrorMode: false&#13;
    };&#13;
&#13;
    presenter.internalState = {&#13;
        isDisabled: false // based on page location in steps&#13;
    }&#13;
&#13;
    presenter.isDisabled = function () {&#13;
        return presenter.state.isDisabled || presenter.internalState.isDisabled;&#13;
    }&#13;
&#13;
    presenter.executeUserEventCode = function() {&#13;
        if (presenter.playerController == null) return;&#13;
        if (presenter.configuration.onClickEvent.isEmpty) return;&#13;
&#13;
        presenter.playerController.getCommands().executeEventCode(presenter.configuration.onClickEvent.value);&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (event) {&#13;
        if (event !== undefined) {&#13;
            event.stopPropagation();&#13;
        }&#13;
&#13;
        if (presenter.isDisabled()) return;&#13;
&#13;
        presenter.triggerButtonClickedEvent();&#13;
    };&#13;
&#13;
    function handleMouseActions() {&#13;
        var $element = presenter.$view.find('.' + presenter.CONSTANTS.ELEMENT_CLASS);&#13;
        $element.click(presenter.clickHandler);&#13;
    }&#13;
&#13;
    function setElementsDimensions(model, wrapper, element) {&#13;
        var viewDimensions = DOMOperationsUtils.getOuterDimensions(presenter.$view);&#13;
        var viewDistances = DOMOperationsUtils.calculateOuterDistances(viewDimensions);&#13;
        presenter.$view.css({&#13;
            width:(model.Width - viewDistances.horizontal) + 'px',&#13;
            height:(model.Height - viewDistances.vertical) + 'px'&#13;
        });&#13;
&#13;
        DOMOperationsUtils.setReducedSize(presenter.$view, wrapper);&#13;
        DOMOperationsUtils.setReducedSize(wrapper, element);&#13;
    }&#13;
&#13;
    function addImageBackground(element) {&#13;
        var resource = presenter.getResourceName();&#13;
        var source = getImageUrlFromResources(resource);&#13;
&#13;
        if (presenter.configuration.Image) {&#13;
            source = presenter.configuration.Image;&#13;
        }&#13;
&#13;
        element.attr('src', source);&#13;
    }&#13;
&#13;
    presenter.isNextButton = function() {&#13;
        return presenter.configuration.Direction === presenter.BUTTON_TYPE.NEXT&#13;
    }&#13;
&#13;
    presenter.getResourceName = function () {&#13;
        if (presenter.isNextButton()) {&#13;
            return presenter.CONSTANTS.NEXT_IMAGE;&#13;
        } else {&#13;
            return presenter.CONSTANTS.PREV_IMAGE;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createElement = function($element) {&#13;
        if (presenter.configuration.isTabindexEnabled) {$element.attr('tabindex', '0');}&#13;
&#13;
        addImageBackground($element);&#13;
    };&#13;
&#13;
    presenter.initView = function () {&#13;
        var $wrapper = $(presenter.$view.find('.adaptive-next-wrapper')[0]);&#13;
        var $element = presenter.$view.find('.' + presenter.CONSTANTS.ELEMENT_CLASS);&#13;
&#13;
        presenter.createElement($element);&#13;
&#13;
        setElementsDimensions(presenter.configuration, $wrapper, $element);&#13;
        presenter.toggleDisable(presenter.configuration.isDisabled);&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
        if (presenter.adaptiveLearningService) {&#13;
            presenter.addStepBasedBehaviour();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
         if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener("DOMNodeRemoved", presenter.destroy);&#13;
        presenter.$view.find('.' + presenter.CONSTANTS.ELEMENT_CLASS).off("click", presenter.clickHandler);&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.addonID = model.ID;&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
&#13;
        var validatedModel = presenter.validateModel(model);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = validatedModel.value;&#13;
&#13;
&#13;
        presenter.initView();&#13;
&#13;
        if (!isPreview) {&#13;
            handleMouseActions();&#13;
        }&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.adaptiveLearningService = presenter.playerController.getAdaptiveLearningService();&#13;
&#13;
        var eventBus = presenter.playerController.getEventBus();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
&#13;
    presenter.validateString = function (imageSrc) {&#13;
        var isEmpty = ModelValidationUtils.isStringEmpty(imageSrc);&#13;
&#13;
        return {&#13;
            isEmpty: isEmpty,&#13;
            value: isEmpty ? "" : imageSrc&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.utils.FieldRename("Is Visible", "isVisible", ModelValidators.Boolean('isVisible')),&#13;
            ModelValidators.Enum('Direction', {&#13;
                default: presenter.BUTTON_TYPE.NEXT,&#13;
                values: [presenter.BUTTON_TYPE.NEXT, presenter.BUTTON_TYPE.PREV]&#13;
            }),&#13;
            ModelValidators.utils.FieldRename("Is disabled", "isDisabled", ModelValidators.Boolean('isDisabled')),&#13;
            ModelValidators.Integer('Width'),&#13;
            ModelValidators.Integer('Height'),&#13;
            ModelValidators.DumbString('ID'),&#13;
            ModelValidators.String('Image', {'default': null})&#13;
        ]);&#13;
&#13;
        return validatedModel;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'enable': presenter.enable,&#13;
            'disable': presenter.disable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.nextButtonTrigger = function() {&#13;
        // if there is next page in saved history, move to that page, otherwise check connections for current page&#13;
        if (presenter.adaptiveLearningService.isNextAdaptivePageAvailable()) {&#13;
            presenter.adaptiveLearningService.moveToNextPage();&#13;
            return;&#13;
        }&#13;
&#13;
        // this allows to inject custom pages states into window object, which will be used instead of player state&#13;
        presenter.isAdaptivePreviewMode = window.adaptivePreviewMode ? true : false;&#13;
&#13;
        var connections = presenter.adaptiveLearningService.getCurrentPageConnections();&#13;
&#13;
        for (var i = 0; i &lt; connections.length; i++) {&#13;
            var isConditionMet = presenter.evaluateCondition(connections[i].conditions);&#13;
&#13;
            if (isConditionMet) {&#13;
                presenter.adaptiveLearningService.addAndMoveToNextPage(connections[i].target);&#13;
                return;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.prevButtonTrigger = function() {&#13;
        presenter.adaptiveLearningService.moveToPrevPage();&#13;
    };&#13;
&#13;
&#13;
    presenter.triggerButtonClickedEvent = function() {&#13;
        if (presenter.adaptiveLearningService == null) return;&#13;
&#13;
        if (presenter.configuration.Direction === presenter.BUTTON_TYPE.PREV) {&#13;
            presenter.prevButtonTrigger();&#13;
        } else {&#13;
            presenter.nextButtonTrigger();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.evaluateCondition = function(condition) {&#13;
        if (condition === '') {&#13;
            return true;&#13;
        }&#13;
        try {&#13;
            return eval(condition);&#13;
        } catch (e) {&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    // needed for condition evaluation&#13;
    function expect(pageID) {&#13;
        if (presenter.isAdaptivePreviewMode) {&#13;
            return window.pagesScores[pageID];&#13;
        } else {&#13;
            var scoreService = presenter.playerController.getScore();&#13;
&#13;
            return scoreService.getPageScoreById(pageID);&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        presenter.state.isVisible = isVisible;&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        presenter.state.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        presenter.state.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.state.isErrorMode = false;&#13;
        presenter.state.isVisible = presenter.configuration.isVisible;&#13;
        if (presenter.configuration.isVisible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        presenter.toggleDisable(this.configuration.isDisabledByDefault);&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        this.toggleDisable(false);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        this.toggleDisable(true);&#13;
    };&#13;
&#13;
    presenter.toggleDisable = function(disable) {&#13;
        presenter.addDisabledClasses(disable);&#13;
        presenter.state.isDisabled = disable;&#13;
    };&#13;
&#13;
    presenter.addDisabledClasses = function(disable) {&#13;
        var element = presenter.$view.find('.' + presenter.CONSTANTS.ELEMENT_CLASS);&#13;
        if (disable) {&#13;
            element.addClass(presenter.CONSTANTS.DISABLED_CLASS);&#13;
        } else {&#13;
            element.removeClass(presenter.CONSTANTS.DISABLED_CLASS);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getState = function() {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.state.isVisible,&#13;
            isDisabled: presenter.state.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        presenter.state.isDisabled = state.isDisabled;&#13;
        presenter.state.isVisible = state.isVisible;&#13;
&#13;
        if (presenter.state.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.toggleDisable(presenter.state.isDisabled);&#13;
        if (presenter.adaptiveLearningService) {&#13;
            presenter.addStepBasedBehaviour();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.state.isErrorMode = true;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.state.isErrorMode = false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.state.isErrorMode = true;&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.state.isErrorMode = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keyCode, isShiftDown, event) {&#13;
        event.preventDefault();&#13;
        if (keyCode == window.KeyboardControllerKeys.ENTER) {&#13;
            presenter.clickHandler();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addStepBasedBehaviour = function() {&#13;
        var shouldBeDisabled = (presenter.adaptiveLearningService.isFirstStep() &amp;&amp; !presenter.isNextButton()) ||&#13;
            (presenter.adaptiveLearningService.isLastStep() &amp;&amp; presenter.isNextButton());&#13;
&#13;
        presenter.internalState.isDisabled = shouldBeDisabled;&#13;
        if (shouldBeDisabled) {&#13;
            presenter.addDisabledClasses(shouldBeDisabled);&#13;
        }&#13;
    }&#13;
&#13;
    function getImageUrlFromResources (fileName) {&#13;
        if (!presenter.playerController) {&#13;
            return '';&#13;
        }&#13;
        return presenter.playerController.getStaticFilesPath() + 'addons/resources/' + fileName;&#13;
    }&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>