<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Text_Selection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Mode" nameLabel="Text_Selection_property_mode" type="{Mark phrases to select, All selectable}"/>
		<property name="Selection type" nameLabel="Text_Selection_property_selection_type" type="{Single select, Multiselect}"/>
		<property isDefault="true" isLocalized="true" name="Text" nameLabel="Text_Selection_property_text" type="html"/>
        <property name="Enable letters selections" nameLabel="Text_Selection_property_enable_letters_selections" type="boolean"/>
        <property displayName="Is Not Activity" name="isNotActivity" nameLabel="Text_Selection_property_is_not_activity" type="boolean"/>
		<property displayName="Enable scrolling on mobile" name="enableScroll" nameLabel="Text_Selection_property_enable_scroll" type="boolean"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Text_Selection_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Text_Selection_property_speech_texts" type="staticlist">

            <property name="selectedSectionStart" nameLabel="Text_Selection_selected_section_start" type="staticrow">
                <property name="selectedSectionStart" nameLabel="Text_Selection_selected_section_start" type="string"/>
            </property>

			<property name="selectedSectionEnd" nameLabel="Text_Selection_selected_section_end" type="staticrow">
                <property name="selectedSectionEnd" nameLabel="Text_Selection_selected_section_end" type="string"/>
            </property>

			<property name="deselected" nameLabel="Text_Selection_deselected" type="staticrow">
                <property name="deselected" nameLabel="Text_Selection_deselected" type="string"/>
            </property>

			<property name="selected" nameLabel="Text_Selection_selected" type="staticrow">
                <property name="selected" nameLabel="Text_Selection_selected" type="string"/>
            </property>

			<property name="wrong" nameLabel="Text_Selection_wrong" type="staticrow">
                <property name="wrong" nameLabel="Text_Selection_wrong" type="string"/>
            </property>

			<property name="correct" nameLabel="Text_Selection_correct" type="staticrow">
                <property name="correct" nameLabel="Text_Selection_correct" type="string"/>
            </property>

            <property name="phrase" nameLabel="Text_Selection_phrase" type="staticrow">
                <property name="phrase" nameLabel="Text_Selection_phrase" type="string"/>
            </property>

			<property name="phraseEnd" nameLabel="Text_Selection_phrase_end" type="staticrow">
                <property name="phraseEnd" nameLabel="Text_Selection_phrase_end" type="string"/>
            </property>
		</property>
        <property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
        <property name="isSplitInPrintBlocked" nameLabel="printable_block_split_label" type="boolean"/>
	</model>
<css>.text_selection .selectable {&#13;
	border-radius: 5px;&#13;
}&#13;
&#13;
.text_selection .selected {&#13;
	background-color: #FAFAD2;&#13;
}&#13;
&#13;
.text_selection .wrong {&#13;
	background-color: #FF6347;&#13;
}&#13;
&#13;
.text_selection .correct {&#13;
	background-color: #7CFC00;&#13;
}&#13;
&#13;
.text_selection .hover {&#13;
	background-color: orange;&#13;
	cursor: pointer;&#13;
}&#13;
&#13;
.text_selection div {&#13;
    min-height: 20px;&#13;
}&#13;
&#13;
.printable_addon_Text_Selection_selected {&#13;
	text-decoration: underline;&#13;
	text-decoration-style: solid;&#13;
	text-decoration-color: black;&#13;
}&#13;
&#13;
.printable_addon_Text_Selection_wrong::after {&#13;
	content: " \2716";&#13;
}&#13;
&#13;
.printable_addon_Text_Selection_correct::after {&#13;
    content: " \2714";&#13;
}&#13;
&#13;
.printable_addon_Text_Selection_correct_answer {&#13;
	text-decoration: underline;&#13;
	text-decoration-style: dotted;&#13;
	text-decoration-color: black;&#13;
}&#13;
</css><view/><preview/><presenter>function AddonText_Selection_create() {&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.eventBus = null;&#13;
    presenter.playerController = null;&#13;
    presenter.textParser = null;&#13;
    presenter.selected_elements = null;&#13;
    presenter.isWorkMode = true;&#13;
    presenter.markedMathJaxContent = [];&#13;
    presenter.areAllPhrasesSingleWord = true;&#13;
    presenter._keyboardController = null;&#13;
    presenter._firstElementSwitch = true;&#13;
    presenter.isGradualShowAnswersActive = false;&#13;
    presenter.printableState = null;&#13;
    presenter.printableStateMode = null;&#13;
    presenter.activeGradualShowAnswersItems = [];&#13;
    var isWCAGOn = false;&#13;
&#13;
    var SELECTED_SECTION_START = "&amp;\n&amp;SELECTED_SECTION_START&amp;\n&amp;";&#13;
    var SELECTED_SECTION_END = "&amp;\n&amp;SELECTED_SECTION_END&amp;\n&amp;";&#13;
    var CORRECT_SECTION_START = "&amp;\n&amp;CORRECT_SECTION_START&amp;\n&amp;";&#13;
    var CORRECT_SECTION_END = "&amp;\n&amp;CORRECT_SECTION_END&amp;\n&amp;";&#13;
    var WRONG_SECTION_START = "&amp;\n&amp;WRONG_SECTION_START&amp;\n&amp;";&#13;
    var WRONG_SECTION_END = "&amp;\n&amp;WRONG_SECTION_END&amp;\n&amp;";&#13;
    var SELECTED ="&amp;\n&amp;SELECTED&amp;\n&amp;";&#13;
    var WRONG = "&amp;\n&amp;WRONG&amp;\n&amp;";&#13;
    var CORRECT = "&amp;\n&amp;CORRECT&amp;\n&amp;";&#13;
    var SPLIT = "&amp;\n&amp;SPLIT&amp;\n&amp;";&#13;
    var PHRASE = "&amp;\n&amp;PHRASE&amp;\n&amp;";&#13;
    var PHRASE_END = "&amp;\n&amp;PHRASE_END&amp;\n&amp;";&#13;
&#13;
    var MATH_JAX_MARKER = 'MATHJAX';&#13;
&#13;
    var DEFAULT_TTS_PHRASES = {&#13;
        selectedSectionStart: 'start of selected section',&#13;
        selectedSectionEnd: 'end of selected section',&#13;
        selected: 'selected',&#13;
        deselected: 'deselected',&#13;
        wrong: 'wrong',&#13;
        correct: 'correct',&#13;
        phrase: 'phrase',&#13;
        phraseEnd: 'end of phrase',&#13;
    };&#13;
&#13;
    var CSS_CLASSES = {&#13;
        SELECTABLE: "selectable",&#13;
        SELECTED: "selected",&#13;
        PRINTABLE: "printable_addon_Text_Selection",&#13;
        PRINTABLE_SELECTED: "printable_addon_Text_Selection_selected",&#13;
        PRINTABLE_WRONG: "printable_addon_Text_Selection_wrong",&#13;
        PRINTABLE_CORRECT: "printable_addon_Text_Selection_correct",&#13;
        PRINTABLE_CORRECT_ANSWER: "printable_addon_Text_Selection_correct_answer",&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        this.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    /**&#13;
     * @param controller (PrintableController)&#13;
     */&#13;
    presenter.setPrintableController = function (controller) {&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    }&#13;
&#13;
    function getEventData(it, val, sc) {&#13;
        return {&#13;
            'source': presenter.configuration.addonID,&#13;
            'item': '' + it,&#13;
            'value': '' + val,&#13;
            'score': '' + sc&#13;
        }&#13;
    }&#13;
&#13;
    presenter.sendEvent = function(item, value, score, checkIsAllOK) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', getEventData(&#13;
            parseInt(item, 10) + 1,&#13;
            value ? 1 : 0,&#13;
            score ? 1 : 0&#13;
        ));&#13;
&#13;
        if (presenter.isAllOK() &amp;&amp; checkIsAllOK &amp;&amp; presenter.configuration.isActivity) sendAllOKEvent();&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        presenter.eventBus.sendEvent('ValueChanged', getEventData('all', '', ''));&#13;
    }&#13;
&#13;
    var first = 0,&#13;
        beforeActive = false,&#13;
        lastMoveEvent = null;&#13;
&#13;
    function isLastSpecialSign(word) {&#13;
        return ['.', ',', '?', '!', ';', ':'].indexOf(word[word.length-1]) != -1;&#13;
    }&#13;
&#13;
    presenter.isStartedCorrect = function(word) {&#13;
        return (/\\correct{/).test(word);&#13;
    };&#13;
&#13;
    presenter.isStartedWrong = function(word) {&#13;
        return (/\\wrong{/).test(word);&#13;
    };&#13;
&#13;
    presenter.hasOpeningBracket = function(word) {&#13;
        return (/{/).test(word);&#13;
    };&#13;
&#13;
    presenter.hasClosingBracket = function(word) {&#13;
        return (/}/).test(word);&#13;
    };&#13;
&#13;
    presenter.getWrongWords = function(word) {&#13;
        var pattern = (/(.*)\\wrong{(.*)}(.*)/);&#13;
        return pattern.exec(word).slice(1);&#13;
    };&#13;
&#13;
    presenter.getCorrectWords = function(word) {&#13;
        var pattern = (/(.*)\\correct{(.*)}(.*)/);&#13;
        return pattern.exec(word).slice(1);&#13;
    };&#13;
&#13;
    presenter.isMarkedCorrect = function(word) {&#13;
        var counted = this.countBrackets(word);&#13;
        return (/\\correct{.*}/).test(word) &amp;&amp; (counted.open === counted.close);&#13;
    };&#13;
&#13;
    presenter.isMarkedWrong = function(word) {&#13;
        var counted = this.countBrackets(word);&#13;
        return (/\\wrong{.*}/).test(word) &amp;&amp; (counted.open === counted.close);&#13;
    };&#13;
&#13;
    presenter.cutMarkedCorrect = function(word) {&#13;
        var countedBrackets = this.countBrackets(word);&#13;
        if (isLastSpecialSign(word)) {&#13;
            word = word.replace(/\\correct{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word.substring(0, word.length-1);&#13;
        } else {&#13;
            word = word.replace(/\\correct{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cutMarkedWrong = function(word) {&#13;
        var countedBrackets = this.countBrackets(word);&#13;
        if (isLastSpecialSign(word)) {&#13;
            word = word.replace(/\\wrong{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word.substring(0, word.length - 1);&#13;
        } else {&#13;
            word = word.replace(/\\wrong{/, '');&#13;
            if (countedBrackets.open === countedBrackets.close) {&#13;
                word = word.replace(/}([^}]*)$/,'$1');&#13;
            }&#13;
            return word;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.cutLastClosingBracket = function (word) {&#13;
        return word.replace(/}([^}]*)$/, '$1');&#13;
    };&#13;
&#13;
    presenter.countBrackets = function (word) {&#13;
        return {&#13;
            open: word.split("{").length - 1,&#13;
            close: word.split("}").length - 1&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getSpanByNumber = function (number) {&#13;
        return presenter.$view.find('.text_selection').find(`span[number='${number}']`);&#13;
    };&#13;
&#13;
    presenter.handleSingleSelection = function () {&#13;
        if (presenter.configuration.selection_type === 'SINGLESELECT') {&#13;
            presenter.handleSingleSelectionSingleSelect();&#13;
        } else if (presenter.configuration.selection_type === 'MULTISELECT') {&#13;
            presenter.handleSingleSelectionMultiSelect();&#13;
        }&#13;
&#13;
        const $span = presenter.getSpanByNumber(first);&#13;
        if ($span.hasClass('selectable')) {&#13;
            presenter.sendEvent($span.attr('number'), $span.hasClass('selected'), isCorrect($span), true);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleSingleSelectionSingleSelect = function() {&#13;
        const selected = presenter.$view.find('.text_selection').find('.selected');&#13;
        const $span = presenter.getSpanByNumber(first);&#13;
&#13;
        if (selected.length === 0) {&#13;
            if ($span.hasClass('selectable')) {&#13;
                $span.addClass('selected');&#13;
            }&#13;
        } else if (selected.length === 1) {&#13;
            if (parseInt(selected.attr('number'), 10) === parseInt(first, 10)) {&#13;
                selected.removeClass('selected');&#13;
            } else {&#13;
                if ($span.hasClass('selectable')) {&#13;
                    selected.removeClass('selected');&#13;
                    $span.toggleClass('selected');&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleSingleSelectionMultiSelect = function() {&#13;
        const $span = presenter.getSpanByNumber(first);&#13;
&#13;
        if ($span.hasClass('selectable')) {&#13;
            $span.toggleClass('selected');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleMultipleSelection = function (last) {&#13;
        const isSelectedRightToLeft = first &gt; last;&#13;
        if (isSelectedRightToLeft) [first, last] = [last, first];&#13;
&#13;
        if (presenter.configuration.selection_type === 'SINGLESELECT') {&#13;
            presenter.handleMultipleSelectionSingleSelect(last, isSelectedRightToLeft);&#13;
        } else if (presenter.configuration.selection_type === 'MULTISELECT') {&#13;
            presenter.handleMultipleSelectionMultiSelect(last);&#13;
        }&#13;
&#13;
        for (let i = first; i &lt; last + 1; i++) {&#13;
            const $span = presenter.getSpanByNumber(i);&#13;
            if ($span.hasClass('selectable')) {&#13;
                presenter.sendEvent($span.attr('number'), $span.hasClass('selected'), isCorrect($span), i === last);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleMultipleSelectionSingleSelect = function (last, isSelectedRightToLeft) {&#13;
        const selected = presenter.$view.find('.text_selection').find('.selected');&#13;
        const $span = isSelectedRightToLeft ? this.getSpanByNumber(first) : this.getSpanByNumber(last);&#13;
        if ($span.hasClass('selectable')) {&#13;
            if (selected.length === 1) $(selected).removeClass('selected');&#13;
            $span.toggleClass('selected');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleMultipleSelectionMultiSelect = function (last) {&#13;
        for (let i = first; i &lt; last + 1; i++) {&#13;
            const $span = presenter.getSpanByNumber(i);&#13;
            if ($span.hasClass('selectable')) {&#13;
                $span.toggleClass('selected');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getNumberAttribute = function (et) {&#13;
        const elementNumber = parseInt($(et).attr('number'), 10);&#13;
        const parentNumber = parseInt($(et).closest('span.selectable').attr('number'), 10);&#13;
&#13;
        return isNaN(elementNumber) ? parentNumber : elementNumber;&#13;
    }&#13;
&#13;
    presenter.startSelection = function (et) {&#13;
        first = presenter.getNumberAttribute(et);&#13;
    };&#13;
&#13;
    presenter.endSelection = function (et) {&#13;
        if (isNaN(first)) {&#13;
            first = 0;&#13;
            return false;&#13;
        }&#13;
&#13;
        let last = presenter.getNumberAttribute(et);&#13;
        const isMultipleSelected = first !== last;&#13;
&#13;
        if ($(et).hasClass('text_selection')) {&#13;
            last = first;&#13;
        }&#13;
&#13;
        if (isMultipleSelected) {&#13;
            presenter.handleMultipleSelection(last);&#13;
        } else if (!beforeActive) {&#13;
            presenter.handleSingleSelection();&#13;
        }&#13;
&#13;
        first = 0;&#13;
        beforeActive = false;&#13;
        if (window.getSelection) {&#13;
            window.getSelection().removeAllRanges();&#13;
        } else if (document.selection) {&#13;
            document.selection.empty();&#13;
        }&#13;
    };&#13;
&#13;
    function isCorrect($element) {&#13;
        var number = parseInt($($element).attr('number'), 10),&#13;
            isInCorrectArray = $.inArray(number, presenter.markers.markedCorrect) &gt;= 0;&#13;
        return $element.hasClass('selected') ? isInCorrectArray : !isInCorrectArray;&#13;
    }&#13;
&#13;
    presenter.turnOnEventListeners = function () {&#13;
        var $text_selection = presenter.$view.find('.text_selection');&#13;
        if (presenter.configuration.isTabindexEnabled) {$text_selection.attr('tabindex', '0');}&#13;
&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            if (presenter.configuration.enableScroll) {&#13;
&#13;
                var posDiff = 0;&#13;
                var lastScreenPos = {X:0, Y:0};&#13;
                $text_selection.on('touchstart', function (e) {&#13;
                    e.stopPropagation();&#13;
                    posDiff = 0;&#13;
                    var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
                    lastScreenPos.X = temp.screenX;&#13;
                    lastScreenPos.Y = temp.screenY;&#13;
                });&#13;
&#13;
                $text_selection.on('touchend', function (e) {&#13;
                    e.stopPropagation();&#13;
                    if (posDiff&lt;15) {&#13;
                        presenter.startSelection(e.target);&#13;
                        presenter.endSelection(e.target);&#13;
                        presenter.configuration.isExerciseStarted = true;&#13;
                     }&#13;
                });&#13;
&#13;
                $text_selection.on('touchmove', function (e) {&#13;
                    e.stopPropagation();&#13;
                    var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
                    posDiff += Math.abs(lastScreenPos.X - temp.screenX) + Math.abs(lastScreenPos.Y - temp.screenY);&#13;
                    lastScreenPos.X = temp.screenX;&#13;
                    lastScreenPos.Y = temp.screenY;&#13;
                });&#13;
            } else {&#13;
                $text_selection.on('touchstart', function (e) {&#13;
                    e.stopPropagation();&#13;
                    e.preventDefault();&#13;
                    presenter.startSelection(e.target);&#13;
                });&#13;
&#13;
                $text_selection.on('touchend', function (e) {&#13;
                    e.stopPropagation();&#13;
                    presenter.configuration.isExerciseStarted = true;&#13;
                    e.preventDefault();&#13;
                    if (lastMoveEvent != null) {&#13;
                        presenter.endSelection(lastMoveEvent);&#13;
                    } else {&#13;
                        presenter.endSelection(e.target);&#13;
                    }&#13;
                    lastMoveEvent = null;&#13;
                });&#13;
&#13;
                $text_selection.on('touchmove', function (e) {&#13;
                    e.stopPropagation();&#13;
                   e.preventDefault();&#13;
                    var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
&#13;
                    lastMoveEvent = $(document.elementFromPoint(temp.pageX - $(document).scrollLeft(), temp.pageY - $(document).scrollTop()));&#13;
                });&#13;
            }&#13;
        } else {&#13;
            $text_selection.on('mouseup', function (e) {&#13;
                e.stopPropagation();&#13;
                presenter.configuration.isExerciseStarted = true;&#13;
                presenter.endSelection(e.target);&#13;
            });&#13;
&#13;
            $text_selection.on('mousedown', function (e) {&#13;
                e.stopPropagation();&#13;
                presenter.startSelection(e.target);&#13;
            });&#13;
&#13;
            $text_selection.find('.selectable').hover(&#13;
                function () {&#13;
                    $(this).addClass("hover");&#13;
                },&#13;
                function () {&#13;
                    $(this).removeClass("hover");&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        $text_selection.on('click', function (e) {&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.configuration.areEventListenersOn = true;&#13;
    };&#13;
&#13;
    presenter.turnOffEventListeners = function () {&#13;
        var $text_selection = presenter.$view.find('.text_selection'),&#13;
            selectable = $text_selection.find('.selectable');&#13;
&#13;
        $text_selection.off();&#13;
        selectable.off();&#13;
&#13;
        presenter.configuration.areEventListenersOn = false;&#13;
    };&#13;
&#13;
    presenter.turnOnShowAnswersListeners = function () {&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
        presenter.eventBus.addEventListener("GradualShowAnswers", this);&#13;
        presenter.eventBus.addEventListener("GradualHideAnswers", this);&#13;
    };&#13;
&#13;
    function getSpace(i) {&#13;
        return "&lt;span left=\"" + i + "\" right=\"" + (i + 1) + "\"&gt; &lt;/span&gt;";&#13;
    }&#13;
&#13;
    function getSpecialIfStarted(word) {&#13;
        return isLastSpecialSign(word) &amp;&amp; (presenter.isStartedWrong(word) || presenter.isStartedCorrect(word)) ? word[word.length - 1] : "";&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function(model) {&#13;
        var upgradedModel = upgradeModelEnableScrollProperty(model);&#13;
        upgradedModel = upgradeLangTag(upgradedModel);&#13;
        return presenter.upgradeSpeechTexts(upgradedModel);&#13;
    };&#13;
&#13;
    function upgradeModelEnableScrollProperty(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!upgradedModel['enableScroll']){&#13;
            upgradedModel['enableScroll'] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    function upgradeLangTag(model) {&#13;
        let upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["selectedSectionStart"]) {&#13;
            upgradedModel["speechTexts"]["selectedSectionStart"]&#13;
              = {selectedSectionStart: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["selectedSectionEnd"]) {&#13;
            upgradedModel["speechTexts"]["selectedSectionEnd"]&#13;
              = {selectedSectionEnd: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["selected"]) {&#13;
            upgradedModel["speechTexts"]["selected"]&#13;
              = {selected: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["deselected"]) {&#13;
            upgradedModel["speechTexts"]["deselected"]&#13;
              = {deselected: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["wrong"]) {&#13;
            upgradedModel["speechTexts"]["wrong"]&#13;
              = {wrong: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["correct"]) {&#13;
            upgradedModel["speechTexts"]["correct"]&#13;
              = {correct: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["phrase"]) {&#13;
            upgradedModel["speechTexts"]["phrase"]&#13;
              = {phrase: ""};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["phraseEnd"]) {&#13;
            upgradedModel["speechTexts"]["phraseEnd"]&#13;
              = {phraseEnd: ""};&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            selectedSectionStart: DEFAULT_TTS_PHRASES.selectedSectionStart,&#13;
            selectedSectionEnd: DEFAULT_TTS_PHRASES.selectedSectionEnd,&#13;
            selected: DEFAULT_TTS_PHRASES.selected,&#13;
            deselected: DEFAULT_TTS_PHRASES.deselected,&#13;
            wrong: DEFAULT_TTS_PHRASES.wrong,&#13;
            correct: DEFAULT_TTS_PHRASES.correct,&#13;
            phrase: DEFAULT_TTS_PHRASES.phrase,&#13;
            phraseEnd: DEFAULT_TTS_PHRASES.phraseEnd&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            selectedSectionStart: getSpeechTextProperty(&#13;
                speechTexts.selectedSectionStart.selectedSectionStart,&#13;
                presenter.speechTexts.selectedSectionStart),&#13;
            selectedSectionEnd: getSpeechTextProperty(&#13;
                speechTexts.selectedSectionEnd.selectedSectionEnd,&#13;
                presenter.speechTexts.selectedSectionEnd),&#13;
            correct: getSpeechTextProperty(&#13;
                speechTexts.correct.correct,&#13;
                presenter.speechTexts.correct),&#13;
            wrong: getSpeechTextProperty(&#13;
                speechTexts.wrong.wrong,&#13;
                presenter.speechTexts.wrong),&#13;
            selected: getSpeechTextProperty(&#13;
                speechTexts.selected.selected,&#13;
                presenter.speechTexts.selected),&#13;
            deselected: getSpeechTextProperty(&#13;
                speechTexts.deselected.deselected,&#13;
                presenter.speechTexts.deselected),&#13;
            phrase: getSpeechTextProperty(&#13;
                speechTexts.phrase.phrase,&#13;
                presenter.speechTexts.phrase),&#13;
            phraseEnd: getSpeechTextProperty(&#13;
                speechTexts.phraseEnd.phraseEnd,&#13;
                presenter.speechTexts.phraseEnd)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.presenterLogic = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        if (isPreview) {&#13;
            presenter.$view.append($(presenter.configuration.renderedPreview));&#13;
        } else {&#13;
            presenter.$view.append($(presenter.configuration.renderedRun));&#13;
            presenter.setVisibility(presenter.configuration.isVisible);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        M01: 'Text cannot be empty',&#13;
        M02: 'Text cannot be w/o \\correct{} or \\wrong{}',&#13;
        M03: 'You cannot use \\wrong{} in "All selectable" mode',&#13;
        M04: 'Empty word in marker',&#13;
        M05: 'In single selection you have to mark only one phrase as correct and at least one mark as wrong',&#13;
        M06: '\\alt{} cannot contain \\correct{} or \\wrong{}',&#13;
        M07: 'When in All selectable mode \\alt{} visible text section must contain only a single word'&#13;
    };&#13;
&#13;
    presenter.MODE = {&#13;
        'Mark phrases to select': 'MARK_PHRASES',&#13;
        'All selectable': 'ALL_SELECTABLE',&#13;
        DEFAULT: 'Mark phrases to select'&#13;
    };&#13;
&#13;
    presenter.SELECTION_TYPE = {&#13;
        'Single select': 'SINGLESELECT',&#13;
        'Multiselect': 'MULTISELECT',&#13;
        DEFAULT: 'Single select'&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model, false);&#13;
        presenter.turnOnEventListeners();&#13;
        presenter.turnOnShowAnswersListeners();&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    function getErrorObject(ec) {&#13;
        return {isValid: false, errorCode: ec};&#13;
    }&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var parsedText;&#13;
&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(model.Text)) {&#13;
            return getErrorObject('M01');&#13;
        }&#13;
&#13;
        if (!presenter.vaildateTagsInAltText(model.Text)){&#13;
            return getErrorObject('M06');&#13;
        }&#13;
&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model['Is Tabindex Enabled']);&#13;
        var mode = ModelValidationUtils.validateOption(presenter.MODE, model.Mode);&#13;
        var selection_type = ModelValidationUtils.validateOption(presenter.SELECTION_TYPE, model['Selection type']);&#13;
&#13;
        var wordSelection = ModelValidationUtils.validateBoolean(model['Enable letters selections']);&#13;
&#13;
        if(mode == "ALL_SELECTABLE" &amp;&amp; !presenter.validateSingleWordAltText(model.Text)) {&#13;
            return getErrorObject('M07');&#13;
        }&#13;
&#13;
        presenter.areAllPhrasesSingleWord = !presenter.detectMultipleWordPhrases(model.Text);&#13;
&#13;
        var preparedText = model.Text;&#13;
        if (presenter.textParser) {&#13;
            preparedText = presenter.textParser.parseAltTexts(model.Text);&#13;
        } else {&#13;
            preparedText = window.TTSUtils.parsePreviewAltText(model.Text);&#13;
        }&#13;
        if (wordSelection) {&#13;
            parsedText = presenter.parseCharacters(preparedText, mode, selection_type);&#13;
        } else {&#13;
            parsedText = presenter.parseWords(preparedText, mode, selection_type);&#13;
        }&#13;
&#13;
        if (!parsedText.isValid) {&#13;
            return getErrorObject(parsedText.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            mode: mode,&#13;
            selection_type: selection_type,&#13;
            renderedRun: parsedText.renderedRun,&#13;
            renderedPreview: parsedText.renderedPreview,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isVisibleByDefault: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isExerciseStarted: false,&#13;
            areEventListenersOn: true,&#13;
            addonID: model['ID'],&#13;
            isActivity: !(ModelValidationUtils.validateBoolean(model['isNotActivity'])),&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            enableScroll: ModelValidationUtils.validateBoolean(model['enableScroll']),&#13;
            langTag: model['langAttribute']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getMarked = function (wrong, correct) {&#13;
        return {&#13;
            markedWrong: wrong,&#13;
            markedCorrect: correct&#13;
        };&#13;
    };&#13;
&#13;
    presenter.connectWords = function (words) {&#13;
        var i, j,&#13;
            longWord = '',&#13;
            result = [];&#13;
&#13;
        for (i = 0; i &lt; words.length; i++) {&#13;
            if ((presenter.isStartedCorrect(words[i]) || presenter.isStartedWrong(words[i])) &amp;&amp; !presenter.isMarkedCorrect(words[i]) &amp;&amp; !presenter.isMarkedWrong(words[i])) {&#13;
                if (presenter.isStartedCorrect(words[i])) {&#13;
                    longWord += words[i] + ' ';&#13;
                    for (j = i + 1; j &lt; words.length; j++) {&#13;
                        if (presenter.hasClosingBracket(words[j])) {&#13;
                            longWord += words[j];&#13;
                            i = j;&#13;
                            j = words.length + 1;&#13;
                        } else {&#13;
                            longWord += words[j] + ' ';&#13;
                        }&#13;
                    }&#13;
                    result.push(longWord);&#13;
                    longWord = '';&#13;
                } else if (presenter.isStartedWrong(words[i])) {&#13;
                    longWord += words[i] + ' ';&#13;
                    for (j = i + 1; j &lt; words.length; j++) {&#13;
                        if (presenter.hasClosingBracket(words[j])) {&#13;
                            longWord += words[j];&#13;
                            i = j;&#13;
                            j = words.length + 1;&#13;
                        } else {&#13;
                            longWord += words[j] + ' ';&#13;
                        }&#13;
                    }&#13;
                    result.push(longWord);&#13;
                    longWord = '';&#13;
                }&#13;
            } else {&#13;
                result.push(words[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.parseCharacters = function (text, mode, selection_type) {&#13;
        var i,&#13;
            result = '',&#13;
            words = [],&#13;
            markedCorrect = [],&#13;
            markedWrong = [],&#13;
            renderedPreview = '',&#13;
            renderedRun = '',&#13;
            amountWrong,&#13;
            amountCorrect,&#13;
            isTagClosed = true,&#13;
            spanNumber = 0,&#13;
            tmpWord = '',&#13;
            wrongMarkerInAllSelectable = false,&#13;
            emptyWord = false,&#13;
            stack = 0,&#13;
            counted = null;&#13;
&#13;
        text = presenter.removeNonBreakingSpacesInWith(text, ' ');&#13;
&#13;
        HTMLParser(text.replace(/&amp;nbsp;/g, ' '), {&#13;
            start: function (tag, attrs, unary) {&#13;
                renderedPreview += "&lt;" + tag;&#13;
                renderedRun += "&lt;" + tag;&#13;
&#13;
                for (i = 0; i &lt; attrs.length; i++) {&#13;
                    renderedPreview += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                    renderedRun += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                }&#13;
&#13;
                renderedPreview += (unary ? "/" : "") + "&gt;";&#13;
                renderedRun += (unary ? "/" : "") + "&gt;";&#13;
            },&#13;
            end: function (tag) {&#13;
                renderedPreview += "&lt;/" + tag + "&gt;";&#13;
                renderedRun += "&lt;/" + tag + "&gt;";&#13;
            },&#13;
            chars: function (text) {&#13;
                //words = text.match(/\\?[\sa-zA-Z0-9\.\,]+(?:\{[\sa-zA-Z0-9]+\})?/g);&#13;
                words = text.split("\\");&#13;
                for (var j = 0; j &lt; words.length; j++) {&#13;
                    if (words[0] == "") {&#13;
                        words.splice(0, 1);&#13;
                    }&#13;
                }&#13;
                for (var i = 0; i &lt; words.length; i++) {&#13;
                    if (words[0] == "") {&#13;
                        words.splice(0, 1);&#13;
                    }&#13;
                    if (words[i].indexOf("correct{") &gt; -1 || words[i].indexOf("wrong{") &gt; -1) {&#13;
                        words[i] = '\\' + words[i];&#13;
                    }&#13;
                }&#13;
&#13;
                for (i = 0; i &lt; words.length; i++) {&#13;
                    if (isTagClosed === true) {&#13;
                        if (words[i] === ' ') {&#13;
                            renderedPreview += getSpace(spanNumber);&#13;
                            renderedRun += getSpace(spanNumber);&#13;
                        } else if (presenter.isMarkedCorrect(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedCorrect(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            if (counted.open &gt; counted.close) {&#13;
                                renderedPreview += '&lt;span class="correct selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                isTagClosed = false;&#13;
                                markedCorrect.push(spanNumber);&#13;
                                spanNumber++;&#13;
                            } else {&#13;
                                $.each(presenter.getCorrectWords(words[i]), function (index, word) {&#13;
                                    if (word.length == 0) {&#13;
                                        if (index == 1) {&#13;
                                            markedCorrect.push(spanNumber);&#13;
                                        }&#13;
                                        return;&#13;
                                    }&#13;
                                    var selectable = index == 1 ? 'selectable' : '',&#13;
                                        correct = index == 1 ? 'correct' : '';&#13;
                                    renderedPreview += '&lt;span class="' + correct + ' ' + selectable + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    if (mode === 'ALL_SELECTABLE') {&#13;
                                        renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                        markedWrong.push(spanNumber);&#13;
                                    } else {&#13;
                                        renderedRun += '&lt;span class="' + selectable + '" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    }&#13;
                                    if (index == 1) {&#13;
                                        markedCorrect.push(spanNumber);&#13;
                                    }&#13;
                                    spanNumber++;&#13;
                                });&#13;
                            }&#13;
&#13;
                            if (ModelValidationUtils.isStringEmpty(tmpWord)) {&#13;
                                emptyWord = true;&#13;
                            }&#13;
                        } else if (presenter.isMarkedWrong(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedWrong(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            if (counted.open &gt; counted.close) {&#13;
                                renderedPreview += '&lt;span class="wrong selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                                isTagClosed = false;&#13;
                                markedWrong.push(spanNumber);&#13;
                                spanNumber++;&#13;
                            } else {&#13;
                                $.each(presenter.getWrongWords(words[i]), function (index, word) {&#13;
                                    if (word.length == 0) {&#13;
                                        if (index == 1) {&#13;
                                            markedWrong.push(spanNumber);&#13;
                                        }&#13;
                                        return;&#13;
                                    }&#13;
                                    var selectable = index == 1 ? 'selectable' : '',&#13;
                                        wrong = index == 1 ? 'wrong' : '';&#13;
                                    renderedPreview += '&lt;span class="' + wrong + ' ' + selectable + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    renderedRun += '&lt;span class="' + selectable + '" number="' + spanNumber + '"&gt;' + word + '&lt;/span&gt;';&#13;
                                    if (index == 1) {&#13;
                                        markedWrong.push(spanNumber);&#13;
                                    }&#13;
                                    spanNumber++;&#13;
                                });&#13;
                            }&#13;
&#13;
                            if (ModelValidationUtils.isStringEmpty(tmpWord)) {&#13;
                                emptyWord = true;&#13;
                            }&#13;
                            if (mode === 'ALL_SELECTABLE') {&#13;
                                wrongMarkerInAllSelectable = true;&#13;
                            }&#13;
                        } else if (presenter.isStartedCorrect(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedCorrect(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            renderedPreview += '&lt;span class="correct selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            markedCorrect.push(spanNumber);&#13;
                            spanNumber++;&#13;
                            isTagClosed = false;&#13;
                        } else if (presenter.isStartedWrong(words[i])) {&#13;
                            tmpWord = presenter.cutMarkedWrong(words[i]);&#13;
&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            renderedPreview += '&lt;span class="wrong selectable"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + tmpWord + getSpecialIfStarted(words[i]);&#13;
                            markedWrong.push(spanNumber);&#13;
                            spanNumber++;&#13;
                            isTagClosed = false;&#13;
                        } else {&#13;
                            counted = presenter.countBrackets(words[i]);&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
&#13;
                            if (mode === 'ALL_SELECTABLE') {&#13;
                                renderedRun += '&lt;span class="selectable" number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
                                markedWrong.push(spanNumber);&#13;
                            } else if (mode === 'MARK_PHRASES') {&#13;
                                renderedRun += '&lt;span number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
                            }&#13;
                            renderedPreview += '&lt;span number="' + spanNumber + '"&gt;' + words[i] + '&lt;/span&gt;';&#13;
&#13;
                            spanNumber++;&#13;
                        }&#13;
                    } else { // isTagClosed === false&#13;
                        counted = presenter.countBrackets(words[i]);&#13;
                        if (counted.open === counted.close) {&#13;
                            renderedPreview += words[i] + ' ';&#13;
                            renderedRun += words[i] + ' ';&#13;
                        } else {&#13;
                            if (counted.close &gt;= (stack + counted.open)) {&#13;
                                tmpWord = presenter.cutLastClosingBracket(words[i]);&#13;
                            } else {&#13;
                                tmpWord = words[i];&#13;
                            }&#13;
                            stack += counted.open;&#13;
                            stack -= counted.close;&#13;
                            if (stack === 0) {&#13;
                                renderedPreview += tmpWord + '&lt;/span&gt;';&#13;
                                renderedRun += tmpWord + '&lt;/span&gt;';&#13;
                                isTagClosed = true;&#13;
                            } else {&#13;
                                renderedPreview += tmpWord + ' ';&#13;
                                renderedRun += tmpWord + ' ';&#13;
                            }&#13;
                        }&#13;
                    }&#13;
                }&#13;
                text = words.join(' ');&#13;
                result += text;&#13;
            },&#13;
            comment: function (text) {&#13;
            }&#13;
        });&#13;
&#13;
        amountCorrect = markedCorrect.length;&#13;
        amountWrong = markedWrong.length;&#13;
&#13;
        presenter.markers = presenter.getMarked(markedWrong, markedCorrect);&#13;
&#13;
        if (amountCorrect === 0 &amp;&amp; amountWrong === 0) {&#13;
            return getErrorObject('M02');&#13;
        }&#13;
&#13;
        if (wrongMarkerInAllSelectable) {&#13;
            return getErrorObject('M03');&#13;
        }&#13;
&#13;
        if (emptyWord) {&#13;
            return getErrorObject('M04');&#13;
        }&#13;
&#13;
        if ((amountCorrect !== 1 || amountWrong &lt; 1) &amp;&amp; selection_type === 'SINGLESELECT') { // HasOneCorrectAtLeastOneWrongInSingleSelectionTypeSelection&#13;
            return getErrorObject('M05');&#13;
        }&#13;
&#13;
        renderedRun = presenter.deselectSpansWithOnlySpaces(renderedRun);&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            renderedPreview: '&lt;div class="text_selection"&gt;' + renderedPreview + '&lt;/div&gt;',&#13;
            renderedRun: '&lt;div class="text_selection"&gt;' + renderedRun + '&lt;/div&gt;',&#13;
            markedWrong: markedWrong,&#13;
            markedCorrect: markedCorrect&#13;
        };&#13;
    };&#13;
&#13;
    presenter.deselectSpansWithOnlySpaces = function (htmlString) {&#13;
        var $text = $(htmlString);&#13;
&#13;
        var textWithDeselectedSpaces = "";&#13;
        $text.each(function () {&#13;
            var $element = $(this);&#13;
            if ($element.hasClass("selectable")) {&#13;
                if ($element.text().trim() == "") {&#13;
                    $element.removeClass("selectable");&#13;
                }&#13;
            }&#13;
            textWithDeselectedSpaces += $(this).context.outerHTML;&#13;
        });&#13;
&#13;
        return textWithDeselectedSpaces;&#13;
    };&#13;
&#13;
    presenter.removeNonBreakingSpacesInWith = function (text, changeTo) {&#13;
        var textWithoutSpaces = "";&#13;
&#13;
        while (true) {&#13;
            var nbspIndex = text.indexOf("&amp;nbsp;");&#13;
            if (nbspIndex === -1) {&#13;
                textWithoutSpaces += text;&#13;
                break;&#13;
            }&#13;
&#13;
            textWithoutSpaces = textWithoutSpaces + text.slice(0, nbspIndex) + changeTo;&#13;
            text = text.slice(nbspIndex + 6, text.length);&#13;
        }&#13;
&#13;
        return textWithoutSpaces;&#13;
    };&#13;
&#13;
    presenter.markMathJax = function (text) {&#13;
        var findMathJaxRex = /\\\(.*?\\\)/g;&#13;
        var match = findMathJaxRex.exec(text);&#13;
        while (match !== null) {&#13;
            text = text.replace(match[0], MATH_JAX_MARKER + presenter.markedMathJaxContent.length);&#13;
            presenter.markedMathJaxContent.push(match[0]);&#13;
            match = findMathJaxRex.exec(text);&#13;
        }&#13;
&#13;
        return text;&#13;
    };&#13;
&#13;
    presenter.retrieveMathJax = function (text) {&#13;
        for (var i = 0; i &lt; presenter.markedMathJaxContent.length; i++) {&#13;
            text = text.replace(new RegExp(MATH_JAX_MARKER + i, 'g'), presenter.markedMathJaxContent[i]);&#13;
        }&#13;
        return text;&#13;
    };&#13;
&#13;
    function wrapText(text, classes, number) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;');&#13;
        classes.forEach(function (c) {&#13;
            $span.addClass(c);&#13;
        });&#13;
        if (number !== undefined) {&#13;
            $span.attr('number', number);&#13;
        }&#13;
        $span.html(text);&#13;
&#13;
        return $span[0].outerHTML;&#13;
    }&#13;
&#13;
    function wrapSpaces(spaces, num) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;');&#13;
        $span.attr('left', num);&#13;
        $span.attr('right', num + 1);&#13;
        $span.html(spaces);&#13;
&#13;
        return $span[0].outerHTML;&#13;
    }&#13;
&#13;
    presenter.parseWords = function (text, mode, selection_type) {&#13;
        text = presenter.markMathJax(text.replace(/&amp;nbsp;/g, ' '));&#13;
        var previewHTML = '', runHTML = '';&#13;
        var spanIndex = 0;&#13;
        var spansMarkedCorrect = [], spansMarkedWrong = [];&#13;
        var isEmptyWord = false;&#13;
        var isWrongMarker = false;&#13;
&#13;
        var correct = /\\correct{([^}]+)?}/.source;&#13;
        var wrong = /\\wrong{([^}]+)?}/.source;&#13;
        var tags = /(&lt;[^&gt;]+?&gt;)/.source;&#13;
        var word = /([^\s\.,#!$%\^\*:{}=\-_`~\(\)&lt;&gt;]+)/.source;&#13;
        var whiteSpaces = /([\s\.,#!$%\^\*:{}=\-_`~\(\)]+)/.source;&#13;
&#13;
        var mainRex = new RegExp([correct, wrong, tags, word, whiteSpaces].join('|'), 'g');&#13;
&#13;
        var match = mainRex.exec(text);&#13;
        while (match !== null) {&#13;
            if (match[1]) { // correct&#13;
                if (match[1] === '') isEmptyWord = true;&#13;
                previewHTML += wrapText(match[1], ['correct', 'selectable']);&#13;
                runHTML += wrapText(match[1], ['selectable'], spanIndex);&#13;
                spansMarkedCorrect.push(spanIndex);&#13;
                spanIndex++;&#13;
            } else if (match[2]) { // wrong&#13;
                if (match[2] === '') isEmptyWord = true;&#13;
                isWrongMarker = true;&#13;
                previewHTML += wrapText(match[2], ['wrong', 'selectable']);&#13;
                runHTML += wrapText(match[2], ['selectable'], spanIndex);&#13;
                spansMarkedWrong.push(spanIndex);&#13;
                spanIndex++;&#13;
            } else if (match[3]) { // HTML tag&#13;
                previewHTML += match[3];&#13;
                runHTML += match[3];&#13;
            } else if (match[4]) { // words&#13;
                if (mode === 'ALL_SELECTABLE') { // word&#13;
                    previewHTML += match[4];&#13;
                    runHTML += wrapText(match[4], ['selectable'], spanIndex);&#13;
                    spansMarkedWrong.push(spanIndex);&#13;
                } else {&#13;
                    previewHTML += match[4];&#13;
                    runHTML += wrapText(match[4], [], spanIndex);&#13;
                }&#13;
                spanIndex++;&#13;
            } else { // spaces&#13;
                previewHTML += match[5];&#13;
                runHTML += wrapSpaces(match[5], spanIndex - 1);&#13;
            }&#13;
&#13;
            // get next match&#13;
            match = mainRex.exec(text);&#13;
        }&#13;
&#13;
        presenter.markers = {&#13;
            markedCorrect: spansMarkedCorrect,&#13;
            markedWrong: spansMarkedWrong&#13;
        };&#13;
&#13;
        if (spansMarkedCorrect.length === 0 &amp;&amp; spansMarkedWrong.length === 0) {&#13;
            return getErrorObject('M02');&#13;
        }&#13;
&#13;
        if (mode === 'ALL_SELECTABLE' &amp;&amp; isWrongMarker) {&#13;
            return getErrorObject('M03');&#13;
        }&#13;
&#13;
        if (isEmptyWord) {&#13;
            return getErrorObject('M04');&#13;
        }&#13;
&#13;
        if ((spansMarkedCorrect.length !== 1 || spansMarkedWrong.length &lt; 1) &amp;&amp; selection_type === 'SINGLESELECT') {&#13;
            return getErrorObject('M05');&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            renderedPreview: '&lt;div class="text_selection"&gt;' + presenter.retrieveMathJax(previewHTML) + '&lt;/div&gt;',&#13;
            renderedRun: '&lt;div class="text_selection"&gt;' + presenter.retrieveMathJax(runHTML) + '&lt;/div&gt;'&#13;
        };&#13;
&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (!presenter.configuration.isValid) return;&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted': presenter.isAttempted&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.activeGradualShowAnswersItems = [];&#13;
        presenter.selected_elements = null;&#13;
&#13;
        presenter.$view.find('.text_selection').find('.selected').removeClass('selected');&#13;
        presenter.setWorkMode();&#13;
        presenter.setVisibility(presenter.configuration.isVisibleByDefault);&#13;
        presenter.configuration.isVisible = presenter.configuration.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        let returnToShowAnswers = false;&#13;
        let returnToGradualShowAnswers = false;&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
            returnToShowAnswers = true;&#13;
        } else if (presenter.isGradualShowAnswersActive) {&#13;
            presenter.gradualHideAnswers();&#13;
            returnToGradualShowAnswers = true;&#13;
        }&#13;
&#13;
        const allSelected = presenter.$view.find('.text_selection').find('.selected');&#13;
        const numberSelected = [];&#13;
&#13;
        for (let i = 0; i &lt; allSelected.length; i++) {&#13;
            numberSelected.push($(allSelected[i]).attr('number'));&#13;
        }&#13;
&#13;
        if (returnToShowAnswers) presenter.showAnswers();&#13;
        if (returnToGradualShowAnswers) presenter.restoreGradualShowAnswers();&#13;
&#13;
        return JSON.stringify({&#13;
            numbers: numberSelected,&#13;
            isVisible: presenter.configuration.isVisible,&#13;
            isExerciseStarted: presenter.configuration.isExerciseStarted&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (ModelValidationUtils.isStringEmpty(state)) return;&#13;
&#13;
        var parsed = JSON.parse(state),&#13;
            nums = parsed.numbers,&#13;
            isVisible = parsed.isVisible,&#13;
            isExerciseStarted = parsed.isExerciseStarted;&#13;
&#13;
        for (var i = 0; i &lt; nums.length; i++) {&#13;
            presenter.$view.find('.text_selection').find("span[number='" + nums[i] + "']").addClass("selected");&#13;
        }&#13;
&#13;
        if (isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.configuration.isVisible = isVisible;&#13;
        presenter.configuration.isExerciseStarted = isExerciseStarted;&#13;
    };&#13;
&#13;
    function intersection(a, b) {&#13;
        return a.filter(function (i) {&#13;
            return b.indexOf(parseInt(i, 10)) !== -1;&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
&#13;
            presenter.isWorkMode = false;&#13;
&#13;
            presenter.turnOffEventListeners();&#13;
&#13;
            if (!presenter.configuration.isExerciseStarted) return false;&#13;
&#13;
            if (presenter.isShowAnswers) presenter.hideAnswers();&#13;
&#13;
            var i;&#13;
&#13;
            var numbersSelected = presenter.$view.find('.text_selection').find('.selected').map(function () {&#13;
                return this.getAttribute('number');&#13;
            }).get();&#13;
&#13;
            var numbersCorrect = presenter.markers.markedCorrect;&#13;
            var numbersWrong = presenter.markers.markedWrong;&#13;
&#13;
            var correctSelected = intersection(numbersSelected, numbersCorrect);&#13;
&#13;
            for (i = 0; i &lt; correctSelected.length; i++) {&#13;
                presenter.$view.find('.text_selection').find("span[number='" + correctSelected[i] + "']").addClass('correct');&#13;
            }&#13;
&#13;
            var selectedWrong = intersection(numbersSelected, numbersWrong);&#13;
            for (i = 0; i &lt; selectedWrong.length; i++) {&#13;
                presenter.$view.find('.text_selection').find("span[number='" + selectedWrong[i] + "']").addClass('wrong');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            if (presenter.isShowAnswers) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
&#13;
            presenter.isWorkMode = true;&#13;
&#13;
            presenter.$view.find('.text_selection').find('.correct').removeClass('correct');&#13;
            presenter.$view.find('.text_selection').find('.wrong').removeClass('wrong');&#13;
&#13;
            presenter.selected_elements = presenter.$view.find('.text_selection').find('.selected');&#13;
            presenter.turnOffEventListeners();&#13;
            presenter.turnOnEventListeners();&#13;
        }&#13;
    };&#13;
&#13;
    function points(selector) {&#13;
        var $selectedElements = null;&#13;
        if (!presenter.isShowAnswers) {&#13;
            $selectedElements = presenter.$view.find('.text_selection').find('.selected');&#13;
        } else {&#13;
            if (presenter.selected_elements) {&#13;
                $selectedElements = presenter.selected_elements;&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
        }&#13;
        var numbersSelected = $selectedElements.map(function () {&#13;
            return parseInt(this.getAttribute('number'), 10);&#13;
        }).get();&#13;
&#13;
        return intersection(selector, numbersSelected).length;&#13;
    }&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            return points(presenter.markers.markedWrong);&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            return presenter.markers.markedCorrect.length;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.configuration.isActivity) {&#13;
            return points(presenter.markers.markedCorrect);&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        var isMaxScore = presenter.getMaxScore() == presenter.getScore();&#13;
        var hasErrors = presenter.getErrorCount() &gt; 0;&#13;
&#13;
        return isMaxScore &amp;&amp; !hasErrors;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (presenter.isShowAnswers) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return presenter.$view.find('.text_selection').find('.selected').length &gt; 0;&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswers) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (!presenter.isWorkMode) {&#13;
            presenter.setWorkMode();&#13;
        }&#13;
&#13;
        presenter.turnOffEventListeners();&#13;
&#13;
        presenter.isShowAnswers = true;&#13;
        presenter.saveAndRemoveSelection();&#13;
&#13;
        var allSelectable = presenter.$view.find(".selectable");&#13;
        presenter.showAnswersForElements(allSelectable.length);&#13;
    };&#13;
&#13;
    presenter.showAnswersForElements = function (count) {&#13;
        for (var i = 0; i &lt; count; i++) {&#13;
            var elem = presenter.$view.find(".selectable")[i];&#13;
            var elem_number = parseInt($(elem).attr("number"), 10);&#13;
&#13;
            if (presenter.markers.markedCorrect.indexOf(elem_number) !== -1) {&#13;
                $(elem).addClass("correct-answer");&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.showCorrectAnswer = function (item) {&#13;
        var elementNumber = presenter.markers.markedCorrect[item];&#13;
        var $elem = presenter.$view.find(".selectable[number='" + elementNumber + "']");&#13;
        $elem.addClass("correct-answer");&#13;
    }&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.isShowAnswers) {&#13;
            return false;&#13;
        }&#13;
&#13;
        presenter.turnOnEventListeners();&#13;
&#13;
        presenter.activeGradualShowAnswersItems = [];&#13;
        presenter.isShowAnswers = false;&#13;
        presenter.restoreSelection();&#13;
    };&#13;
&#13;
    presenter.saveAndRemoveSelection = function () {&#13;
        presenter.selected_elements = presenter.$view.find(".selected");&#13;
        presenter.selected_elements.removeClass("selected");&#13;
    }&#13;
&#13;
    presenter.restoreSelection = function () {&#13;
        presenter.$view.find(".correct-answer").removeClass("correct-answer");&#13;
        if (presenter.selected_elements != null) presenter.selected_elements.addClass("selected");&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (eventName === "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName === "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        } else if (eventName === "GradualShowAnswers") {&#13;
            if (presenter.configuration.areEventListenersOn) {&#13;
                presenter.turnOffEventListeners();&#13;
            }&#13;
            if (data.moduleID === presenter.configuration.addonID) {&#13;
                presenter.gradualShowAnswers(parseInt(data.item, 10));&#13;
            }&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.activeGradualShowAnswersItems = [];&#13;
            presenter.gradualHideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    var TextSelectionKeyboardController = function (elements, elementsCount) {&#13;
        KeyboardController.call(this, elements, elementsCount);&#13;
        presenter._firstElementSwitch = true;&#13;
    };&#13;
&#13;
    TextSelectionKeyboardController.prototype = Object.create(KeyboardController.prototype);&#13;
&#13;
    TextSelectionKeyboardController.prototype.select = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        if( presenter.isWorkMode &amp;&amp; !presenter.isShowAnswers ) {&#13;
            presenter.startSelection(this.getTarget(this.keyboardNavigationCurrentElement, true));&#13;
            presenter.endSelection(this.getTarget(this.keyboardNavigationCurrentElement, true));&#13;
            presenter.configuration.isExerciseStarted = true;&#13;
            presenter.readSelection(this.getTarget(this.keyboardNavigationCurrentElement, true).hasClass('selected'));&#13;
        }&#13;
    };&#13;
&#13;
    TextSelectionKeyboardController.prototype.switchElement = function (move) {&#13;
        if (presenter._firstElementSwitch) {&#13;
            presenter._firstElementSwitch = false;&#13;
            this.markCurrentElement(0);&#13;
        } else {&#13;
            var new_position_index = this.keyboardNavigationCurrentElementIndex + move;&#13;
            if (new_position_index &lt; this.keyboardNavigationElementsLen &amp;&amp; new_position_index &gt;= 0) {&#13;
                KeyboardController.prototype.switchElement.call(this, move);&#13;
            }&#13;
        }&#13;
        presenter.readActiveElement(this.keyboardNavigationElements[this.keyboardNavigationCurrentElementIndex]);&#13;
    };&#13;
&#13;
    TextSelectionKeyboardController.prototype.enter = function (event) {&#13;
        event.preventDefault();&#13;
        this.keyboardNavigationActive = true;&#13;
        presenter.readContent();&#13;
    };&#13;
&#13;
     TextSelectionKeyboardController.prototype.escape = function (event) {&#13;
         presenter._firstElementSwitch = true;&#13;
         Object.getPrototypeOf(TextSelectionKeyboardController.prototype).escape.call(this);&#13;
     };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        var $text_selection = presenter.$view.find('.text_selection');&#13;
        var toSelect = $text_selection.find('.selectable');&#13;
        var jQueryToSelect = [];&#13;
        for (var i = 0; i &lt; toSelect.length; i++) {&#13;
            jQueryToSelect.push($(toSelect[i]));&#13;
        }&#13;
&#13;
        presenter._keyboardController = new TextSelectionKeyboardController(jQueryToSelect, toSelect.length);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        if (keycode === window.KeyboardControllerKeys.ESC) {&#13;
            event.preventDefault();&#13;
        }&#13;
&#13;
        if (presenter._keyboardController === null) {&#13;
            presenter.buildKeyboardController();&#13;
        }&#13;
&#13;
        presenter._keyboardController.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    presenter.readActiveElement = function($element) {&#13;
        if (!$element) {&#13;
            $element = presenter.$view.find('.keyboard_navigation_active_element');&#13;
        }&#13;
&#13;
        if ($element.length === 0) return;&#13;
&#13;
        var textVoices = presenter.getElementTextVoices($element);&#13;
        speak(textVoices);&#13;
    };&#13;
&#13;
    presenter.getElementTextVoices = function($element) {&#13;
        var textVoices = [];&#13;
&#13;
        var readPhrases = presenter.configuration.mode != "ALL_SELECTABLE" &amp;&amp; !presenter.areAllPhrasesSingleWord;&#13;
        if (readPhrases) {&#13;
            addTextVoiceForSelectableSpans(textVoices, $element);&#13;
        }&#13;
&#13;
        addTextVoiceForElement(textVoices, $element);&#13;
&#13;
        if (readPhrases) {&#13;
            addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.phraseEnd);&#13;
        }&#13;
&#13;
        if ($element.hasClass('selected')) {&#13;
            addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selected);&#13;
        }&#13;
&#13;
        if ($element.hasClass('correct')) {&#13;
            addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.correct);&#13;
        } else if ($element.hasClass('wrong')) {&#13;
            addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.wrong);&#13;
        } else if ($element.hasClass('correct-answer')) {&#13;
            addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selected);&#13;
        }&#13;
&#13;
        return textVoices;&#13;
    };&#13;
&#13;
    function addTextVoiceForElement(textVoices, $element) {&#13;
        var contentText = '';&#13;
        var langTag = '';&#13;
        var $ariaLabel = $element.closest('.addon_Text_Selection span[aria-label]:has(span[aria-hidden="true"])');&#13;
        if ($ariaLabel.length &gt; 0) {&#13;
            contentText = $ariaLabel.attr('aria-label');&#13;
            langTag = $ariaLabel.attr('lang');&#13;
            if (!langTag) {&#13;
               langTag =  presenter.configuration.langTag;&#13;
            }&#13;
        } else {&#13;
            contentText = presenter.getTextFromElementWithAltTexts($element);&#13;
            langTag = presenter.configuration.langTag;&#13;
        }&#13;
        textVoices.push(window.TTSUtils.getTextVoiceObject(contentText, langTag));&#13;
    }&#13;
&#13;
    function addTextVoiceForSelectableSpans(textVoices, $element) {&#13;
        var elementIndex = -1;&#13;
&#13;
        var selectables = presenter.$view.find('.selectable');&#13;
        var selectablesSize = selectables.size();&#13;
        if (selectablesSize &gt; 0) {&#13;
            for (var i = 0; i &lt; selectablesSize; i++) {&#13;
                if ($(selectables[i]).is($element)) {&#13;
                    elementIndex = i + 1;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var phraseText = presenter.speechTexts.phrase;&#13;
        if (elementIndex &gt; 0) {&#13;
            phraseText += ' ' + elementIndex;&#13;
        }&#13;
        addTextVoiceWithLanguageFromLesson(textVoices, phraseText);&#13;
    }&#13;
&#13;
    presenter.readSelection = function(selected) {&#13;
        var textVoices = [];&#13;
        var speechText = selected&#13;
            ? presenter.speechTexts.selected&#13;
            : presenter.speechTexts.deselected;&#13;
        addTextVoiceWithLanguageFromLesson(textVoices, speechText);&#13;
        speak(textVoices);&#13;
    };&#13;
&#13;
    presenter.readContent = function() {&#13;
        var textVoices = [];&#13;
        if(presenter.configuration.mode == "ALL_SELECTABLE") {&#13;
            textVoices = presenter.getSectionsTextVoices(presenter.$view);&#13;
        } else if(presenter.areAllPhrasesSingleWord) {&#13;
            textVoices = presenter.getWordsTextVoices(presenter.$view);&#13;
        } else {&#13;
            textVoices = presenter.getPhrasesTextVoices(presenter.$view);&#13;
        }&#13;
        speak(textVoices);&#13;
    };&#13;
&#13;
    presenter.getWordsTextVoices = function($element) {&#13;
        var sanitizedHTML = window.xssUtils.sanitize($element[0].outerHTML);&#13;
        var $sanitizedElement = $(sanitizedHTML);&#13;
&#13;
        $($sanitizedElement).find('.selectable').each(function(){&#13;
            var $this = $(this);&#13;
&#13;
            if ($this.hasClass('selected')) {&#13;
                $this.html(SPLIT + $this.html() + SPLIT + SELECTED + SPLIT);&#13;
            }&#13;
            if ($this.hasClass('correct-answer')) {&#13;
                $this.html(SPLIT + $this.html() + SPLIT + SELECTED + SPLIT);&#13;
            } else if ($this.hasClass('wrong')) {&#13;
                $this.html(SPLIT + $this.html() + SPLIT + WRONG + SPLIT);&#13;
            } else if ($this.hasClass('correct')) {&#13;
                $this.html(SPLIT + $this.html() + SPLIT + CORRECT + SPLIT);&#13;
            }&#13;
        });&#13;
&#13;
        var textArray = presenter.getTextFromElementWithAltTexts($sanitizedElement).split(SPLIT);&#13;
&#13;
        var textVoices = [];&#13;
&#13;
        for(var i = 0; i &lt; textArray.length; i++) {&#13;
            if(textArray[i].trim().length == 0) continue;&#13;
            if (0 === textArray[i].localeCompare(SELECTED)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selected);&#13;
            } else if (0 === textArray[i].localeCompare(CORRECT)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.correct);&#13;
            } else if (0 === textArray[i].localeCompare(WRONG)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.wrong);&#13;
            } else {&#13;
                addTextVoiceWithLanguageFromPresenter(textVoices, textArray[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return textVoices;&#13;
    };&#13;
&#13;
    presenter.getPhrasesTextVoices = function($element) {&#13;
        var sanitizedHTML = window.xssUtils.sanitize($element[0].outerHTML);&#13;
        var $sanitizedElement = $(sanitizedHTML);&#13;
&#13;
        $sanitizedElement.find('.selectable').each(function(index){&#13;
            var $this = $(this);&#13;
&#13;
            $this.html(SPLIT + PHRASE + ' ' + (index+1) + SPLIT + $this.html() + SPLIT + PHRASE_END + SPLIT );&#13;
&#13;
            if ($this.hasClass('selected')) {&#13;
                $this.html($this.html() + SELECTED + SPLIT);&#13;
            }&#13;
            if ($this.hasClass('correct-answer')) {&#13;
                $this.html($this.html() + SELECTED + SPLIT);&#13;
            } else if ($this.hasClass('wrong')) {&#13;
                $this.html($this.html() + WRONG + SPLIT);&#13;
            } else if ($this.hasClass('correct')) {&#13;
                $this.html($this.html() + CORRECT + SPLIT);&#13;
            }&#13;
        });&#13;
&#13;
        var textArray = presenter.getTextFromElementWithAltTexts($sanitizedElement).split(SPLIT);&#13;
&#13;
        var textVoices = [];&#13;
&#13;
        for(var i = 0; i &lt; textArray.length; i++) {&#13;
            if(textArray[i].trim().length == 0) continue;&#13;
            if (-1 !== textArray[i].indexOf(PHRASE)) {&#13;
                textVoices.push(window.TTSUtils.getTextVoiceObject(textArray[i].replace(PHRASE, presenter.speechTexts.phrase)));&#13;
            } else if (0 === textArray[i].localeCompare(PHRASE_END)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.phraseEnd);&#13;
            } else if (0 === textArray[i].localeCompare(SELECTED)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selected);&#13;
            } else if (0 === textArray[i].localeCompare(CORRECT)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.correct);&#13;
            } else if (0 === textArray[i].localeCompare(WRONG)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.wrong);&#13;
            } else {&#13;
                addTextVoiceWithLanguageFromPresenter(textVoices, textArray[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return textVoices;&#13;
    };&#13;
&#13;
    function setSectionWrappingText($el, start_text, end_text) {&#13;
        var $parent = $el.closest('.addon_Text_Selection  span[aria-label]:has(span[aria-hidden="true"])');&#13;
        if($parent!=null &amp;&amp; $parent.length &gt; 0){&#13;
          $el = $parent;&#13;
        }&#13;
        $el.before($('&lt;span&gt;' + start_text + '&lt;/span&gt;'));&#13;
        $el.after($('&lt;span&gt;' + end_text + '&lt;/span&gt;'));&#13;
    }&#13;
&#13;
    presenter.getSectionsTextVoices = function($element) {&#13;
        var $clone = $element.clone();&#13;
&#13;
        $clone.find('.selectable').each(function(){&#13;
            var $this = $(this);&#13;
&#13;
            if ($this.hasClass('correct-answer')) {&#13;
                setSectionWrappingText($(this), SELECTED_SECTION_START, SELECTED_SECTION_END);&#13;
            } else if ($this.hasClass('wrong')) {&#13;
                setSectionWrappingText($(this), WRONG_SECTION_START, WRONG_SECTION_END);&#13;
            } else if ($this.hasClass('correct')) {&#13;
                setSectionWrappingText($(this), CORRECT_SECTION_START, CORRECT_SECTION_END);&#13;
            } else if ($this.hasClass('selected')) {&#13;
                setSectionWrappingText($(this), SELECTED_SECTION_START, SELECTED_SECTION_END);&#13;
            }&#13;
        });&#13;
&#13;
        var contentText = presenter.getTextFromElementWithAltTexts($clone);&#13;
&#13;
        contentText = replaceAll(contentText, SELECTED_SECTION_END + '([^\\w\\d]*)' + SELECTED_SECTION_START, '$1');&#13;
        contentText = replaceAll(contentText, CORRECT_SECTION_END + '([^\\w\\d]*)' + CORRECT_SECTION_START, '$1');&#13;
        contentText = replaceAll(contentText, WRONG_SECTION_END + '([^\\w\\d]*)' + WRONG_SECTION_START, '$1');&#13;
&#13;
        contentText = replaceAll(contentText, SELECTED_SECTION_START, SPLIT + SELECTED_SECTION_START + SPLIT);&#13;
        contentText = replaceAll(contentText, SELECTED_SECTION_END, SPLIT + SELECTED_SECTION_END + SPLIT);&#13;
        contentText = replaceAll(contentText, CORRECT_SECTION_START, SPLIT + SELECTED_SECTION_START + SPLIT);&#13;
        contentText = replaceAll(contentText, CORRECT_SECTION_END, SPLIT + SELECTED_SECTION_END + SPLIT + CORRECT + SPLIT);&#13;
        contentText = replaceAll(contentText, WRONG_SECTION_START, SPLIT + SELECTED_SECTION_START + SPLIT);&#13;
        contentText = replaceAll(contentText, WRONG_SECTION_END, SPLIT + SELECTED_SECTION_END + SPLIT + WRONG + SPLIT);&#13;
&#13;
        var textArray = contentText.split(SPLIT);&#13;
&#13;
        var textVoices = [];&#13;
&#13;
&#13;
        for(var i = 0; i &lt; textArray.length; i++) {&#13;
            if(textArray[i].trim().length == 0) continue;&#13;
            if (0 === textArray[i].localeCompare(SELECTED_SECTION_START)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selectedSectionStart);&#13;
            } else if (0 === textArray[i].localeCompare(SELECTED_SECTION_END)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.selectedSectionEnd);&#13;
            } else if (0 === textArray[i].localeCompare(CORRECT)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.correct);&#13;
            } else if (0 === textArray[i].localeCompare(WRONG)) {&#13;
                addTextVoiceWithLanguageFromLesson(textVoices, presenter.speechTexts.wrong);&#13;
            } else {&#13;
                addTextVoiceWithLanguageFromPresenter(textVoices, textArray[i]);&#13;
            }&#13;
        }&#13;
&#13;
        return textVoices;&#13;
&#13;
    };&#13;
&#13;
    presenter.getTextFromElementWithAltTexts = function($element) {&#13;
        /*&#13;
        * This method assumes, that the only things requiring parsing are alt text elements!&#13;
        * Image alt attributes are only partially handled&#13;
        * */&#13;
        var text = '';&#13;
        var textVoices = window.TTSUtils.getTextVoiceArrayFromElement($element,presenter.configuration.langTag);&#13;
        for (var i = 0; i &lt; textVoices.length; i++) {&#13;
            text += textVoices[i].text;&#13;
        }&#13;
        return text;&#13;
    };&#13;
&#13;
    function replaceAll(source, search, replace) {&#13;
        return source.replace(new RegExp(search, 'g'), replace);&#13;
    }&#13;
&#13;
    function addTextVoiceWithLanguageFromLesson(textVoices, message) {&#13;
        addTextVoice(textVoices, message, false);&#13;
    }&#13;
&#13;
    function addTextVoiceWithLanguageFromPresenter(textVoices, message) {&#13;
        addTextVoice(textVoices, message, true);&#13;
    }&#13;
&#13;
    function addTextVoice(textVoices, message, usePresenterLangTag = false) {&#13;
        if (usePresenterLangTag) {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(message, presenter.configuration.langTag));&#13;
        } else {&#13;
            textVoices.push(window.TTSUtils.getTextVoiceObject(message));&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
        if (!isOn) {&#13;
            presenter._firstElementSwitch = true;&#13;
        }&#13;
    };&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
    * Return false if detected a \wrong or \correct tag within alt text, true otherwise&#13;
    * */&#13;
    presenter.vaildateTagsInAltText = function(text) {&#13;
        var correctMatch = text.match(/\\alt{[^}]*?\\correct.*?}/g) != null;&#13;
        var wrongMatch = text.match(/\\alt{[^}]*?\\wrong.*?}/g) != null;&#13;
        return !(correctMatch || wrongMatch);&#13;
    };&#13;
&#13;
    /*&#13;
    * Return false if detected an alt text where visible text section contains more than one word, true otherwise&#13;
    * */&#13;
    presenter.validateSingleWordAltText = function(text) {&#13;
        var re = /\\alt{([^{}|]*?)\|[^{}|]*?}+/g; //Find all alt text elements&#13;
        do {&#13;
            var match = re.exec(text); //get the next match&#13;
            if(match &amp;&amp; !isSingleWord(match[1])) {&#13;
                return false;&#13;
            }&#13;
        } while (match);&#13;
        return true;&#13;
    };&#13;
&#13;
    function isSingleWord(text) {&#13;
        return !/[\s,.]/.test(text.trim());&#13;
    }&#13;
&#13;
    presenter.detectMultipleWordPhrases = function(text) {&#13;
        var parsedText = window.TTSUtils.parsePreviewAltText(text);&#13;
        var regex_correct = /\\correct{([^}]*?)}/g;&#13;
        var regex_wrong = /\\wrong{([^}]*?)}/g;&#13;
        do {&#13;
            var match = regex_correct.exec(parsedText); //get the next match&#13;
            if(match &amp;&amp; !isSingleWord(match[1])){&#13;
                return true;&#13;
            }&#13;
        } while (match);&#13;
        do {&#13;
            var match = regex_wrong.exec(parsedText); //get the next match&#13;
            if(match &amp;&amp; !isSingleWord(match[1])){&#13;
                return true;&#13;
            }&#13;
        } while (match);&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
&#13;
        presenter.printableState = JSON.parse(state);&#13;
    };&#13;
&#13;
    presenter.PRINTABLE_STATE_MODE = {&#13;
        EMPTY: 0,&#13;
        SHOW_ANSWERS: 1,&#13;
        SHOW_USER_ANSWERS: 2,&#13;
        CHECK_ANSWERS: 3&#13;
    };&#13;
&#13;
   presenter.getPrintableHTML = function (model, showAnswers) {&#13;
       var upgradedModel = presenter.upgradeModel(model);&#13;
       var configuration = presenter.validateModel(upgradedModel);&#13;
       var $html = createHTMLStructureForPrintable(configuration);&#13;
&#13;
       chosePrintableStateMode(showAnswers);&#13;
       upgradeHTMLStructureForPrintable($html, configuration.mode);&#13;
       presenter.printableStateMode = null;&#13;
&#13;
       var $view = createViewForPrintable(upgradedModel, $html);&#13;
       return $view[0].outerHTML;&#13;
   };&#13;
&#13;
   function createHTMLStructureForPrintable(configuration) {&#13;
       var $renderedRun = $(configuration.renderedRun).clone();&#13;
       if (presenter.printableState) {&#13;
           var numbers = presenter.printableState.numbers;&#13;
           for (var i = 0; i &lt; numbers.length; i++) {&#13;
               $renderedRun.find("span[number='" + numbers[i] + "']").addClass("selected");&#13;
           }&#13;
       }&#13;
       return $renderedRun;&#13;
   }&#13;
&#13;
    function chosePrintableStateMode(showAnswers) {&#13;
        if (presenter.printableState) {&#13;
            if (showAnswers)&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;&#13;
            else&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;&#13;
        } else {&#13;
            if (showAnswers)&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;&#13;
            else&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
        }&#13;
    }&#13;
&#13;
    function upgradeHTMLStructureForPrintable($html, mode) {&#13;
        switch (presenter.printableStateMode) {&#13;
            case presenter.PRINTABLE_STATE_MODE.EMPTY:&#13;
                upgradeHTMLForPrintableWhenEmptyPrintableStateMode($html);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS:&#13;
                upgradeHTMLForPrintableWhenShowAnswersPrintableStateMode($html);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS:&#13;
                upgradeHTMLForPrintableWhenShowUserAnswersPrintableStateMode($html);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS:&#13;
                upgradeHTMLForPrintableWhenCheckAnswersPrintableStateMode($html);&#13;
                break;&#13;
        }&#13;
        upgradeHTMLForPrintableElementsAccordingToMode($html, mode);&#13;
        cleanHTMLStructureFromNotPrintableAttributesAndClasses($html);&#13;
    }&#13;
&#13;
    function upgradeHTMLForPrintableWhenEmptyPrintableStateMode($html) {}&#13;
&#13;
    function upgradeHTMLForPrintableWhenShowAnswersPrintableStateMode($html) {&#13;
        var $spans = $(findSelectableElements($html));&#13;
        $spans.each(function() {&#13;
            var number = parseInt($(this).attr('number'), 10);&#13;
            var isInCorrectArray = $.inArray(number, presenter.markers.markedCorrect) &gt;= 0;&#13;
            if (isInCorrectArray)&#13;
                $(this).wrap(`&lt;u class="${CSS_CLASSES.PRINTABLE_CORRECT_ANSWER}"&gt;&lt;/u&gt;`);&#13;
        })&#13;
    }&#13;
&#13;
    function upgradeHTMLForPrintableWhenShowUserAnswersPrintableStateMode($html) {&#13;
        var $spans = $(findSelectedElements($html));&#13;
        $spans.each(function() {&#13;
            var $wrapper = $('&lt;u&gt;&lt;/u&gt;');&#13;
            $wrapper.addClass(CSS_CLASSES.PRINTABLE_SELECTED);&#13;
            $(this).wrap($wrapper);&#13;
        })&#13;
    }&#13;
&#13;
    function upgradeHTMLForPrintableWhenCheckAnswersPrintableStateMode($html) {&#13;
        var $spans = $(findSelectedElements($html));&#13;
        $spans.each(function() {&#13;
            var $span = $( this );&#13;
            var $wrapper = $('&lt;u&gt;&lt;/u&gt;');&#13;
&#13;
            $wrapper.addClass(CSS_CLASSES.PRINTABLE_SELECTED);&#13;
            if (isCorrect($span)) {&#13;
                $wrapper.addClass(CSS_CLASSES.PRINTABLE_CORRECT);&#13;
            } else {&#13;
                $wrapper.addClass(CSS_CLASSES.PRINTABLE_WRONG);&#13;
            }&#13;
            $span.wrap($wrapper);&#13;
        })&#13;
    }&#13;
&#13;
    function upgradeHTMLForPrintableElementsAccordingToMode($html, mode) {&#13;
        if (mode === 'MARK_PHRASES')&#13;
            upgradeHTMLForPrintableWhenMarkPhrasesToSelectMode($html);&#13;
    }&#13;
&#13;
    function upgradeHTMLForPrintableWhenMarkPhrasesToSelectMode($html) {&#13;
        findSelectableElements($html).wrap('&lt;strong&gt;&lt;/strong&gt;');&#13;
    }&#13;
&#13;
    function cleanHTMLStructureFromNotPrintableAttributesAndClasses($html) {&#13;
        findSelectableElements($html).removeClass(CSS_CLASSES.SELECTABLE);&#13;
        findSelectedElements($html).removeClass(CSS_CLASSES.SELECTED);&#13;
        findSpaceElements($html).contents().unwrap('&lt;span&gt;&lt;/span&gt;');&#13;
        findNumberElements($html).contents().unwrap('&lt;span&gt;&lt;/span&gt;');&#13;
    }&#13;
&#13;
    function findSelectedElements($html) {&#13;
        return $html.find(`.${CSS_CLASSES.SELECTED}`);&#13;
    }&#13;
&#13;
    function findSelectableElements($html) {&#13;
        return $html.find(`.${CSS_CLASSES.SELECTABLE}`);&#13;
    }&#13;
&#13;
    function findSpaceElements($html) {&#13;
        return $html.find('span[left]');&#13;
    }&#13;
&#13;
    function findNumberElements($html) {&#13;
        return $html.find('span[number]');&#13;
    }&#13;
&#13;
    function createViewForPrintable(model, $html) {&#13;
        var $view = $("&lt;div&gt;&lt;/div&gt;");&#13;
        $view.attr("id", model.ID);&#13;
        $view.addClass(CSS_CLASSES.PRINTABLE);&#13;
        $view.css("max-width", model["Width"] + "px");&#13;
        $view.html($html.html());&#13;
        return $view;&#13;
    }&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        return presenter.markers.markedCorrect.length;&#13;
    }&#13;
&#13;
    presenter.isShowingAnswers = function () {&#13;
        return (presenter.configuration.isActivity &amp;&amp; presenter.isShowAnswers)&#13;
            || presenter.isGradualShowAnswersActive;&#13;
    }&#13;
&#13;
    presenter.gradualShowAnswers = function (item) {&#13;
        if (!presenter.isGradualShowAnswersActive) {&#13;
            presenter.saveAndRemoveSelection();&#13;
            presenter.isGradualShowAnswersActive = true;&#13;
        }&#13;
        presenter.activeGradualShowAnswersItems.push(item);&#13;
        presenter.showCorrectAnswer(item);&#13;
    };&#13;
&#13;
   presenter.restoreGradualShowAnswers = function () {&#13;
       if (!presenter.activeGradualShowAnswersItems.length) return;&#13;
       if (presenter.configuration.areEventListenersOn) {&#13;
                presenter.turnOffEventListeners();&#13;
            }&#13;
        presenter.saveAndRemoveSelection();&#13;
        presenter.isGradualShowAnswersActive = true;&#13;
        for (const item in presenter.activeGradualShowAnswersItems) {&#13;
            presenter.showCorrectAnswer(item);&#13;
       }&#13;
   }&#13;
&#13;
    presenter.gradualHideAnswers = function () {&#13;
        presenter.isGradualShowAnswersActive = false;&#13;
        presenter.turnOnEventListeners();&#13;
        presenter.restoreSelection();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>