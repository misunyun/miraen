<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Cross_Lesson" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Text" nameLabel="Cross_Lesson_property_text" type="string"/>
		<property name="Image" nameLabel="Cross_Lesson_property_image" type="image"/>
		<property name="LessonID" nameLabel="Cross_Lesson_property_lesson_id" type="string"/>
		<property name="CourseID" nameLabel="Cross_Lesson_property_course_id" type="string"/>
		<property name="Page" nameLabel="Cross_Lesson_property_Page" type="string"/>
		<property name="Type" nameLabel="Cross_Lesson_property_type" type="{lesson, ebook, course}"/>
		<property name="OpenLessonInCurrentTab" nameLabel="Cross_Lesson_property_open_in_current_tab" type="boolean"/>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Cross_Lesson_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Cross_Lesson_property_speech_texts" type="staticlist">
            <property name="GoToLesson" nameLabel="Cross_Lesson_property_go_to_lesson" type="staticrow">
                <property name="GoToLesson" nameLabel="Cross_Lesson_property_go_to_lesson" type="string"/>
            </property>
        </property>
		<property displayName="Check for access" name="CheckForAccess" nameLabel="Cross_Lesson_property_check_for_access" type="boolean"/>
		<property displayName="List of IDs required for access" name="AccessIDs" nameLabel="Cross_Lesson_property_access_ids" type="string"/>
	</model>
<css>.cross-lesson-wrapper {&#13;
    border: solid 0px black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    display: block;&#13;
}&#13;
&#13;
.cross-lesson-text,&#13;
.cross-lesson-image {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    cursor: pointer;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="cross-lesson-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="cross-lesson-wrapper"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonCross_Lesson_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var crossLessonEventType = "crossLesson";&#13;
    var crossLessonUserAccessEventType = "crossLessonUserAccess";&#13;
&#13;
    var crossLessonEventReceivedType = "crossLessonHasUserAccess:";&#13;
&#13;
    const errorCodes = {&#13;
        "V_01": "Lesson ID is missing",&#13;
        "V_02": "Course ID is invalid",&#13;
        "V_03": "Type is invalid. Lesson type should be either 'lesson', 'ebook' or 'course'.",&#13;
        "V_04": "Access ids given but CheckAccess is not selected.",&#13;
        "V_05": "Incorrect values provided in AccessIDs field."&#13;
    };&#13;
&#13;
    const resourceTypes = {&#13;
        lesson: "lesson",&#13;
        ebook: "ebook",&#13;
        course: "course"&#13;
    };&#13;
&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        GO_TO_LESSON: "Go to lesson"&#13;
    };&#13;
&#13;
    presenter.uniqueIdentifier = null;&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, preview) {&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        if (presenter.configuration.isError) {&#13;
            presenter.createErrorView(view, presenter.configuration.errorCode);&#13;
            return;&#13;
        }&#13;
        presenter.accessCacheId = presenter.generateAccessCacheId();&#13;
        presenter.createView(view);&#13;
        presenter.connectHandlers();&#13;
        presenter.setSpeechTexts(upgradedModel["speechTexts"]);&#13;
        presenter.buildKeyboardController();&#13;
        presenter.setUniqueIdentifier(model.ID);&#13;
        presenter.handleUserAccess();&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var validatedType = presenter.validateType(model['Type']);&#13;
        if (!validatedType.isValid) {&#13;
            return {isError: true, errorCode: 'V_03'};&#13;
        }&#13;
        if (&#13;
            validatedType.value != resourceTypes.course &amp;&amp;&#13;
            ModelValidationUtils.isStringEmpty(model["LessonID"])&#13;
          ) {&#13;
            return {isError: true, errorCode: 'V_01'};&#13;
        }&#13;
        var validatedCourseId = presenter.validateId(model['CourseID'], false, validatedType.value);&#13;
        if (!validatedCourseId.isValid) {&#13;
            return {isError: true, errorCode: 'V_02'};&#13;
        }&#13;
&#13;
        var checkForAccess = ModelValidationUtils.validateBoolean(model.CheckForAccess);&#13;
&#13;
        if (!checkForAccess &amp;&amp; model.AccessIDs.trim().length &gt; 0) {&#13;
            return {isError: true, errorCode: 'V_04'};&#13;
        }&#13;
&#13;
        if (checkForAccess &amp;&amp; model.AccessIDs.trim().length === 0) {&#13;
            model.AccessIDs = validatedCourseId.value&#13;
                ? validatedCourseId.value&#13;
                : model.LessonID;&#13;
        }&#13;
&#13;
        var validatedAccessIds = presenter.validateAccessIds(model.AccessIDs);&#13;
        if (checkForAccess &amp;&amp; !validatedAccessIds.isValid) {&#13;
            return {isError: true, errorCode: 'V_05'};&#13;
        }&#13;
&#13;
        return {&#13;
            isError: false,&#13;
            buttonText: model['Text'],&#13;
            lessonID: model['LessonID'],&#13;
            courseID: validatedCourseId.value,&#13;
            type: validatedType.value,&#13;
            page: model['Page'],&#13;
            image: model['Image'],&#13;
            openLessonInCurrentTab: ModelValidationUtils.validateBoolean(model.OpenLessonInCurrentTab),&#13;
            langTag: model['langAttribute'],&#13;
            checkForAccess: checkForAccess,&#13;
            accessIds: validatedAccessIds.value&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateId = function(id, isRequired, type) {&#13;
        var idReg = /^\d*$/;&#13;
        var isValid = false;&#13;
&#13;
        if (id === "") {&#13;
            if (type != resourceTypes.course) {&#13;
                isValid = !isRequired;&#13;
            } else {&#13;
                return {&#13;
                    isValid: isValid&#13;
                }&#13;
            }&#13;
        } else {&#13;
            isValid = idReg.test(id.trim());&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: isValid,&#13;
            value: isValid ? id.trim() : NaN&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateType = function(type) {&#13;
        if (!type) {&#13;
            return {&#13;
                isValid: true,&#13;
                value: resourceTypes.lesson&#13;
            };&#13;
        }&#13;
        if (type == resourceTypes.lesson || type == resourceTypes.ebook || type == resourceTypes.course) {&#13;
            return {&#13;
                isValid: true,&#13;
                value: type&#13;
            };&#13;
        } else {&#13;
            return {&#13;
                isValid: false,&#13;
                value: NaN&#13;
            };&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateAccessIds = function AddonCross_Lesson_validateAccessIds (raw) {&#13;
        const ids = presenter.transformAccessIdsToArray(raw);&#13;
        const onlyDigitsRegex = /^\d*$/;&#13;
&#13;
        const filteredIds = ids&#13;
            .map(id =&gt; id.trim())&#13;
            .filter((id) =&gt; (id.length &gt; 0 &amp;&amp; onlyDigitsRegex.test(id)));&#13;
&#13;
        if (ids.length !== filteredIds.length) {&#13;
            return {isValid: false};&#13;
        }&#13;
&#13;
        return {isValid: true, value: filteredIds};&#13;
    };&#13;
&#13;
    presenter.transformAccessIdsToArray = function (raw) {&#13;
        let ids = String(raw).split(",");&#13;
        if (ids.length === 1 &amp;&amp; ids[0] === "") {&#13;
            ids = [];&#13;
        }&#13;
        return ids;&#13;
    };&#13;
&#13;
    presenter.createView = function (view) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$wrapper = presenter.$view.find('.cross-lesson-wrapper');&#13;
        if (presenter.configuration.image) {&#13;
            presenter.createImageElement(presenter.$wrapper);&#13;
        }&#13;
        presenter.createTextElement(presenter.$wrapper);&#13;
    };&#13;
&#13;
    presenter.createTextElement = function ($element) {&#13;
        var textElement = document.createElement('div');&#13;
        $(textElement).addClass('cross-lesson-text');&#13;
        $(textElement).text(presenter.configuration.buttonText);&#13;
        $element.append(textElement);&#13;
    };&#13;
&#13;
    presenter.createImageElement = function ($element) {&#13;
        var imageElement = document.createElement('img');&#13;
        $(imageElement).addClass('cross-lesson-image');&#13;
        $(imageElement).attr('src', presenter.configuration.image);&#13;
        $element.append(imageElement);&#13;
    };&#13;
&#13;
    presenter.createErrorView = function (view, errorCode) {&#13;
        presenter.$view = $(view);&#13;
        presenter.$view.html(errorCodes[errorCode]);&#13;
    };&#13;
&#13;
    presenter.connectHandlers = function () {&#13;
        if (MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            presenter.$wrapper[0].addEventListener('touchend', presenter.clickHandler);&#13;
        } else {&#13;
            presenter.$wrapper[0].addEventListener('click', presenter.clickHandler);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (event) {&#13;
        event.preventDefault();&#13;
        event.stopPropagation();&#13;
        presenter.requestCrossLesson();&#13;
    };&#13;
&#13;
    presenter.onExternalMessage = function AddonCross_Lesson_onExternalMessage (event) {&#13;
        const data = event.data;&#13;
        if (typeof data === 'string' &amp;&amp; data.indexOf(crossLessonEventReceivedType) !== -1 &amp;&amp; data.indexOf(presenter.uniqueIdentifier) !== -1) {&#13;
            const lenToSlice = crossLessonEventReceivedType.length;&#13;
            const lenOfWordTrue = 4;&#13;
            const value = data.slice(lenToSlice, lenToSlice + lenOfWordTrue);&#13;
            if (value !== 'true') {&#13;
                presenter.hide();&#13;
            }&#13;
            presenter.updateAccessCache(value == 'true');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.updateAccessCache = function(hasAccess) {&#13;
        if (presenter.configuration.accessIds.length == 0) return;&#13;
        if (window.crossLessonAccessCache == null) window.crossLessonAccessCache = {};&#13;
        window.crossLessonAccessCache[presenter.accessCacheId] = hasAccess;&#13;
    }&#13;
&#13;
    presenter.generateAccessCacheId = function() {&#13;
        if (presenter.configuration.accessIds.length == 0) return '';&#13;
        var sortedIds = presenter.configuration.accessIds.toSorted();&#13;
        return sortedIds.toString();&#13;
    }&#13;
&#13;
    presenter.requestCrossLesson = function () {&#13;
       const data = presenter.getExternalEventData();&#13;
       if (!data) {&#13;
           return&#13;
       }&#13;
&#13;
       presenter.playerController.sendExternalEvent(crossLessonEventType, data);&#13;
    };&#13;
&#13;
    presenter.setUniqueIdentifier = function AddonCross_Lesson_setUniqueIdentifier (modelID){&#13;
        if (!presenter.playerController) {&#13;
            return;&#13;
        }&#13;
&#13;
        const pageIndex = presenter.playerController.getCurrentPageIndex();&#13;
        const pageID = presenter.playerController.getPresentation().getPage(pageIndex).getId();&#13;
        presenter.uniqueIdentifier = `${modelID}-${pageID}`;&#13;
&#13;
        if (!presenter.$view) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.$view.closest('.ic_header').length) {&#13;
            presenter.uniqueIdentifier += "-header";&#13;
        }&#13;
&#13;
        if (presenter.$view.closest('.ic_footer').length) {&#13;
            presenter.uniqueIdentifier += "-footer";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleUserAccess = function AddonCross_Lesson_handleUserAccess () {&#13;
        if (!presenter.playerController) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.checkForAccess) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (window.crossLessonAccessCache != null) {&#13;
            if (window.crossLessonAccessCache[presenter.accessCacheId] !== undefined) {&#13;
                if (!window.crossLessonAccessCache[presenter.accessCacheId]) {&#13;
                    presenter.hide();&#13;
                }&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        const data = {&#13;
            "coursesIds": presenter.configuration.accessIds,&#13;
            "uniqueId": presenter.uniqueIdentifier&#13;
        };&#13;
&#13;
        window.addEventListener("message", presenter.onExternalMessage);&#13;
        presenter.playerController.sendExternalEvent(crossLessonUserAccessEventType, JSON.stringify(data));&#13;
    };&#13;
&#13;
    presenter.getExternalEventData = function AddonCross_Lesson_getExternalEventData () {&#13;
        if (!presenter.playerController) {&#13;
            console.error("Cannot make a request: no player controller");&#13;
            return;&#13;
        }&#13;
&#13;
        var data = {&#13;
            type: presenter.configuration.type,&#13;
            openLessonInCurrentTab: presenter.configuration.openLessonInCurrentTab&#13;
        };&#13;
        if (presenter.configuration.lessonID) {&#13;
            data.lessonID = presenter.configuration.lessonID;&#13;
        }&#13;
        if (presenter.configuration.page) {&#13;
            data.page = presenter.configuration.page;&#13;
        }&#13;
        if (presenter.configuration.courseID) {&#13;
            data.courseID = presenter.configuration.courseID;&#13;
        }&#13;
&#13;
        return JSON.stringify(data);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        if (isVisible) {&#13;
            presenter.$view.css('display', '');&#13;
            presenter.$view.css('visibility', 'visible');&#13;
        } else {&#13;
            presenter.$view.css('display', 'none');&#13;
            presenter.$view.css('visibility', 'hidden');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name) {&#13;
        var commands = {&#13;
            'requestCrossLesson': presenter.requestCrossLesson,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, [], presenter);&#13;
    };&#13;
&#13;
    presenter.upgradeOpenLessonInCurrentTab = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["OpenLessonInCurrentTab"]) {&#13;
            upgradedModel["OpenLessonInCurrentTab"] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeLangTag = function (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] =  '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function AddonCross_Lesson_upgradeSpeechTexts (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model);&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]["GoToLesson"]) {&#13;
            upgradedModel["speechTexts"]["GoToLesson"]&#13;
              = {GoToLesson: ""};&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeCheckForAccess = function AddonCross_Lesson_upgradeCheckForAccess (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['CheckForAccess'] === undefined) {&#13;
            upgradedModel['CheckForAccess'] =  "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeAccessIds = function AddonCross_Lesson_upgradeAccessIds (model) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['AccessIDs'] === undefined) {&#13;
            upgradedModel['AccessIDs'] =  "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonCross_Lesson_upgradeModel (model) {&#13;
        var upgradedModel = presenter.upgradeOpenLessonInCurrentTab(model);&#13;
        upgradedModel = presenter.upgradeLangTag(upgradedModel);&#13;
        upgradedModel = presenter.upgradeSpeechTexts(upgradedModel);&#13;
        upgradedModel = presenter.upgradeCheckForAccess(upgradedModel);&#13;
        upgradedModel = presenter.upgradeAccessIds(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            GoToLesson: presenter.DEFAULT_TTS_PHRASES.GO_TO_LESSON&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            GoToLesson: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.GoToLesson.GoToLesson,&#13;
                presenter.speechTexts.GoToLesson)&#13;
        };&#13;
    };&#13;
&#13;
    function CrossLessonKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    CrossLessonKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    CrossLessonKeyboardController.prototype.constructor = CrossLessonKeyboardController;&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject = new CrossLessonKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        return this.$view.find(".cross-lesson-wrapper");&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event)&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.selectAction = function () {&#13;
        this.getTarget(this.keyboardNavigationCurrentElement, true)[0].click();&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.mark = function (element) {&#13;
        return;&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.unmark = function (element) {&#13;
        return;&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.switchElement = function (move) {&#13;
        KeyboardController.prototype.switchElement.call(this, move);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.readCurrentElement = function () {&#13;
        var text = this.getTarget(this.keyboardNavigationCurrentElement, false)[0].innerText;&#13;
        if (text) {&#13;
            text = [TTSUtils.getTextVoiceObject(text, presenter.configuration.langTag)];&#13;
        } else {&#13;
            text = presenter.speechTexts.GoToLesson;&#13;
        }&#13;
        presenter.speak(text);&#13;
    };&#13;
&#13;
    CrossLessonKeyboardController.prototype.enter = function (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    presenter.speak = function Assessments_Navigation_Bar_speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function Assessments_Navigation_Bar_getTextToSpeechOrNull(playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>