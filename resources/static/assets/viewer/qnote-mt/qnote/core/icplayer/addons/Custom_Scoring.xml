<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Custom_Scoring" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Script" nameLabel="Custom_Scoring_property_script" type="text"/>
		<property name="Max Score" nameLabel="Custom_Scoring_property_max_score" type="string"/>
	</model>
<css/><view/><preview/><presenter>function AddonCustom_Scoring_create(){&#13;
    var presenter = function(){};&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.presenterLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'ERR_02': "Invalid max score!"&#13;
    };&#13;
&#13;
    function removeAPIMethods() {&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getErrorCount;&#13;
        delete presenter.executeCommand;&#13;
        delete presenter.evaluate;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.setScore;&#13;
        delete presenter.setScoreCommand;&#13;
        delete presenter.setErrors;&#13;
        delete presenter.setErrorsCommand;&#13;
    }&#13;
&#13;
    presenter.presenterLogic = function (view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.model = model;&#13;
&#13;
        presenter.configuration = presenter.parseModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
&#13;
            removeAPIMethods();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseModel = function (model) {&#13;
        var modelMaxScore = model['Max Score'],&#13;
            maxScore = 0;&#13;
&#13;
        if (!ModelValidationUtils.isStringEmpty(modelMaxScore)) {&#13;
            var validatedMaxScore = ModelValidationUtils.validatePositiveInteger(modelMaxScore);&#13;
&#13;
            if (!validatedMaxScore.isValid) {&#13;
                return { isValid: false, errorCode: 'ERR_02'}&#13;
            }&#13;
&#13;
            maxScore = validatedMaxScore.value;&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            addonID: model.ID,&#13;
            script: model['Script'],&#13;
            scoring: {&#13;
                maxScore: maxScore,&#13;
                score: 0,&#13;
                errors: 0&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setScore = function (score) {&#13;
        var validatedScore = ModelValidationUtils.validateIntegerInRange(score, presenter.configuration.scoring.maxScore);&#13;
&#13;
        if (validatedScore.isValid) {&#13;
            presenter.configuration.scoring.score = validatedScore.value;&#13;
        } else {&#13;
            presenter.configuration.scoring.score = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setErrors = function (errors) {&#13;
        var validatedErrors = ModelValidationUtils.validatePositiveInteger(errors);&#13;
&#13;
        if (validatedErrors.isValid) {&#13;
            presenter.configuration.scoring.errors = validatedErrors.value;&#13;
        } else {&#13;
            presenter.configuration.scoring.errors = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return presenter.configuration.scoring.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return presenter.configuration.scoring.errors;&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return presenter.configuration.scoring.score;&#13;
    };&#13;
&#13;
    presenter.evaluateScript = function () {&#13;
        if (!presenter.configuration.script) {&#13;
            return;&#13;
        }&#13;
&#13;
        try {&#13;
            eval(presenter.configuration.script);&#13;
        } catch (error) {&#13;
            Helpers.alertErrorMessage(error, "Custom Score - problem occurred while running scripts!");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.evaluate = function () {&#13;
        presenter.evaluateScript();&#13;
&#13;
        return {&#13;
            score: presenter.configuration.scoring.score,&#13;
            errors: presenter.configuration.scoring.errors&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'evaluate': presenter.evaluate,&#13;
            'setScore': presenter.setScoreCommand,&#13;
            'setErrors': presenter.setErrorsCommand&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.evaluateScript();&#13;
    };&#13;
&#13;
    presenter.setScoreCommand = function (params) {&#13;
        presenter.setScore(params[0]);&#13;
    };&#13;
&#13;
    presenter.setErrorsCommand = function (params) {&#13;
        presenter.setErrors(params[0]);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            score: presenter.configuration.scoring.score,&#13;
            errors: presenter.configuration.scoring.errors&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        if (!state) return;&#13;
&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.configuration.scoring.score = parsedState.score;&#13;
        presenter.configuration.scoring.errors = parsedState.errors;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>