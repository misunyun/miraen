<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="text_identification" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" isLocalized="true" name="Text" nameLabel="text_identification_property_text" type="html"/>
		<property name="SelectionCorrect" nameLabel="text_identification_property_selection_correct" type="boolean"/>
		<property name="onSelected" nameLabel="text_identification_property_on_selected" type="event"/>
		<property name="onDeselected" nameLabel="text_identification_property_on_deselected" type="event"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="text_identification_property_block_wrong_answers" type="boolean"/>
		<property displayName="Send event on select/deselect" name="shouldSendEventsOnCommands" nameLabel="text_identification_property_send_event_on_command" type="boolean"/>
		<property displayName="Enable scrolling on mobile" name="enableScroll" nameLabel="text_identification_property_enable_scroll" type="boolean"/>
		<property name="Speech texts" nameLabel="Text_identification_property_speech_texts" type="staticlist">
			<property displayName="selected" name="Selected" type="staticrow">
                <property name="selected" nameLabel="Text_identification_property_selected" type="string"/>
            </property>
			<property displayName="deselected" name="Deselected" type="staticrow">
                <property name="deselected" nameLabel="Text_identification_property_deselected" type="string"/>
            </property>

			<property displayName="correct" name="Correct" type="staticrow">
                <property name="correct" nameLabel="Text_identification_property_correct" type="string"/>
            </property>
			<property displayName="incorrect" name="Incorrect" type="staticrow">
                <property name="incorrect" nameLabel="Text_identification_property_incorrect" type="string"/>
            </property>

		</property>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="Text_identification_property_lang_attribute" type="string"/>
		<property name="printable" nameLabel="printable_name_label" type="{No, Don't randomize, Randomize}"/>
		<property name="isSplitInPrintBlocked" nameLabel="printable_block_split_label" type="boolean"/>
	</model>
<css>.text-identification-content {&#13;
    text-align: center;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.text-identification-element-selected,&#13;
.text-identification-element-correct,&#13;
.text-identification-element-incorrect,&#13;
.text-identification-element-mouse-hover,&#13;
.text-identification-element {&#13;
    border: 0 solid black;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
}&#13;
&#13;
.text-identification-container {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.text-identification-background-image {&#13;
    border: 0 solid white;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
    background-size: 100%;&#13;
    background-position: 0 0;&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-wrapper {&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
    padding: 5px;&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-correct, .printable_addon_Text_Identification-selected {&#13;
    border: 3px solid #999;&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-show-answers.printable_addon_Text_Identification-correct {&#13;
    border: 3px dotted #999;&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-correct-answer, .printable_addon_Text_Identification-incorrect-answer {&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-correct-answer::after {&#13;
    content: " \2714";&#13;
}&#13;
&#13;
.printable_addon_Text_Identification-incorrect-answer::after {&#13;
    content: " \2716";&#13;
}&#13;
</css><view/><preview/><presenter>function Addontext_identification_create() {&#13;
&#13;
    function getTextVoiceObject (text, lang) { return {text: text, lang: lang}; }&#13;
&#13;
    var presenter = function() {};&#13;
&#13;
    var viewContainer;&#13;
    var isHoverEnabled = true;&#13;
    &#13;
    presenter.playerController = null;&#13;
    presenter.eventBus = null;&#13;
    presenter.lastEvent = null;&#13;
    presenter.isDisabled = false;&#13;
    presenter.keyboardControllerObject = null;&#13;
    presenter.printableState = null;&#13;
    presenter.printableStateMode = null;&#13;
    presenter.GSAcounter = 0;&#13;
    &#13;
    var CSS_CLASSES = {&#13;
        ELEMENT : "text-identification-element",&#13;
        SELECTED : "text-identification-element-selected",&#13;
        CORRECT : "text-identification-element-correct",&#13;
        INCORRECT : "text-identification-element-incorrect",&#13;
        EMPTY : 'text-identification-element-empty',&#13;
        MOUSE_HOVER_SELECTED : "text-identification-element-mouse-hover-selected",&#13;
        MOUSE_HOVER : "text-identification-element-mouse-hover",&#13;
        SHOW_ANSWERS : "text-identification-element-show-answers",&#13;
        PRINTABLE: "printable_addon_Text_Identification",&#13;
        PRINTABLE_WRAPPER: "printable_addon_Text_Identification-wrapper",&#13;
        PRINTABLE_SELECTED: "printable_addon_Text_Identification-selected",&#13;
        PRINTABLE_SHOW_ANSWERS: "printable_addon_Text_Identification-show-answers",&#13;
        PRINTABLE_SHOW_USER_ANSWERS: "printable_addon_Text_Identification-show-user-answers",&#13;
        PRINTABLE_CORRECT : "printable_addon_Text_Identification-correct",&#13;
        PRINTABLE_CORRECT_ANSWER: "printable_addon_Text_Identification-correct-answer",&#13;
        PRINTABLE_INCORRECT_ANSWER: "printable_addon_Text_Identification-incorrect-answer"&#13;
    };&#13;
&#13;
    function CSS_CLASSESToString() {&#13;
        return CSS_CLASSES.ELEMENT + " " + CSS_CLASSES.SELECTED + " " + CSS_CLASSES.CORRECT + " " +&#13;
            CSS_CLASSES.INCORRECT + " " + CSS_CLASSES.EMPTY + " " + CSS_CLASSES.MOUSE_HOVER + " " + CSS_CLASSES.MOUSE_HOVER_SELECTED+ " " + CSS_CLASSES.SHOW_ANSWERS;&#13;
    }&#13;
&#13;
    presenter.executeUserEventCode = function () {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        if (!presenter.isSelected()) {&#13;
            if (presenter.configuration.onDeselected) {&#13;
                presenter.playerController.getCommands().executeEventCode(presenter.configuration.onDeselected);&#13;
            }&#13;
        } else {&#13;
            if (presenter.configuration.onSelected) {&#13;
                presenter.playerController.getCommands().executeEventCode(presenter.configuration.onSelected);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.triggerSelectionChangeEvent = function() {&#13;
        if (presenter.playerController == null) return;&#13;
&#13;
        presenter.playerController.getEventBus().sendEvent('ValueChanged', this.createEventData());&#13;
    };&#13;
&#13;
    presenter.clickHandler = function (e) {&#13;
        if(presenter.isDisabled){&#13;
            return;&#13;
        }&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
        }&#13;
        if (presenter.configuration.isErrorCheckMode) return;&#13;
        presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.executeUserEventCode();&#13;
        presenter.triggerSelectionChangeEvent();&#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
&#13;
        var score = presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.configuration.blockWrongAnswers) {&#13;
            presenter.configuration.isSelected = !presenter.configuration.isSelected;&#13;
            presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.MOUSE_HOVER_SELECTED, CSS_CLASSES.ELEMENT);&#13;
        }&#13;
    };&#13;
&#13;
    function handleMouseActions() {&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        if (!MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            $element.hover(&#13;
                function () {&#13;
                    if (!presenter.configuration.isErrorCheckMode &amp;&amp; isHoverEnabled) {&#13;
                        $(this).removeClass(CSS_CLASSESToString());&#13;
                        $(this).addClass(presenter.isSelected() ? CSS_CLASSES.MOUSE_HOVER_SELECTED : CSS_CLASSES.MOUSE_HOVER);&#13;
                    }&#13;
                },&#13;
                function () {&#13;
                    if (!presenter.configuration.isErrorCheckMode &amp;&amp; isHoverEnabled) {&#13;
                        $(this).removeClass(CSS_CLASSESToString());&#13;
                        $(this).addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
                    }&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        if (presenter.configuration.enableScroll) {&#13;
            var posDiff = 0;&#13;
            var lastScreenPos = {X: 0, Y: 0};&#13;
&#13;
            $element.on('touchstart', function (e) {&#13;
                e.stopPropagation();&#13;
                posDiff = 0;&#13;
                var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
                lastScreenPos.X = temp.screenX;&#13;
                lastScreenPos.Y = temp.screenY;&#13;
            });&#13;
&#13;
            $element.on('touchend', function (e) {&#13;
                e.stopPropagation();&#13;
                if (posDiff &lt; 15) {&#13;
                    presenter.clickHandler(e);&#13;
                }&#13;
            });&#13;
&#13;
            $element.on('touchmove', function (e) {&#13;
                e.stopPropagation();&#13;
                var temp = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] || e.originalEvent.targetTouches[0];&#13;
                posDiff += Math.abs(lastScreenPos.X - temp.screenX) + Math.abs(lastScreenPos.Y - temp.screenY);&#13;
                lastScreenPos.X = temp.screenX;&#13;
                lastScreenPos.Y = temp.screenY;&#13;
            });&#13;
&#13;
        } else {&#13;
            $element.on('touchstart', function (e) {&#13;
                e.preventDefault();&#13;
&#13;
                presenter.lastEvent = e;&#13;
            });&#13;
&#13;
            $element.on('touchend', function (e) {&#13;
                e.preventDefault();&#13;
                if (presenter.lastEvent.type != e.type) {&#13;
                    presenter.clickHandler(e);&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        if (!MobileUtils.isMobileUserAgent(navigator.userAgent)){&#13;
            $element.click(presenter.clickHandler);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradeShouldSendEventsOnCommands(model);&#13;
        upgradedModel = upgradeModelEnableScrollProperty(upgradedModel);&#13;
        upgradedModel = presenter.upgradeTTS(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function upgradeModelEnableScrollProperty(model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if(!upgradedModel['enableScroll']){&#13;
            upgradedModel['enableScroll'] = false;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    }&#13;
&#13;
    presenter.upgradeShouldSendEventsOnCommands = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model.shouldSendEventsOnCommands === undefined) {&#13;
            upgradedModel["shouldSendEventsOnCommands"] = "false";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeTTS = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] = '';&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.getSpeechTexts = function (model) {&#13;
       var speechTexts = model['Speech texts'];&#13;
       presenter.selectedSpeechText = 'Selected';&#13;
       presenter.deselectedSpeechText = 'Deselected';&#13;
       presenter.correctSpeechText = "Correct";&#13;
       presenter.incorrectSpeechText = "Incorrect";&#13;
&#13;
        if (speechTexts !== undefined &amp;&amp; speechTexts !== '') {&#13;
            if (speechTexts['Selected']['selected'] !== '' &amp;&amp; speechTexts['Selected']['selected'] !== undefined) {&#13;
                presenter.selectedSpeechText = speechTexts['Selected']['selected'];&#13;
            }&#13;
&#13;
            if (speechTexts['Deselected']['deselected'] !== '' &amp;&amp; speechTexts['Deselected']['deselected'] !== undefined) {&#13;
                presenter.deselectedSpeechText = speechTexts['Deselected']['deselected'];&#13;
            }&#13;
&#13;
            if (!ModelValidationUtils.isArrayElementEmpty(speechTexts['Correct']['correct'])) {&#13;
                presenter.correctSpeechText = speechTexts['Correct']['correct'];&#13;
            }&#13;
&#13;
            if (!ModelValidationUtils.isArrayElementEmpty(speechTexts['Incorrect']['incorrect'])) {&#13;
                presenter.incorrectSpeechText = speechTexts['Incorrect']['incorrect'];&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        return {&#13;
            addonID: model.ID,&#13;
            onSelected: model.onSelected,&#13;
            onDeselected: model.onDeselected,&#13;
            shouldBeSelected: ModelValidationUtils.validateBoolean(model.SelectionCorrect),&#13;
            isSelected: false,&#13;
            isErrorCheckMode: false,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model.blockWrongAnswers),&#13;
            shouldSendEventsOnCommands: ModelValidationUtils.validateBoolean(model.shouldSendEventsOnCommands),&#13;
            isTabindexEnabled: ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]),&#13;
            enableScroll: ModelValidationUtils.validateBoolean(model['enableScroll']),&#13;
        };&#13;
    };&#13;
&#13;
    presenter.centerElements = function ($text, $container) {&#13;
        $.when(presenter.mathJaxProcessEnded).then(function () {&#13;
            var contentWidth = parseInt($text.css('width'), 10),&#13;
                contentHeight = parseInt($text.css('height'), 10),&#13;
                containerWidth = parseInt(viewContainer.css('width'), 10),&#13;
                containerHeight = parseInt(viewContainer.css('height'), 10);&#13;
&#13;
            $text.css({&#13;
                left: Math.round((containerWidth - contentWidth) / 2) + 'px',&#13;
                top: Math.round((containerHeight - contentHeight) / 2) + 'px'&#13;
            });&#13;
&#13;
            $container.css({&#13;
                width: containerWidth + 'px',&#13;
                height: containerHeight + 'px'&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.registerMathJaxListener(isPreview);&#13;
&#13;
        viewContainer = $(view);&#13;
        presenter.$view = $(view);&#13;
        presenter.currentPageId = presenter.$view.parent('.ic_page').attr('id');&#13;
        var textSrc = model.Text ? model.Text : "";&#13;
        presenter.moduleID = model.ID;&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
&#13;
        presenter.getSpeechTexts(model);&#13;
        presenter.langTag = model['langAttribute'];&#13;
&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.setVisibility(presenter.isVisible || isPreview);&#13;
&#13;
        var container = $('&lt;div class="text-identification-container"&gt;&lt;/div&gt;');&#13;
        container.addClass(presenter.isSelected() ? CSS_CLASSES.SELECTED : CSS_CLASSES.ELEMENT);&#13;
&#13;
        presenter.setTabindex(container,presenter.configuration.isTabindexEnabled);&#13;
&#13;
        var text = $('&lt;div class="text-identification-content"&gt;&lt;/div&gt;');&#13;
        if (isPreview) {&#13;
            text.html(window.TTSUtils.parsePreviewAltText(textSrc));&#13;
        } else {&#13;
            text.html(presenter.textParser.parse(textSrc));&#13;
        }&#13;
        container.append(text);&#13;
&#13;
        viewContainer.append(container);&#13;
        presenter.centerElements(text, container);&#13;
&#13;
        if (!isPreview) handleMouseActions();&#13;
        presenter.buildKeyboardController();&#13;
    }&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.$view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = controller.getEventBus();&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    /**&#13;
     * @param controller (PrintableController)&#13;
     */&#13;
    presenter.setPrintableController = function (controller) {&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    }&#13;
&#13;
    presenter.applySelectionStyle = function (selected, selectedClass, unselectedClass) {&#13;
        var element = viewContainer.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(CSS_CLASSESToString());&#13;
        $(element).addClass(selected ? selectedClass : unselectedClass);&#13;
    };&#13;
&#13;
    presenter.select = function () {&#13;
        var wasSelected = presenter.configuration.isSelected;&#13;
&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.executeUserEventCode();&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if (!wasSelected &amp;&amp; presenter.configuration.shouldSendEventsOnCommands) {&#13;
            this.triggerSelectionChangeEvent();&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.deselect = function () {&#13;
        var wasSelected = presenter.configuration.isSelected;&#13;
&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.executeUserEventCode();&#13;
        presenter.applySelectionStyle(false, CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if (wasSelected &amp;&amp; presenter.configuration.shouldSendEventsOnCommands) {&#13;
            this.triggerSelectionChangeEvent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isSelected = function () {&#13;
        return presenter.configuration.isSelected;&#13;
    };&#13;
&#13;
    presenter.markAsCorrect = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.CORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.configuration.isSelected = true;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.INCORRECT, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.markAsEmpty = function() {&#13;
        isHoverEnabled = false;&#13;
        presenter.applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': presenter.moduleID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        if (presenter.configuration.isErrorCheckMode) return;&#13;
&#13;
        var commands = {&#13;
            'select': presenter.select,&#13;
            'deselect': presenter.deselect,&#13;
            'isSelected': presenter.isSelected,&#13;
            'markAsCorrect': presenter.markAsCorrect,&#13;
            'markAsWrong': presenter.markAsWrong,&#13;
            'markAsEmpty': presenter.markAsEmpty,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disable = function() {&#13;
        presenter.isDisabled = true;&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        $element.addClass("text-identification-element-disabled");&#13;
    };&#13;
&#13;
    presenter.enable = function() {&#13;
        presenter.isDisabled = false;&#13;
        var $element = viewContainer.find('div.text-identification-container');&#13;
        $element.removeClass("text-identification-element-disabled");&#13;
    };&#13;
&#13;
    presenter.registerMathJaxListener = function (isPreview) {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            // We're listening for "End Process" that was fired for ic_page into which addon was inserted.&#13;
            // This way we're not reacting on events from other page in Book View.&#13;
            if (isPreview || ($(message[1]).hasClass('ic_page') &amp;&amp; $(message[1]).is('#' + presenter.currentPageId))) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
&#13;
        var events = ['ShowAnswers', 'HideAnswers', 'GradualShowAnswers', 'GradualHideAnswers'];&#13;
        for (var i = 0; i &lt; events.length; i++) {&#13;
            presenter.eventBus.addEventListener(events[i], this);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        presenter.configuration.isSelected = false;&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
        isHoverEnabled = true;&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
&#13;
        if (presenter.isSelected()) {&#13;
            presenter.applySelectionStyle(presenter.isSelected() === presenter.configuration.shouldBeSelected, CSS_CLASSES.CORRECT, CSS_CLASSES.INCORRECT);&#13;
        } else {&#13;
            presenter.applySelectionStyle(true, CSS_CLASSES.EMPTY, CSS_CLASSES.ELEMENT)&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        return !presenter.configuration.shouldBeSelected &amp;&amp; presenter.isSelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        return presenter.configuration.shouldBeSelected ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        return presenter.configuration.shouldBeSelected &amp;&amp; presenter.isSelected() ? 1 : 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        //return presenter.isSelected() ? 'True' : 'False';&#13;
&#13;
        return JSON.stringify({&#13;
            isSelected: presenter.isSelected() ? 'True' : 'False',&#13;
            isVisible: presenter.isVisible,&#13;
            isDisabled: presenter.isDisabled&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var serializeIsSelected, parsedState;&#13;
        if (state.indexOf("}") &gt; -1 &amp;&amp; state.indexOf("{") &gt; -1){&#13;
            parsedState = JSON.parse(state);&#13;
            serializeIsSelected = parsedState.isSelected;&#13;
        }else{&#13;
            serializeIsSelected = state;&#13;
            parsedState = undefined;&#13;
        }&#13;
&#13;
        presenter.configuration.isSelected = serializeIsSelected.toString() === "True";&#13;
&#13;
        presenter.applySelectionStyle(presenter.isSelected(), CSS_CLASSES.SELECTED, CSS_CLASSES.ELEMENT);&#13;
&#13;
        if(parsedState){&#13;
            if(parsedState.isVisible != undefined){&#13;
                presenter.setVisibility(parsedState.isVisible);&#13;
                presenter.isVisible = parsedState.isVisible;&#13;
            }&#13;
&#13;
            if(parsedState.isDisabled != undefined){&#13;
                presenter.isDisabled = parsedState.isDisabled;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function() {&#13;
        return {&#13;
            'source' : presenter.configuration.addonID,&#13;
            'item' : '1',&#13;
            'value' : presenter.isSelected() ? '1' : '0',&#13;
            'score' : presenter.configuration.shouldBeSelected ? '1' : '0'&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getActivitiesCount = function () {&#13;
        if(presenter.configuration.shouldBeSelected) &#13;
            return 1;&#13;
        return 0;&#13;
    }&#13;
&#13;
    presenter.onEventReceived = function (eventName, data) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        } else if (eventName === "GradualShowAnswers") {&#13;
            presenter.GSAcounter++;&#13;
            if (!presenter.isGradualShowAnswersActive) {&#13;
                presenter.isGradualShowAnswersActive = true;&#13;
            }&#13;
            if(presenter.GSAcounter === 1) presenter.hideStudentAnswersForGSA();&#13;
            if (data.moduleID === presenter.configuration.addonID) {&#13;
                presenter.showAnswers();&#13;
            }&#13;
        } else if (eventName === "GradualHideAnswers") {&#13;
            presenter.hideAnswers();&#13;
            presenter.isGradualShowAnswersActive = false;&#13;
        }&#13;
    };&#13;
&#13;
    function applySelectionStyleShowAnswers (style) {&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
        $(element).addClass(style);&#13;
    }&#13;
&#13;
    function applySelectionStyleHideAnswers (style) {&#13;
        var element = presenter.$view.find('div:first')[0];&#13;
&#13;
        $(element).removeClass(style);&#13;
        $(element).removeClass(CSS_CLASSES.EMPTY).addClass(CSS_CLASSES.ELEMENT);&#13;
    }&#13;
&#13;
    presenter.hideStudentAnswersForGSA = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
        &#13;
        presenter.$view.find('.text-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("text-identification-element was-selected");&#13;
    }&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.configuration.isErrorCheckMode = true;&#13;
        &#13;
        presenter.$view.find('.text-identification-element-incorrect').removeClass(CSS_CLASSES.INCORRECT).addClass("text-identification-element was-selected");&#13;
        presenter.$view.find('.text-identification-element-correct').removeClass(CSS_CLASSES.CORRECT).addClass("text-identification-element was-selected");&#13;
&#13;
        if(presenter.configuration.shouldBeSelected){&#13;
            applySelectionStyleShowAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
        }else{&#13;
            presenter.$view.find('.text-identification-element-selected').removeClass(CSS_CLASSES.SELECTED).addClass("text-identification-element was-selected");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (!presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration.isErrorCheckMode = false;&#13;
&#13;
        applySelectionStyleHideAnswers(CSS_CLASSES.SHOW_ANSWERS);&#13;
&#13;
        var elementWasSelected = presenter.$view.find('.was-selected');&#13;
        $(elementWasSelected).addClass(CSS_CLASSES.SELECTED).removeClass("was-selected");&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.GSAcounter = 0;&#13;
    };&#13;
&#13;
    function TextIdentificationKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    TextIdentificationKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    TextIdentificationKeyboardController.prototype.constructor = TextIdentificationKeyboardController;&#13;
&#13;
    TextIdentificationKeyboardController.prototype.enter = function (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
&#13;
        presenter.readElement();&#13;
    };&#13;
&#13;
    TextIdentificationKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    TextIdentificationKeyboardController.prototype.select = function (event) {&#13;
        event.preventDefault();&#13;
        presenter.clickHandler(event);&#13;
&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; !presenter.configuration.isErrorCheckMode) {&#13;
            presenter.readSelected();&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        this.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        var element = $(presenter.$view).find('.text-identification-container');&#13;
&#13;
        presenter.keyboardControllerObject = new TextIdentificationKeyboardController(element, 1);&#13;
    };&#13;
&#13;
    presenter.readSelected = function () {&#13;
        var text, voiceObject;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            text = presenter.configuration.shouldBeSelected ? presenter.selectedSpeechText : presenter.deselectedSpeechText;&#13;
        } else {&#13;
            text = presenter.configuration.isSelected ? presenter.selectedSpeechText : presenter.deselectedSpeechText;&#13;
        }&#13;
&#13;
        voiceObject = getTextVoiceObject(text);&#13;
&#13;
        speak([voiceObject]);&#13;
    };&#13;
&#13;
    presenter.readElement = function () {&#13;
        var voiceObjects = window.TTSUtils.getTextVoiceArrayFromElement(presenter.$view.find('.text-identification-content'), presenter.langTag);&#13;
&#13;
        var selectedTextObject = getTextVoiceObject(presenter.selectedSpeechText);&#13;
&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; !presenter.configuration.isErrorCheckMode &amp;&amp; presenter.configuration.isSelected) {&#13;
            voiceObjects.push(selectedTextObject);&#13;
        } else if (presenter.isShowAnswersActive &amp;&amp; presenter.configuration.isErrorCheckMode &amp;&amp; presenter.configuration.shouldBeSelected) {&#13;
            voiceObjects.push(selectedTextObject);&#13;
        }&#13;
&#13;
        // correctness should be read only when check mode is active and addon is selected&#13;
        if (!presenter.isShowAnswersActive &amp;&amp; presenter.configuration.isErrorCheckMode &amp;&amp;  presenter.configuration.isSelected) {&#13;
            voiceObjects.push(selectedTextObject);&#13;
&#13;
            var isAnswerCorrect = presenter.configuration.isSelected === presenter.configuration.shouldBeSelected;&#13;
            var isAnswerCorrectText = isAnswerCorrect ? presenter.correctSpeechText : presenter.incorrectSpeechText;&#13;
            voiceObjects.push(getTextVoiceObject(isAnswerCorrectText));&#13;
        }&#13;
&#13;
        speak(voiceObjects, presenter.langTag);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setTabindex = function (element, isTabindexEnabled) {&#13;
        var tabindexValue = isTabindexEnabled ? "0" : "-1";&#13;
        element.attr("tabindex", tabindexValue);&#13;
    };&#13;
&#13;
    function speak (voiceObjects) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts) {&#13;
            tts.speak(voiceObjects);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.PRINTABLE_STATE_MODE = {&#13;
        EMPTY: 0,&#13;
        SHOW_ANSWERS: 1,&#13;
        SHOW_USER_ANSWERS: 2,&#13;
        CHECK_ANSWERS: 3&#13;
    };&#13;
&#13;
    presenter.setPrintableState = function(state) {&#13;
        if (state === null || ModelValidationUtils.isStringEmpty(state))&#13;
            return;&#13;
&#13;
        var serializedIsSelected, parsedState;&#13;
        if (state.indexOf("}") &gt; -1 &amp;&amp; state.indexOf("{") &gt; -1) {&#13;
            parsedState = JSON.parse(state);&#13;
            serializedIsSelected = parsedState.isSelected;&#13;
        } else {&#13;
            parsedState = undefined;&#13;
            serializedIsSelected = state;&#13;
        }&#13;
&#13;
        presenter.printableState = {};&#13;
        presenter.printableState.isSelected = serializedIsSelected.toString() === "True";&#13;
        if (parsedState) {&#13;
            if(parsedState.isVisible !== undefined)&#13;
                presenter.printableState.isVisible = parsedState.isVisible;&#13;
&#13;
            if(parsedState.isDisabled !== undefined)&#13;
                presenter.printableState.isDisabled = parsedState.isDisabled;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getPrintableHTML = function (model, showAnswers) {&#13;
        const text = setUpLogicForPrintable(model);&#13;
        setUpPresenterViewForPrintable();&#13;
        chosePrintableStateMode(showAnswers);&#13;
        addHTMLRepresentationAccordingToPrintableStateMode(text);&#13;
        presenter.printableStateMode = null;&#13;
        return presenter.$view[0].outerHTML;&#13;
    };&#13;
&#13;
    function setUpLogicForPrintable(model) {&#13;
        presenter.moduleID = model.ID;&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        return presenter.textParser.parse(model.Text);&#13;
    }&#13;
&#13;
    function setUpPresenterViewForPrintable() {&#13;
        presenter.$view = $('&lt;div&gt;&lt;/div&gt;');&#13;
        presenter.$view.addClass(CSS_CLASSES.PRINTABLE);&#13;
    }&#13;
&#13;
    function chosePrintableStateMode(showAnswers) {&#13;
        if (presenter.printableState) {&#13;
            if (showAnswers)&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS;&#13;
            else&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS;&#13;
        } else {&#13;
            if (showAnswers)&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS;&#13;
            else&#13;
                presenter.printableStateMode = presenter.PRINTABLE_STATE_MODE.EMPTY;&#13;
        }&#13;
    }&#13;
&#13;
    function addHTMLRepresentationAccordingToPrintableStateMode(text) {&#13;
        switch (presenter.printableStateMode) {&#13;
            case presenter.PRINTABLE_STATE_MODE.CHECK_ANSWERS:&#13;
                addHTMLRepresentationForCheckAnswersPrintableStateMode(text);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.SHOW_USER_ANSWERS:&#13;
                addHTMLRepresentationForShowUserAnswersPrintableStateMode(text);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.SHOW_ANSWERS:&#13;
                addHTMLRepresentationForShowAnswersPrintableStateMode(text);&#13;
                break;&#13;
            case presenter.PRINTABLE_STATE_MODE.EMPTY:&#13;
                addHTMLRepresentationForEmptyPrintableStateMode(text);&#13;
                break;&#13;
        }&#13;
    }&#13;
&#13;
    function addHTMLRepresentationForCheckAnswersPrintableStateMode(text) {&#13;
        var $wrapper = createPrintableAddonWrapper(text);&#13;
        if (presenter.printableState.isSelected)&#13;
            $wrapper.addClass(CSS_CLASSES.PRINTABLE_SELECTED);&#13;
        presenter.$view.append($wrapper);&#13;
        addHTMLRepresentingCorrectnessOfAnswer();&#13;
    }&#13;
&#13;
    function addHTMLRepresentingCorrectnessOfAnswer() {&#13;
        if (presenter.printableState.isSelected) {&#13;
            var $element = $('&lt;div&gt;&lt;/div&gt;');&#13;
&#13;
            if (presenter.configuration.shouldBeSelected)&#13;
                $element.addClass(CSS_CLASSES.PRINTABLE_CORRECT_ANSWER)&#13;
            else&#13;
                $element.addClass(CSS_CLASSES.PRINTABLE_INCORRECT_ANSWER)&#13;
&#13;
            presenter.$view.append($element);&#13;
        }&#13;
    }&#13;
&#13;
    function addHTMLRepresentationForShowUserAnswersPrintableStateMode(text) {&#13;
        var $wrapper = createPrintableAddonWrapper(text);&#13;
        $wrapper.addClass(CSS_CLASSES.PRINTABLE_SHOW_USER_ANSWERS);&#13;
        if (presenter.printableState.isSelected)&#13;
            $wrapper.addClass(CSS_CLASSES.PRINTABLE_SELECTED);&#13;
        presenter.$view.append($wrapper);&#13;
    }&#13;
&#13;
    function addHTMLRepresentationForShowAnswersPrintableStateMode(text) {&#13;
        var $wrapper = createPrintableAddonWrapper(text);&#13;
        $wrapper.addClass(CSS_CLASSES.PRINTABLE_SHOW_ANSWERS);&#13;
        if (presenter.configuration.shouldBeSelected)&#13;
            $wrapper.addClass(CSS_CLASSES.PRINTABLE_CORRECT);&#13;
        presenter.$view.append($wrapper);&#13;
    }&#13;
&#13;
    function addHTMLRepresentationForEmptyPrintableStateMode(text) {&#13;
        var $wrapper = createPrintableAddonWrapper(text);&#13;
        presenter.$view.append($wrapper);&#13;
    }&#13;
&#13;
    function createPrintableAddonWrapper(text) {&#13;
        var $wrapper = $('&lt;div&gt;&lt;/div&gt;');&#13;
        $wrapper.addClass(CSS_CLASSES.PRINTABLE_WRAPPER);&#13;
        var textSrc = text ? text : "";&#13;
        $wrapper.html(textSrc);&#13;
        return $wrapper;&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>