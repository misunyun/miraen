<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EditableWindow" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title" name="title" nameLabel="EditableWindow_property_title" type="string"/>
        <property name="textEditor" nameLabel="EditableWindow_property_text_editor" type="html"/>
        <property name="isTextEditorContent" nameLabel="EditableWindow_property_is_text_editor_content" type="boolean"/>
        <property displayName="Header style" name="headerStyle" nameLabel="EditableWindow_property_header_style" type="string"/>
        <property displayName="File List" name="fileList" nameLabel="EditableWindow_property_file_list" type="list">
            <property displayName="ID" name="id" nameLabel="EditableWindow_property_id" type="string"/>
            <property displayName="File" name="file" nameLabel="EditableWindow_property_file" type="file"/>
        </property>
        <property displayName="Index File" name="index" nameLabel="EditableWindow_property_index_file" type="file"/>
        <property displayName="Audio File" name="audio" nameLabel="EditableWindow_property_audio_file" type="file"/>
        <property displayName="Video File" name="video" nameLabel="EditableWindow_property_video_file" type="file"/>
        <property displayName="Editing enabled" name="editingEnabled" nameLabel="EditableWindow_property_editing_enabled" type="boolean"/>
        <property displayName="Disable resize height" name="disableResizeHeight" nameLabel="EditableWindow_property_disable_resize_height" type="boolean"/>
        <property name="offlineMessage" nameLabel="EditableWindow_property_offline_message" type="text"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="EditableWindow_property_speech_texts" type="staticlist">
            <property name="openFullscreen" nameLabel="EditableWindow_property_openFullscreen" type="staticrow">
                <property name="openFullscreen" nameLabel="EditableWindow_property_openFullscreen" type="string"/>
            </property>
            <property name="closeFullscreen" nameLabel="EditableWindow_property_closeFullscreen" type="staticrow">
                <property name="closeFullscreen" nameLabel="EditableWindow_property_closeFullscreen" type="string"/>
            </property>
            <property name="closeWindow" nameLabel="EditableWindow_property_closeWindow" type="staticrow">
                <property name="closeWindow" nameLabel="EditableWindow_property_closeWindow" type="string"/>
            </property>
            <property name="textTool" nameLabel="EditableWindow_property_textTool" type="staticrow">
                <property name="textTool" nameLabel="EditableWindow_property_textTool" type="string"/>
            </property>
            <property name="highlightSelect" nameLabel="EditableWindow_property_highlightSelect" type="staticrow">
                <property name="highlightSelect" nameLabel="EditableWindow_property_highlightSelect" type="string"/>
            </property>
            <property name="pickAColor" nameLabel="EditableWindow_property_pickAColor" type="staticrow">
                <property name="pickAColor" nameLabel="EditableWindow_property_pickAColor" type="string"/>
            </property>
            <property name="yellow" nameLabel="EditableWindow_property_yellow" type="staticrow">
                <property name="yellow" nameLabel="EditableWindow_property_yellow" type="string"/>
            </property>
            <property name="blue" nameLabel="EditableWindow_property_blue" type="staticrow">
                <property name="blue" nameLabel="EditableWindow_property_blue" type="string"/>
            </property>
            <property name="red" nameLabel="EditableWindow_property_red" type="staticrow">
                <property name="red" nameLabel="EditableWindow_property_red" type="string"/>
            </property>
            <property name="green" nameLabel="EditableWindow_property_green" type="staticrow">
                <property name="green" nameLabel="EditableWindow_property_green" type="string"/>
            </property>
            <property name="white" nameLabel="EditableWindow_property_white" type="staticrow">
                <property name="white" nameLabel="EditableWindow_property_white" type="string"/>
            </property>
            <property name="noColor" nameLabel="EditableWindow_property_noColor" type="staticrow">
                <property name="noColor" nameLabel="EditableWindow_property_noColor" type="string"/>
            </property>
            <property name="reset" nameLabel="EditableWindow_property_reset" type="staticrow">
                <property name="reset" nameLabel="EditableWindow_property_reset" type="string"/>
            </property>
            <property name="image" nameLabel="EditableWindow_property_image" type="staticrow">
                <property name="image" nameLabel="EditableWindow_property_image" type="string"/>
            </property>
            <property name="audio" nameLabel="EditableWindow_property_audio" type="staticrow">
                <property name="audio" nameLabel="EditableWindow_property_audio" type="string"/>
            </property>
            <property name="video" nameLabel="EditableWindow_property_video" type="staticrow">
                <property name="video" nameLabel="EditableWindow_property_video" type="string"/>
            </property>
        </property>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="EditableWindow_property_lang_attribute" type="string"/>
    </model>
<css>div.addon-editable-window-fixed-container {&#13;
    position: fixed;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
div.addon-editable-window-container.addon-editable-window-container-full-screen.ui-draggable-disabled {&#13;
    opacity: 1;&#13;
    background-image: initial;&#13;
}&#13;
&#13;
div.addon-editable-window-container-full-screen {&#13;
    left: 0 !important;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    background-color: #eaeaea;&#13;
    border: 1px solid #cccccc;&#13;
    display: flex;&#13;
    flex-flow: column;&#13;
    cursor: move;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper iframe {&#13;
    display: none;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper textarea {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
div.addon-editable-buttons-menu {&#13;
    z-index: 203;&#13;
    position: fixed;&#13;
}&#13;
&#13;
.addon-editable-close-button {&#13;
    position: absolute;&#13;
    top: 2px;&#13;
    right: 2px;&#13;
    height: 30px;&#13;
    width: 35px;&#13;
    line-height: 30px;&#13;
    text-align: center;&#13;
    font-family: Verdana, Geneva, Tahoma, sans-serif;&#13;
    background: none;&#13;
    border: none;&#13;
    outline: none;&#13;
    cursor: pointer;&#13;
    z-index: 201;&#13;
}&#13;
&#13;
button.addon-editable-full-screen-button {&#13;
    position: absolute;&#13;
    top: 8px;&#13;
    right: 40px;&#13;
    height: 20px;&#13;
    width: 20px;&#13;
    text-align: center;&#13;
    font-family: Verdana, Geneva, Tahoma, sans-serif;&#13;
    background: none;&#13;
    border: none;&#13;
    outline: none;&#13;
    cursor: pointer;&#13;
    z-index: 201;&#13;
    background-repeat: no-repeat;&#13;
}&#13;
&#13;
button.addon-editable-open-full-screen-button {&#13;
    background-image: url('resources/open-fullscreen-button.png');&#13;
}&#13;
&#13;
button.addon-editable-close-full-screen-button {&#13;
    background-image: url('resources/close-fullscreen-button.png');&#13;
}&#13;
&#13;
.addon-editable-reset-button {&#13;
    width: 15px;&#13;
    height: 15px;&#13;
    position: absolute;&#13;
    left: 10px;&#13;
    bottom: 6px;&#13;
    border: none;&#13;
    background: url('resources/reset-button.png') no-repeat center;&#13;
    background-size: 11px 11px;&#13;
    z-index: 201;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper .header {&#13;
    min-height: 20px;&#13;
    font-size: 14px;&#13;
    padding: 8px 10px;&#13;
    width: 82%;&#13;
    overflow: hidden;&#13;
    cursor: move;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper audio {&#13;
    height: 35px;&#13;
    width: 100%;&#13;
    background-color: #f1f3f4;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper .video-wrapper {&#13;
    flex-grow: 1;&#13;
    display: grid;&#13;
    background-color: black;&#13;
    cursor: default;&#13;
}&#13;
&#13;
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {&#13;
   .addon-editable-window-wrapper .video-wrapper {&#13;
        height: 100%;&#13;
   }&#13;
}&#13;
&#13;
.addon-editable-window-wrapper video {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper .footer {&#13;
    height: 20px;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper .text-wrapper {&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.addon-editable-window-wrapper .video-wrapper .offline-video-message {&#13;
    width: 100%;&#13;
    top: 45%;&#13;
    position: absolute;&#13;
    z-index: 205;&#13;
    color: white;&#13;
    text-align: center;&#13;
    display: none;&#13;
}&#13;
&#13;
.selected_module_fake {&#13;
    outline: 2px solid rgba(27,144,253,1) !important;&#13;
	-webkit-box-shadow: 0 0 2px 0 rgba(27,144,253,0.6) !important;&#13;
	box-shadow: 0 0 2px 0 rgba(27,144,253,0.6) !important;&#13;
}&#13;
&#13;
.active_module_fake {&#13;
	outline: 2px solid rgba(0,255,0,1) !important;&#13;
	-webkit-box-shadow: 0 0 2px 0 rgba(0,255,0,0.6) !important;&#13;
	box-shadow: 0 0 2px 0 rgba(0,255,0,0.6) !important;&#13;
}&#13;
</css><view>&lt;div class="addon-editable-buttons-menu"&gt;&#13;
    &lt;button class="addon-editable-close-button"&gt;X&lt;/button&gt;&#13;
    &lt;button class="addon-editable-full-screen-button addon-editable-open-full-screen-button"&gt;&lt;/button&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="addon-editable-window-fixed-container"&gt;&#13;
    &lt;div class="addon-editable-window-container"&gt;&#13;
        &lt;div class="addon-editable-window-wrapper"&gt;&#13;
            &lt;div class="header"&gt;&#13;
                &lt;div class="header-icon"&gt;&lt;/div&gt;&#13;
                &lt;div class="header-text"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="video-wrapper"&gt;&#13;
                &lt;video controls controlsList="nodownload"&gt;&lt;/video&gt;&#13;
                &lt;div class="offline-video-message"&gt;&lt;/div&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;audio controls controlsList="nodownload"&gt;&lt;/audio&gt;&#13;
            &lt;iframe class="content-iframe"&gt;&lt;/iframe&gt;&#13;
            &lt;div class="text-wrapper"&gt;&#13;
                &lt;textarea&gt;&lt;/textarea&gt;&#13;
            &lt;/div&gt;&#13;
            &lt;div class="footer"&gt;&#13;
                &lt;button class="addon-editable-reset-button"&gt;&lt;/button&gt;&#13;
            &lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="addon-editable-window-wrapper"&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonEditableWindow_create() {&#13;
&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    presenter.configuration = {&#13;
        playerController: null,&#13;
        eventBus: null,&#13;
        timeouts: [],&#13;
        view: null,&#13;
        model: null,&#13;
        isIframeLoaded: false,&#13;
        isTinyMceLoaded: false,&#13;
        isTinyMceFilled: false,&#13;
        contentLoadingLock: false,&#13;
        iframeContent: null,&#13;
        editor: null,&#13;
        textareaId: null,&#13;
        isVisible: true,&#13;
        hasHtml: false,&#13;
        hasVideo: false,&#13;
        hasAudio: false,&#13;
        heightOffset: 110,&#13;
        widthOffset: 22,&#13;
        minHeight: 300,&#13;
        maxHeight: 10000,&#13;
        minWidth: 300,&#13;
        maxWidth: 950,&#13;
        state: {&#13;
            isInitialized: false,&#13;
            content: null&#13;
        }&#13;
    };&#13;
&#13;
    // these values are numbers and won't have "px" ending&#13;
    presenter.temporaryState = {&#13;
        addonFullScreenHeight: 0,&#13;
        addonHeight: 0,&#13;
        addonLeft: 0,&#13;
        addonTop: 0,&#13;
        addonWidth: 0,&#13;
        isFullScreen: false,&#13;
        scaleInfo: {&#13;
            scaleX: 1.0,&#13;
            scaleY: 1.0&#13;
        },&#13;
        scrollTop: 0&#13;
    };&#13;
&#13;
    presenter.jQueryElementsCache = {&#13;
        $buttonMenu: undefined,&#13;
        $container: undefined,&#13;
        $fixedContainer: undefined,&#13;
        $fullscreenButton: undefined,&#13;
        $view: undefined&#13;
    };&#13;
&#13;
    presenter.isKeyboardNavDeactivationBlocked = false;&#13;
    presenter.isEditAreaInScrollableMode = false;&#13;
&#13;
    presenter.keys = {&#13;
        ARROW_UP: 38,&#13;
        ARROW_DOWN: 40&#13;
    };&#13;
&#13;
    presenter.DEFAULT_TTS_PHRASES = {&#13;
        openFullscreen: "Open fullscreen",&#13;
        closeFullscreen: "Close fullscreen",&#13;
        closeWindow: "Close window",&#13;
        textTool: "Text highlighting tool",&#13;
        highlightSelect: "Highlight selected text",&#13;
        pickAColor: "Pick a color for highlighting",&#13;
        yellow: "Yellow",&#13;
        blue: "Blue",&#13;
        red: "Red",&#13;
        green: "Green",&#13;
        white: "White",&#13;
        noColor: "No color",&#13;
        reset: "Reset",&#13;
        image: "Image",&#13;
        audio: "Audio",&#13;
        video: "Video",&#13;
    };&#13;
&#13;
    presenter.initJQueryCache = function($view) {&#13;
        presenter.jQueryElementsCache.$fullscreenButton = $view.find(presenter.cssClasses.fullScreenButton.getSelector());&#13;
        presenter.jQueryElementsCache.$buttonMenu = $view.find(presenter.cssClasses.buttonMenu.getSelector());&#13;
        presenter.jQueryElementsCache.$container = $view.find(presenter.cssClasses.container.getSelector());&#13;
        presenter.jQueryElementsCache.$fixedContainer = $view.find(presenter.cssClasses.fixedContainer.getSelector());&#13;
        presenter.jQueryElementsCache.$view = $view;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.configuration.view = view;&#13;
        // container is the div that will be draggable and resizable&#13;
        presenter.configuration.container = view.getElementsByClassName(presenter.cssClasses.container.getName())[0];&#13;
        presenter.initJQueryCache($(view));&#13;
&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration.model = presenter.validModel(upgradedModel);&#13;
&#13;
        if (presenter.configuration.model.isValid) {&#13;
            presenter.configuration.container.style.width = presenter.configuration.model.width + 'px';&#13;
            presenter.configuration.container.style.height = presenter.configuration.model.height + 'px';&#13;
&#13;
            presenter.configuration.textareaId = presenter.configuration.model.id + "-textarea";&#13;
            presenter.configuration.hasHtml = presenter.configuration.model.indexFile !== "";&#13;
            presenter.configuration.hasAudio = presenter.configuration.model.audioFile !== "";&#13;
            presenter.configuration.hasVideo = presenter.configuration.model.videoFile !== "";&#13;
            presenter.temporaryState.iFrameOffset = window.iframeSize.frameOffset || 0;&#13;
&#13;
            presenter.init();&#13;
            presenter.hide();&#13;
        } else {&#13;
            $(view).html(presenter.configuration.model.errorMessage);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.init = function () {&#13;
        var $view = presenter.jQueryElementsCache.$view;&#13;
        var $container = presenter.jQueryElementsCache.$container;&#13;
        var hasHtml = presenter.configuration.hasHtml;&#13;
        var textareaId = presenter.configuration.textareaId;&#13;
        var title = presenter.configuration.model.title;&#13;
        var headerStyle = presenter.configuration.model.headerStyle;&#13;
        var $header = $container.find(".header");&#13;
        var $headerText = $container.find(".header-text");&#13;
        var disableResizeHeight = presenter.configuration.model.disableResizeHeight;&#13;
&#13;
        $headerText.text(title);&#13;
        $header.addClass(headerStyle);&#13;
        if (presenter.configuration.model.isTextEditorContent) {&#13;
            presenter.handleTextContent();&#13;
            presenter.configuration.hasVideo = false;&#13;
            presenter.configuration.hasAudio = false;&#13;
            presenter.configuration.hasHtml = false;&#13;
        }&#13;
&#13;
        if (presenter.configuration.hasVideo) {&#13;
            presenter.handleVideoContent();&#13;
            presenter.configuration.hasHtml = false;&#13;
            presenter.configuration.hasAudio = false;&#13;
        } else {&#13;
            $container.find(".video-wrapper").remove();&#13;
        }&#13;
&#13;
        if (presenter.configuration.hasAudio) {&#13;
            presenter.handleAudioContent();&#13;
        } else {&#13;
            $container.find("audio").remove();&#13;
        }&#13;
&#13;
        if (presenter.configuration.hasHtml) {&#13;
            presenter.handleHtmlContent();&#13;
        } else if (!presenter.configuration.model.isTextEditorContent) {&#13;
            $view.find(".content-iframe").remove();&#13;
            $view.find("textarea").remove();&#13;
        }&#13;
&#13;
        $container.css("z-index", "1");&#13;
&#13;
        if (disableResizeHeight) {&#13;
            var moduleHeight = presenter.configuration.model.height;&#13;
            presenter.configuration.minHeight = moduleHeight;&#13;
            presenter.configuration.maxHeight = moduleHeight;&#13;
        }&#13;
&#13;
        // containment option disallows moving window outside of specified dom element&#13;
        $container.draggable({&#13;
            cancel: 'video, audio',&#13;
            start: function (event, ui) {&#13;
                presenter.show();&#13;
                presenter.updateScaleInfo();&#13;
&#13;
                ui.helper.css('position', 'absolute'); // it removes mini jump on the beginning of dragging&#13;
                ui.position.top = ui.offset.top / presenter.temporaryState.scaleInfo.scaleX;&#13;
                ui.position.let = ui.offset.left / presenter.temporaryState.scaleInfo.scaleY;&#13;
            },&#13;
            drag: presenter.updateMenuPosition,&#13;
            stop: presenter.updateMenuPosition&#13;
        });&#13;
&#13;
        $container.resizable({&#13;
            minHeight: presenter.configuration.minHeight,&#13;
            maxHeight: presenter.configuration.maxHeight,&#13;
            minWidth: presenter.configuration.minWidth,&#13;
            maxWidth: presenter.configuration.maxWidth,&#13;
            resize: function (event, ui) {&#13;
                presenter.updateButtonMenuPosition();&#13;
                if (hasHtml || presenter.configuration.model.isTextEditorContent) {&#13;
                    var heightOffset = presenter.configuration.heightOffset;&#13;
                    var widthOffset = presenter.configuration.widthOffset;&#13;
                    var newHeight = ui.size.height - heightOffset;&#13;
                    var newWidth = ui.size.width - widthOffset;&#13;
                    tinymce.get(textareaId).theme.resizeTo(newWidth, newHeight);&#13;
                }&#13;
            },&#13;
            start: function (event, ui) {&#13;
                if (hasHtml) {&#13;
                    $container.find("iframe").css("visibility", "hidden")&#13;
                }&#13;
            },&#13;
            stop: function (event, ui) {&#13;
                presenter.updateButtonMenuPosition();&#13;
                if (hasHtml) {&#13;
                    $container.find("iframe").css("visibility", "visible")&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        presenter.addHandlers($view);&#13;
        presenter.buildKeyboardController();&#13;
        presenter.setUpKeyboardNavigationStyling();&#13;
        presenter.setSpeechTexts(presenter.configuration.model.speechTexts);&#13;
    };&#13;
&#13;
    presenter.updateScaleInfo = function AddonEditableWindow_getScaleInfo() {&#13;
        presenter.temporaryState.scaleInfo = presenter.configuration.playerController.getScaleInformation();&#13;
    };&#13;
&#13;
    /**&#13;
     * @param event&#13;
     * @param ui&#13;
     * @param ui.helper&#13;
     * @param ui.position&#13;
     * @param ui.position.top&#13;
     * @param ui.position.left&#13;
     * @param ui.offset&#13;
     */&#13;
    presenter.updateMenuPosition = function AddonEditableWindow_updateMenuPosition(event, ui) {&#13;
        ui.position.top = ui.position.top / presenter.temporaryState.scaleInfo.scaleX;&#13;
        ui.position.left = ui.position.left / presenter.temporaryState.scaleInfo.scaleY;&#13;
&#13;
        presenter.updateButtonMenuPosition();&#13;
    };&#13;
&#13;
    // because draggable prevents event bubbling, button wasn't clickable on android&#13;
    // menu with buttons is now outside of draggable container and its position needs to be updated when container changes position or size&#13;
    presenter.updateButtonMenuPosition = function () {&#13;
        // selector needs to be scoped to addon id, otherwise if more than one addon were added to lesson then it wouldn't properly position $buttonMenu&#13;
        var $buttonParent = $('#' + presenter.configuration.model.id + ' ' + presenter.cssClasses.container.getSelector());&#13;
        var $buttonMenu = presenter.jQueryElementsCache.$buttonMenu;&#13;
&#13;
        // icons are positioned by setting right and top css values, so div which wraps icons must be placed in top right corner of menu&#13;
        var rightWindowBorder = parseInt($buttonParent.css('left'), 10) + $buttonParent.width();&#13;
        var topWindowBorder = parseInt($buttonParent.css('top'), 10);&#13;
&#13;
        $buttonMenu.css({&#13;
            top: topWindowBorder,&#13;
            left: rightWindowBorder&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addHandlers = function ($view) {&#13;
        $view.find(presenter.cssClasses.closeButton.getSelector()).click(presenter.closeButtonClickedCallback);&#13;
        $view.find(presenter.cssClasses.fullScreenButton.getSelector()).click(presenter.fullScreenButtonClickedCallback);&#13;
        $view.find(presenter.cssClasses.wrapper.getSelector()).click(presenter.viewClickedCallback);&#13;
&#13;
        // scaling will break fixed positioning, but mobile views aren't placed in iframe so, player won't be updating scroll position&#13;
        if (MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
           window.addEventListener('scroll', presenter.handleScroll);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.viewClickedCallback = function () {&#13;
        presenter.show();&#13;
    };&#13;
&#13;
    presenter.closeButtonClickedCallback = function () {&#13;
        if (presenter.temporaryState.isFullScreen) {&#13;
            var $view = presenter.jQueryElementsCache.$container;&#13;
&#13;
            presenter.closeFullScreen($view);&#13;
        }&#13;
&#13;
        presenter.hide();&#13;
    };&#13;
&#13;
    presenter.fullScreenButtonClickedCallback = function () {&#13;
        var $view = presenter.jQueryElementsCache.$container;&#13;
&#13;
        if (presenter.temporaryState.isFullScreen) {&#13;
            presenter.closeFullScreen($view);&#13;
        } else {&#13;
            presenter.openFullScreen($view);&#13;
        }&#13;
&#13;
        presenter.updateButtonMenuPosition();&#13;
    };&#13;
&#13;
    presenter.openFullScreen = function ($view) {&#13;
        presenter.updateScaleInfo();&#13;
        // so height of the window will take whole available space&#13;
        var height = (window.iframeSize.windowInnerHeight || window.innerHeight) / presenter.temporaryState.scaleInfo.scaleY;&#13;
        var width = window.innerWidth / presenter.temporaryState.scaleInfo.scaleX;&#13;
&#13;
        presenter.temporaryState.isFullScreen = true;&#13;
&#13;
        presenter.saveViewPropertiesToState($view);&#13;
        $view.height(height);&#13;
        $view.width(width);&#13;
        presenter.addFullScreenClasses($view);&#13;
&#13;
        presenter.updateFullScreenWindowTop();&#13;
        presenter.resizeTinyMce($view.width(), height);&#13;
    };&#13;
&#13;
    presenter.closeFullScreen = function ($view) {&#13;
        presenter.temporaryState.isFullScreen = false;&#13;
&#13;
        presenter.setViewPropertiesFromState($view);&#13;
        presenter.removeFullScreenClasses($view);&#13;
        presenter.resizeTinyMce($view.width(), $view.height());&#13;
    };&#13;
&#13;
    // save current size and position to state&#13;
    presenter.saveViewPropertiesToState = function ($view) {&#13;
        presenter.temporaryState.addonWidth = $view.width();&#13;
        presenter.temporaryState.addonHeight = $view.height();&#13;
        presenter.temporaryState.addonTop = $view.position().top;&#13;
        presenter.temporaryState.addonLeft = $view.position().left;&#13;
    };&#13;
&#13;
    // restore size and position before going full screen, also add current scroll value so window is visible at once&#13;
    presenter.setViewPropertiesFromState = function ($view) {&#13;
        $view.width(presenter.temporaryState.addonWidth);&#13;
        $view.height(presenter.temporaryState.addonHeight);&#13;
        $view.css({&#13;
            top: presenter.temporaryState.addonTop + presenter.temporaryState.scrollTop,&#13;
            left: presenter.temporaryState.addonLeft&#13;
        });&#13;
    };&#13;
&#13;
    presenter.addFullScreenClasses = function ($view) {&#13;
        presenter.jQueryElementsCache.$fixedContainer.addClass(presenter.cssClasses.containerFullScreen.getName());&#13;
        presenter.jQueryElementsCache.$fullscreenButton.removeClass(presenter.cssClasses.openFullScreenButton.getName());&#13;
        presenter.jQueryElementsCache.$fullscreenButton.addClass(presenter.cssClasses.closeFullScreenButton.getName());&#13;
        $view.addClass(presenter.cssClasses.containerFullScreen.getName());&#13;
&#13;
        $view.resizable('disable');&#13;
        $view.draggable('disable');&#13;
    };&#13;
&#13;
    presenter.removeFullScreenClasses = function ($view) {&#13;
        presenter.jQueryElementsCache.$fixedContainer.removeClass(presenter.cssClasses.containerFullScreen.getName());&#13;
        presenter.jQueryElementsCache.$fullscreenButton.removeClass(presenter.cssClasses.closeFullScreenButton.getName());&#13;
        presenter.jQueryElementsCache.$fullscreenButton.addClass(presenter.cssClasses.openFullScreenButton.getName());&#13;
&#13;
        $view.removeClass(presenter.cssClasses.containerFullScreen.getName());&#13;
&#13;
        $view.resizable('enable');&#13;
        $view.draggable('enable');&#13;
    };&#13;
&#13;
    presenter.resizeTinyMce = function (width, height) {&#13;
        if (presenter.configuration.isTinyMceLoaded &amp;&amp; presenter.configuration.editor) {&#13;
            // tinymce can be smaller than whole window&#13;
            width -= presenter.configuration.widthOffset;&#13;
            height -= presenter.configuration.heightOffset;&#13;
            presenter.configuration.editor.theme.resizeTo(width, height);&#13;
        }&#13;
    };&#13;
&#13;
    // during scroll window needs to be repositioned, so it blocks whole lesson view&#13;
    presenter.updateFullScreenWindowTop = function () {&#13;
        var $view = presenter.jQueryElementsCache.$container;&#13;
        var top = presenter.temporaryState.scrollTop;&#13;
        var properties = {&#13;
            top: top&#13;
        };&#13;
&#13;
        // this is needed when embedding page has header and iFrame is not at the top of the page&#13;
        if (top &gt; presenter.temporaryState.iFrameOffset &amp;&amp; presenter.temporaryState.scaleInfo.scaleY === 1.0) {&#13;
            properties.top = (top - presenter.temporaryState.iFrameOffset) + 'px';&#13;
        }&#13;
&#13;
        // on android scroll down/up can hide/show navbar which adds/subtracts available height&#13;
        if (MobileUtils.isMobileUserAgent(window.navigator.userAgent)) {&#13;
            properties.height = (window.iframeSize.windowInnerHeight || window.innerHeight) / presenter.temporaryState.scaleInfo.scaleY;&#13;
        }&#13;
&#13;
        $view.css(properties);&#13;
        presenter.updateButtonMenuPosition();&#13;
    };&#13;
&#13;
    presenter.handleVideoContent = function () {&#13;
        var $view = $(presenter.configuration.view);&#13;
        if (window.navigator.onLine || presenter.configuration.model.videoFile.indexOf("file:/") == 0) {&#13;
            var audioSource = presenter.configuration.model.videoFile;&#13;
            var $videoElement = $view.find("video");&#13;
            $videoElement.attr("src", audioSource);&#13;
            Object.defineProperty($videoElement[0], 'isPlaying', {&#13;
                get: function() {&#13;
                    return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
                }&#13;
            });&#13;
        } else {&#13;
            presenter.configuration.hasVideo = false;&#13;
            var $wrapper = $view.find('.offline-video-message');&#13;
            $wrapper.html(presenter.configuration.model.offlineMessage);&#13;
            $wrapper.css("display", "block");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleAudioContent = function () {&#13;
        var $view = $(presenter.configuration.view);&#13;
        var $container = presenter.jQueryElementsCache.$container;&#13;
        var audioSource = presenter.configuration.model.audioFile;&#13;
        var $audioElement = $view.find("audio");&#13;
        $audioElement.attr("src", audioSource);&#13;
        Object.defineProperty($audioElement[0], 'isPlaying', {&#13;
            get: function() {&#13;
                return !!(this.currentTime &gt; 0 &amp;&amp; !this.paused &amp;&amp; !this.ended &amp;&amp; this.readyState &gt; 2);&#13;
            }&#13;
        });&#13;
        presenter.configuration.heightOffset += 35;&#13;
    };&#13;
&#13;
    presenter.handleTextContent = function () {&#13;
        var height = presenter.configuration.model.height - presenter.configuration.heightOffset;&#13;
        var width = presenter.configuration.model.width - presenter.configuration.widthOffset;&#13;
        var textareaId = presenter.configuration.textareaId;&#13;
        var $view = $(presenter.configuration.view);&#13;
        $view.css("z-index", "1");&#13;
&#13;
        var textarea = $view.find("textarea");&#13;
        textarea.attr("id", textareaId);&#13;
&#13;
        presenter.createTinyMceAsync(textareaId, height, width);&#13;
&#13;
        presenter.fillActiveTinyMce(presenter.configuration.model.textEditor, function (content) {&#13;
            setTextAreaInnerHTML(textareaId, content);&#13;
&#13;
            presenter.configuration.iframeContent = content;&#13;
            $view.find(".addon-editable-reset-button").click(function () {&#13;
                    presenter.reset();&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.handleHtmlContent = function () {&#13;
        var height = presenter.configuration.model.height;&#13;
        var width = presenter.configuration.model.width;&#13;
        var indexFile = presenter.configuration.model.indexFile;&#13;
        var textareaId = presenter.configuration.textareaId;&#13;
        var $view = $(presenter.configuration.view);&#13;
&#13;
        var iframe = $view.find(".content-iframe");&#13;
        var separator = (indexFile.indexOf("?") === -1) ? "?" : "&amp;";&#13;
        var source = indexFile + separator + "no_gcs=true";&#13;
&#13;
        iframe.attr("onload", function () {&#13;
            presenter.configuration.isIframeLoaded = true;&#13;
        });&#13;
        iframe.attr("src", source);&#13;
&#13;
        $view.css("z-index", "1");&#13;
&#13;
        var textarea = $view.find("textarea");&#13;
        textarea.attr("id", textareaId);&#13;
&#13;
        var widthOffset = presenter.configuration.widthOffset;&#13;
        var heightOffset = presenter.configuration.heightOffset;&#13;
&#13;
        presenter.createTinyMceAsync(textareaId, height - heightOffset, width - widthOffset);&#13;
&#13;
        var timeout = setTimeout(function () {&#13;
            presenter.fetchIframeContent(function (content) {&#13;
                var isInitialized = presenter.configuration.state.isInitialized;&#13;
                if (!isInitialized) {&#13;
                    presenter.configuration.contentLoadingLock = true;&#13;
                    presenter.fillActiveTinyMce(content, presenter.fillTinyMce);&#13;
                    presenter.configuration.state.isInitialized = true;&#13;
                    presenter.configuration.state.content = content;&#13;
                    presenter.configuration.contentLoadingLock = false;&#13;
                }&#13;
                presenter.removeIframe();&#13;
            });&#13;
        }, 3000);&#13;
        presenter.configuration.timeouts.push(timeout);&#13;
    };&#13;
&#13;
    presenter.createTinyMceAsync = function (areaId, height, width) {&#13;
        tinymce.init({&#13;
            selector: "#" + areaId,&#13;
            plugins: "textcolor link",&#13;
            toolbar: "backcolor",&#13;
            language: "fr_FR_pure",&#13;
            textcolor_map: [&#13;
                "ffff00", "Yellow",&#13;
                "87ceeb", "Blue",&#13;
                "ffb6c1", "Red",&#13;
                "90ee90", "Green",&#13;
                "ffffff", "White"&#13;
            ],&#13;
            custom_colors: false,&#13;
            statusbar: false,&#13;
            menubar: false,&#13;
            height: height,&#13;
            width: width,&#13;
            setup: function (editor) {&#13;
                if (!presenter.configuration.model.editingEnabled) {&#13;
                    editor.on('keydown keypress keyup', function (e) {&#13;
                        e.preventDefault();&#13;
                    });&#13;
                }&#13;
            },&#13;
            readonly: !presenter.configuration.model.editingEnabled&#13;
        }).then(function (editors) {&#13;
            presenter.configuration.editor = editors[0];&#13;
            presenter.configuration.isTinyMceLoaded = true;&#13;
        });&#13;
    }&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.configuration.view = view;&#13;
        presenter.configuration.model = presenter.validModel(model);&#13;
&#13;
        if (!presenter.configuration.model.isValid) {&#13;
            $(view).html(presenter.configuration.model.errorMessage);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var contentLoadingLock = presenter.configuration.contentLoadingLock;&#13;
        if (contentLoadingLock) {&#13;
            var timeout = setTimeout(function (state) {&#13;
                presenter.setState(state);&#13;
            }, 1000);&#13;
&#13;
            presenter.configuration.timeouts.push(timeout);&#13;
        } else {&#13;
            handleState(state);&#13;
        }&#13;
    };&#13;
&#13;
    function handleState(state) {&#13;
        presenter.configuration.contentLoadingLock = true;&#13;
        presenter.configuration.state = JSON.parse(state);&#13;
&#13;
        var isInitialized = presenter.configuration.state.isInitialized;&#13;
        var content = presenter.configuration.state.content;&#13;
&#13;
        if (isInitialized) {&#13;
            presenter.fillActiveTinyMce(content, presenter.fillTinyMce);&#13;
        }&#13;
        presenter.configuration.contentLoadingLock = false;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var editor = presenter.configuration.editor;&#13;
        var isTinyMceLoaded = presenter.configuration.isTinyMceLoaded;&#13;
        var isTinyMceFilled = presenter.configuration.isTinyMceFilled;&#13;
        if (isTinyMceLoaded &amp;&amp; isTinyMceFilled) {&#13;
            presenter.configuration.state.content = editor.getContent({format: 'raw'});&#13;
        }&#13;
&#13;
        return JSON.stringify(presenter.configuration.state);&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.addDisableResizeHeight(model);&#13;
        upgradedModel = presenter.addOfflineMessage(upgradedModel);&#13;
        upgradedModel = presenter.addIsTextEditorContent(upgradedModel);&#13;
        upgradedModel = presenter.upgradeLangTag(upgradedModel);&#13;
        return presenter.upgradeSpeechTexts(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.addDisableResizeHeight = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['disableResizeHeight']) {&#13;
            upgradedModel['disableResizeHeight'] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addOfflineMessage = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['offlineMessage']) {&#13;
            upgradedModel['offlineMessage'] = "This video is not available offline. Please connect to the Internet to watch it.";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.addIsTextEditorContent = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['isTextEditorContent']) {&#13;
            upgradedModel['isTextEditorContent'] = "False";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeLangTag = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['langAttribute']) {&#13;
            upgradedModel['langAttribute'] = "";&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (!model['speechTexts']) {&#13;
             upgradedModel['speechTexts'] = {&#13;
                openFullscreen: {openFullscreen: ""},&#13;
                closeFullscreen: {closeFullscreen: ""},&#13;
                closeWindow: {closeWindow: ""},&#13;
                textTool: {textTool: ""},&#13;
                highlightSelect: {highlightSelect: ""},&#13;
                pickAColor: {pickAColor: ""},&#13;
                yellow: {yellow: ""},&#13;
                blue: {blue: ""},&#13;
                red: {red: ""},&#13;
                green: {green: ""},&#13;
                white: {white: ""},&#13;
                noColor: {noColor: ""},&#13;
                reset: {reset: ""},&#13;
                image: {image: ""},&#13;
                audio: {audio: ""},&#13;
                video: {video: ""}&#13;
             };&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.validModel = function (model) {&#13;
        var indexFile = model['index'];&#13;
        var audioFile = model['audio'];&#13;
        var videoFile = model['video'];&#13;
        var text = model['textEditor'];&#13;
&#13;
        var isTextEditorContent = ModelValidationUtils.validateBoolean(model['isTextEditorContent']);&#13;
        var textEmpty = !isTextEditorContent || text === "";&#13;
&#13;
        if (textEmpty &amp;&amp; indexFile === "" &amp;&amp; audioFile === "" &amp;&amp; videoFile === "") {&#13;
            return presenter.generateValidationError("Content cannot be undefined.");&#13;
        }&#13;
&#13;
        var fileList = [];&#13;
&#13;
        var originalFileList = model["fileList"];&#13;
        for (var i = 0; i &lt; originalFileList.length; i++) {&#13;
            var entity = originalFileList[i];&#13;
            if (entity.id != "" &amp;&amp; entity.file != "") {&#13;
                fileList.push(entity);&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            id: model['ID'],&#13;
            fileList: fileList,&#13;
            height: model['Height'],&#13;
            width: model['Width'],&#13;
            top: model['Top'],&#13;
            left: model['Left'],&#13;
            right: model['Right'],&#13;
            bottom: model['Bottom'],&#13;
            indexFile: model['index'],&#13;
            audioFile: model['audio'],&#13;
            videoFile: model['video'],&#13;
            title: model['title'] ? model['title'] : "",&#13;
            headerStyle: model['headerStyle'] ? model['headerStyle'] : "",&#13;
            editingEnabled: ModelValidationUtils.validateBoolean(model["editingEnabled"]),&#13;
            disableResizeHeight: ModelValidationUtils.validateBoolean(model["disableResizeHeight"]),&#13;
            offlineMessage: model["offlineMessage"],&#13;
            textEditor: model['textEditor'],&#13;
            isTextEditorContent: isTextEditorContent,&#13;
            speechTexts: model['speechTexts'],&#13;
            langAttribute: model['langAttribute']&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setSpeechTexts = function EditableWindow_setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            openFullscreen: presenter.DEFAULT_TTS_PHRASES.openFullscreen,&#13;
            closeFullscreen: presenter.DEFAULT_TTS_PHRASES.closeFullscreen,&#13;
            closeWindow: presenter.DEFAULT_TTS_PHRASES.closeWindow,&#13;
            textTool: presenter.DEFAULT_TTS_PHRASES.textTool,&#13;
            highlightSelect: presenter.DEFAULT_TTS_PHRASES.highlightSelect,&#13;
            pickAColor: presenter.DEFAULT_TTS_PHRASES.pickAColor,&#13;
            yellow: presenter.DEFAULT_TTS_PHRASES.yellow,&#13;
            blue: presenter.DEFAULT_TTS_PHRASES.blue,&#13;
            red: presenter.DEFAULT_TTS_PHRASES.red,&#13;
            green: presenter.DEFAULT_TTS_PHRASES.green,&#13;
            white: presenter.DEFAULT_TTS_PHRASES.white,&#13;
            noColor: presenter.DEFAULT_TTS_PHRASES.noColor,&#13;
            reset: presenter.DEFAULT_TTS_PHRASES.reset,&#13;
            image: presenter.DEFAULT_TTS_PHRASES.image,&#13;
            audio: presenter.DEFAULT_TTS_PHRASES.audio,&#13;
            video: presenter.DEFAULT_TTS_PHRASES.video&#13;
        };&#13;
&#13;
        if (!speechTexts || $.isEmptyObject(speechTexts)) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            openFullscreen: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.openFullscreen.openFullscreen,&#13;
                presenter.speechTexts.openFullscreen),&#13;
            closeFullscreen: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.closeFullscreen.closeFullscreen,&#13;
                presenter.speechTexts.closeFullscreen),&#13;
            closeWindow: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.closeWindow.closeWindow,&#13;
                presenter.speechTexts.closeWindow),&#13;
            textTool: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.textTool.textTool,&#13;
                presenter.speechTexts.textTool),&#13;
            highlightSelect: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.highlightSelect.highlightSelect,&#13;
                presenter.speechTexts.highlightSelect),&#13;
            pickAColor: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.pickAColor.pickAColor,&#13;
                presenter.speechTexts.pickAColor),&#13;
            yellow: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.yellow.yellow,&#13;
                presenter.speechTexts.yellow),&#13;
            blue: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.blue.blue,&#13;
                presenter.speechTexts.blue),&#13;
            red: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.red.red,&#13;
                presenter.speechTexts.red),&#13;
            green: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.green.green,&#13;
                presenter.speechTexts.green),&#13;
            white: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.white.white,&#13;
                presenter.speechTexts.white),&#13;
            noColor: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.noColor.noColor,&#13;
                presenter.speechTexts.noColor),&#13;
            reset: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.reset.reset,&#13;
                presenter.speechTexts.reset),&#13;
            image: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.image.image,&#13;
                presenter.speechTexts.image),&#13;
            audio: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.audio.audio,&#13;
                presenter.speechTexts.audio),&#13;
            video: TTSUtils.getSpeechTextProperty(&#13;
                speechTexts.video.video,&#13;
                presenter.speechTexts.video)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.generateValidationError = function (message) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorMessage: message&#13;
        }&#13;
    };&#13;
&#13;
    presenter.fetchIframeContent = function (callback) {&#13;
        var $view = presenter.jQueryElementsCache.$view;&#13;
        var isIframeLoaded = presenter.configuration.isIframeLoaded;&#13;
&#13;
        if (isIframeLoaded) {&#13;
            var content = $view.find(".content-iframe").contents().find("body").html();&#13;
            if (content == null || content == "") {&#13;
                var timeout = setTimeout(function () {&#13;
                    presenter.fetchIframeContent(callback);&#13;
                }, 1000);&#13;
                presenter.configuration.timeouts.push(timeout);&#13;
            } else {&#13;
                presenter.configuration.iframeContent = content;&#13;
                callback(content);&#13;
&#13;
                $view.find(".addon-editable-reset-button").click(function () {&#13;
                    presenter.reset();&#13;
                });&#13;
            }&#13;
        } else {&#13;
            var timeout = setTimeout(function (callback) {&#13;
                presenter.fetchIframeContent(callback)&#13;
            }, 1000);&#13;
&#13;
            presenter.configuration.timeouts.push(timeout);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.fillActiveTinyMce = function (content, fillCallback) {&#13;
        var isTinyMceLoaded = presenter.configuration.isTinyMceLoaded;&#13;
&#13;
        if (isTinyMceLoaded) {&#13;
            var timeout = setTimeout(function () {&#13;
                fillCallback.apply(null, [content]);&#13;
            }, 1000);&#13;
&#13;
            presenter.configuration.timeouts.push(timeout);&#13;
        } else {&#13;
            var timeout = setTimeout(function () {&#13;
                presenter.fillActiveTinyMce(content, fillCallback);&#13;
            }, 1000);&#13;
&#13;
            presenter.configuration.timeouts.push(timeout);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.fillTinyMce = function (content) {&#13;
        var fileList = presenter.configuration.model.fileList;&#13;
        var documentContent = new DOMParser().parseFromString(content, 'text/html');&#13;
        var textareaId = presenter.configuration.textareaId;&#13;
&#13;
        for (var i = 0; i &lt; fileList.length; i++) {&#13;
            var entity = fileList[i];&#13;
            var node = documentContent.getElementById(entity.id);&#13;
            if (node != null &amp;&amp; node !== undefined) {&#13;
                node.src = entity.file;&#13;
            }&#13;
        }&#13;
&#13;
        var newContent = documentContent.getElementsByTagName("body")[0].innerHTML;&#13;
        setTextAreaInnerHTML(textareaId, newContent);&#13;
&#13;
        presenter.getStyles();&#13;
&#13;
&#13;
        presenter.linkAnchors();&#13;
&#13;
        presenter.configuration.isTinyMceFilled = true;&#13;
    };&#13;
&#13;
    function setTextAreaInnerHTML(textareaId, content) {&#13;
        tinymce.get(textareaId).getBody().innerHTML = presenter.textParser.parse(content);&#13;
    }&#13;
&#13;
    presenter.getStyles = function() {&#13;
        var indexUrl = presenter.configuration.model.indexFile;&#13;
        $.get(indexUrl).then(&#13;
            presenter.gettingIndexSuccess,&#13;
            presenter.gettingIndexError&#13;
        );&#13;
    };&#13;
&#13;
    presenter.gettingIndexSuccess = function(html) {&#13;
        var headContent = new DOMParser().parseFromString(html, 'text/html');&#13;
        var styles = [];&#13;
&#13;
        presenter.configuration.model.fileList.forEach(function (entity) {&#13;
            var node = headContent.getElementById(entity.id);&#13;
&#13;
            if (node !== null &amp;&amp; node !== undefined &amp;&amp; node.rel === 'stylesheet') {&#13;
                   styles.push(entity.file);&#13;
            }&#13;
        });&#13;
&#13;
        presenter.addStyles(styles);&#13;
    };&#13;
&#13;
    presenter.gettingIndexError = function() {&#13;
        console.error("Couldn't load index of document");&#13;
    };&#13;
&#13;
    presenter.addStyles = function(styles) {&#13;
        var tinymceEditorHead = tinymce.get(presenter.configuration.textareaId).contentDocument.head;&#13;
        styles.forEach(function(styleFile) {&#13;
            var link = document.createElement("link");&#13;
            link.href = styleFile;&#13;
            link.type = 'text/css';&#13;
            link.rel = 'stylesheet';&#13;
            tinymceEditorHead.appendChild(link);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.linkAnchors = function () {&#13;
        var $view = $(presenter.configuration.view);&#13;
        var $anchors = $view.find("iframe").contents().find("a");&#13;
        for (var i = 0; i &lt; $anchors.length; i++) {&#13;
            var anchor = $anchors[i];&#13;
            anchor.style.cursor = "pointer";&#13;
            anchor.addEventListener("click", function () {&#13;
                var anchorElement = document.createElement("a");&#13;
                anchorElement.href = anchor.href;&#13;
                anchorElement.target = '_blank';&#13;
                var anchorEvent = document.createEvent("MouseEvents");&#13;
                anchorEvent.initEvent("click", false, true);&#13;
                anchorElement.dispatchEvent(anchorEvent);&#13;
            });&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeIframe = function () {&#13;
        $(presenter.configuration.view).find(".content-iframe").remove();&#13;
    };&#13;
&#13;
    presenter.centerPosition = function () {&#13;
        var $view = presenter.jQueryElementsCache.$container;&#13;
        var width = $view.width();&#13;
        var availableWidth = presenter.getAvailableWidth();&#13;
&#13;
        var scrollY = presenter.temporaryState.scrollTop;&#13;
        if (scrollY == 0 &amp;&amp; presenter.configuration.playerController) {&#13;
            scrollY = presenter.configuration.playerController.iframeScroll();&#13;
        }&#13;
&#13;
        var topOffset = scrollY + 25;&#13;
        var leftOffset = (availableWidth - width) / 2;&#13;
&#13;
        $view.css({&#13;
            top: topOffset + 'px',&#13;
            left: leftOffset + 'px',&#13;
            right: "",&#13;
            bottom: ""&#13;
        });&#13;
&#13;
        presenter.updateButtonMenuPosition();&#13;
    };&#13;
&#13;
    presenter.setPositionRelative = function () {&#13;
        var $view = presenter.jQueryElementsCache.$container;&#13;
        var top = parseInt(presenter.configuration.model.top) + presenter.configuration.heightOffset;&#13;
        var left = presenter.configuration.model.left;&#13;
&#13;
        $view.css({&#13;
            top: top + 'px',&#13;
            left: left + 'px',&#13;
            right: "",&#13;
            bottom: ""&#13;
        });&#13;
&#13;
        presenter.updateButtonMenuPosition();&#13;
    };&#13;
&#13;
    presenter.getAvailableWidth = function () {&#13;
        return $(window).width();&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        var view = presenter.configuration.view;&#13;
        var eventBus = presenter.configuration.eventBus;&#13;
        var id = presenter.configuration.model.id;&#13;
        var $view = $(view);&#13;
&#13;
        presenter.configuration.isVisible = true;&#13;
&#13;
        $view.style("z-index", "3");&#13;
        $view.show();&#13;
        presenter.updateButtonMenuPosition();&#13;
&#13;
        eventBus.sendEvent('ValueChanged', {&#13;
            'source': id,&#13;
            'item': '',&#13;
            'value': 'move-editable-windows',&#13;
            'score': ''&#13;
        });&#13;
    };&#13;
&#13;
    presenter.openPopup = function () {&#13;
        presenter.show();&#13;
        presenter.centerPosition();&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.disableWCAGIfTTSOrKeyboardNav();&#13;
        presenter.configuration.isVisible = false;&#13;
        $(presenter.configuration.view).hide();&#13;
        presenter.stopAudio();&#13;
        presenter.stopVideo();&#13;
&#13;
        var eventBus = presenter.configuration.eventBus;&#13;
        var id = presenter.configuration.model.id;&#13;
        eventBus.sendEvent('ValueChanged', {&#13;
            'source': id,&#13;
            'item': '',&#13;
            'value': 'close',&#13;
            'score': ''&#13;
        });&#13;
    };&#13;
&#13;
    presenter.disableWCAGIfTTSOrKeyboardNav = function EditableWindow_disableWCAGIfTTSOrKeyboardNav() {&#13;
        const $element = $($(presenter.configuration.view).find(".addon_EditableWindow").context);&#13;
        if ($element.hasClass(presenter.cssClasses.selectedModule.getName()) || $element.hasClass(presenter.cssClasses.activeModule.getName())) {&#13;
            presenter.dispatchEscapeKeydownEvent();&#13;
            presenter.dispatchShiftTabKeydownEvent();&#13;
            const realElement = $(presenter.configuration.view).find(presenter.cssClasses.wrapper.getSelector());&#13;
            $(realElement[0]).removeClass(presenter.cssClasses.selectedModuleFake.getName());&#13;
            $(realElement[0]).removeClass(presenter.cssClasses.activeModuleFake.getName());&#13;
        }&#13;
    };&#13;
&#13;
    presenter.dispatchEscapeKeydownEvent = function EidtableWindow_dispatchEscapeKeydownEvent () {&#13;
        const event = new KeyboardEvent('keydown', {&#13;
            code: 'Esc',&#13;
            key: 'Esc',&#13;
            charCode: 27,&#13;
            keyCode: 27,&#13;
            bubbles: true&#13;
        });&#13;
        //document.body is used instead of document, because in KeyboardNavigationController listeners are set to RootPanel, which is document.body&#13;
        document.body.dispatchEvent(event);&#13;
    };&#13;
&#13;
    presenter.dispatchShiftTabKeydownEvent = function EditableWindow_dispatchShiftTabKeydownEvent () {&#13;
        const event = new KeyboardEvent('keydown', {&#13;
            code: 'Tab',&#13;
            key: 'Tab',&#13;
            charCode: 9,&#13;
            keyCode: 9,&#13;
            bubbles: true,&#13;
            shiftKey: true&#13;
        });&#13;
        //document.body is used instead of document, because in KeyboardNavigationController listeners are set to RootPanel, which is document.body&#13;
        document.body.dispatchEvent(event);&#13;
    };&#13;
&#13;
    presenter.isVisible = function () {&#13;
        return presenter.configuration.isVisible;&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.configuration.playerController = controller;&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
&#13;
        presenter.configuration.eventBus = presenter.configuration.playerController.getEventBus();&#13;
        presenter.configuration.eventBus.addEventListener('ValueChanged', this);&#13;
        presenter.configuration.eventBus.addEventListener('ScrollEvent', this);&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName, eventData) {&#13;
        if (eventName === 'ValueChanged') {&#13;
            presenter.handleValueChanged(eventData);&#13;
        } else if (eventName === 'ScrollEvent') {&#13;
            presenter.handleScrollEvent(eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleValueChanged = function (eventData) {&#13;
        var value = eventData.value;&#13;
        var source = eventData.source;&#13;
        var id = presenter.configuration.model.id;&#13;
        var view = presenter.configuration.view;&#13;
        var $view = $(view);&#13;
&#13;
        if (value === "move-editable-windows" &amp;&amp; source !== id) {&#13;
            $view.style("z-index", "1");&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleScroll = function() {&#13;
        presenter.updateScaleInfo();&#13;
        var scale = presenter.temporaryState.scaleInfo.scaleY;&#13;
&#13;
        if (presenter.temporaryState.scaleInfo.scaleY !== 1) {&#13;
            presenter.updateScrollTop(window.pageYOffset / scale);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.handleScrollEvent = function (eventData) {&#13;
        var scrollValue = parseInt(eventData.value, 10);&#13;
&#13;
        presenter.updateScrollTop(scrollValue);&#13;
    };&#13;
&#13;
    presenter.updateScrollTop = function(value) {&#13;
        presenter.temporaryState.scrollTop = value ;&#13;
&#13;
        if (presenter.temporaryState.isFullScreen) {&#13;
            presenter.updateFullScreenWindowTop();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopAudio = function () {&#13;
        if (presenter.configuration.hasAudio) {&#13;
            var $view = $(presenter.configuration.view);&#13;
            var audioElement = $view.find("audio")[0];&#13;
            audioElement.pause();&#13;
            audioElement.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pauseOrPlayElement = function EditableWindow_pauseOrPlayElement(element) {&#13;
        if(!element.hasOwnProperty('isPlaying')) {&#13;
            console.error("EditableWindow_pauseOrPlayElement - element does not have isPlaying property!");&#13;
            return;&#13;
        }&#13;
&#13;
        if(element.isPlaying) {&#13;
            element.pause();&#13;
        } else {&#13;
            element.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.pauseOrPlayAudio = function EditableWindow_pauseOrPlayAudio() {&#13;
        var $view = $(presenter.configuration.view);&#13;
        var audio = $view.find("audio")[0];&#13;
        presenter.pauseOrPlayElement(audio);&#13;
    };&#13;
&#13;
    presenter.pauseOrPlayVideo = function EditableWindow_pauseOrPlayVideo() {&#13;
        var $view = $(presenter.configuration.view);&#13;
        var video = $view.find("video")[0];&#13;
        presenter.pauseOrPlayElement(video);&#13;
    };&#13;
&#13;
    presenter.stopVideo = function () {&#13;
        if (presenter.configuration.hasVideo) {&#13;
            var $view = $(presenter.configuration.view);&#13;
            var audioElement = $view.find("video")[0];&#13;
            audioElement.pause();&#13;
            audioElement.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isVisible': presenter.isVisible,&#13;
            'centerPosition': presenter.centerPosition,&#13;
            'openPopup': presenter.openPopup,&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        var iframeContent = presenter.configuration.iframeContent;&#13;
        var isTinyMceLoaded = presenter.configuration.isTinyMceLoaded;&#13;
        var isContentLoadingLocked = presenter.configuration.contentLoadingLock;&#13;
&#13;
        if (isTinyMceLoaded &amp;&amp; !isContentLoadingLocked) {&#13;
            presenter.configuration.contentLoadingLock = true;&#13;
            presenter.fillTinyMce(iframeContent);&#13;
            presenter.configuration.state.isInitialized = true;&#13;
            presenter.configuration.state.content = iframeContent;&#13;
            presenter.configuration.contentLoadingLock = false;&#13;
        }&#13;
    };&#13;
&#13;
    // On the mCourser, each addon is called twice on the first page.&#13;
    // Removing the addon before loading the library causes a problem with second loading.&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target === presenter.configuration.view) {&#13;
            presenter.configuration.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
            presenter.removeCallbacks();&#13;
&#13;
            var timeouts = presenter.configuration.timeouts;&#13;
            for (var i = 0; i &lt; timeouts.length; i++) {&#13;
                clearTimeout(timeouts[i]);&#13;
            }&#13;
&#13;
            try {&#13;
                presenter.configuration.editor.destroy();&#13;
            } catch (e) {&#13;
                console.log(presenter.configuration.model.id + ": cannot to destroy editor.")&#13;
            }&#13;
&#13;
            try {&#13;
                tinymce.remove();&#13;
            } catch (e) {&#13;
                console.log(presenter.configuration.model.id + ": cannot to remove tinymce.")&#13;
            }&#13;
&#13;
            $(presenter.configuration.view).off();&#13;
            presenter.configuration.container = null;&#13;
            presenter.configuration = null;&#13;
            presenter.jQueryElementsCache = null;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeCallbacks = function () {&#13;
        var $view = $(presenter.configuration.view);&#13;
        $view.off('click', presenter.cssClasses.closeButton.getSelector(), presenter.closeButtonClickedCallback);&#13;
        $view.off('click', presenter.cssClasses.fullScreenButton.getSelector(), presenter.fullScreenButtonClickedCallback);&#13;
        $view.off('click', presenter.cssClasses.wrapper.getSelector(), presenter.viewClickedCallback);&#13;
&#13;
        window.removeEventListener('scroll', presenter.handleScroll);&#13;
    };&#13;
&#13;
    // small util class for aggregating classes and getting their selectors&#13;
    presenter.CssClass = function CssClass(name) {&#13;
        this.name = name;&#13;
    };&#13;
&#13;
    presenter.CssClass.prototype.getSelector = function () {&#13;
        return "." + this.name;&#13;
    };&#13;
&#13;
    presenter.CssClass.prototype.getName = function () {&#13;
        return this.name;&#13;
    };&#13;
&#13;
    presenter.cssClasses = {&#13;
        fixedContainer: new presenter.CssClass("addon-editable-window-fixed-container"),&#13;
        container: new presenter.CssClass("addon-editable-window-container"),&#13;
        containerFullScreen: new presenter.CssClass("addon-editable-window-container-full-screen"),&#13;
        closeButton: new presenter.CssClass("addon-editable-close-button"),&#13;
        fullScreenButton: new presenter.CssClass("addon-editable-full-screen-button"),&#13;
        openFullScreenButton: new presenter.CssClass("addon-editable-open-full-screen-button"),&#13;
        closeFullScreenButton: new presenter.CssClass("addon-editable-close-full-screen-button"),&#13;
        wrapper: new presenter.CssClass("addon-editable-window-wrapper"),&#13;
        buttonMenu: new presenter.CssClass("addon-editable-buttons-menu"),&#13;
        selectedModule: new presenter.CssClass("ic_selected_module"),&#13;
        activeModule: new presenter.CssClass("ic_active_module"),&#13;
        selectedModuleFake: new presenter.CssClass("selected_module_fake"),&#13;
        activeModuleFake: new presenter.CssClass("active_module_fake"),&#13;
    };&#13;
&#13;
    function EditableWindowKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    EditableWindowKeyboardController.prototype.constructor = EditableWindowKeyboardController;&#13;
&#13;
    presenter.buildKeyboardController = function EditableWindow_buildKeyboardController () {&#13;
        presenter.keyboardControllerObject = new EditableWindowKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.setUpKeyboardNavigationStyling = function EditableWindow_setUpKeyboardNavigationStyling () {&#13;
        var element = $(presenter.configuration.view).find(".addon_EditableWindow");&#13;
        var $element = $(element.context);&#13;
        var oldStyles = $element.attr("style") || "";&#13;
        var newStyles = oldStyles + " outline: none !important; box-shadow: none !important";&#13;
        $element.attr('style', newStyles);&#13;
    };&#13;
&#13;
    /**&#13;
     * Method to select or activate module.&#13;
     * This method is executed by class KeyboardNavigationController.&#13;
     *&#13;
     * @param className CSS class name to add to the view&#13;
     *&#13;
     * @return undefined&#13;
     */&#13;
    presenter.selectAsActive = function (className) {&#13;
        const view = presenter.configuration.view;&#13;
        const windowWrapper = $(view).find(presenter.cssClasses.wrapper.getSelector())[0];&#13;
&#13;
        view.classList.add(className);&#13;
        if (className === presenter.cssClasses.selectedModule.getName()) {&#13;
            windowWrapper.classList.add(presenter.cssClasses.selectedModuleFake.getName());&#13;
            if (!presenter.isWCAGOn) {&#13;
                windowWrapper.focus();&#13;
            }&#13;
        }&#13;
        if (className === presenter.cssClasses.activeModule.getName()) {&#13;
            windowWrapper.classList.add(presenter.cssClasses.activeModuleFake.getName());&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Method to deselect or deactivate module.&#13;
     * This method is executed by class KeyboardNavigationController.&#13;
     *&#13;
     * @param className CSS class name to remove from the view&#13;
     *&#13;
     * @return undefined&#13;
     */&#13;
    presenter.deselectAsActive = function (className) {&#13;
        const view = presenter.configuration.view;&#13;
        const windowWrapper = $(view).find(presenter.cssClasses.wrapper.getSelector())[0];&#13;
&#13;
        view.classList.remove(className);&#13;
        if (className === presenter.cssClasses.selectedModule.getName()) {&#13;
            windowWrapper.classList.remove(presenter.cssClasses.selectedModuleFake.getName());&#13;
            if (!presenter.isWCAGOn) {&#13;
                windowWrapper.blur();&#13;
            }&#13;
        }&#13;
        if (className === presenter.cssClasses.activeModule.getName()) {&#13;
            windowWrapper.classList.remove(presenter.cssClasses.activeModuleFake.getName());&#13;
        }&#13;
    }&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function EditableWindow_getElementsForKeyboardNavigation() {&#13;
        let fullscreenElement = $(presenter.configuration.view).find(".addon-editable-full-screen-button");&#13;
        let elements = $(presenter.configuration.view).find(".addon-editable-close-button, .mce-btn, .mce-edit-area, .addon-editable-reset-button, .video-wrapper, audio");&#13;
        return $.merge(fullscreenElement, elements);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function EditableWindow_keyboardController (keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event);&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.getTarget = function (element) {&#13;
        return $(element);&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.switchElement = function (move) {&#13;
        KeyboardController.prototype.switchElement.call(this, move);&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.switchToFirstVisibleElement = function () {&#13;
        for(let i=0; i&lt;this.keyboardNavigationElementsLen; i++) {&#13;
            const element = this.keyboardNavigationElements[i];&#13;
            if(this.isElementHidden(element)) {&#13;
                this.lastVisibleElementIndex = i;&#13;
                this.keyboardNavigationCurrentElementIndex = i;&#13;
                this.keyboardNavigationCurrentElement = element;&#13;
                this.mark(element);&#13;
                return;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.nextElement = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        this.switchElement(1);&#13;
&#13;
        if(this.isElementHidden(this.getCurrentElement())) {&#13;
            this.nextElement(event);&#13;
        }&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.previousElement = function (event) {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        this.switchElement(-1);&#13;
&#13;
        if(this.isElementHidden(this.getCurrentElement())) {&#13;
            this.previousElement(event);&#13;
        }&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.isElementHidden = function (element) {&#13;
        const elementHeight = element[0].offsetHeight;&#13;
        const elementWidth = element[0].offsetWidth;&#13;
        const isDisplayed = $(element).css('display') !== 'none';&#13;
        const isVisible = $(element).css('visibility') === 'visible';&#13;
&#13;
        return elementHeight === 0 || elementWidth === 0 || !isDisplayed || !isVisible;&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.getCurrentElement = function () {&#13;
		return this.getTarget(this.keyboardNavigationCurrentElement, false);&#13;
	};&#13;
&#13;
    EditableWindowKeyboardController.prototype.enter = function EditableWindow_enter (event) {&#13;
        KeyboardController.prototype.enter.call(this, event);&#13;
        if(this.keyboardNavigationCurrentElementIndex === 0) {&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getElementsForKeyboardNavigation());&#13;
        }&#13;
        this.readCurrentElement();&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.setElements = function EditableWindow_setElements (elements) {&#13;
        KeyboardController.prototype.setElements.call(this, elements);&#13;
&#13;
        if (this.keyboardNavigationActive) {&#13;
            this.switchToFirstVisibleElement();&#13;
        }&#13;
    }&#13;
&#13;
    EditableWindowKeyboardController.prototype.select = function EditableWindow_select (event) {&#13;
        const element = this.getTarget(this.keyboardNavigationCurrentElement);&#13;
        if ($(element).hasClass("mce-btn") &amp;&amp; presenter.configuration.model.editingEnabled) {&#13;
            presenter.isKeyboardNavDeactivationBlocked = true;&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getMceBtnElements());&#13;
            document.activeElement.blur();&#13;
            this.readCurrentElement();&#13;
        } else if(presenter.isColorHighlightElement()) {&#13;
            element[0].click();&#13;
            document.activeElement.blur();&#13;
        } else if(presenter.isColorPickElement()) {&#13;
            presenter.closeAllColorPickPanels();&#13;
            element[0].click();&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getColorPaletteElements());&#13;
            this.readCurrentElement();&#13;
        } else if(presenter.isInsideColorPick()) {&#13;
            element[0].childNodes[0].click();&#13;
            document.activeElement.blur();&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getMceBtnElements());&#13;
            KeyboardController.prototype.markCurrentElement.call(this, 1);&#13;
            this.readCurrentElement();&#13;
        } else if(element.hasClass("mce-edit-area") &amp;&amp; presenter.configuration.model.editingEnabled) {&#13;
            presenter.configuration.editor.execCommand('mceCodeEditor');&#13;
        } else if(element.hasClass("mce-edit-area") &amp;&amp; !presenter.configuration.model.editingEnabled) {&#13;
            presenter.handleEditAreaScrolling(element);&#13;
        } else if(element.hasClass("addon-editable-close-button")) {&#13;
            element.click();&#13;
        } else if(element[0].nodeName === "AUDIO") {&#13;
            presenter.pauseOrPlayAudio();&#13;
        } else if(element.hasClass("video-wrapper")) {&#13;
            presenter.pauseOrPlayVideo();&#13;
        } else {&#13;
            element.click();&#13;
        }&#13;
    };&#13;
&#13;
    EditableWindowKeyboardController.prototype.escape = function (event) {&#13;
        if (presenter.isInsideColorPick()) {&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getMceBtnElements());&#13;
            KeyboardController.prototype.markCurrentElement.call(this, 1);&#13;
            this.getTarget(this.keyboardNavigationCurrentElement)[0].click();&#13;
            this.readCurrentElement();&#13;
        } else if (presenter.isInsideMceBtn()) {&#13;
            KeyboardController.prototype.setElements.call(this, presenter.getElementsForKeyboardNavigation());&#13;
            KeyboardController.prototype.markCurrentElement.call(this, 2);&#13;
            this.readCurrentElement();&#13;
        } else if (presenter.isEditAreaInScrollableMode) {&#13;
            presenter.escapeEditAreaScrollableMode();&#13;
        } else {&#13;
            presenter.isKeyboardNavDeactivationBlocked = false;&#13;
            KeyboardController.prototype.escape.call(this, event);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getMceBtnElements = function EditableWindow_getMceBtnElements() {&#13;
        return $(presenter.configuration.view).find(".mce-btn")[0].childNodes;&#13;
    };&#13;
&#13;
    presenter.getColorPaletteElements = function EditableWindow_getColorPaletteElements() {&#13;
        return $(".mce-floatpanel:visible").find(".mce-grid-cell");&#13;
    };&#13;
&#13;
    presenter.closeAllColorPickPanels = function EditableWindow_closeAllColorPickPanels() {&#13;
        $(".mce-colorbutton.mce-active").each(function () {&#13;
            const element = $(this);&#13;
            element[0].childNodes[1].click();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.isInsideMceBtn = function EditableWindow_isInsideMceBtn() {&#13;
        return presenter.keyboardControllerObject.keyboardNavigationElements.length === 2;&#13;
    };&#13;
&#13;
    presenter.isColorHighlightElement = function EditableWindow_isColorHighlightElement() {&#13;
        return presenter.isInsideMceBtn() &amp;&amp;&#13;
            presenter.keyboardControllerObject.keyboardNavigationCurrentElement === presenter.keyboardControllerObject.keyboardNavigationElements[0];&#13;
    };&#13;
&#13;
    presenter.isColorPickElement = function EditableWindow_isColorPickElement() {&#13;
          return presenter.isInsideMceBtn() &amp;&amp;&#13;
            presenter.keyboardControllerObject.keyboardNavigationCurrentElement === presenter.keyboardControllerObject.keyboardNavigationElements[1];&#13;
    };&#13;
&#13;
    presenter.isInsideColorPick = function EditableWindow_isInsideColorPick() {&#13;
        return presenter.keyboardControllerObject.keyboardNavigationElements.length === 6 &amp;&amp;&#13;
            $(presenter.keyboardControllerObject.getTarget(presenter.keyboardControllerObject.keyboardNavigationCurrentElement)).hasClass("mce-grid-cell");&#13;
    };&#13;
&#13;
    presenter.isDeactivationBlocked = function EditableWindow_isDeactivationBlocked() {&#13;
        return presenter.isKeyboardNavDeactivationBlocked;&#13;
    };&#13;
&#13;
    presenter.handleEditAreaScrolling = function EditableWindow_handleEditAreaScrolling (element) {&#13;
        const editorIframe = element[0].childNodes[0];&#13;
        const content = (editorIframe.contentDocument || editorIframe.contentWindow.document).documentElement;&#13;
        if (!isContentScrollable(content)) {&#13;
            return;&#13;
        };&#13;
&#13;
        presenter.isKeyboardNavDeactivationBlocked = true;&#13;
        presenter.isEditAreaInScrollableMode = true;&#13;
        presenter.keyboardControllerObject.setElements($(presenter.configuration.view).find(".mce-edit-area"));&#13;
        presenter.overrideKeyUpAndDownHandlers(content);&#13;
    };&#13;
&#13;
    function isContentScrollable(content) {&#13;
        return content.scrollHeight &gt; content.clientHeight;&#13;
    };&#13;
&#13;
    presenter.overrideKeyUpAndDownHandlers = function EditableWindow_overrideKeyUpAndDownHandlers(content) {&#13;
        this.keyboardControllerObject.mapping[presenter.keys.ARROW_UP] = function () {content.scrollTop -= 10; };&#13;
        this.keyboardControllerObject.mapping[presenter.keys.ARROW_DOWN] = function () {content.scrollTop += 10; };&#13;
    };&#13;
&#13;
    presenter.restoreDefualtKeyUpAndDownHandlers = function EditableWindow_restoreDefualtKeyUpAndDownHandlers () {&#13;
        this.keyboardControllerObject.mapping[presenter.keys.ARROW_UP] = this.keyboardControllerObject.previousRow;&#13;
        this.keyboardControllerObject.mapping[presenter.keys.ARROW_DOWN] = this.keyboardControllerObject.nextRow;&#13;
    };&#13;
&#13;
    presenter.escapeEditAreaScrollableMode = function EditableWindow_escapeEditAreaScrollableMode () {&#13;
        this.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
        this.keyboardControllerObject.markCurrentElement(3);&#13;
        presenter.isEditAreaInScrollableMode = false;&#13;
        presenter.restoreDefualtKeyUpAndDownHandlers();&#13;
    };&#13;
    &#13;
    EditableWindowKeyboardController.prototype.readCurrentElement = function () {&#13;
        let text = "";&#13;
        const element = this.getTarget(this.keyboardNavigationCurrentElement);&#13;
&#13;
        if (element.hasClass("addon-editable-open-full-screen-button")) {&#13;
            text = presenter.speechTexts.openFullscreen;&#13;
        } else if(element.hasClass("addon-editable-close-full-screen-button")) {&#13;
            text = presenter.speechTexts.closeFullscreen;&#13;
        } else if(element.hasClass("addon-editable-close-button")) {&#13;
            text = presenter.speechTexts.closeWindow;&#13;
        } else if(element.hasClass("mce-btn")) {&#13;
            text = presenter.speechTexts.textTool;&#13;
        } else if(presenter.isColorHighlightElement()) {&#13;
            text = presenter.speechTexts.highlightSelect;&#13;
        } else if(presenter.isColorPickElement()) {&#13;
            text = presenter.speechTexts.pickAColor;&#13;
        } else if(presenter.isInsideColorPick()) {&#13;
            const key = presenter.getTTSKeyBasedOnColor(element);&#13;
            text = presenter.speechTexts[key];&#13;
        } else if(element.hasClass("mce-edit-area")) {&#13;
            text = presenter.getContentToRead();&#13;
        } else if(element.hasClass("addon-editable-reset-button")) {&#13;
            text = presenter.speechTexts.reset;&#13;
        } else if(element[0].nodeName === "AUDIO") {&#13;
            text = presenter.speechTexts.audio;&#13;
        } else if(element.hasClass("video-wrapper")) {&#13;
            text = presenter.speechTexts.video;&#13;
        }&#13;
&#13;
        presenter.speak(text);&#13;
    };&#13;
&#13;
    //images are temporarily replaced with it's alt text wrapped in paragraph in purpose to getContent with text- this allows to avoid manual parsing HTML&#13;
    //after all, originalContent is being restored to editor&#13;
    presenter.getContentToRead = function EditableWindow_getContentToRead () {&#13;
        const rawHTMLContent = presenter.configuration.editor.getContent({format : 'raw'});&#13;
        const regex = /&lt;img .*?alt="(.*?)".*?&gt;/gm;&#13;
        const contentWithoutImages = rawHTMLContent.replace(regex, `&lt;p&gt;${presenter.speechTexts.image} $1&lt;/p&gt;`);&#13;
        const sanitizedContent = window.xssUtils.sanitize(contentWithoutImages);&#13;
        return window.TTSUtils.getTextVoiceArrayFromElement($(sanitizedContent), presenter.configuration.model.langAttribute);&#13;
    };&#13;
&#13;
    presenter.getTTSKeyBasedOnColor = function EditableWindow_getTTSKeyBasedOnColor (element) {&#13;
        if (this.keyboardControllerObject.keyboardNavigationElementsLen -1 === this.keyboardControllerObject.keyboardNavigationCurrentElementIndex) {&#13;
            return "noColor";&#13;
        }&#13;
        return $(element[0].childNodes[0]).attr("title").toLowerCase();&#13;
    };&#13;
&#13;
    presenter.speak = function EditableWindow_speak(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.configuration.playerController);&#13;
        if (tts &amp;&amp; presenter.isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function EditableWindow_setWCAGStatus(isWCAGOn) {&#13;
        presenter.isWCAGOn = isWCAGOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function EditableWindow_getTextToSpeechOrNull(playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>