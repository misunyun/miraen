<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Dice" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isDefault="true" name="elementsList" nameLabel="Dice_property_elements_list" type="list">
            <property name="name" nameLabel="Dice_property_name" type="string"/>
            <property name="image" nameLabel="Dice_property_image" type="image"/>
        </property>
        <property name="animationLength" nameLabel="Dice_property_animation_length" type="string"/>
        <property name="isDisabled" nameLabel="Dice_property_is_disabled" type="boolean"/>
        <property name="initialItem" nameLabel="Dice_property_initial_item" type="string"/>
        <property name="worksWith" nameLabel="Dice_property_works_with" type="string"/>
    </model>
<css>.addon-Dice-wrapper{&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.addon-Dice-image-element {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    background-repeat: no-repeat;&#13;
    background-size: contain;&#13;
    opacity: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.dice-element-visible {&#13;
    opacity: 1;&#13;
}&#13;
&#13;
.addon-Dice-wrapper .loading {&#13;
    background-color: gray;&#13;
    opacity: 0.8;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.addon-Dice-dice-container {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
}&#13;
</css><view>&lt;div class="addon-Dice-wrapper"&gt;&#13;
    &lt;div class="addon-Dice-dice-container"&gt;&lt;/div&gt;&#13;
    &lt;div class="loading"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="addon-Dice-wrapper"&gt;&#13;
    &lt;div class="addon-Dice-dice-container"&gt;&lt;/div&gt;&#13;
    &lt;div class="loading"&gt;&#13;
&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonDice_create() {&#13;
    var presenter = function (){};&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        "animationLength_INT01": "Animation length can't be empty",&#13;
        "animationLength_INT02": "Animation length is not a valid integer",&#13;
        "animationLength_INT04": "Animation length must be positive",&#13;
        "initialItem_INT02": "Value of initial item is not a valid integer",&#13;
        "initialItem_INT04": "Value of initial item is not positive integer",&#13;
        "initialItem_INI01": "Initial item can't be bigger than elements count",&#13;
        "elementsList|number_INT02": "Element value in list is not valid integer"&#13;
&#13;
    };&#13;
&#13;
    presenter.configuration = {&#13;
        isDisabled: false,&#13;
        "Is Visible": false,&#13;
        animationLength: 0,&#13;
        initialItem: null,&#13;
        elementsList: []&#13;
    };&#13;
&#13;
    presenter.state = {&#13;
        images: [],&#13;
        loadedImages: 0,&#13;
        isLoaded: false,&#13;
        elements: [],&#13;
        wrapperElement: null,&#13;
        loadingElement: null,&#13;
        isDisabled: false,&#13;
        isRolling: false,&#13;
        timeoutsHandlers: [],&#13;
        view: null,&#13;
        rolledElement: -1,&#13;
        isVisible: false,&#13;
        disabledByEvent: false,&#13;
        worksWith: null,&#13;
    };&#13;
&#13;
    var CLASSES =  {&#13;
        visibleElement: "dice-element-visible",&#13;
        imageElement: "addon-Dice-image-element"&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model);&#13;
        presenter.eventBus.addEventListener('ShowAnswers', this);&#13;
        presenter.eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        presenter.diceKeyboardController = new DiceKeyboardController();&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model);&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        var modelValidator = new ModelValidator();&#13;
&#13;
        var validatedModel = modelValidator.validate(model, [&#13;
            ModelValidators.Boolean("isDisabled"),&#13;
            ModelValidators.Integer("animationLength", {minValue: 0}),&#13;
            ModelValidators.Integer("initialItem", {minValue: 1, default: null}),&#13;
            ModelValidators.List("elementsList", [&#13;
                ModelValidators.String("name", {default: null}),&#13;
                ModelValidators.String("image", {trim: true, default: null})&#13;
            ]),&#13;
            ModelValidators.Boolean("Is Visible"),&#13;
            ModelValidators.String("worksWith", {default: null}),&#13;
            ModelValidators.DumbString("ID")&#13;
        ]);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            return validatedModel;&#13;
        }&#13;
&#13;
        if (validatedModel.value.initialItem &gt; validatedModel.value.elementsList.length) {&#13;
            return {&#13;
                isValid: false,&#13;
                fieldName: ["initialItem"],&#13;
                errorCode: "INI01"&#13;
            }&#13;
        }&#13;
&#13;
        if (validatedModel.value.initialItem !== null) {&#13;
            validatedModel.value.initialItem -= 1;&#13;
        }&#13;
&#13;
        return validatedModel;&#13;
    };&#13;
&#13;
    presenter.enableAddon = function () {&#13;
        presenter.state.isLoaded = true;&#13;
        presenter.state.loadingElement.style.display = 'none';&#13;
    };&#13;
&#13;
    presenter.enableIfIsLoaded = function () {&#13;
        if (presenter.state.images.length === presenter.state.loadedImages) {&#13;
            presenter.enableAddon();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadedImage = function () {&#13;
        presenter.state.loadedImages += 1;&#13;
        presenter.enableIfIsLoaded();&#13;
    };&#13;
&#13;
    presenter.loadImages = function () {&#13;
        presenter.configuration.elementsList.forEach(function (element) {&#13;
            var imgElement;&#13;
            if (element.image !== null) {&#13;
                imgElement = new Image();&#13;
                presenter.state.images.push(imgElement);&#13;
                imgElement.onload = presenter.loadedImage;&#13;
                imgElement.onerror = presenter.loadedImage;&#13;
&#13;
                imgElement.src = element.image;&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.buildElement = function (name, background) {&#13;
        var element = document.createElement('div');&#13;
        if (name !== null) {&#13;
            var textNode = document.createTextNode(name);&#13;
            element.appendChild(textNode);&#13;
        }&#13;
&#13;
        if (background !== null) {&#13;
            element.style.backgroundImage = "url(" + background + ")";&#13;
        }&#13;
&#13;
        element.classList.add(CLASSES.imageElement);&#13;
&#13;
        element.addEventListener('click', presenter.onDiceClick);&#13;
&#13;
        return element;&#13;
    };&#13;
&#13;
    presenter.buildElements = function () {&#13;
        presenter.configuration.elementsList.forEach(function (element, index) {&#13;
            var text = element.image === null &amp;&amp; element.name === null ? index + 1 : element.name;&#13;
            var elementDiv = presenter.buildElement(text, element.image);&#13;
&#13;
            presenter.state.elements.push(elementDiv);&#13;
            presenter.state.wrapperElement.appendChild(elementDiv);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.randElement = function () {&#13;
        return parseInt(Math.random() * (presenter.state.elements.length) + "");&#13;
    };&#13;
&#13;
    presenter.setElement = function (index) {&#13;
        presenter.state.elements.forEach(function (el) {&#13;
            el.classList.remove(CLASSES.visibleElement);&#13;
        });&#13;
&#13;
        presenter.state.elements[index].classList.add(CLASSES.visibleElement);&#13;
    };&#13;
&#13;
    presenter.setRandomElement = function () {&#13;
        var element = presenter.randElement();&#13;
        presenter.setElement(element);&#13;
&#13;
        return element;&#13;
    };&#13;
&#13;
    presenter.initializeStartItem = function () {&#13;
        var initItemIndex = presenter.configuration.initialItem;&#13;
        initItemIndex = initItemIndex === null ? presenter.randElement() : initItemIndex;&#13;
&#13;
        presenter.state.rolledElement = initItemIndex;&#13;
        presenter.setElement(initItemIndex);&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model)  {&#13;
        var validatedModel = presenter.validateModel(model);&#13;
&#13;
        if (!validatedModel.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, validatedModel.fieldName.join("|") + "_" + validatedModel.errorCode);&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.configuration = validatedModel.value;&#13;
&#13;
        presenter.state.wrapperElement = view.getElementsByClassName("addon-Dice-dice-container")[0];&#13;
        presenter.state.loadingElement = view.getElementsByClassName("loading")[0];&#13;
        presenter.state.isDisabled = presenter.configuration.isDisabled;&#13;
        presenter.state.view = view;&#13;
        presenter.state.isVisible = presenter.configuration['Is Visible'];&#13;
&#13;
        presenter.buildElements();&#13;
        presenter.loadImages();&#13;
        presenter.enableIfIsLoaded();&#13;
        presenter.initializeStartItem();&#13;
&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function (event) {&#13;
        if (event.target !== this) {&#13;
            return;&#13;
        }&#13;
        presenter.state.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.state.elements.forEach(function (element) {&#13;
            element.removeEventListener('click', presenter.onDiceClick);&#13;
        });&#13;
&#13;
        presenter.state.timeoutsHandlers.forEach(function (handler) {&#13;
            clearTimeout(handler);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.callExternalAddon = function (distance) {&#13;
        if (presenter.configuration.worksWith !== null) {&#13;
            var module = presenter.playerController.getModule(presenter.configuration.worksWith);&#13;
            if (module) {&#13;
                module.diceExecute(distance + 1);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendEventDiceRolled = function (value) {&#13;
        var elementText = presenter.configuration.elementsList[value - 1].name;&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            source: presenter.configuration.ID,&#13;
            item:  value + '',&#13;
            value : (elementText || value) + ''&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onDiceRoll = function (isLast) {&#13;
        var element = presenter.setRandomElement();&#13;
&#13;
        if (isLast) {&#13;
            presenter.state.rolledElement = element;&#13;
            presenter.state.isRolling = false;&#13;
&#13;
            presenter.state.elements.forEach(function (element) {&#13;
                element.classList.remove('isRolling');&#13;
            });&#13;
&#13;
            presenter.sendEventDiceRolled(element + 1);&#13;
            presenter.callExternalAddon(element);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.executeRoll = function () {&#13;
        presenter.state.isRolling = true;&#13;
        presenter.state.timeoutsHandlers = [];&#13;
&#13;
        var animationLength = presenter.configuration.animationLength,&#13;
            throwCount = parseInt((Math.random() * 10) + 5 + ""),&#13;
            acceleration = 20,&#13;
            jump = acceleration * animationLength * animationLength / throwCount,&#13;
            timeoutsCallbacks = [],&#13;
            i;&#13;
&#13;
        for (i = 1; i &lt;= throwCount; i++) {&#13;
            var time = Math.sqrt(i * jump / acceleration);&#13;
&#13;
            timeoutsCallbacks.push({&#13;
                callback: presenter.onDiceRoll.bind({}, i === 1),&#13;
                timeout: parseInt(animationLength - time)&#13;
            });&#13;
        }&#13;
&#13;
        for (i = timeoutsCallbacks.length - 1; i &gt;= 0; i--) {&#13;
            var timeoutID = setTimeout(timeoutsCallbacks[i].callback, timeoutsCallbacks[i].timeout);&#13;
            presenter.state.timeoutsHandlers.push(timeoutID);&#13;
        }&#13;
&#13;
        presenter.state.elements.forEach(function (element) {&#13;
            element.classList.add('isRolling');&#13;
        });&#13;
    };&#13;
&#13;
    presenter.roll = function () {&#13;
        if (presenter.state.isDisabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!presenter.state.isLoaded) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.state.isRolling) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.state.disabledByEvent) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.sendDiceRollStartEvent();&#13;
        presenter.executeRoll();&#13;
    };&#13;
&#13;
    presenter.sendDiceRollStartEvent = function () {&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            source: presenter.configuration.ID,&#13;
            item: '',&#13;
            value : 'start'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.onDiceClick = function () {&#13;
        presenter.roll();&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.state.view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        $(presenter.state.view).css('display', isVisible ? 'block' : 'none');&#13;
&#13;
        presenter.state.isVisible = isVisible;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.reset = function () {&#13;
        presenter.setVisibility(presenter.configuration['Is Visible']);&#13;
&#13;
        presenter.initializeStartItem();&#13;
        presenter.state.isDisabled = presenter.configuration.isDisabled;&#13;
        presenter.state.disabledByEvent = false;&#13;
        presenter.deselectDiceAsDisabled();&#13;
        presenter.state.timeoutsHandlers.forEach(function (id) {&#13;
            clearTimeout(id);&#13;
        });&#13;
        presenter.state.timeoutsHandlers = [];&#13;
        presenter.state.isRolling = false;&#13;
    };&#13;
&#13;
    presenter.selectDiceAsDisabled = function () {&#13;
        presenter.state.wrapperElement.classList.add('disabled');&#13;
    };&#13;
&#13;
    presenter.deselectDiceAsDisabled = function () {&#13;
        presenter.state.wrapperElement.classList.remove('disabled');&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        presenter.selectDiceAsDisabled();&#13;
        presenter.state.disabledByEvent = true;&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        presenter.deselectDiceAsDisabled();&#13;
        presenter.state.disabledByEvent = false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.deselectDiceAsDisabled();&#13;
        presenter.state.disabledByEvent = false;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.selectDiceAsDisabled();&#13;
        presenter.state.disabledByEvent = true;&#13;
    };&#13;
&#13;
    presenter.disable = function () {&#13;
        presenter.state.isDisabled = true;&#13;
        presenter.selectDiceAsDisabled();&#13;
    };&#13;
&#13;
    presenter.enable = function () {&#13;
        presenter.state.isDisabled = false;&#13;
        presenter.deselectDiceAsDisabled();&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        } else if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var parsedState = JSON.parse(state);&#13;
&#13;
        presenter.setVisibility(parsedState.isVisible);&#13;
        presenter.state.isDisabled = parsedState.isDisabled;&#13;
        presenter.state.rolledElement = parsedState.rolledElement;&#13;
        presenter.setElement(presenter.state.rolledElement);&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            isVisible: presenter.state.isVisible,&#13;
            isDisabled: presenter.state.isDisabled,&#13;
            rolledElement: presenter.state.rolledElement&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable,&#13;
            'roll': presenter.roll&#13;
        };&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    function DiceKeyboardController() {&#13;
        KeyboardController.call(this, $(presenter.state.view), 1);&#13;
    }&#13;
&#13;
    DiceKeyboardController.prototype = Object.create(KeyboardController.prototype);&#13;
    DiceKeyboardController.prototype.constructor = DiceKeyboardController;&#13;
&#13;
    DiceKeyboardController.prototype.selectAction = function () {&#13;
        presenter.roll();&#13;
    };&#13;
&#13;
    presenter.keyboardController = function (keyCode, isShift, event) {&#13;
        presenter.diceKeyboardController.handle(keyCode, isShift, event);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>